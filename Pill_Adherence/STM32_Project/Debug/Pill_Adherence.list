
Pill_Adherence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d154  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001700  0800d294  0800d294  0000e294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e994  0800e994  0000f994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e99c  0800e99c  0000f99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e9a0  0800e9a0  0000f9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  0800e9a4  00010008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000090  0800ea2c  00010090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c8  0800ea61  000100c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016cc  200000dc  0800ea72  000100dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a8  0800ea72  000107a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00011000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00011000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800ea72  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00034909  00000000  00000000  00010a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006cad  00000000  00000000  000453a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003030  00000000  00000000  0004c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000251d  00000000  00000000  0004f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ffe2  00000000  00000000  0005159d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034eae  00000000  00000000  0008157f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011319f  00000000  00000000  000b642d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001c95cc  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d4c8  00000000  00000000  001c9610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001d6ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000dc 	.word	0x200000dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d27c 	.word	0x0800d27c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e0 	.word	0x200000e0
 800017c:	0800d27c 	.word	0x0800d27c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000af6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000afa:	4905      	ldr	r1, [pc, #20]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58000800 	.word	0x58000800

08000b14 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b52:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b82:	f001 fcf1 	bl	8002568 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b86:	f001 fcf5 	bl	8002574 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000b8e:	f7ff ffad 	bl	8000aec <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b92:	f009 f9fb 	bl	8009f8c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000b96:	f000 f821 	bl	8000bdc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000b9a:	f000 f8c1 	bl	8000d20 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000b9e:	bf00      	nop
}
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <APPD_EnableCPU2+0x34>)
 8000bac:	1d3c      	adds	r4, r7, #4
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	c403      	stmia	r4!, {r0, r1}
 8000bba:	8022      	strh	r2, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c13      	lsrs	r3, r2, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc2:	f009 f91f 	bl	8009e04 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f008 fbb0 	bl	800932e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bce:	bf00      	nop
}
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800d294 	.word	0x0800d294

08000bdc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	e036      	b.n	8000c70 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	4a43      	ldr	r2, [pc, #268]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	799b      	ldrb	r3, [r3, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d02c      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	4a40      	ldr	r2, [pc, #256]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c18:	4a3f      	ldr	r2, [pc, #252]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01b      	beq.n	8000c56 <APPD_SetCPU2GpioConfig+0x7a>
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d821      	bhi.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c28:	d003      	beq.n	8000c32 <APPD_SetCPU2GpioConfig+0x56>
 8000c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d009      	beq.n	8000c44 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c30:	e01a      	b.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	4a37      	ldr	r2, [pc, #220]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	889a      	ldrh	r2, [r3, #4]
 8000c3c:	8bbb      	ldrh	r3, [r7, #28]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	83bb      	strh	r3, [r7, #28]
          break;
 8000c42:	e012      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	889a      	ldrh	r2, [r3, #4]
 8000c4e:	8b7b      	ldrh	r3, [r7, #26]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	837b      	strh	r3, [r7, #26]
          break;
 8000c54:	e009      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	889a      	ldrh	r2, [r3, #4]
 8000c60:	8b3b      	ldrh	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	833b      	strh	r3, [r7, #24]
          break;
 8000c66:	e000      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c68:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	77fb      	strb	r3, [r7, #31]
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	2b25      	cmp	r3, #37	@ 0x25
 8000c74:	d9c5      	bls.n	8000c02 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c82:	8bbb      	ldrh	r3, [r7, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d014      	beq.n	8000cb2 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c88:	8bbb      	ldrh	r3, [r7, #28]
 8000c8a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff41 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff57 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f003 f988 	bl	8003fb4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ca4:	8bbb      	ldrh	r3, [r7, #28]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f003 faf1 	bl	8004294 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cb2:	8b7b      	ldrh	r3, [r7, #26]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d012      	beq.n	8000cde <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cb8:	8b7b      	ldrh	r3, [r7, #26]
 8000cba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff29 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff ff3f 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cce:	f003 f971 	bl	8003fb4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cd2:	8b7b      	ldrh	r3, [r7, #26]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f003 fadb 	bl	8004294 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cde:	8b3b      	ldrh	r3, [r7, #24]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000ce4:	8b3b      	ldrh	r3, [r7, #24]
 8000ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff ff13 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f7ff ff29 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000cfa:	f003 f95b 	bl	8003fb4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000cfe:	8b3b      	ldrh	r3, [r7, #24]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f003 fac5 	bl	8004294 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
}
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800e740 	.word	0x0800e740
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	48000400 	.word	0x48000400

08000d20 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d24:	bf00      	nop
}
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d32:	f000 feef 	bl	8001b14 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d36:	bf00      	nop
}
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	460b      	mov	r3, r1
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d48:	897a      	ldrh	r2, [r7, #10]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 fbb0 	bl	80014b4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d54:	bf00      	nop
}
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	f023 0207 	bic.w	r2, r3, #7
 8000d6e:	4905      	ldr	r1, [pc, #20]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58000400 	.word	0x58000400

08000d88 <LL_EXTI_EnableIT_32_63>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000d96:	4905      	ldr	r1, [pc, #20]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58000800 	.word	0x58000800

08000db0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	cafecafe 	.word	0xcafecafe

08000dec <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <LL_DBGMCU_GetDeviceID+0x18>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e0042000 	.word	0xe0042000

08000e30 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	b29b      	uxth	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e0042000 	.word	0xe0042000

08000e4c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	22ff      	movs	r2, #255	@ 0xff
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	22ca      	movs	r2, #202	@ 0xca
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2253      	movs	r2, #83	@ 0x53
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f023 0207 	bic.w	r2, r3, #7
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <MX_APPE_Config+0x18>)
 8000eb2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000eb6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000eb8:	f000 f826 	bl	8000f08 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ebc:	f000 f82b 	bl	8000f16 <Config_HSE>

  return;
 8000ec0:	bf00      	nop
}
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	58004000 	.word	0x58004000

08000ec8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ecc:	f000 f837 	bl	8000f3e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ed0:	f000 f850 	bl	8000f74 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ed4:	4904      	ldr	r1, [pc, #16]	@ (8000ee8 <MX_APPE_Init+0x20>)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 fa12 	bl	8001300 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000edc:	f7ff fe4f 	bl	8000b7e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ee0:	f000 f856 	bl	8000f90 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */
/* USER CODE END APPE_Init_2 */

   return;
 8000ee4:	bf00      	nop
}
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000029c 	.word	0x2000029c

08000eec <Init_Smps>:

void Init_Smps(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ef0:	bf00      	nop
}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <Init_Exti>:

void Init_Exti(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000efe:	2050      	movs	r0, #80	@ 0x50
 8000f00:	f7ff ff42 	bl	8000d88 <LL_EXTI_EnableIT_32_63>

  return;
 8000f04:	bf00      	nop
}
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f0c:	bf00      	nop
}
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f009 f8b3 	bl	800a088 <OTP_Read>
 8000f22:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	799b      	ldrb	r3, [r3, #6]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff3e 	bl	8000db0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
}
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <System_Init>:

static void System_Init(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f42:	f7ff ffd3 	bl	8000eec <Init_Smps>

  Init_Exti();
 8000f46:	f7ff ffd8 	bl	8000efa <Init_Exti>

  Init_Rtc();
 8000f4a:	f000 f803 	bl	8000f54 <Init_Rtc>

  return;
 8000f4e:	bf00      	nop
}
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f5a:	f7ff ff84 	bl	8000e66 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f62:	f7ff ff90 	bl	8000e86 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f66:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f68:	f7ff ff70 	bl	8000e4c <LL_RTC_EnableWriteProtection>

  return;
 8000f6c:	bf00      	nop
}
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40002800 	.word	0x40002800

08000f74 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f7c:	f7ff ff36 	bl	8000dec <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f80:	f00a ff48 	bl	800be14 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff fee9 	bl	8000d5c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000f96:	f008 fd7f 	bl	8009a98 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <appe_Tl_Init+0x50>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f00b f876 	bl	800c090 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <appe_Tl_Init+0x54>)
 8000fa6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <appe_Tl_Init+0x58>)
 8000faa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480e      	ldr	r0, [pc, #56]	@ (8000fec <appe_Tl_Init+0x5c>)
 8000fb2:	f008 fc33 	bl	800981c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <appe_Tl_Init+0x60>)
 8000fb8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <appe_Tl_Init+0x64>)
 8000fbc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <appe_Tl_Init+0x68>)
 8000fc0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000fc2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000fc6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f008 fea5 	bl	8009d1c <TL_MM_Init>

  TL_Enable();
 8000fd2:	f008 fd5b 	bl	8009a8c <TL_Enable>

  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08009855 	.word	0x08009855
 8000fe4:	20030734 	.word	0x20030734
 8000fe8:	08000ffd 	.word	0x08000ffd
 8000fec:	08001015 	.word	0x08001015
 8000ff0:	2003094c 	.word	0x2003094c
 8000ff4:	20030840 	.word	0x20030840
 8000ff8:	200301f8 	.word	0x200301f8

08000ffc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001006:	bf00      	nop
}
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	330b      	adds	r3, #11
 8001022:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800102e:	2b07      	cmp	r3, #7
 8001030:	d860      	bhi.n	80010f4 <APPE_SysUserEvtRx+0xe0>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <APPE_SysUserEvtRx+0x24>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001059 	.word	0x08001059
 800103c:	0800109b 	.word	0x0800109b
 8001040:	080010a9 	.word	0x080010a9
 8001044:	080010f5 	.word	0x080010f5
 8001048:	080010c5 	.word	0x080010c5
 800104c:	080010d5 	.word	0x080010d5
 8001050:	080010dd 	.word	0x080010dd
 8001054:	080010ed 	.word	0x080010ed
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4618      	mov	r0, r3
 800105e:	f008 f993 	bl	8009388 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	4619      	mov	r1, r3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	461a      	mov	r2, r3
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	4824      	ldr	r0, [pc, #144]	@ (8001100 <APPE_SysUserEvtRx+0xec>)
 800106e:	f00b f9ef 	bl	800c450 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	4619      	mov	r1, r3
 8001076:	4823      	ldr	r0, [pc, #140]	@ (8001104 <APPE_SysUserEvtRx+0xf0>)
 8001078:	f00b f9ea 	bl	800c450 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	4619      	mov	r1, r3
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	461a      	mov	r2, r3
 8001084:	7e3b      	ldrb	r3, [r7, #24]
 8001086:	4820      	ldr	r0, [pc, #128]	@ (8001108 <APPE_SysUserEvtRx+0xf4>)
 8001088:	f00b f9e2 	bl	800c450 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800108c:	481f      	ldr	r0, [pc, #124]	@ (800110c <APPE_SysUserEvtRx+0xf8>)
 800108e:	f00b f9df 	bl	800c450 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f870 	bl	8001178 <APPE_SysEvtReadyProcessing>
    break;
 8001098:	e02d      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800109a:	481d      	ldr	r0, [pc, #116]	@ (8001110 <APPE_SysUserEvtRx+0xfc>)
 800109c:	f00b f9d8 	bl	800c450 <iprintf>
    APPE_SysEvtError(pPayload);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f843 	bl	800112c <APPE_SysEvtError>
    break;
 80010a6:	e026      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <APPE_SysUserEvtRx+0x100>)
 80010aa:	f00b fa41 	bl	800c530 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010b2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4816      	ldr	r0, [pc, #88]	@ (8001118 <APPE_SysUserEvtRx+0x104>)
 80010be:	f00b f9c7 	bl	800c450 <iprintf>
    break;
 80010c2:	e018      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <APPE_SysUserEvtRx+0x108>)
 80010ce:	f00b f9bf 	bl	800c450 <iprintf>
    break;
 80010d2:	e010      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80010d4:	4812      	ldr	r0, [pc, #72]	@ (8001120 <APPE_SysUserEvtRx+0x10c>)
 80010d6:	f00b f9bb 	bl	800c450 <iprintf>
    break;
 80010da:	e00c      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	480f      	ldr	r0, [pc, #60]	@ (8001124 <APPE_SysUserEvtRx+0x110>)
 80010e6:	f00b f9b3 	bl	800c450 <iprintf>
    break;
 80010ea:	e004      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80010ec:	480e      	ldr	r0, [pc, #56]	@ (8001128 <APPE_SysUserEvtRx+0x114>)
 80010ee:	f00b f9af 	bl	800c450 <iprintf>
    break;
 80010f2:	e000      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80010f4:	bf00      	nop
  }

  return;
 80010f6:	bf00      	nop
}
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800d2b0 	.word	0x0800d2b0
 8001104:	0800d2d4 	.word	0x0800d2d4
 8001108:	0800d2f0 	.word	0x0800d2f0
 800110c:	0800d308 	.word	0x0800d308
 8001110:	0800d328 	.word	0x0800d328
 8001114:	0800d34c 	.word	0x0800d34c
 8001118:	0800d39c 	.word	0x0800d39c
 800111c:	0800d3c4 	.word	0x0800d3c4
 8001120:	0800d400 	.word	0x0800d400
 8001124:	0800d424 	.word	0x0800d424
 8001128:	0800d460 	.word	0x0800d460

0800112c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	330b      	adds	r3, #11
 800113a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3302      	adds	r3, #2
 8001140:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <APPE_SysEvtError+0x40>)
 800114a:	f00b f981 	bl	800c450 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <APPE_SysEvtError+0x44>)
 8001158:	f00b f9ea 	bl	800c530 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800115c:	e003      	b.n	8001166 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <APPE_SysEvtError+0x48>)
 8001160:	f00b f9e6 	bl	800c530 <puts>
  return;
 8001164:	bf00      	nop
}
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800d484 	.word	0x0800d484
 8001170:	0800d4b4 	.word	0x0800d4b4
 8001174:	0800d4f0 	.word	0x0800d4f0

08001178 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	330b      	adds	r3, #11
 800119c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3302      	adds	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d128      	bne.n	80011fe <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80011ac:	481d      	ldr	r0, [pc, #116]	@ (8001224 <APPE_SysEvtReadyProcessing+0xac>)
 80011ae:	f00b f9bf 	bl	800c530 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80011b2:	f7ff fcf7 	bl	8000ba4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80011b6:	230f      	movs	r3, #15
 80011b8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80011ba:	237f      	movs	r3, #127	@ 0x7f
 80011bc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80011be:	f7ff fe37 	bl	8000e30 <LL_DBGMCU_GetRevisionID>
 80011c2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80011c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011c6:	4818      	ldr	r0, [pc, #96]	@ (8001228 <APPE_SysEvtReadyProcessing+0xb0>)
 80011c8:	f00b f942 	bl	800c450 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80011d2:	f7ff fe1f 	bl	8000e14 <LL_DBGMCU_GetDeviceID>
 80011d6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	4814      	ldr	r0, [pc, #80]	@ (800122c <APPE_SysEvtReadyProcessing+0xb4>)
 80011dc:	f00b f938 	bl	800c450 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 f8b6 	bl	800935c <SHCI_C2_Config>

    APP_BLE_Init();
 80011f0:	f009 fc50 	bl	800aa94 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2001      	movs	r0, #1
 80011f8:	f00a fe1e 	bl	800be38 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80011fc:	e00e      	b.n	800121c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001206:	480a      	ldr	r0, [pc, #40]	@ (8001230 <APPE_SysEvtReadyProcessing+0xb8>)
 8001208:	f00b f922 	bl	800c450 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  return;
 8001212:	e003      	b.n	800121c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <APPE_SysEvtReadyProcessing+0xbc>)
 8001216:	f00b f91b 	bl	800c450 <iprintf>
  return;
 800121a:	bf00      	nop
}
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	0800d528 	.word	0x0800d528
 8001228:	0800d544 	.word	0x0800d544
 800122c:	0800d568 	.word	0x0800d568
 8001230:	0800d588 	.word	0x0800d588
 8001234:	0800d5bc 	.word	0x0800d5bc

08001238 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001240:	f00a fe2a 	bl	800be98 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800124c:	bf00      	nop
}
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	f00a fe18 	bl	800be98 <UTIL_SEQ_Run>
  return;
 8001268:	bf00      	nop
}
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001278:	2100      	movs	r1, #0
 800127a:	2004      	movs	r0, #4
 800127c:	f00a ff2a 	bl	800c0d4 <UTIL_SEQ_SetTask>
  return;
 8001280:	bf00      	nop
}
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001290:	2002      	movs	r0, #2
 8001292:	f00a ff8b 	bl	800c1ac <UTIL_SEQ_SetEvt>
  return;
 8001296:	bf00      	nop
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f00a ffa0 	bl	800c1ec <UTIL_SEQ_WaitEvt>
  return;
 80012ac:	bf00      	nop
}
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LL_EXTI_EnableIT_0_31>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80012c2:	4905      	ldr	r1, [pc, #20]	@ (80012d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58000800 	.word	0x58000800

080012dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4904      	ldr	r1, [pc, #16]	@ (80012fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]

}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	58000800 	.word	0x58000800

08001300 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800130c:	4b5e      	ldr	r3, [pc, #376]	@ (8001488 <HW_TS_Init+0x188>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	22ca      	movs	r2, #202	@ 0xca
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
 8001314:	4b5c      	ldr	r3, [pc, #368]	@ (8001488 <HW_TS_Init+0x188>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2253      	movs	r2, #83	@ 0x53
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HW_TS_Init+0x18c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <HW_TS_Init+0x18c>)
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001328:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HW_TS_Init+0x18c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f1c3 0304 	rsb	r3, r3, #4
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HW_TS_Init+0x190>)
 800133c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800133e:	4b53      	ldr	r3, [pc, #332]	@ (800148c <HW_TS_Init+0x18c>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001346:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800134a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	2a00      	cmp	r2, #0
 800135c:	d101      	bne.n	8001362 <HW_TS_Init+0x62>
  {
    return 32U;
 800135e:	2220      	movs	r2, #32
 8001360:	e003      	b.n	800136a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	fab2 f282 	clz	r2, r2
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	40d3      	lsrs	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <HW_TS_Init+0x194>)
 8001374:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001376:	4b45      	ldr	r3, [pc, #276]	@ (800148c <HW_TS_Init+0x18c>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	b29b      	uxth	r3, r3
 800137c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001380:	b29b      	uxth	r3, r3
 8001382:	3301      	adds	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HW_TS_Init+0x198>)
 8001388:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800138a:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <HW_TS_Init+0x198>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a40      	ldr	r2, [pc, #256]	@ (8001494 <HW_TS_Init+0x194>)
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800139c:	4a3c      	ldr	r2, [pc, #240]	@ (8001490 <HW_TS_Init+0x190>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	40d3      	lsrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d904      	bls.n	80013b8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <HW_TS_Init+0x19c>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	e003      	b.n	80013c0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HW_TS_Init+0x19c>)
 80013be:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013c4:	f7ff ff8a 	bl	80012dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013cc:	f7ff ff72 	bl	80012b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d13d      	bne.n	8001452 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013d6:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <HW_TS_Init+0x1a0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013dc:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <HW_TS_Init+0x1a4>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	77fb      	strb	r3, [r7, #31]
 80013e8:	e00c      	b.n	8001404 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80013ea:	7ffa      	ldrb	r2, [r7, #31]
 80013ec:	492e      	ldr	r1, [pc, #184]	@ (80014a8 <HW_TS_Init+0x1a8>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	3301      	adds	r3, #1
 8001402:	77fb      	strb	r3, [r7, #31]
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d9ef      	bls.n	80013ea <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HW_TS_Init+0x1ac>)
 800140c:	2206      	movs	r2, #6
 800140e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HW_TS_Init+0x188>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HW_TS_Init+0x188>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800141e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HW_TS_Init+0x188>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HW_TS_Init+0x188>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001430:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <HW_TS_Init+0x1b0>)
 8001434:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001438:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800143a:	2003      	movs	r0, #3
 800143c:	f002 fa79 	bl	8003932 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HW_TS_Init+0x188>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HW_TS_Init+0x188>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e009      	b.n	8001466 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HW_TS_Init+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001460:	2003      	movs	r0, #3
 8001462:	f002 fa58 	bl	8003916 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HW_TS_Init+0x188>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	22ff      	movs	r2, #255	@ 0xff
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800146e:	2200      	movs	r2, #0
 8001470:	2103      	movs	r1, #3
 8001472:	2003      	movs	r0, #3
 8001474:	f002 fa1b 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001478:	2003      	movs	r0, #3
 800147a:	f002 fa32 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  return;
 800147e:	bf00      	nop
}
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000029c 	.word	0x2000029c
 800148c:	40002800 	.word	0x40002800
 8001490:	20000191 	.word	0x20000191
 8001494:	20000192 	.word	0x20000192
 8001498:	20000194 	.word	0x20000194
 800149c:	20000196 	.word	0x20000196
 80014a0:	20000190 	.word	0x20000190
 80014a4:	2000018c 	.word	0x2000018c
 80014a8:	200000f8 	.word	0x200000f8
 80014ac:	20000188 	.word	0x20000188
 80014b0:	58000800 	.word	0x58000800

080014b4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	4613      	mov	r3, r2
 80014c4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10e      	bne.n	80014f2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80014d4:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HW_UART_Transmit_DMA+0x80>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HW_UART_Transmit_DMA+0x84>)
 80014dc:	4a17      	ldr	r2, [pc, #92]	@ (800153c <HW_UART_Transmit_DMA+0x88>)
 80014de:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4814      	ldr	r0, [pc, #80]	@ (8001538 <HW_UART_Transmit_DMA+0x84>)
 80014e8:	f005 f9ea 	bl	80068c0 <HAL_UART_Transmit_DMA>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
            break;
 80014f0:	e000      	b.n	80014f4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80014f2:	bf00      	nop
    }

    switch (hal_status)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d816      	bhi.n	8001528 <HW_UART_Transmit_DMA+0x74>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <HW_UART_Transmit_DMA+0x4c>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001517 	.word	0x08001517
 8001508:	0800151d 	.word	0x0800151d
 800150c:	08001523 	.word	0x08001523
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001510:	2300      	movs	r3, #0
 8001512:	75bb      	strb	r3, [r7, #22]
            break;
 8001514:	e009      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001516:	2301      	movs	r3, #1
 8001518:	75bb      	strb	r3, [r7, #22]
            break;
 800151a:	e006      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800151c:	2302      	movs	r3, #2
 800151e:	75bb      	strb	r3, [r7, #22]
            break;
 8001520:	e003      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001522:	2303      	movs	r3, #3
 8001524:	75bb      	strb	r3, [r7, #22]
            break;
 8001526:	e000      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001528:	bf00      	nop
    }

    return hw_status;
 800152a:	7dbb      	ldrb	r3, [r7, #22]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000198 	.word	0x20000198
 8001538:	2000030c 	.word	0x2000030c
 800153c:	40013800 	.word	0x40013800

08001540 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_UART_TxCpltCallback+0x34>)
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_UART_TxCpltCallback+0x38>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_UART_TxCpltCallback+0x38>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4798      	blx	r3
            }
            break;
 8001562:	e001      	b.n	8001568 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001564:	bf00      	nop
 8001566:	e000      	b.n	800156a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001568:	bf00      	nop
    }

    return;
 800156a:	bf00      	nop
}
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40013800 	.word	0x40013800
 8001578:	20000198 	.word	0x20000198

0800157c <LL_RCC_LSE_SetDriveCapability>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158c:	f023 0218 	bic.w	r2, r3, #24
 8001590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_AHB1_GRP1_EnableClock>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_AHB2_GRP1_EnableClock>:
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <read_adc>:
#define NUM_ADC 14
volatile uint8_t raw = 0;
volatile uint16_t pill_adc[14];
volatile int adc_complete = 0;

uint16_t read_adc(){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	adc_complete = 0;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <read_adc+0x20>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)pill_adc, NUM_ADC);
 8001616:	220e      	movs	r2, #14
 8001618:	4905      	ldr	r1, [pc, #20]	@ (8001630 <read_adc+0x24>)
 800161a:	4806      	ldr	r0, [pc, #24]	@ (8001634 <read_adc+0x28>)
 800161c:	f001 fac4 	bl	8002ba8 <HAL_ADC_Start_DMA>

//	uint16_t raw16 = HAL_ADC_GetValue(&hadc1);

//	raw = raw16 >> 4;

	return raw;
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <read_adc+0x2c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000480 	.word	0x20000480
 8001630:	20000464 	.word	0x20000464
 8001634:	2000019c 	.word	0x2000019c
 8001638:	20000460 	.word	0x20000460

0800163c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001644:	2120      	movs	r1, #32
 8001646:	4808      	ldr	r0, [pc, #32]	@ (8001668 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001648:	f002 fe3c 	bl	80042c4 <HAL_GPIO_TogglePin>
	adc_complete = 1;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <HAL_ADC_ConvCpltCallback+0x30>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
	raw = pill_adc[0];
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <HAL_ADC_ConvCpltCallback+0x34>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_ADC_ConvCpltCallback+0x38>)
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	48000400 	.word	0x48000400
 800166c:	20000480 	.word	0x20000480
 8001670:	20000464 	.word	0x20000464
 8001674:	20000460 	.word	0x20000460

08001678 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

	if(htim == &htim16){
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a06      	ldr	r2, [pc, #24]	@ (800169c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d105      	bne.n	8001694 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001688:	2101      	movs	r1, #1
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800168c:	f002 fe1a 	bl	80042c4 <HAL_GPIO_TogglePin>
		read_adc();
 8001690:	f7ff ffbc 	bl	800160c <read_adc>
	}
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002c0 	.word	0x200002c0
 80016a0:	48000400 	.word	0x48000400

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 fed8 	bl	800245c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80016ac:	f7ff fbfe 	bl	8000eac <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f81a 	bl	80016e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016b4:	f000 f88c 	bl	80017d0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80016b8:	f000 f9b4 	bl	8001a24 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 80016bc:	f000 f9c6 	bl	8001a4c <MX_RF_Init>
  MX_GPIO_Init();
 80016c0:	f000 fa98 	bl	8001bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c4:	f000 fa74 	bl	8001bb0 <MX_DMA_Init>
  MX_RTC_Init();
 80016c8:	f000 f9c8 	bl	8001a5c <MX_RTC_Init>
  MX_ADC1_Init();
 80016cc:	f000 f8a0 	bl	8001810 <MX_ADC1_Init>
  MX_TIM16_Init();
 80016d0:	f000 f9f8 	bl	8001ac4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016d4:	f7ff fbf8 	bl	8000ec8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim16);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <main+0x40>)
 80016da:	f004 fe75 	bl	80063c8 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016de:	f7ff fdab 	bl	8001238 <MX_APPE_Process>
 80016e2:	e7fc      	b.n	80016de <main+0x3a>
 80016e4:	200002c0 	.word	0x200002c0

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09a      	sub	sp, #104	@ 0x68
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	2248      	movs	r2, #72	@ 0x48
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00a fffa 	bl	800c6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV8);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001718:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800171c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f023 0303 	bic.w	r3, r3, #3
 8001728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001732:	f002 fe8b 	bl	800444c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001736:	2010      	movs	r0, #16
 8001738:	f7ff ff20 	bl	800157c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <SystemClock_Config+0xe4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001744:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <SystemClock_Config+0xe4>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <SystemClock_Config+0xe4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001758:	2327      	movs	r3, #39	@ 0x27
 800175a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001762:	2301      	movs	r3, #1
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001770:	2340      	movs	r3, #64	@ 0x40
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001774:	2300      	movs	r3, #0
 8001776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001778:	23a0      	movs	r3, #160	@ 0xa0
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f003 f9f5 	bl	8004b74 <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001790:	f000 fa8a 	bl	8001ca8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001794:	236f      	movs	r3, #111	@ 0x6f
 8001796:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fd51 	bl	800525c <HAL_RCC_ClockConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80017c0:	f000 fa72 	bl	8001ca8 <Error_Handler>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3768      	adds	r7, #104	@ 0x68
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	58000400 	.word	0x58000400

080017d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	@ 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d6:	463b      	mov	r3, r7
 80017d8:	2250      	movs	r2, #80	@ 0x50
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a ff87 	bl	800c6f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017e6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ec:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017ee:	2300      	movs	r3, #0
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 f96c 	bl	8005ad6 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001804:	f000 fa50 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	@ 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001826:	4b7c      	ldr	r3, [pc, #496]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001828:	4a7c      	ldr	r2, [pc, #496]	@ (8001a1c <MX_ADC1_Init+0x20c>)
 800182a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800182c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001832:	4b79      	ldr	r3, [pc, #484]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001834:	2210      	movs	r2, #16
 8001836:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001838:	4b77      	ldr	r3, [pc, #476]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800183e:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001840:	2201      	movs	r2, #1
 8001842:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001844:	4b74      	ldr	r3, [pc, #464]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001846:	2204      	movs	r2, #4
 8001848:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800184a:	4b73      	ldr	r3, [pc, #460]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800184c:	2200      	movs	r2, #0
 800184e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001850:	4b71      	ldr	r3, [pc, #452]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001852:	2200      	movs	r2, #0
 8001854:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 14;
 8001856:	4b70      	ldr	r3, [pc, #448]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001858:	220e      	movs	r2, #14
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001864:	4b6c      	ldr	r3, [pc, #432]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186a:	4b6b      	ldr	r3, [pc, #428]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800186c:	2200      	movs	r2, #0
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001870:	4b69      	ldr	r3, [pc, #420]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001878:	4b67      	ldr	r3, [pc, #412]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800187a:	2200      	movs	r2, #0
 800187c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800187e:	4b66      	ldr	r3, [pc, #408]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001886:	4864      	ldr	r0, [pc, #400]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001888:	f001 f842 	bl	8002910 <HAL_ADC_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001892:	f000 fa09 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001896:	4b62      	ldr	r3, [pc, #392]	@ (8001a20 <MX_ADC1_Init+0x210>)
 8001898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800189a:	2306      	movs	r3, #6
 800189c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018a2:	237f      	movs	r3, #127	@ 0x7f
 80018a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018a6:	2304      	movs	r3, #4
 80018a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	4859      	ldr	r0, [pc, #356]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80018b4:	f001 fa10 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018be:	f000 f9f3 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018c2:	230c      	movs	r3, #12
 80018c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	4619      	mov	r1, r3
 80018ca:	4853      	ldr	r0, [pc, #332]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80018cc:	f001 fa04 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80018d6:	f000 f9e7 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018da:	2312      	movs	r3, #18
 80018dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	484d      	ldr	r0, [pc, #308]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80018e4:	f001 f9f8 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80018ee:	f000 f9db 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018f2:	2318      	movs	r3, #24
 80018f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f6:	463b      	mov	r3, r7
 80018f8:	4619      	mov	r1, r3
 80018fa:	4847      	ldr	r0, [pc, #284]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80018fc:	f001 f9ec 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001906:	f000 f9cf 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800190a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800190e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4840      	ldr	r0, [pc, #256]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001916:	f001 f9df 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8001920:	f000 f9c2 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001924:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001928:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	4619      	mov	r1, r3
 800192e:	483a      	ldr	r0, [pc, #232]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001930:	f001 f9d2 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 800193a:	f000 f9b5 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800193e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4833      	ldr	r0, [pc, #204]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800194a:	f001 f9c5 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8001954:	f000 f9a8 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001958:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800195c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195e:	463b      	mov	r3, r7
 8001960:	4619      	mov	r1, r3
 8001962:	482d      	ldr	r0, [pc, #180]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001964:	f001 f9b8 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 800196e:	f000 f99b 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001972:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4826      	ldr	r0, [pc, #152]	@ (8001a18 <MX_ADC1_Init+0x208>)
 800197e:	f001 f9ab 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8001988:	f000 f98e 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800198c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001990:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4820      	ldr	r0, [pc, #128]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001998:	f001 f99e 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 80019a2:	f000 f981 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80019a6:	f240 2306 	movw	r3, #518	@ 0x206
 80019aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80019b2:	f001 f991 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 80019bc:	f000 f974 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80019c0:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80019c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	4619      	mov	r1, r3
 80019ca:	4813      	ldr	r0, [pc, #76]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80019cc:	f001 f984 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80019d6:	f000 f967 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80019da:	f240 2312 	movw	r3, #530	@ 0x212
 80019de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <MX_ADC1_Init+0x208>)
 80019e6:	f001 f977 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 80019f0:	f000 f95a 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80019f4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80019f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_ADC1_Init+0x208>)
 8001a00:	f001 f96a 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8001a0a:	f000 f94d 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000019c 	.word	0x2000019c
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	04300002 	.word	0x04300002

08001a24 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <MX_IPCC_Init+0x20>)
 8001a2a:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <MX_IPCC_Init+0x24>)
 8001a2c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_IPCC_Init+0x20>)
 8001a30:	f002 fc86 	bl	8004340 <HAL_IPCC_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a3a:	f000 f935 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000260 	.word	0x20000260
 8001a48:	58000c00 	.word	0x58000c00

08001a4c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a62:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <MX_RTC_Init+0x64>)
 8001a64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a6e:	220f      	movs	r2, #15
 8001a70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a74:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <MX_RTC_Init+0x60>)
 8001a94:	f004 faa6 	bl	8005fe4 <HAL_RTC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 f903 	bl	8001ca8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_RTC_Init+0x60>)
 8001aa8:	f004 fb9c 	bl	80061e4 <HAL_RTCEx_SetWakeUpTimer>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001ab2:	f000 f8f9 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000029c 	.word	0x2000029c
 8001ac0:	40002800 	.word	0x40002800

08001ac4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001aca:	4a11      	ldr	r2, [pc, #68]	@ (8001b10 <MX_TIM16_Init+0x4c>)
 8001acc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200-1;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001ad0:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001ad4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001ade:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ae2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001af6:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_TIM16_Init+0x48>)
 8001af8:	f004 fc0f 	bl	800631a <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001b02:	f000 f8d1 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002c0 	.word	0x200002c0
 8001b10:	40014400 	.word	0x40014400

08001b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b1a:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <MX_USART1_UART_Init+0x98>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b46:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b4a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b5e:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b60:	f004 fe5e 	bl	8006820 <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b6a:	f000 f89d 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b72:	f006 f83e 	bl	8007bf2 <HAL_UARTEx_SetTxFifoThreshold>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b7c:	f000 f894 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b80:	2100      	movs	r1, #0
 8001b82:	4809      	ldr	r0, [pc, #36]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b84:	f006 f873 	bl	8007c6e <HAL_UARTEx_SetRxFifoThreshold>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001b8e:	f000 f88b 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MX_USART1_UART_Init+0x94>)
 8001b94:	f005 fff4 	bl	8007b80 <HAL_UARTEx_DisableFifoMode>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001b9e:	f000 f883 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000030c 	.word	0x2000030c
 8001bac:	40013800 	.word	0x40013800

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7ff fcf7 	bl	80015a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff fcf4 	bl	80015a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	200b      	movs	r0, #11
 8001bc6:	f001 fe72 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bca:	200b      	movs	r0, #11
 8001bcc:	f001 fe89 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	200c      	movs	r0, #12
 8001bd6:	f001 fe6a 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bda:	200c      	movs	r0, #12
 8001bdc:	f001 fe81 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	200d      	movs	r0, #13
 8001be6:	f001 fe62 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bea:	200d      	movs	r0, #13
 8001bec:	f001 fe79 	bl	80038e2 <HAL_NVIC_EnableIRQ>

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	2004      	movs	r0, #4
 8001c0a:	f7ff fce6 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fce3 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	2002      	movs	r0, #2
 8001c16:	f7ff fce0 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1a:	2008      	movs	r0, #8
 8001c1c:	f7ff fcdd 	bl	80015da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2123      	movs	r1, #35	@ 0x23
 8001c24:	481d      	ldr	r0, [pc, #116]	@ (8001c9c <MX_GPIO_Init+0xa8>)
 8001c26:	f002 fb35 	bl	8004294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4819      	ldr	r0, [pc, #100]	@ (8001ca0 <MX_GPIO_Init+0xac>)
 8001c3c:	f002 f9ba 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001c40:	2323      	movs	r3, #35	@ 0x23
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <MX_GPIO_Init+0xa8>)
 8001c56:	f002 f9ad 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8001c5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f002 f99c 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_GPIO_Init+0xb0>)
 8001c8e:	f002 f991 	bl	8003fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	48000c00 	.word	0x48000c00

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <Error_Handler+0x8>

08001cb4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_AHB2_GRP1_EnableClock>:
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ce4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_AHB3_GRP1_EnableClock>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_APB1_GRP1_EnableClock>:
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_APB2_GRP1_EnableClock>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001da2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001da6:	f7ff ffaf 	bl	8001d08 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	202e      	movs	r0, #46	@ 0x2e
 8001db0:	f001 fd7d 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001db4:	202e      	movs	r0, #46	@ 0x2e
 8001db6:	f001 fd94 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b09c      	sub	sp, #112	@ 0x70
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2250      	movs	r2, #80	@ 0x50
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00a fc85 	bl	800c6f0 <memset>
  if(hadc->Instance==ADC1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a3a      	ldr	r2, [pc, #232]	@ (8001ed4 <HAL_ADC_MspInit+0x114>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d16c      	bne.n	8001eca <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001df4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 32;
 8001df6:	2320      	movs	r3, #32
 8001df8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dfe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001e06:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001e0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fe5a 	bl	8005ad6 <HAL_RCCEx_PeriphCLKConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001e28:	f7ff ff3e 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e30:	f7ff ff51 	bl	8001cd6 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e34:	2004      	movs	r0, #4
 8001e36:	f7ff ff4e 	bl	8001cd6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff ff4b 	bl	8001cd6 <LL_AHB2_GRP1_EnableClock>
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PA8     ------> ADC1_IN15
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = FRI_0_Pin|FRI_1_Pin|SAT_0_Pin|SAT_1_Pin
 8001e40:	232f      	movs	r3, #47	@ 0x2f
 8001e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
                          |SUN_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e50:	4619      	mov	r1, r3
 8001e52:	4821      	ldr	r0, [pc, #132]	@ (8001ed8 <HAL_ADC_MspInit+0x118>)
 8001e54:	f002 f8ae 	bl	8003fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MON_0_Pin|MON_1_Pin|TUE_0_Pin|TUE_1_Pin
 8001e58:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                          |WED_0_Pin|WED_1_Pin|THU_0_Pin|THU_1_Pin
                          |SUN_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e70:	f002 f8a0 	bl	8003fb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <HAL_ADC_MspInit+0x120>)
 8001e78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e80:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001e9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eae:	480b      	ldr	r0, [pc, #44]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001eb0:	f001 fd4e 	bl	8003950 <HAL_DMA_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8001eba:	f7ff fef5 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a06      	ldr	r2, [pc, #24]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001ec2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ec4:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <HAL_ADC_MspInit+0x11c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eca:	bf00      	nop
 8001ecc:	3770      	adds	r7, #112	@ 0x70
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	50040000 	.word	0x50040000
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	20000200 	.word	0x20000200
 8001ee0:	40020030 	.word	0x40020030

08001ee4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_IPCC_MspInit+0x44>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d113      	bne.n	8001f1e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001ef6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001efa:	f7ff ff05 	bl	8001d08 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	202c      	movs	r0, #44	@ 0x2c
 8001f04:	f001 fcd3 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f08:	202c      	movs	r0, #44	@ 0x2c
 8001f0a:	f001 fcea 	bl	80038e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	202d      	movs	r0, #45	@ 0x2d
 8001f14:	f001 fccb 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f18:	202d      	movs	r0, #45	@ 0x2d
 8001f1a:	f001 fce2 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	58000c00 	.word	0x58000c00

08001f2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b096      	sub	sp, #88	@ 0x58
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	2250      	movs	r2, #80	@ 0x50
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f00a fbd7 	bl	800c6f0 <memset>
  if(hrtc->Instance==RTC)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <HAL_RTC_MspInit+0x54>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d115      	bne.n	8001f78 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f56:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fdba 	bl	8005ad6 <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f68:	f7ff fe9e 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f6c:	f7ff fea2 	bl	8001cb4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f70:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f74:	f7ff fee1 	bl	8001d3a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001f78:	bf00      	nop
 8001f7a:	3758      	adds	r7, #88	@ 0x58
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40002800 	.word	0x40002800

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a09      	ldr	r2, [pc, #36]	@ (8001fb8 <HAL_TIM_Base_MspInit+0x34>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10b      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f96:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001f9a:	f7ff fee7 	bl	8001d6c <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2019      	movs	r0, #25
 8001fa4:	f001 fc83 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fa8:	2019      	movs	r0, #25
 8001faa:	f001 fc9a 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40014400 	.word	0x40014400

08001fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09c      	sub	sp, #112	@ 0x70
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2250      	movs	r2, #80	@ 0x50
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00a fb87 	bl	800c6f0 <memset>
  if(huart->Instance==USART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a43      	ldr	r2, [pc, #268]	@ (80020f4 <HAL_UART_MspInit+0x138>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d17f      	bne.n	80020ec <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fd6c 	bl	8005ad6 <HAL_RCCEx_PeriphCLKConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002004:	f7ff fe50 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002008:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800200c:	f7ff feae 	bl	8001d6c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	2002      	movs	r0, #2
 8002012:	f7ff fe60 	bl	8001cd6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002016:	23c0      	movs	r3, #192	@ 0xc0
 8002018:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002026:	2307      	movs	r3, #7
 8002028:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800202e:	4619      	mov	r1, r3
 8002030:	4831      	ldr	r0, [pc, #196]	@ (80020f8 <HAL_UART_MspInit+0x13c>)
 8002032:	f001 ffbf 	bl	8003fb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002036:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002038:	4a31      	ldr	r2, [pc, #196]	@ (8002100 <HAL_UART_MspInit+0x144>)
 800203a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800203c:	4b2f      	ldr	r3, [pc, #188]	@ (80020fc <HAL_UART_MspInit+0x140>)
 800203e:	220e      	movs	r2, #14
 8002040:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002042:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <HAL_UART_MspInit+0x140>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800204e:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002054:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_UART_MspInit+0x140>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002060:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002066:	4b25      	ldr	r3, [pc, #148]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800206c:	4823      	ldr	r0, [pc, #140]	@ (80020fc <HAL_UART_MspInit+0x140>)
 800206e:	f001 fc6f 	bl	8003950 <HAL_DMA_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002078:	f7ff fe16 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002084:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_UART_MspInit+0x140>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <HAL_UART_MspInit+0x148>)
 800208c:	4a1e      	ldr	r2, [pc, #120]	@ (8002108 <HAL_UART_MspInit+0x14c>)
 800208e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_UART_MspInit+0x148>)
 8002092:	220f      	movs	r2, #15
 8002094:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002096:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_UART_MspInit+0x148>)
 8002098:	2210      	movs	r2, #16
 800209a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_UART_MspInit+0x148>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020c0:	4810      	ldr	r0, [pc, #64]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020c2:	f001 fc45 	bl	8003950 <HAL_DMA_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80020cc:	f7ff fdec 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <HAL_UART_MspInit+0x148>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2024      	movs	r0, #36	@ 0x24
 80020e2:	f001 fbe4 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020e6:	2024      	movs	r0, #36	@ 0x24
 80020e8:	f001 fbfb 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80020ec:	bf00      	nop
 80020ee:	3770      	adds	r7, #112	@ 0x70
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40013800 	.word	0x40013800
 80020f8:	48000400 	.word	0x48000400
 80020fc:	200003a0 	.word	0x200003a0
 8002100:	40020008 	.word	0x40020008
 8002104:	20000400 	.word	0x20000400
 8002108:	4002001c 	.word	0x4002001c

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <UsageFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002162:	f000 f9d5 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <DMA1_Channel1_IRQHandler+0x10>)
 8002172:	f001 fdce 	bl	8003d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200003a0 	.word	0x200003a0

08002180 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <DMA1_Channel2_IRQHandler+0x10>)
 8002186:	f001 fdc4 	bl	8003d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000400 	.word	0x20000400

08002194 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <DMA1_Channel3_IRQHandler+0x10>)
 800219a:	f001 fdba 	bl	8003d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000200 	.word	0x20000200

080021a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80021ae:	f004 f959 	bl	8006464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002c0 	.word	0x200002c0

080021bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c0:	4802      	ldr	r0, [pc, #8]	@ (80021cc <USART1_IRQHandler+0x10>)
 80021c2:	f004 fbfd 	bl	80069c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000030c 	.word	0x2000030c

080021d0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80021d4:	f009 fce0 	bl	800bb98 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}

080021dc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80021e0:	f009 fd10 	bl	800bc04 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80021ec:	f002 f884 	bl	80042f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e00a      	b.n	800221c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002206:	f3af 8000 	nop.w
 800220a:	4601      	mov	r1, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf0      	blt.n	8002206 <_read+0x12>
  }

  return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_close>:
  }
  return len;
}

int _close(int file)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002256:	605a      	str	r2, [r3, #4]
  return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_isatty>:

int _isatty(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f00a fa60 	bl	800c78c <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20030000 	.word	0x20030000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	20000484 	.word	0x20000484
 8002300:	200017a8 	.word	0x200017a8

08002304 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002308:	4b24      	ldr	r3, [pc, #144]	@ (800239c <SystemInit+0x98>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	4a23      	ldr	r2, [pc, #140]	@ (800239c <SystemInit+0x98>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800232c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002330:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800233c:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <SystemInit+0x9c>)
 800233e:	4013      	ands	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800234e:	f023 0305 	bic.w	r3, r3, #5
 8002352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236e:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <SystemInit+0xa0>)
 8002370:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002376:	4a0b      	ldr	r2, [pc, #44]	@ (80023a4 <SystemInit+0xa0>)
 8002378:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002388:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00
 80023a0:	faf6fefb 	.word	0xfaf6fefb
 80023a4:	22041000 	.word	0x22041000

080023a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80023a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ac:	3304      	adds	r3, #4

080023ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80023b2:	d3f9      	bcc.n	80023a8 <CopyDataInit>
  bx lr
 80023b4:	4770      	bx	lr

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80023b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80023b8:	3004      	adds	r0, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80023ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>
  bx lr
 80023be:	4770      	bx	lr

080023c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023c0:	480c      	ldr	r0, [pc, #48]	@ (80023f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023c4:	f7ff ff9e 	bl	8002304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80023c8:	480b      	ldr	r0, [pc, #44]	@ (80023f8 <LoopForever+0x6>)
 80023ca:	490c      	ldr	r1, [pc, #48]	@ (80023fc <LoopForever+0xa>)
 80023cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002400 <LoopForever+0xe>)
 80023ce:	2300      	movs	r3, #0
 80023d0:	f7ff ffed 	bl	80023ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80023d4:	480b      	ldr	r0, [pc, #44]	@ (8002404 <LoopForever+0x12>)
 80023d6:	490c      	ldr	r1, [pc, #48]	@ (8002408 <LoopForever+0x16>)
 80023d8:	4a0c      	ldr	r2, [pc, #48]	@ (800240c <LoopForever+0x1a>)
 80023da:	2300      	movs	r3, #0
 80023dc:	f7ff ffe7 	bl	80023ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023e0:	480b      	ldr	r0, [pc, #44]	@ (8002410 <LoopForever+0x1e>)
 80023e2:	490c      	ldr	r1, [pc, #48]	@ (8002414 <LoopForever+0x22>)
 80023e4:	2300      	movs	r3, #0
 80023e6:	f7ff ffe8 	bl	80023ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023ea:	f00a f9d5 	bl	800c798 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023ee:	f7ff f959 	bl	80016a4 <main>

080023f2 <LoopForever>:

LoopForever:
  b LoopForever
 80023f2:	e7fe      	b.n	80023f2 <LoopForever>
  ldr   r0, =_estack
 80023f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000090 	.word	0x20000090
 8002400:	0800e9a4 	.word	0x0800e9a4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002404:	200301e4 	.word	0x200301e4
 8002408:	20030a67 	.word	0x20030a67
 800240c:	0800ea72 	.word	0x0800ea72
  INIT_BSS _sbss, _ebss
 8002410:	200000dc 	.word	0x200000dc
 8002414:	200017a8 	.word	0x200017a8

08002418 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_IRQHandler>
	...

0800241c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6053      	str	r3, [r2, #4]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e0042000 	.word	0xe0042000

0800243c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	6053      	str	r3, [r2, #4]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e0042000 	.word	0xe0042000

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_Init+0x3c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0b      	ldr	r2, [pc, #44]	@ (8002498 <HAL_Init+0x3c>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002472:	2003      	movs	r0, #3
 8002474:	f001 fa10 	bl	8003898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002478:	2000      	movs	r0, #0
 800247a:	f000 f80f 	bl	800249c <HAL_InitTick>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	e001      	b.n	800248e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248a:	f7ff fc88 	bl	8001d9e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248e:	79fb      	ldrb	r3, [r7, #7]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	58004000 	.word	0x58004000

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_InitTick+0x6c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d024      	beq.n	80024fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024b0:	f003 f880 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_InitTick+0x6c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 fa18 	bl	80038fe <HAL_SYSTICK_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	d809      	bhi.n	80024ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024da:	2200      	movs	r2, #0
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024e2:	f001 f9e4 	bl	80038ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_InitTick+0x70>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e007      	b.n	80024fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e004      	b.n	80024fe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e001      	b.n	80024fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000010 	.word	0x20000010
 800250c:	2000000c 	.word	0x2000000c

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000010 	.word	0x20000010
 8002534:	20000488 	.word	0x20000488

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	@ (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000488 	.word	0x20000488

08002550 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_GetTickPrio+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	2000000c 	.word	0x2000000c

08002568 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800256c:	f7ff ff56 	bl	800241c <LL_DBGMCU_EnableDBGSleepMode>
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002578:	f7ff ff60 	bl	800243c <LL_DBGMCU_EnableDBGStopMode>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3360      	adds	r3, #96	@ 0x60
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <LL_ADC_SetOffset+0x44>)
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	4313      	orrs	r3, r2
 8002618:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	03fff000 	.word	0x03fff000

08002630 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3360      	adds	r3, #96	@ 0x60
 800263e:	461a      	mov	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3360      	adds	r3, #96	@ 0x60
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	431a      	orrs	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026aa:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3330      	adds	r3, #48	@ 0x30
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	4413      	add	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	211f      	movs	r1, #31
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 011f 	and.w	r1, r3, #31
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3314      	adds	r3, #20
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0e5b      	lsrs	r3, r3, #25
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0d1b      	lsrs	r3, r3, #20
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2107      	movs	r1, #7
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	401a      	ands	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0d1b      	lsrs	r3, r3, #20
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	431a      	orrs	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0318 	and.w	r3, r3, #24
 800278a:	4908      	ldr	r1, [pc, #32]	@ (80027ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800278c:	40d9      	lsrs	r1, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	400b      	ands	r3, r1
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	0007ffff 	.word	0x0007ffff

080027b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6093      	str	r3, [r2, #8]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e8:	d101      	bne.n	80027ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800280c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002810:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002838:	d101      	bne.n	800283e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800285c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <LL_ADC_IsEnabled+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_IsEnabled+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d101      	bne.n	80028da <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d101      	bne.n	8002900 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e12e      	b.n	8002b8c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fa3f 	bl	8001dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff3d 	bl	80027d4 <LL_ADC_IsDeepPowerDownEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff23 	bl	80027b0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff58 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d115      	bne.n	80029a6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff3c 	bl	80027fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002984:	4b83      	ldr	r3, [pc, #524]	@ (8002b94 <HAL_ADC_Init+0x284>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	4a83      	ldr	r2, [pc, #524]	@ (8002b98 <HAL_ADC_Init+0x288>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002998:	e002      	b.n	80029a0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3b01      	subs	r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f9      	bne.n	800299a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff3a 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	f043 0210 	orr.w	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff73 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 80029dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 80c7 	bne.w	8002b7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 80c3 	bne.w	8002b7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029fc:	f043 0202 	orr.w	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff33 	bl	8002874 <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a14:	4861      	ldr	r0, [pc, #388]	@ (8002b9c <HAL_ADC_Init+0x28c>)
 8002a16:	f7ff ff2d 	bl	8002874 <LL_ADC_IsEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	485e      	ldr	r0, [pc, #376]	@ (8002ba0 <HAL_ADC_Init+0x290>)
 8002a28:	f7ff fdaa 	bl	8002580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7e5b      	ldrb	r3, [r3, #25]
 8002a30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002a4c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d106      	bne.n	8002a6c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	3b01      	subs	r3, #1
 8002a64:	045b      	lsls	r3, r3, #17
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b45      	ldr	r3, [pc, #276]	@ (8002ba4 <HAL_ADC_Init+0x294>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff0e 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002aa6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff1b 	bl	80028e8 <LL_ADC_INJ_IsConversionOngoing>
 8002ab2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d13d      	bne.n	8002b36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13a      	bne.n	8002b36 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ac4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002acc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002adc:	f023 0302 	bic.w	r3, r3, #2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	69b9      	ldr	r1, [r7, #24]
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d118      	bne.n	8002b26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b10:	4311      	orrs	r1, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b16:	430a      	orrs	r2, r1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	611a      	str	r2, [r3, #16]
 8002b24:	e007      	b.n	8002b36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d10c      	bne.n	8002b58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	f023 010f 	bic.w	r1, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b56:	e007      	b.n	8002b68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 020f 	bic.w	r2, r2, #15
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f023 0303 	bic.w	r3, r3, #3
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b78:	e007      	b.n	8002b8a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000008 	.word	0x20000008
 8002b98:	053e2d63 	.word	0x053e2d63
 8002b9c:	50040000 	.word	0x50040000
 8002ba0:	50040300 	.word	0x50040300
 8002ba4:	fff0c007 	.word	0xfff0c007

08002ba8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe82 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d167      	bne.n	8002c94 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_Start_DMA+0x2a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e063      	b.n	8002c9a <HAL_ADC_Start_DMA+0xf2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc42 	bl	8003464 <ADC_Enable>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14f      	bne.n	8002c8a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	f023 0206 	bic.w	r2, r3, #6
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c16:	e002      	b.n	8002c1e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	4a20      	ldr	r2, [pc, #128]	@ (8002ca4 <HAL_ADC_Start_DMA+0xfc>)
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <HAL_ADC_Start_DMA+0x100>)
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <HAL_ADC_Start_DMA+0x104>)
 8002c34:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	221c      	movs	r2, #28
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0210 	orr.w	r2, r2, #16
 8002c54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3340      	adds	r3, #64	@ 0x40
 8002c70:	4619      	mov	r1, r3
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f000 ff13 	bl	8003aa0 <HAL_DMA_Start_IT>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe09 	bl	800289a <LL_ADC_REG_StartConversion>
 8002c88:	e006      	b.n	8002c98 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002c92:	e001      	b.n	8002c98 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
 8002c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08003559 	.word	0x08003559
 8002ca8:	08003631 	.word	0x08003631
 8002cac:	0800364d 	.word	0x0800364d

08002cb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b0b6      	sub	sp, #216	@ 0xd8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x22>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e39f      	b.n	800343a <HAL_ADC_ConfigChannel+0x762>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fddb 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 8384 	bne.w	800341c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f7ff fcc9 	bl	80026b8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fdc9 	bl	80028c2 <LL_ADC_REG_IsConversionOngoing>
 8002d30:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fdd5 	bl	80028e8 <LL_ADC_INJ_IsConversionOngoing>
 8002d3e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 81a6 	bne.w	8003098 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f040 81a1 	bne.w	8003098 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f7ff fcd4 	bl	8002710 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	08db      	lsrs	r3, r3, #3
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d00a      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6919      	ldr	r1, [r3, #16]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d9a:	f7ff fc25 	bl	80025e8 <LL_ADC_SetOffset>
 8002d9e:	e17b      	b.n	8003098 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fc42 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0xf4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fc37 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	f003 021f 	and.w	r2, r3, #31
 8002dca:	e01e      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x132>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc2c 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8002dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e004      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8002dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x14a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0e9b      	lsrs	r3, r3, #26
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	e018      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x17c>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e004      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d106      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fbfb 	bl	800265c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fbdf 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x1ba>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fbd4 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	e01e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x1f8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fbc9 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002eb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e004      	b.n	8002ece <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x210>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	e018      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x242>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e004      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d106      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fb98 	bl	800265c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2102      	movs	r1, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fb7c 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x280>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2102      	movs	r1, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fb71 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 021f 	and.w	r2, r3, #31
 8002f56:	e01e      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x2be>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fb66 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e004      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x2d6>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	0e9b      	lsrs	r3, r3, #26
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	e016      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x304>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002fc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d106      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fb37 	bl	800265c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2103      	movs	r1, #3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fb1b 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x342>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2103      	movs	r1, #3
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fb10 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	e017      	b.n	800304a <HAL_ADC_ConfigChannel+0x372>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2103      	movs	r1, #3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fb05 	bl	8002630 <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003034:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003036:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e003      	b.n	8003048 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x38a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	e011      	b.n	8003086 <HAL_ADC_ConfigChannel+0x3ae>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003072:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800307a:	2320      	movs	r3, #32
 800307c:	e003      	b.n	8003086 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800307e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	429a      	cmp	r2, r3
 8003088:	d106      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	2103      	movs	r1, #3
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fae2 	bl	800265c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fbe9 	bl	8002874 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 81c2 	bne.w	800342e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f7ff fb56 	bl	8002768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a8e      	ldr	r2, [pc, #568]	@ (80032fc <HAL_ADC_ConfigChannel+0x624>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f040 8130 	bne.w	8003328 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x418>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	bf94      	ite	ls
 80030e8:	2301      	movls	r3, #1
 80030ea:	2300      	movhi	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e019      	b.n	8003124 <HAL_ADC_ConfigChannel+0x44c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80030fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003100:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e003      	b.n	8003114 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800310c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2b09      	cmp	r3, #9
 800311c:	bf94      	ite	ls
 800311e:	2301      	movls	r3, #1
 8003120:	2300      	movhi	r3, #0
 8003122:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003124:	2b00      	cmp	r3, #0
 8003126:	d079      	beq.n	800321c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x46c>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	3301      	adds	r3, #1
 800313c:	069b      	lsls	r3, r3, #26
 800313e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003142:	e015      	b.n	8003170 <HAL_ADC_ConfigChannel+0x498>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003154:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e003      	b.n	8003168 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3301      	adds	r3, #1
 800316a:	069b      	lsls	r3, r3, #26
 800316c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x4b8>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	3301      	adds	r3, #1
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	e017      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x4e8>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800319e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80031ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	ea42 0103 	orr.w	r1, r2, r3
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x50e>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	3301      	adds	r3, #1
 80031d8:	f003 021f 	and.w	r2, r3, #31
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	051b      	lsls	r3, r3, #20
 80031e4:	e018      	b.n	8003218 <HAL_ADC_ConfigChannel+0x540>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80031f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80031f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e003      	b.n	800320a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003218:	430b      	orrs	r3, r1
 800321a:	e080      	b.n	800331e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x560>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	3301      	adds	r3, #1
 8003230:	069b      	lsls	r3, r3, #26
 8003232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003236:	e015      	b.n	8003264 <HAL_ADC_ConfigChannel+0x58c>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e003      	b.n	800325c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	3301      	adds	r3, #1
 800325e:	069b      	lsls	r3, r3, #26
 8003260:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x5ac>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	e017      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x5dc>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	61fb      	str	r3, [r7, #28]
  return result;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	ea42 0103 	orr.w	r1, r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10d      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x608>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	3301      	adds	r3, #1
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	3b1e      	subs	r3, #30
 80032d8:	051b      	lsls	r3, r3, #20
 80032da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032de:	e01d      	b.n	800331c <HAL_ADC_ConfigChannel+0x644>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	613b      	str	r3, [r7, #16]
  return result;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80032f8:	2320      	movs	r3, #32
 80032fa:	e005      	b.n	8003308 <HAL_ADC_ConfigChannel+0x630>
 80032fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fab3 f383 	clz	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f003 021f 	and.w	r2, r3, #31
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3b1e      	subs	r3, #30
 8003316:	051b      	lsls	r3, r3, #20
 8003318:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003322:	4619      	mov	r1, r3
 8003324:	f7ff f9f4 	bl	8002710 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b45      	ldr	r3, [pc, #276]	@ (8003444 <HAL_ADC_ConfigChannel+0x76c>)
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d07c      	beq.n	800342e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003334:	4844      	ldr	r0, [pc, #272]	@ (8003448 <HAL_ADC_ConfigChannel+0x770>)
 8003336:	f7ff f949 	bl	80025cc <LL_ADC_GetCommonPathInternalCh>
 800333a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333e:	4843      	ldr	r0, [pc, #268]	@ (800344c <HAL_ADC_ConfigChannel+0x774>)
 8003340:	f7ff fa98 	bl	8002874 <LL_ADC_IsEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d15e      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a40      	ldr	r2, [pc, #256]	@ (8003450 <HAL_ADC_ConfigChannel+0x778>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d127      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x6cc>
 8003354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d121      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a39      	ldr	r2, [pc, #228]	@ (800344c <HAL_ADC_ConfigChannel+0x774>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d161      	bne.n	800342e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800336a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800336e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003372:	4619      	mov	r1, r3
 8003374:	4834      	ldr	r0, [pc, #208]	@ (8003448 <HAL_ADC_ConfigChannel+0x770>)
 8003376:	f7ff f916 	bl	80025a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800337a:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <HAL_ADC_ConfigChannel+0x77c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	4a35      	ldr	r2, [pc, #212]	@ (8003458 <HAL_ADC_ConfigChannel+0x780>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003394:	e002      	b.n	800339c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3b01      	subs	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f9      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a2:	e044      	b.n	800342e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2c      	ldr	r2, [pc, #176]	@ (800345c <HAL_ADC_ConfigChannel+0x784>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d113      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x6fe>
 80033ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_ADC_ConfigChannel+0x774>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d134      	bne.n	800342e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80033c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033cc:	4619      	mov	r1, r3
 80033ce:	481e      	ldr	r0, [pc, #120]	@ (8003448 <HAL_ADC_ConfigChannel+0x770>)
 80033d0:	f7ff f8e9 	bl	80025a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d4:	e02b      	b.n	800342e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	@ (8003460 <HAL_ADC_ConfigChannel+0x788>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d126      	bne.n	800342e <HAL_ADC_ConfigChannel+0x756>
 80033e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d120      	bne.n	800342e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a16      	ldr	r2, [pc, #88]	@ (800344c <HAL_ADC_ConfigChannel+0x774>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d11b      	bne.n	800342e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033fe:	4619      	mov	r1, r3
 8003400:	4811      	ldr	r0, [pc, #68]	@ (8003448 <HAL_ADC_ConfigChannel+0x770>)
 8003402:	f7ff f8d0 	bl	80025a6 <LL_ADC_SetCommonPathInternalCh>
 8003406:	e012      	b.n	800342e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800341a:	e008      	b.n	800342e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003436:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800343a:	4618      	mov	r0, r3
 800343c:	37d8      	adds	r7, #216	@ 0xd8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	80080000 	.word	0x80080000
 8003448:	50040300 	.word	0x50040300
 800344c:	50040000 	.word	0x50040000
 8003450:	c7520000 	.word	0xc7520000
 8003454:	20000008 	.word	0x20000008
 8003458:	053e2d63 	.word	0x053e2d63
 800345c:	cb840000 	.word	0xcb840000
 8003460:	80000001 	.word	0x80000001

08003464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f9fd 	bl	8002874 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d15e      	bne.n	800353e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <ADC_Enable+0xe4>)
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e04a      	b.n	8003540 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f9cc 	bl	800284c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034b4:	4825      	ldr	r0, [pc, #148]	@ (800354c <ADC_Enable+0xe8>)
 80034b6:	f7ff f889 	bl	80025cc <LL_ADC_GetCommonPathInternalCh>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c4:	4b22      	ldr	r3, [pc, #136]	@ (8003550 <ADC_Enable+0xec>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <ADC_Enable+0xf0>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	3301      	adds	r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80034d6:	e002      	b.n	80034de <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3b01      	subs	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80034e4:	f7ff f828 	bl	8002538 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ea:	e021      	b.n	8003530 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f9bf 	bl	8002874 <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f9a3 	bl	800284c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003506:	f7ff f817 	bl	8002538 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d90d      	bls.n	8003530 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d1d6      	bne.n	80034ec <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	8000003f 	.word	0x8000003f
 800354c:	50040300 	.word	0x50040300
 8003550:	20000008 	.word	0x20000008
 8003554:	053e2d63 	.word	0x053e2d63

08003558 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14b      	bne.n	800360a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003576:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d021      	beq.n	80035d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f87e 	bl	8002692 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d032      	beq.n	8003602 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d12b      	bne.n	8003602 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11f      	bne.n	8003602 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80035ce:	e018      	b.n	8003602 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d111      	bne.n	8003602 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7fe f81a 	bl	800163c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003608:	e00e      	b.n	8003628 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fb54 	bl	8002cc4 <HAL_ADC_ErrorCallback>
}
 800361c:	e004      	b.n	8003628 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff fb36 	bl	8002cb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7ff fb26 	bl	8002cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003690:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800369c:	4013      	ands	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b2:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036cc:	4b04      	ldr	r3, [pc, #16]	@ (80036e0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 0307 	and.w	r3, r3, #7
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db0b      	blt.n	800370e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	f003 021f 	and.w	r2, r3, #31
 80036fc:	4907      	ldr	r1, [pc, #28]	@ (800371c <__NVIC_EnableIRQ+0x38>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2001      	movs	r0, #1
 8003706:	fa00 f202 	lsl.w	r2, r0, r2
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000e100 	.word	0xe000e100

08003720 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	db0c      	blt.n	800374c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4907      	ldr	r1, [pc, #28]	@ (8003758 <__NVIC_SetPendingIRQ+0x38>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	3340      	adds	r3, #64	@ 0x40
 8003748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100

0800375c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0c      	blt.n	8003788 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4907      	ldr	r1, [pc, #28]	@ (8003794 <__NVIC_ClearPendingIRQ+0x38>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	3360      	adds	r3, #96	@ 0x60
 8003784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	@ (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	@ (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	@ 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f1c3 0307 	rsb	r3, r3, #7
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf28      	it	cs
 800380a:	2304      	movcs	r3, #4
 800380c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3304      	adds	r3, #4
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <NVIC_EncodePriority+0x30>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3b03      	subs	r3, #3
 800381a:	e000      	b.n	800381e <NVIC_EncodePriority+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003834:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43d9      	mvns	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	4313      	orrs	r3, r2
         );
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003864:	d301      	bcc.n	800386a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003866:	2301      	movs	r3, #1
 8003868:	e00f      	b.n	800388a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386a:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <SysTick_Config+0x40>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003872:	210f      	movs	r1, #15
 8003874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003878:	f7ff ff8e 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <SysTick_Config+0x40>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003882:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <SysTick_Config+0x40>)
 8003884:	2207      	movs	r2, #7
 8003886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	e000e010 	.word	0xe000e010

08003898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff feed 	bl	8003680 <__NVIC_SetPriorityGrouping>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038bc:	f7ff ff04 	bl	80036c8 <__NVIC_GetPriorityGrouping>
 80038c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ff90 	bl	80037ec <NVIC_EncodePriority>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff5f 	bl	8003798 <__NVIC_SetPriority>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fef7 	bl	80036e4 <__NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffa4 	bl	8003854 <SysTick_Config>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fefb 	bl	8003720 <__NVIC_SetPendingIRQ>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff0b 	bl	800375c <__NVIC_ClearPendingIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e08e      	b.n	8003a80 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_DMA_Init+0x138>)
 800396a:	429a      	cmp	r2, r3
 800396c:	d80f      	bhi.n	800398e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4b45      	ldr	r3, [pc, #276]	@ (8003a8c <HAL_DMA_Init+0x13c>)
 8003976:	4413      	add	r3, r2
 8003978:	4a45      	ldr	r2, [pc, #276]	@ (8003a90 <HAL_DMA_Init+0x140>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a42      	ldr	r2, [pc, #264]	@ (8003a94 <HAL_DMA_Init+0x144>)
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40
 800398c:	e00e      	b.n	80039ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_DMA_Init+0x148>)
 8003996:	4413      	add	r3, r2
 8003998:	4a3d      	ldr	r2, [pc, #244]	@ (8003a90 <HAL_DMA_Init+0x140>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a3c      	ldr	r2, [pc, #240]	@ (8003a9c <HAL_DMA_Init+0x14c>)
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80039c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa74 	bl	8003eec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a0c:	d102      	bne.n	8003a14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003a20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_DMA_Init+0x106>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d80c      	bhi.n	8003a56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa93 	bl	8003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	e008      	b.n	8003a68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40020407 	.word	0x40020407
 8003a8c:	bffdfff8 	.word	0xbffdfff8
 8003a90:	cccccccd 	.word	0xcccccccd
 8003a94:	40020000 	.word	0x40020000
 8003a98:	bffdfbf8 	.word	0xbffdfbf8
 8003a9c:	40020400 	.word	0x40020400

08003aa0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_DMA_Start_IT+0x20>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e066      	b.n	8003b8e <HAL_DMA_Start_IT+0xee>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d155      	bne.n	8003b80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f9b9 	bl	8003e70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 020e 	orr.w	r2, r2, #14
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e00f      	b.n	8003b38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0204 	bic.w	r2, r2, #4
 8003b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 020a 	orr.w	r2, r2, #10
 8003b36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e005      	b.n	8003b8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e04f      	b.n	8003c48 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d008      	beq.n	8003bc6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e040      	b.n	8003c48 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 020e 	bic.w	r2, r2, #14
 8003bd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f003 021c 	and.w	r2, r3, #28
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d005      	beq.n	8003c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2204      	movs	r2, #4
 8003c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e047      	b.n	8003d08 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020e 	bic.w	r2, r2, #14
 8003c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cac:	f003 021c 	and.w	r2, r3, #28
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ce6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
    }
  }
  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f003 031c 	and.w	r3, r3, #28
 8003d32:	2204      	movs	r2, #4
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d026      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x7a>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d021      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f003 021c 	and.w	r2, r3, #28
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	2104      	movs	r1, #4
 8003d74:	fa01 f202 	lsl.w	r2, r1, r2
 8003d78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d071      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d8a:	e06c      	b.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	f003 031c 	and.w	r3, r3, #28
 8003d94:	2202      	movs	r2, #2
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02e      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xec>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d029      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020a 	bic.w	r2, r2, #10
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd4:	f003 021c 	and.w	r2, r3, #28
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2102      	movs	r1, #2
 8003dde:	fa01 f202 	lsl.w	r2, r1, r2
 8003de2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d038      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dfc:	e033      	b.n	8003e66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f003 031c 	and.w	r3, r3, #28
 8003e06:	2208      	movs	r2, #8
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02a      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d025      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 020e 	bic.w	r2, r2, #14
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	f003 021c 	and.w	r2, r3, #28
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
}
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f003 021c 	and.w	r2, r3, #28
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d108      	bne.n	8003ed0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ece:	e007      	b.n	8003ee0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d80a      	bhi.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f0c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f14:	e007      	b.n	8003f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	089b      	lsrs	r3, r3, #2
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f20:	4413      	add	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3b08      	subs	r3, #8
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40020407 	.word	0x40020407
 8003f5c:	4002081c 	.word	0x4002081c
 8003f60:	cccccccd 	.word	0xcccccccd
 8003f64:	40020880 	.word	0x40020880

08003f68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003f8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2201      	movs	r2, #1
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	1000823f 	.word	0x1000823f
 8003fb0:	40020940 	.word	0x40020940

08003fb4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc2:	e14c      	b.n	800425e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 813e 	beq.w	8004258 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d005      	beq.n	8003ff4 <HAL_GPIO_Init+0x40>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d130      	bne.n	8004056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800402a:	2201      	movs	r2, #1
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 0201 	and.w	r2, r3, #1
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b03      	cmp	r3, #3
 8004060:	d017      	beq.n	8004092 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d123      	bne.n	80040e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	220f      	movs	r2, #15
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	08da      	lsrs	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3208      	adds	r2, #8
 80040e0:	6939      	ldr	r1, [r7, #16]
 80040e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	2203      	movs	r2, #3
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0203 	and.w	r2, r3, #3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8098 	beq.w	8004258 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004128:	4a54      	ldr	r2, [pc, #336]	@ (800427c <HAL_GPIO_Init+0x2c8>)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	3302      	adds	r3, #2
 8004130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	220f      	movs	r2, #15
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004152:	d019      	beq.n	8004188 <HAL_GPIO_Init+0x1d4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a4a      	ldr	r2, [pc, #296]	@ (8004280 <HAL_GPIO_Init+0x2cc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_GPIO_Init+0x1d0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a49      	ldr	r2, [pc, #292]	@ (8004284 <HAL_GPIO_Init+0x2d0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00d      	beq.n	8004180 <HAL_GPIO_Init+0x1cc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a48      	ldr	r2, [pc, #288]	@ (8004288 <HAL_GPIO_Init+0x2d4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <HAL_GPIO_Init+0x1c8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a47      	ldr	r2, [pc, #284]	@ (800428c <HAL_GPIO_Init+0x2d8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_GPIO_Init+0x1c4>
 8004174:	2304      	movs	r3, #4
 8004176:	e008      	b.n	800418a <HAL_GPIO_Init+0x1d6>
 8004178:	2307      	movs	r3, #7
 800417a:	e006      	b.n	800418a <HAL_GPIO_Init+0x1d6>
 800417c:	2303      	movs	r3, #3
 800417e:	e004      	b.n	800418a <HAL_GPIO_Init+0x1d6>
 8004180:	2302      	movs	r3, #2
 8004182:	e002      	b.n	800418a <HAL_GPIO_Init+0x1d6>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_GPIO_Init+0x1d6>
 8004188:	2300      	movs	r3, #0
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	f002 0203 	and.w	r2, r2, #3
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	4093      	lsls	r3, r2
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800419a:	4938      	ldr	r1, [pc, #224]	@ (800427c <HAL_GPIO_Init+0x2c8>)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041a8:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041cc:	4a30      	ldr	r2, [pc, #192]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041f6:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041fc:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 80041fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004222:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800422a:	4b19      	ldr	r3, [pc, #100]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 800422c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004250:	4a0f      	ldr	r2, [pc, #60]	@ (8004290 <HAL_GPIO_Init+0x2dc>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3301      	adds	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f aeab 	bne.w	8003fc4 <HAL_GPIO_Init+0x10>
  }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000
 8004280:	48000400 	.word	0x48000400
 8004284:	48000800 	.word	0x48000800
 8004288:	48000c00 	.word	0x48000c00
 800428c:	48001000 	.word	0x48001000
 8004290:	58000800 	.word	0x58000800

08004294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	807b      	strh	r3, [r7, #2]
 80042a0:	4613      	mov	r3, r2
 80042a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042a4:	787b      	ldrb	r3, [r7, #1]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042aa:	887a      	ldrh	r2, [r7, #2]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042b0:	e002      	b.n	80042b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4013      	ands	r3, r2
 80042dc:	041a      	lsls	r2, r3, #16
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	43d9      	mvns	r1, r3
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	400b      	ands	r3, r1
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_HSEM_IRQHandler+0x30>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004304:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <HAL_HSEM_IRQHandler+0x30>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	43db      	mvns	r3, r3
 800430c:	4906      	ldr	r1, [pc, #24]	@ (8004328 <HAL_HSEM_IRQHandler+0x30>)
 800430e:	4013      	ands	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004312:	4a05      	ldr	r2, [pc, #20]	@ (8004328 <HAL_HSEM_IRQHandler+0x30>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f807 	bl	800432c <HAL_HSEM_FreeCallback>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	58001500 	.word	0x58001500

0800432c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01e      	beq.n	8004390 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004352:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <HAL_IPCC_Init+0x60>)
 8004354:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd fdbe 	bl	8001ee4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004368:	68b8      	ldr	r0, [r7, #8]
 800436a:	f000 f85b 	bl	8004424 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f82c 	bl	80043d8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800438e:	e001      	b.n	8004394 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	58000c00 	.word	0x58000c00

080043a4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e00f      	b.n	8004406 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	4a0b      	ldr	r2, [pc, #44]	@ (800441c <IPCC_SetDefaultCallbacks+0x44>)
 80043f0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3306      	adds	r3, #6
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <IPCC_SetDefaultCallbacks+0x48>)
 80043fe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d9ec      	bls.n	80043e6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	080043a5 	.word	0x080043a5
 8004420:	080043bf 	.word	0x080043bf

08004424 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004438:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223f      	movs	r2, #63	@ 0x3f
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004450:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58000400 	.word	0x58000400

0800446c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004470:	4b04      	ldr	r3, [pc, #16]	@ (8004484 <HAL_PWREx_GetVoltageRange+0x18>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	58000400 	.word	0x58000400

08004488 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449a:	d101      	bne.n	80044a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_RCC_HSE_Enable>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_RCC_HSE_Disable>:
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
}
 80044de:	bf00      	nop
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_RCC_HSE_IsReady>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044fa:	d101      	bne.n	8004500 <LL_RCC_HSE_IsReady+0x18>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <LL_RCC_HSE_IsReady+0x1a>
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_RCC_HSI_Enable>:
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800451a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_RCC_HSI_Disable>:
{
 800452a:	b480      	push	{r7}
 800452c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]
}
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <LL_RCC_HSI_IsReady>:
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455a:	d101      	bne.n	8004560 <LL_RCC_HSI_IsReady+0x18>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <LL_RCC_HSI_IsReady+0x1a>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <LL_RCC_HSI_SetCalibTrimming>:
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	061b      	lsls	r3, r3, #24
 8004582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_RCC_HSI48_Enable>:
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_RCC_HSI48_Disable>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_RCC_HSI48_IsReady>:
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d101      	bne.n	80045f2 <LL_RCC_HSI48_IsReady+0x18>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <LL_RCC_HSI48_IsReady+0x1a>
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_LSE_Enable>:
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_RCC_LSE_Disable>:
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_RCC_LSE_EnableBypass>:
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_RCC_LSE_DisableBypass>:
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <LL_RCC_LSE_IsReady>:
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800468a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d101      	bne.n	800469e <LL_RCC_LSE_IsReady+0x18>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_RCC_LSE_IsReady+0x1a>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <LL_RCC_LSI1_Enable>:
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80046c2:	bf00      	nop
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_RCC_LSI1_Disable>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <LL_RCC_LSI1_IsReady>:
{
 80046ee:	b480      	push	{r7}
 80046f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80046f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d101      	bne.n	8004706 <LL_RCC_LSI1_IsReady+0x18>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_RCC_LSI1_IsReady+0x1a>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_RCC_LSI2_Enable>:
{
 8004712:	b480      	push	{r7}
 8004714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_RCC_LSI2_Disable>:
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <LL_RCC_LSI2_IsReady>:
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b08      	cmp	r3, #8
 8004768:	d101      	bne.n	800476e <LL_RCC_LSI2_IsReady+0x18>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <LL_RCC_LSI2_IsReady+0x1a>
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_RCC_LSI2_SetTrimming>:
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_MSI_Enable>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_MSI_Disable>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6013      	str	r3, [r2, #0]
}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_RCC_MSI_IsReady>:
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d101      	bne.n	80047fa <LL_RCC_MSI_IsReady+0x16>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <LL_RCC_MSI_IsReady+0x18>
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <LL_RCC_MSI_SetRange>:
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <LL_RCC_MSI_GetRange>:
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800483e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2bb0      	cmp	r3, #176	@ 0xb0
 8004844:	d901      	bls.n	800484a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004846:	23b0      	movs	r3, #176	@ 0xb0
 8004848:	607b      	str	r3, [r7, #4]
  return msiRange;
 800484a:	687b      	ldr	r3, [r7, #4]
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_RCC_SetSysClkSource>:
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 0203 	bic.w	r2, r3, #3
 8004894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_RCC_GetSysClkSource>:
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_RCC_SetAHBPrescaler>:
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80048fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <LL_RCC_SetAHB4Prescaler>:
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800491e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004922:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004926:	f023 020f 	bic.w	r2, r3, #15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_RCC_SetAPB1Prescaler>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004956:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_RCC_SetAPB2Prescaler>:
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_RCC_GetAHBPrescaler>:
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_RCC_GetAHB4Prescaler>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_GetAPB1Prescaler>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_GetAPB2Prescaler>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a28:	6013      	str	r3, [r2, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a46:	d101      	bne.n	8004a4c <LL_RCC_PLL_IsReady+0x18>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <LL_RCC_PLL_IsReady+0x1a>
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0303 	and.w	r3, r3, #3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d101      	bne.n	8004ad2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af2:	d101      	bne.n	8004af8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	d101      	bne.n	8004b1e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b3c:	d101      	bne.n	8004b42 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b60:	d101      	bne.n	8004b66 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b08d      	sub	sp, #52	@ 0x34
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e363      	b.n	800524e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 808d 	beq.w	8004cae <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b94:	f7ff fe89 	bl	80048aa <LL_RCC_GetSysClkSource>
 8004b98:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9a:	f7ff ff82 	bl	8004aa2 <LL_RCC_PLL_GetMainSource>
 8004b9e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x3e>
 8004ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	d147      	bne.n	8004c3c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d144      	bne.n	8004c3c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e347      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004bc2:	f7ff fe34 	bl	800482e <LL_RCC_MSI_GetRange>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	429c      	cmp	r4, r3
 8004bca:	d914      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fd2f 	bl	8005634 <RCC_SetFlashLatencyFromMSIRange>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e336      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fe0e 	bl	8004806 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fe32 	bl	8004858 <LL_RCC_MSI_SetCalibTrimming>
 8004bf4:	e013      	b.n	8004c1e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fe03 	bl	8004806 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fe27 	bl	8004858 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fd10 	bl	8005634 <RCC_SetFlashLatencyFromMSIRange>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e317      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c1e:	f000 fcc9 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4aa4      	ldr	r2, [pc, #656]	@ (8004eb8 <HAL_RCC_OscConfig+0x344>)
 8004c26:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c28:	4ba4      	ldr	r3, [pc, #656]	@ (8004ebc <HAL_RCC_OscConfig+0x348>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fd fc35 	bl	800249c <HAL_InitTick>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d039      	beq.n	8004cac <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e308      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01e      	beq.n	8004c82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c44:	f7ff fdb0 	bl	80047a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c48:	f7fd fc76 	bl	8002538 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c50:	f7fd fc72 	bl	8002538 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e2f5      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c62:	f7ff fdbf 	bl	80047e4 <LL_RCC_MSI_IsReady>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f1      	beq.n	8004c50 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fdc8 	bl	8004806 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fdec 	bl	8004858 <LL_RCC_MSI_SetCalibTrimming>
 8004c80:	e015      	b.n	8004cae <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c82:	f7ff fda0 	bl	80047c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c86:	f7fd fc57 	bl	8002538 <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c8e:	f7fd fc53 	bl	8002538 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e2d6      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004ca0:	f7ff fda0 	bl	80047e4 <LL_RCC_MSI_IsReady>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f1      	bne.n	8004c8e <HAL_RCC_OscConfig+0x11a>
 8004caa:	e000      	b.n	8004cae <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004cac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d047      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	f7ff fdf6 	bl	80048aa <LL_RCC_GetSysClkSource>
 8004cbe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc0:	f7ff feef 	bl	8004aa2 <LL_RCC_PLL_GetMainSource>
 8004cc4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x164>
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d108      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d134      	bne.n	8004d4a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e2b4      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cec:	d102      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x180>
 8004cee:	f7ff fbdd 	bl	80044ac <LL_RCC_HSE_Enable>
 8004cf2:	e001      	b.n	8004cf8 <HAL_RCC_OscConfig+0x184>
 8004cf4:	f7ff fbe9 	bl	80044ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fc1a 	bl	8002538 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d08:	f7fd fc16 	bl	8002538 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b64      	cmp	r3, #100	@ 0x64
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e299      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d1a:	f7ff fbe5 	bl	80044e8 <LL_RCC_HSE_IsReady>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f1      	beq.n	8004d08 <HAL_RCC_OscConfig+0x194>
 8004d24:	e011      	b.n	8004d4a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fd fc07 	bl	8002538 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2e:	f7fd fc03 	bl	8002538 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	@ 0x64
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e286      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d40:	f7ff fbd2 	bl	80044e8 <LL_RCC_HSE_IsReady>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f1      	bne.n	8004d2e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d56:	f7ff fda8 	bl	80048aa <LL_RCC_GetSysClkSource>
 8004d5a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5c:	f7ff fea1 	bl	8004aa2 <LL_RCC_PLL_GetMainSource>
 8004d60:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_OscConfig+0x200>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d10e      	bne.n	8004d8c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d10b      	bne.n	8004d8c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e266      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fbf1 	bl	800456c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d8a:	e031      	b.n	8004df0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d019      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d94:	f7ff fbba 	bl	800450c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fd fbce 	bl	8002538 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da0:	f7fd fbca 	bl	8002538 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e24d      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004db2:	f7ff fbc9 	bl	8004548 <LL_RCC_HSI_IsReady>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f1      	beq.n	8004da0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fbd3 	bl	800456c <LL_RCC_HSI_SetCalibTrimming>
 8004dc6:	e013      	b.n	8004df0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc8:	f7ff fbaf 	bl	800452a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fbb4 	bl	8002538 <HAL_GetTick>
 8004dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd4:	f7fd fbb0 	bl	8002538 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e233      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004de6:	f7ff fbaf 	bl	8004548 <LL_RCC_HSI_IsReady>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f1      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a3 	beq.w	8004f50 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d076      	beq.n	8004f00 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d046      	beq.n	8004eac <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e1e:	f7ff fc66 	bl	80046ee <LL_RCC_LSI1_IsReady>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d113      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e28:	f7ff fc3f 	bl	80046aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e2c:	f7fd fb84 	bl	8002538 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e34:	f7fd fb80 	bl	8002538 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e203      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e46:	f7ff fc52 	bl	80046ee <LL_RCC_LSI1_IsReady>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f1      	beq.n	8004e34 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004e50:	f7ff fc5f 	bl	8004712 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd fb70 	bl	8002538 <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e5c:	f7fd fb6c 	bl	8002538 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1ef      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e6e:	f7ff fc72 	bl	8004756 <LL_RCC_LSI2_IsReady>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f1      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fc7c 	bl	800477a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004e82:	f7ff fc23 	bl	80046cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd fb57 	bl	8002538 <HAL_GetTick>
 8004e8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e8e:	f7fd fb53 	bl	8002538 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1d6      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ea0:	f7ff fc25 	bl	80046ee <LL_RCC_LSI1_IsReady>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f1      	bne.n	8004e8e <HAL_RCC_OscConfig+0x31a>
 8004eaa:	e051      	b.n	8004f50 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004eac:	f7ff fbfd 	bl	80046aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd fb42 	bl	8002538 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004eb6:	e00c      	b.n	8004ed2 <HAL_RCC_OscConfig+0x35e>
 8004eb8:	20000008 	.word	0x20000008
 8004ebc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ec0:	f7fd fb3a 	bl	8002538 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1bd      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ed2:	f7ff fc0c 	bl	80046ee <LL_RCC_LSI1_IsReady>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f1      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004edc:	f7ff fc2a 	bl	8004734 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ee2:	f7fd fb29 	bl	8002538 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1ac      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ef4:	f7ff fc2f 	bl	8004756 <LL_RCC_LSI2_IsReady>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f1      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x36e>
 8004efe:	e027      	b.n	8004f50 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f00:	f7ff fc18 	bl	8004734 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7fd fb18 	bl	8002538 <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f0c:	f7fd fb14 	bl	8002538 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e197      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f1e:	f7ff fc1a 	bl	8004756 <LL_RCC_LSI2_IsReady>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f1      	bne.n	8004f0c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f28:	f7ff fbd0 	bl	80046cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fd fb04 	bl	8002538 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f34:	f7fd fb00 	bl	8002538 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e183      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f46:	f7ff fbd2 	bl	80046ee <LL_RCC_LSI1_IsReady>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f1      	bne.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d05b      	beq.n	8005014 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5c:	4ba7      	ldr	r3, [pc, #668]	@ (80051fc <HAL_RCC_OscConfig+0x688>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d114      	bne.n	8004f92 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f68:	f7ff fa70 	bl	800444c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6c:	f7fd fae4 	bl	8002538 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fd fae0 	bl	8002538 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e163      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f86:	4b9d      	ldr	r3, [pc, #628]	@ (80051fc <HAL_RCC_OscConfig+0x688>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x42c>
 8004f9a:	f7ff fb30 	bl	80045fe <LL_RCC_LSE_Enable>
 8004f9e:	e00c      	b.n	8004fba <HAL_RCC_OscConfig+0x446>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d104      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x43e>
 8004fa8:	f7ff fb4b 	bl	8004642 <LL_RCC_LSE_EnableBypass>
 8004fac:	f7ff fb27 	bl	80045fe <LL_RCC_LSE_Enable>
 8004fb0:	e003      	b.n	8004fba <HAL_RCC_OscConfig+0x446>
 8004fb2:	f7ff fb35 	bl	8004620 <LL_RCC_LSE_Disable>
 8004fb6:	f7ff fb55 	bl	8004664 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d014      	beq.n	8004fec <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	f7fd fab9 	bl	8002538 <HAL_GetTick>
 8004fc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fca:	f7fd fab5 	bl	8002538 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e136      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fe0:	f7ff fb51 	bl	8004686 <LL_RCC_LSE_IsReady>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ef      	beq.n	8004fca <HAL_RCC_OscConfig+0x456>
 8004fea:	e013      	b.n	8005014 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fd faa4 	bl	8002538 <HAL_GetTick>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fd faa0 	bl	8002538 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e121      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800500a:	f7ff fb3c 	bl	8004686 <LL_RCC_LSE_IsReady>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ef      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02c      	beq.n	800507a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005028:	f7ff fab5 	bl	8004596 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fd fa84 	bl	8002538 <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005034:	f7fd fa80 	bl	8002538 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e103      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005046:	f7ff fac8 	bl	80045da <LL_RCC_HSI48_IsReady>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f1      	beq.n	8005034 <HAL_RCC_OscConfig+0x4c0>
 8005050:	e013      	b.n	800507a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005052:	f7ff fab1 	bl	80045b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005056:	f7fd fa6f 	bl	8002538 <HAL_GetTick>
 800505a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505e:	f7fd fa6b 	bl	8002538 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0ee      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005070:	f7ff fab3 	bl	80045da <LL_RCC_HSI48_IsReady>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f1      	bne.n	800505e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80e4 	beq.w	800524c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005084:	f7ff fc11 	bl	80048aa <LL_RCC_GetSysClkSource>
 8005088:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	2b02      	cmp	r3, #2
 8005098:	f040 80b4 	bne.w	8005204 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 0203 	and.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d123      	bne.n	80050f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d11c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d114      	bne.n	80050f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d10d      	bne.n	80050f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d106      	bne.n	80050f2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d05d      	beq.n	80051ae <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d058      	beq.n	80051aa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0a1      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800510a:	f7ff fc84 	bl	8004a16 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800510e:	f7fd fa13 	bl	8002538 <HAL_GetTick>
 8005112:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005116:	f7fd fa0f 	bl	8002538 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e092      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1ef      	bne.n	8005116 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <HAL_RCC_OscConfig+0x68c>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800514e:	0212      	lsls	r2, r2, #8
 8005150:	4311      	orrs	r1, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005156:	4311      	orrs	r1, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800515c:	4311      	orrs	r1, r2
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005162:	430a      	orrs	r2, r1
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005168:	4313      	orrs	r3, r2
 800516a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800516c:	f7ff fc44 	bl	80049f8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800517a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800517e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005180:	f7fd f9da 	bl	8002538 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd f9d6 	bl	8002538 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e059      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ef      	beq.n	8005188 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a8:	e050      	b.n	800524c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e04f      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d147      	bne.n	800524c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051bc:	f7ff fc1c 	bl	80049f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d0:	f7fd f9b2 	bl	8002538 <HAL_GetTick>
 80051d4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d8:	f7fd f9ae 	bl	8002538 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e031      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0ef      	beq.n	80051d8 <HAL_RCC_OscConfig+0x664>
 80051f8:	e028      	b.n	800524c <HAL_RCC_OscConfig+0x6d8>
 80051fa:	bf00      	nop
 80051fc:	58000400 	.word	0x58000400
 8005200:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d01e      	beq.n	8005248 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520a:	f7ff fc04 	bl	8004a16 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fd f993 	bl	8002538 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005216:	f7fd f98f 	bl	8002538 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e012      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ef      	bne.n	8005216 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <HAL_RCC_OscConfig+0x6e4>)
 8005242:	4013      	ands	r3, r2
 8005244:	60cb      	str	r3, [r1, #12]
 8005246:	e001      	b.n	800524c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3734      	adds	r7, #52	@ 0x34
 8005252:	46bd      	mov	sp, r7
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	bf00      	nop
 8005258:	eefefffc 	.word	0xeefefffc

0800525c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e12d      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005270:	4b98      	ldr	r3, [pc, #608]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d91b      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b95      	ldr	r3, [pc, #596]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f023 0207 	bic.w	r2, r3, #7
 8005286:	4993      	ldr	r1, [pc, #588]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	4313      	orrs	r3, r2
 800528c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528e:	f7fd f953 	bl	8002538 <HAL_GetTick>
 8005292:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005296:	f7fd f94f 	bl	8002538 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e111      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a8:	4b8a      	ldr	r3, [pc, #552]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d1ef      	bne.n	8005296 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fafb 	bl	80048c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052cc:	f7fd f934 	bl	8002538 <HAL_GetTick>
 80052d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052d4:	f7fd f930 	bl	8002538 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e0f2      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052e6:	f7ff fbe8 	bl	8004aba <LL_RCC_IsActiveFlag_HPRE>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f1      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d016      	beq.n	800532a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff faf2 	bl	80048ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005306:	f7fd f917 	bl	8002538 <HAL_GetTick>
 800530a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800530c:	e008      	b.n	8005320 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800530e:	f7fd f913 	bl	8002538 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0d5      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005320:	f7ff fbdd 	bl	8004ade <LL_RCC_IsActiveFlag_C2HPRE>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f1      	beq.n	800530e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff faeb 	bl	8004916 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005340:	f7fd f8fa 	bl	8002538 <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005348:	f7fd f8f6 	bl	8002538 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0b8      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800535a:	f7ff fbd3 	bl	8004b04 <LL_RCC_IsActiveFlag_SHDHPRE>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f1      	beq.n	8005348 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d016      	beq.n	800539e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fae5 	bl	8004944 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800537a:	f7fd f8dd 	bl	8002538 <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005382:	f7fd f8d9 	bl	8002538 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e09b      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005394:	f7ff fbc9 	bl	8004b2a <LL_RCC_IsActiveFlag_PPRE1>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f1      	beq.n	8005382 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fadb 	bl	800496c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053b6:	f7fd f8bf 	bl	8002538 <HAL_GetTick>
 80053ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053be:	f7fd f8bb 	bl	8002538 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e07d      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053d0:	f7ff fbbd 	bl	8004b4e <LL_RCC_IsActiveFlag_PPRE2>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f1      	beq.n	80053be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d043      	beq.n	800546e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d106      	bne.n	80053fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80053ee:	f7ff f87b 	bl	80044e8 <LL_RCC_HSE_IsReady>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d11e      	bne.n	8005436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e067      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d106      	bne.n	8005412 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005404:	f7ff fb16 	bl	8004a34 <LL_RCC_PLL_IsReady>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d113      	bne.n	8005436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e05c      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800541a:	f7ff f9e3 	bl	80047e4 <LL_RCC_MSI_IsReady>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d108      	bne.n	8005436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e051      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005428:	f7ff f88e 	bl	8004548 <LL_RCC_HSI_IsReady>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e04a      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fa21 	bl	8004882 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005440:	f7fd f87a 	bl	8002538 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	e00a      	b.n	800545e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005448:	f7fd f876 	bl	8002538 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e036      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	f7ff fa24 	bl	80048aa <LL_RCC_GetSysClkSource>
 8005462:	4602      	mov	r2, r0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	429a      	cmp	r2, r3
 800546c:	d1ec      	bne.n	8005448 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800546e:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d21b      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547c:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f023 0207 	bic.w	r2, r3, #7
 8005484:	4913      	ldr	r1, [pc, #76]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	4313      	orrs	r3, r2
 800548a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548c:	f7fd f854 	bl	8002538 <HAL_GetTick>
 8005490:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005494:	f7fd f850 	bl	8002538 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e012      	b.n	80054cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <HAL_RCC_ClockConfig+0x278>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d1ef      	bne.n	8005494 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054b4:	f000 f87e 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4a07      	ldr	r2, [pc, #28]	@ (80054d8 <HAL_RCC_ClockConfig+0x27c>)
 80054bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80054be:	f7fd f847 	bl	8002550 <HAL_GetTickPrio>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fc ffe9 	bl	800249c <HAL_InitTick>
 80054ca:	4603      	mov	r3, r0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	58004000 	.word	0x58004000
 80054d8:	20000008 	.word	0x20000008

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e2:	f7ff f9e2 	bl	80048aa <LL_RCC_GetSysClkSource>
 80054e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80054ee:	f7ff f99e 	bl	800482e <LL_RCC_MSI_GetRange>
 80054f2:	4603      	mov	r3, r0
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a2b      	ldr	r2, [pc, #172]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e04b      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d102      	bne.n	8005510 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800550a:	4b28      	ldr	r3, [pc, #160]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e045      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b08      	cmp	r3, #8
 8005514:	d10a      	bne.n	800552c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005516:	f7fe ffb7 	bl	8004488 <LL_RCC_HSE_IsEnabledDiv2>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d102      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005520:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e03a      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005526:	4b22      	ldr	r3, [pc, #136]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e037      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800552c:	f7ff fab9 	bl	8004aa2 <LL_RCC_PLL_GetMainSource>
 8005530:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d003      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0x64>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b03      	cmp	r3, #3
 800553c:	d003      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0x6a>
 800553e:	e00d      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005540:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005542:	60bb      	str	r3, [r7, #8]
        break;
 8005544:	e015      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005546:	f7fe ff9f 	bl	8004488 <LL_RCC_HSE_IsEnabledDiv2>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005550:	4b16      	ldr	r3, [pc, #88]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005552:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005554:	e00d      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005556:	4b16      	ldr	r3, [pc, #88]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005558:	60bb      	str	r3, [r7, #8]
        break;
 800555a:	e00a      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800555c:	f7ff f967 	bl	800482e <LL_RCC_MSI_GetRange>
 8005560:	4603      	mov	r3, r0
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4a0f      	ldr	r2, [pc, #60]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556e:	60bb      	str	r3, [r7, #8]
        break;
 8005570:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005572:	f7ff fa71 	bl	8004a58 <LL_RCC_PLL_GetN>
 8005576:	4602      	mov	r2, r0
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	fb03 f402 	mul.w	r4, r3, r2
 800557e:	f7ff fa84 	bl	8004a8a <LL_RCC_PLL_GetDivider>
 8005582:	4603      	mov	r3, r0
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	3301      	adds	r3, #1
 8005588:	fbb4 f4f3 	udiv	r4, r4, r3
 800558c:	f7ff fa71 	bl	8004a72 <LL_RCC_PLL_GetR>
 8005590:	4603      	mov	r3, r0
 8005592:	0f5b      	lsrs	r3, r3, #29
 8005594:	3301      	adds	r3, #1
 8005596:	fbb4 f3f3 	udiv	r3, r4, r3
 800559a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	0800e8d0 	.word	0x0800e8d0
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	01e84800 	.word	0x01e84800

080055b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b4:	b598      	push	{r3, r4, r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055b8:	f7ff ff90 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 80055bc:	4604      	mov	r4, r0
 80055be:	f7ff f9e9 	bl	8004994 <LL_RCC_GetAHBPrescaler>
 80055c2:	4603      	mov	r3, r0
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	4a03      	ldr	r2, [pc, #12]	@ (80055d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80055cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd98      	pop	{r3, r4, r7, pc}
 80055d8:	0800e870 	.word	0x0800e870

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b598      	push	{r3, r4, r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055e0:	f7ff ffe8 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80055e4:	4604      	mov	r4, r0
 80055e6:	f7ff f9ef 	bl	80049c8 <LL_RCC_GetAPB1Prescaler>
 80055ea:	4603      	mov	r3, r0
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	4a04      	ldr	r2, [pc, #16]	@ (8005604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd98      	pop	{r3, r4, r7, pc}
 8005604:	0800e8b0 	.word	0x0800e8b0

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b598      	push	{r3, r4, r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800560c:	f7ff ffd2 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 8005610:	4604      	mov	r4, r0
 8005612:	f7ff f9e5 	bl	80049e0 <LL_RCC_GetAPB2Prescaler>
 8005616:	4603      	mov	r3, r0
 8005618:	0adb      	lsrs	r3, r3, #11
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	4a04      	ldr	r2, [pc, #16]	@ (8005630 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	fa24 f303 	lsr.w	r3, r4, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	bd98      	pop	{r3, r4, r7, pc}
 8005630:	0800e8b0 	.word	0x0800e8b0

08005634 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005640:	d903      	bls.n	800564a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005642:	4b15      	ldr	r3, [pc, #84]	@ (8005698 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e007      	b.n	800565a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a11      	ldr	r2, [pc, #68]	@ (8005698 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800565a:	f7ff f9a7 	bl	80049ac <LL_RCC_GetAHB4Prescaler>
 800565e:	4603      	mov	r3, r0
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a0a      	ldr	r2, [pc, #40]	@ (80056a0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	0c9c      	lsrs	r4, r3, #18
 800567e:	f7fe fef5 	bl	800446c <HAL_PWREx_GetVoltageRange>
 8005682:	4603      	mov	r3, r0
 8005684:	4619      	mov	r1, r3
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f80c 	bl	80056a4 <RCC_SetFlashLatency>
 800568c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}
 8005696:	bf00      	nop
 8005698:	0800e8d0 	.word	0x0800e8d0
 800569c:	0800e870 	.word	0x0800e870
 80056a0:	431bde83 	.word	0x431bde83

080056a4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b093      	sub	sp, #76	@ 0x4c
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80056ae:	4b37      	ldr	r3, [pc, #220]	@ (800578c <RCC_SetFlashLatency+0xe8>)
 80056b0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80056b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80056ba:	4a35      	ldr	r2, [pc, #212]	@ (8005790 <RCC_SetFlashLatency+0xec>)
 80056bc:	f107 031c 	add.w	r3, r7, #28
 80056c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80056c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80056c6:	4b33      	ldr	r3, [pc, #204]	@ (8005794 <RCC_SetFlashLatency+0xf0>)
 80056c8:	f107 040c 	add.w	r4, r7, #12
 80056cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80056d2:	2300      	movs	r3, #0
 80056d4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056dc:	d11a      	bne.n	8005714 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056de:	2300      	movs	r3, #0
 80056e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e2:	e013      	b.n	800570c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	3348      	adds	r3, #72	@ 0x48
 80056ea:	443b      	add	r3, r7
 80056ec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d807      	bhi.n	8005706 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	3348      	adds	r3, #72	@ 0x48
 80056fc:	443b      	add	r3, r7
 80056fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005702:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005704:	e020      	b.n	8005748 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005708:	3301      	adds	r3, #1
 800570a:	643b      	str	r3, [r7, #64]	@ 0x40
 800570c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570e:	2b03      	cmp	r3, #3
 8005710:	d9e8      	bls.n	80056e4 <RCC_SetFlashLatency+0x40>
 8005712:	e019      	b.n	8005748 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005718:	e013      	b.n	8005742 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	3348      	adds	r3, #72	@ 0x48
 8005720:	443b      	add	r3, r7
 8005722:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d807      	bhi.n	800573c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800572c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	3348      	adds	r3, #72	@ 0x48
 8005732:	443b      	add	r3, r7
 8005734:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005738:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800573a:	e005      	b.n	8005748 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800573c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573e:	3301      	adds	r3, #1
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005744:	2b02      	cmp	r3, #2
 8005746:	d9e8      	bls.n	800571a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005748:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <RCC_SetFlashLatency+0xf4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f023 0207 	bic.w	r2, r3, #7
 8005750:	4911      	ldr	r1, [pc, #68]	@ (8005798 <RCC_SetFlashLatency+0xf4>)
 8005752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005754:	4313      	orrs	r3, r2
 8005756:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005758:	f7fc feee 	bl	8002538 <HAL_GetTick>
 800575c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800575e:	e008      	b.n	8005772 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005760:	f7fc feea 	bl	8002538 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e007      	b.n	8005782 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <RCC_SetFlashLatency+0xf4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577c:	429a      	cmp	r2, r3
 800577e:	d1ef      	bne.n	8005760 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	374c      	adds	r7, #76	@ 0x4c
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	0800d5f0 	.word	0x0800d5f0
 8005790:	0800d600 	.word	0x0800d600
 8005794:	0800d60c 	.word	0x0800d60c
 8005798:	58004000 	.word	0x58004000

0800579c <LL_RCC_LSE_IsEnabled>:
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <LL_RCC_LSE_IsEnabled+0x18>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <LL_RCC_LSE_IsEnabled+0x1a>
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <LL_RCC_LSE_IsReady>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d101      	bne.n	80057d8 <LL_RCC_LSE_IsReady+0x18>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <LL_RCC_LSE_IsReady+0x1a>
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <LL_RCC_SetRFWKPClockSource>:
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80057ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_RCC_SetSMPSClockSource>:
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	f023 0203 	bic.w	r2, r3, #3
 8005822:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4313      	orrs	r3, r2
 800582a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_RCC_SetSMPSPrescaler>:
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800584a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4313      	orrs	r3, r2
 8005852:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <LL_RCC_SetUSARTClockSource>:
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <LL_RCC_SetLPUARTClockSource>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <LL_RCC_SetI2CClockSource>:
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80058dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <LL_RCC_SetLPTIMClockSource>:
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	43db      	mvns	r3, r3
 800590a:	401a      	ands	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <LL_RCC_SetSAIClockSource>:
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800593a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <LL_RCC_SetRNGClockSource>:
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_RCC_SetCLK48ClockSource>:
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_SetUSBClockSource>:
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff ffe3 	bl	800597e <LL_RCC_SetCLK48ClockSource>
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <LL_RCC_SetADCClockSource>:
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <LL_RCC_SetRTCClockSource>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <LL_RCC_GetRTCClockSource>:
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_ForceBackupDomainReset>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_RCC_PLLSAI1_Enable>:
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a88:	6013      	str	r3, [r2, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <LL_RCC_PLLSAI1_Disable>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aa6:	6013      	str	r3, [r2, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_RCC_PLLSAI1_IsReady>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ac4:	d101      	bne.n	8005aca <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b088      	sub	sp, #32
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005ade:	2300      	movs	r3, #0
 8005ae0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d034      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005afa:	d021      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005afc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b00:	d81b      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b06:	d01d      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b0c:	d815      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b16:	d110      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b26:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b28:	e00d      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f947 	bl	8005dc2 <RCCEx_PLLSAI1_ConfigNP>
 8005b34:	4603      	mov	r3, r0
 8005b36:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b38:	e005      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	77fb      	strb	r3, [r7, #31]
        break;
 8005b3e:	e002      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b46:	7ffb      	ldrb	r3, [r7, #31]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fee8 	bl	8005926 <LL_RCC_SetSAIClockSource>
 8005b56:	e001      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	7ffb      	ldrb	r3, [r7, #31]
 8005b5a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d046      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005b68:	f7ff ff56 	bl	8005a18 <LL_RCC_GetRTCClockSource>
 8005b6c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d03c      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b78:	f7fe fc68 	bl	800444c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d105      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ff30 	bl	80059ec <LL_RCC_SetRTCClockSource>
 8005b8c:	e02e      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005b98:	f7ff ff4b 	bl	8005a32 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005b9c:	f7ff ff5a 	bl	8005a54 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005bb8:	f7ff fdf0 	bl	800579c <LL_RCC_LSE_IsEnabled>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d114      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bc2:	f7fc fcb9 	bl	8002538 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bc8:	e00b      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bca:	f7fc fcb5 	bl	8002538 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d902      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	77fb      	strb	r3, [r7, #31]
              break;
 8005be0:	e004      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005be2:	f7ff fded 	bl	80057c0 <LL_RCC_LSE_IsReady>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d1ee      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	77bb      	strb	r3, [r7, #30]
 8005bf0:	e001      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf2:	7ffb      	ldrb	r3, [r7, #31]
 8005bf4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fe2a 	bl	8005860 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fe35 	bl	800588c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fe5d 	bl	80058f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fe52 	bl	80058f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fe2a 	bl	80058b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fe1f 	bl	80058b8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d022      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fe8d 	bl	80059aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c98:	d107      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ca8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb2:	d10b      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f8dd 	bl	8005e78 <RCCEx_PLLSAI1_ConfigNQ>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005cc2:	7ffb      	ldrb	r3, [r7, #31]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005cc8:	7ffb      	ldrb	r3, [r7, #31]
 8005cca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d02b      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce0:	d008      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cea:	d003      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fe2a 	bl	8005952 <LL_RCC_SetRNGClockSource>
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f7ff fe21 	bl	8005952 <LL_RCC_SetRNGClockSource>
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff fe34 	bl	800597e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005d1e:	d107      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d022      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fe3d 	bl	80059c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d5e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f8dd 	bl	8005f2e <RCCEx_PLLSAI1_ConfigNR>
 8005d74:	4603      	mov	r3, r0
 8005d76:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d78:	7ffb      	ldrb	r3, [r7, #31]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005d7e:	7ffb      	ldrb	r3, [r7, #31]
 8005d80:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fd26 	bl	80057e4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fd45 	bl	8005838 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fd2c 	bl	8005810 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005dce:	f7ff fe61 	bl	8005a94 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dd2:	f7fc fbb1 	bl	8002538 <HAL_GetTick>
 8005dd6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dd8:	e009      	b.n	8005dee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dda:	f7fc fbad 	bl	8002538 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d902      	bls.n	8005dee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	73fb      	strb	r3, [r7, #15]
      break;
 8005dec:	e004      	b.n	8005df8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dee:	f7ff fe60 	bl	8005ab2 <LL_RCC_PLLSAI1_IsReady>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f0      	bne.n	8005dda <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d137      	bne.n	8005e6e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e12:	4313      	orrs	r3, r2
 8005e14:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e2c:	f7ff fe23 	bl	8005a76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e30:	f7fc fb82 	bl	8002538 <HAL_GetTick>
 8005e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e36:	e009      	b.n	8005e4c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e38:	f7fc fb7e 	bl	8002538 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d902      	bls.n	8005e4c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	73fb      	strb	r3, [r7, #15]
        break;
 8005e4a:	e004      	b.n	8005e56 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e4c:	f7ff fe31 	bl	8005ab2 <LL_RCC_PLLSAI1_IsReady>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d1f0      	bne.n	8005e38 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d108      	bne.n	8005e6e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e84:	f7ff fe06 	bl	8005a94 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e88:	f7fc fb56 	bl	8002538 <HAL_GetTick>
 8005e8c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e8e:	e009      	b.n	8005ea4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e90:	f7fc fb52 	bl	8002538 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d902      	bls.n	8005ea4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea2:	e004      	b.n	8005eae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ea4:	f7ff fe05 	bl	8005ab2 <LL_RCC_PLLSAI1_IsReady>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d137      	bne.n	8005f24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ee2:	f7ff fdc8 	bl	8005a76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee6:	f7fc fb27 	bl	8002538 <HAL_GetTick>
 8005eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eec:	e009      	b.n	8005f02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eee:	f7fc fb23 	bl	8002538 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d902      	bls.n	8005f02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	73fb      	strb	r3, [r7, #15]
        break;
 8005f00:	e004      	b.n	8005f0c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f02:	f7ff fdd6 	bl	8005ab2 <LL_RCC_PLLSAI1_IsReady>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d1f0      	bne.n	8005eee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d108      	bne.n	8005f24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f20:	4313      	orrs	r3, r2
 8005f22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f3a:	f7ff fdab 	bl	8005a94 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f3e:	f7fc fafb 	bl	8002538 <HAL_GetTick>
 8005f42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f44:	e009      	b.n	8005f5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f46:	f7fc faf7 	bl	8002538 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d902      	bls.n	8005f5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	e004      	b.n	8005f64 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f5a:	f7ff fdaa 	bl	8005ab2 <LL_RCC_PLLSAI1_IsReady>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d137      	bne.n	8005fda <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f94:	4313      	orrs	r3, r2
 8005f96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f98:	f7ff fd6d 	bl	8005a76 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9c:	f7fc facc 	bl	8002538 <HAL_GetTick>
 8005fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fa2:	e009      	b.n	8005fb8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fa4:	f7fc fac8 	bl	8002538 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d902      	bls.n	8005fb8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8005fb6:	e004      	b.n	8005fc2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fb8:	f7ff fd7b 	bl	8005ab2 <LL_RCC_PLLSAI1_IsReady>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d1f0      	bne.n	8005fa4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e09f      	b.n	8006136 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fb ff8e 	bl	8001f2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006018:	4b49      	ldr	r3, [pc, #292]	@ (8006140 <HAL_RTC_Init+0x15c>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b10      	cmp	r3, #16
 8006022:	d07e      	beq.n	8006122 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	22ca      	movs	r2, #202	@ 0xca
 800602a:	625a      	str	r2, [r3, #36]	@ 0x24
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2253      	movs	r2, #83	@ 0x53
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8ab 	bl	8006190 <RTC_EnterInitMode>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	22ff      	movs	r2, #255	@ 0xff
 8006046:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2204      	movs	r2, #4
 800604c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e067      	b.n	8006126 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006068:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68d2      	ldr	r2, [r2, #12]
 8006090:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6919      	ldr	r1, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	041a      	lsls	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060b4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0203 	bic.w	r2, r2, #3
 80060c4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d113      	bne.n	8006114 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f829 	bl	8006144 <HAL_RTC_WaitForSynchro>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	22ff      	movs	r2, #255	@ 0xff
 80060fe:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2204      	movs	r2, #4
 8006104:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e010      	b.n	8006136 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	22ff      	movs	r2, #255	@ 0xff
 800611a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e001      	b.n	8006126 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40002800 	.word	0x40002800

08006144 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800615a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800615c:	f7fc f9ec 	bl	8002538 <HAL_GetTick>
 8006160:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006162:	e009      	b.n	8006178 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006164:	f7fc f9e8 	bl	8002538 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006172:	d901      	bls.n	8006178 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e007      	b.n	8006188 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ee      	beq.n	8006164 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d119      	bne.n	80061da <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061b0:	f7fc f9c2 	bl	8002538 <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061b6:	e009      	b.n	80061cc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061b8:	f7fc f9be 	bl	8002538 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061c6:	d901      	bls.n	80061cc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e007      	b.n	80061dc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ee      	beq.n	80061b8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e089      	b.n	8006312 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	22ca      	movs	r2, #202	@ 0xca
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2253      	movs	r2, #83	@ 0x53
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800622c:	f7fc f984 	bl	8002538 <HAL_GetTick>
 8006230:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006232:	e015      	b.n	8006260 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006234:	f7fc f980 	bl	8002538 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006242:	d90d      	bls.n	8006260 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	22ff      	movs	r2, #255	@ 0xff
 800624a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2203      	movs	r2, #3
 8006250:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e058      	b.n	8006312 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e2      	bne.n	8006234 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800627e:	f7fc f95b 	bl	8002538 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006284:	e015      	b.n	80062b2 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006286:	f7fc f957 	bl	8002538 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006294:	d90d      	bls.n	80062b2 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	22ff      	movs	r2, #255	@ 0xff
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2203      	movs	r2, #3
 80062a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e02f      	b.n	8006312 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0e2      	beq.n	8006286 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0207 	bic.w	r2, r2, #7
 80062ce:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6899      	ldr	r1, [r3, #8]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	430a      	orrs	r2, r1
 80062de:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062f6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	22ff      	movs	r2, #255	@ 0xff
 80062fe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e049      	b.n	80063c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7fb fe1f 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f000 f9b3 	bl	80066c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e036      	b.n	800644e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a17      	ldr	r2, [pc, #92]	@ (800645c <HAL_TIM_Base_Start_IT+0x94>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x44>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640a:	d115      	bne.n	8006438 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	4b13      	ldr	r3, [pc, #76]	@ (8006460 <HAL_TIM_Base_Start_IT+0x98>)
 8006414:	4013      	ands	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b06      	cmp	r3, #6
 800641c:	d015      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x82>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006424:	d011      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	e008      	b.n	800644a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e000      	b.n	800644c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40012c00 	.word	0x40012c00
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d020      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01b      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0202 	mvn.w	r2, #2
 8006498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8e9 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8db 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8ec 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d020      	beq.n	8006514 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01b      	beq.n	8006514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0204 	mvn.w	r2, #4
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8c3 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8b5 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8c6 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d020      	beq.n	8006560 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01b      	beq.n	8006560 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0208 	mvn.w	r2, #8
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f89d 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f88f 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8a0 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b00      	cmp	r3, #0
 8006568:	d020      	beq.n	80065ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01b      	beq.n	80065ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0210 	mvn.w	r2, #16
 800657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2208      	movs	r2, #8
 8006582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f877 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f869 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f87a 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0201 	mvn.w	r2, #1
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fb f854 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f8dd 	bl	80067b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8d5 	bl	80067cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00c      	beq.n	8006646 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f834 	bl	80066ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0220 	mvn.w	r2, #32
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f89d 	bl	80067a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <TIM_Base_SetConfig+0xd4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0x20>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e2:	d108      	bne.n	80066f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a27      	ldr	r2, [pc, #156]	@ (8006798 <TIM_Base_SetConfig+0xd4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_Base_SetConfig+0x52>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006704:	d007      	beq.n	8006716 <TIM_Base_SetConfig+0x52>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a24      	ldr	r2, [pc, #144]	@ (800679c <TIM_Base_SetConfig+0xd8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_Base_SetConfig+0x52>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a23      	ldr	r2, [pc, #140]	@ (80067a0 <TIM_Base_SetConfig+0xdc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a12      	ldr	r2, [pc, #72]	@ (8006798 <TIM_Base_SetConfig+0xd4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_Base_SetConfig+0xa0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a11      	ldr	r2, [pc, #68]	@ (800679c <TIM_Base_SetConfig+0xd8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0xa0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a10      	ldr	r2, [pc, #64]	@ (80067a0 <TIM_Base_SetConfig+0xdc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d103      	bne.n	800676c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d105      	bne.n	800678a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f023 0201 	bic.w	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	611a      	str	r2, [r3, #16]
  }
}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <LL_RCC_GetUSARTClockSource>:
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80067e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4013      	ands	r3, r2
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <LL_RCC_GetLPUARTClockSource>:
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4013      	ands	r3, r2
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e042      	b.n	80068b8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fb fbb9 	bl	8001fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2224      	movs	r2, #36	@ 0x24
 800684e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fe32 	bl	80074d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fc07 	bl	8007084 <UART_SetConfig>
 8006876:	4603      	mov	r3, r0
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e01b      	b.n	80068b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800688e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800689e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 feb1 	bl	8007618 <UART_CheckIdleState>
 80068b6:	4603      	mov	r3, r0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	@ 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d167      	bne.n	80069a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Transmit_DMA+0x24>
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e060      	b.n	80069aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2221      	movs	r2, #33	@ 0x21
 800690a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d028      	beq.n	8006968 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800691a:	4a26      	ldr	r2, [pc, #152]	@ (80069b4 <HAL_UART_Transmit_DMA+0xf4>)
 800691c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006922:	4a25      	ldr	r2, [pc, #148]	@ (80069b8 <HAL_UART_Transmit_DMA+0xf8>)
 8006924:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800692a:	4a24      	ldr	r2, [pc, #144]	@ (80069bc <HAL_UART_Transmit_DMA+0xfc>)
 800692c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006932:	2200      	movs	r2, #0
 8006934:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693e:	4619      	mov	r1, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3328      	adds	r3, #40	@ 0x28
 8006946:	461a      	mov	r2, r3
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	f7fd f8a9 	bl	8003aa0 <HAL_DMA_Start_IT>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2210      	movs	r2, #16
 8006958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e020      	b.n	80069aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2240      	movs	r2, #64	@ 0x40
 800696e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	613b      	str	r3, [r7, #16]
   return(result);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006990:	623a      	str	r2, [r7, #32]
 8006992:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	69f9      	ldr	r1, [r7, #28]
 8006996:	6a3a      	ldr	r2, [r7, #32]
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	61bb      	str	r3, [r7, #24]
   return(result);
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e5      	bne.n	8006970 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e000      	b.n	80069aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	@ 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08007995 	.word	0x08007995
 80069b8:	08007a2f 	.word	0x08007a2f
 80069bc:	08007a4b 	.word	0x08007a4b

080069c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b0ba      	sub	sp, #232	@ 0xe8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069ee:	4013      	ands	r3, r2
 80069f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80069f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11b      	bne.n	8006a34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d015      	beq.n	8006a34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 8300 	beq.w	800702a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
      }
      return;
 8006a32:	e2fa      	b.n	800702a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8123 	beq.w	8006c84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a42:	4b8d      	ldr	r3, [pc, #564]	@ (8006c78 <HAL_UART_IRQHandler+0x2b8>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a4e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c7c <HAL_UART_IRQHandler+0x2bc>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8116 	beq.w	8006c84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d011      	beq.n	8006a88 <HAL_UART_IRQHandler+0xc8>
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7e:	f043 0201 	orr.w	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d011      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xf8>
 8006a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aae:	f043 0204 	orr.w	r2, r3, #4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d011      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x128>
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ade:	f043 0202 	orr.w	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d017      	beq.n	8006b24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d105      	bne.n	8006b0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b04:	4b5c      	ldr	r3, [pc, #368]	@ (8006c78 <HAL_UART_IRQHandler+0x2b8>)
 8006b06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2208      	movs	r2, #8
 8006b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1a:	f043 0208 	orr.w	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d012      	beq.n	8006b56 <HAL_UART_IRQHandler+0x196>
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00c      	beq.n	8006b56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4c:	f043 0220 	orr.w	r2, r3, #32
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8266 	beq.w	800702e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d013      	beq.n	8006b96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b40      	cmp	r3, #64	@ 0x40
 8006bac:	d005      	beq.n	8006bba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d054      	beq.n	8006c64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fe84 	bl	80078c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bca:	2b40      	cmp	r3, #64	@ 0x40
 8006bcc:	d146      	bne.n	8006c5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006be8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1d9      	bne.n	8006bce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d017      	beq.n	8006c54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2a:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <HAL_UART_IRQHandler+0x2c0>)
 8006c2c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd f80d 	bl	8003c54 <HAL_DMA_Abort_IT>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d019      	beq.n	8006c74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c52:	e00f      	b.n	8006c74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9ff 	bl	8007058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5a:	e00b      	b.n	8006c74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f9fb 	bl	8007058 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c62:	e007      	b.n	8006c74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9f7 	bl	8007058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c72:	e1dc      	b.n	800702e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c74:	bf00      	nop
    return;
 8006c76:	e1da      	b.n	800702e <HAL_UART_IRQHandler+0x66e>
 8006c78:	10000001 	.word	0x10000001
 8006c7c:	04000120 	.word	0x04000120
 8006c80:	08007acb 	.word	0x08007acb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 8170 	bne.w	8006f6e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8169 	beq.w	8006f6e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8162 	beq.w	8006f6e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2210      	movs	r2, #16
 8006cb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	f040 80d8 	bne.w	8006e72 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80af 	beq.w	8006e38 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ce0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	f080 80a7 	bcs.w	8006e38 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 8087 	bne.w	8006e16 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1da      	bne.n	8006d08 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e1      	bne.n	8006d52 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006db8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de4:	f023 0310 	bic.w	r3, r3, #16
 8006de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006df6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006df8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e4      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fc fec0 	bl	8003b96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f91b 	bl	800706c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e36:	e0fc      	b.n	8007032 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f040 80f5 	bne.w	8007032 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	f040 80eb 	bne.w	8007032 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f8fe 	bl	800706c <HAL_UARTEx_RxEventCallback>
      return;
 8006e70:	e0df      	b.n	8007032 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80d1 	beq.w	8007036 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80cc 	beq.w	8007036 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e4      	bne.n	8006e9e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006efc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e1      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 0310 	bic.w	r3, r3, #16
 8006f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	617b      	str	r3, [r7, #20]
   return(result);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e4      	bne.n	8006f24 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f880 	bl	800706c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f6c:	e063      	b.n	8007036 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <HAL_UART_IRQHandler+0x5d8>
 8006f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fdd7 	bl	8007b44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f96:	e051      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d014      	beq.n	8006fce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d03a      	beq.n	800703a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
    }
    return;
 8006fcc:	e035      	b.n	800703a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_UART_IRQHandler+0x62e>
 8006fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fd81 	bl	8007aee <UART_EndTransmit_IT>
    return;
 8006fec:	e026      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_UART_IRQHandler+0x64e>
 8006ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fdb0 	bl	8007b6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800700c:	e016      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007012:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d010      	beq.n	800703c <HAL_UART_IRQHandler+0x67c>
 800701a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701e:	2b00      	cmp	r3, #0
 8007020:	da0c      	bge.n	800703c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fd98 	bl	8007b58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007028:	e008      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
      return;
 800702a:	bf00      	nop
 800702c:	e006      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
    return;
 800702e:	bf00      	nop
 8007030:	e004      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
      return;
 8007032:	bf00      	nop
 8007034:	e002      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
      return;
 8007036:	bf00      	nop
 8007038:	e000      	b.n	800703c <HAL_UART_IRQHandler+0x67c>
    return;
 800703a:	bf00      	nop
  }
}
 800703c:	37e8      	adds	r7, #232	@ 0xe8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop

08007044 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007088:	b08c      	sub	sp, #48	@ 0x30
 800708a:	af00      	add	r7, sp, #0
 800708c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	431a      	orrs	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4baf      	ldr	r3, [pc, #700]	@ (8007370 <UART_SetConfig+0x2ec>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070bc:	430b      	orrs	r3, r1
 80070be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4aa4      	ldr	r2, [pc, #656]	@ (8007374 <UART_SetConfig+0x2f0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ec:	4313      	orrs	r3, r2
 80070ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80070fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007104:	430b      	orrs	r3, r1
 8007106:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	f023 010f 	bic.w	r1, r3, #15
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a95      	ldr	r2, [pc, #596]	@ (8007378 <UART_SetConfig+0x2f4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d125      	bne.n	8007174 <UART_SetConfig+0xf0>
 8007128:	2003      	movs	r0, #3
 800712a:	f7ff fb59 	bl	80067e0 <LL_RCC_GetUSARTClockSource>
 800712e:	4603      	mov	r3, r0
 8007130:	2b03      	cmp	r3, #3
 8007132:	d81b      	bhi.n	800716c <UART_SetConfig+0xe8>
 8007134:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <UART_SetConfig+0xb8>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	0800714d 	.word	0x0800714d
 8007140:	0800715d 	.word	0x0800715d
 8007144:	08007155 	.word	0x08007155
 8007148:	08007165 	.word	0x08007165
 800714c:	2301      	movs	r3, #1
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007152:	e042      	b.n	80071da <UART_SetConfig+0x156>
 8007154:	2302      	movs	r3, #2
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715a:	e03e      	b.n	80071da <UART_SetConfig+0x156>
 800715c:	2304      	movs	r3, #4
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e03a      	b.n	80071da <UART_SetConfig+0x156>
 8007164:	2308      	movs	r3, #8
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e036      	b.n	80071da <UART_SetConfig+0x156>
 800716c:	2310      	movs	r3, #16
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e032      	b.n	80071da <UART_SetConfig+0x156>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a7e      	ldr	r2, [pc, #504]	@ (8007374 <UART_SetConfig+0x2f0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d12a      	bne.n	80071d4 <UART_SetConfig+0x150>
 800717e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007182:	f7ff fb3d 	bl	8006800 <LL_RCC_GetLPUARTClockSource>
 8007186:	4603      	mov	r3, r0
 8007188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800718c:	d01a      	beq.n	80071c4 <UART_SetConfig+0x140>
 800718e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007192:	d81b      	bhi.n	80071cc <UART_SetConfig+0x148>
 8007194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007198:	d00c      	beq.n	80071b4 <UART_SetConfig+0x130>
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800719e:	d815      	bhi.n	80071cc <UART_SetConfig+0x148>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <UART_SetConfig+0x128>
 80071a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a8:	d008      	beq.n	80071bc <UART_SetConfig+0x138>
 80071aa:	e00f      	b.n	80071cc <UART_SetConfig+0x148>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b2:	e012      	b.n	80071da <UART_SetConfig+0x156>
 80071b4:	2302      	movs	r3, #2
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ba:	e00e      	b.n	80071da <UART_SetConfig+0x156>
 80071bc:	2304      	movs	r3, #4
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c2:	e00a      	b.n	80071da <UART_SetConfig+0x156>
 80071c4:	2308      	movs	r3, #8
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ca:	e006      	b.n	80071da <UART_SetConfig+0x156>
 80071cc:	2310      	movs	r3, #16
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d2:	e002      	b.n	80071da <UART_SetConfig+0x156>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a65      	ldr	r2, [pc, #404]	@ (8007374 <UART_SetConfig+0x2f0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	f040 8097 	bne.w	8007314 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d823      	bhi.n	8007236 <UART_SetConfig+0x1b2>
 80071ee:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <UART_SetConfig+0x170>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007237 	.word	0x08007237
 80071fc:	08007221 	.word	0x08007221
 8007200:	08007237 	.word	0x08007237
 8007204:	08007227 	.word	0x08007227
 8007208:	08007237 	.word	0x08007237
 800720c:	08007237 	.word	0x08007237
 8007210:	08007237 	.word	0x08007237
 8007214:	0800722f 	.word	0x0800722f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007218:	f7fe f9e0 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 800721c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800721e:	e010      	b.n	8007242 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007220:	4b56      	ldr	r3, [pc, #344]	@ (800737c <UART_SetConfig+0x2f8>)
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007224:	e00d      	b.n	8007242 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007226:	f7fe f959 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800722a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800722c:	e009      	b.n	8007242 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800722e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007234:	e005      	b.n	8007242 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 812b 	beq.w	80074a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	4a4c      	ldr	r2, [pc, #304]	@ (8007380 <UART_SetConfig+0x2fc>)
 8007250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007254:	461a      	mov	r2, r3
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	fbb3 f3f2 	udiv	r3, r3, r2
 800725c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	429a      	cmp	r2, r3
 800726c:	d305      	bcc.n	800727a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	429a      	cmp	r2, r3
 8007278:	d903      	bls.n	8007282 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007280:	e10e      	b.n	80074a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	2200      	movs	r2, #0
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	60fa      	str	r2, [r7, #12]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	4a3c      	ldr	r2, [pc, #240]	@ (8007380 <UART_SetConfig+0x2fc>)
 8007290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007294:	b29b      	uxth	r3, r3
 8007296:	2200      	movs	r2, #0
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072a4:	f7f9 faaa 	bl	80007fc <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4610      	mov	r0, r2
 80072ae:	4619      	mov	r1, r3
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	020b      	lsls	r3, r1, #8
 80072ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072be:	0202      	lsls	r2, r0, #8
 80072c0:	6979      	ldr	r1, [r7, #20]
 80072c2:	6849      	ldr	r1, [r1, #4]
 80072c4:	0849      	lsrs	r1, r1, #1
 80072c6:	2000      	movs	r0, #0
 80072c8:	460c      	mov	r4, r1
 80072ca:	4605      	mov	r5, r0
 80072cc:	eb12 0804 	adds.w	r8, r2, r4
 80072d0:	eb43 0905 	adc.w	r9, r3, r5
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	469a      	mov	sl, r3
 80072dc:	4693      	mov	fp, r2
 80072de:	4652      	mov	r2, sl
 80072e0:	465b      	mov	r3, fp
 80072e2:	4640      	mov	r0, r8
 80072e4:	4649      	mov	r1, r9
 80072e6:	f7f9 fa89 	bl	80007fc <__aeabi_uldivmod>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4613      	mov	r3, r2
 80072f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f8:	d308      	bcc.n	800730c <UART_SetConfig+0x288>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007300:	d204      	bcs.n	800730c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6a3a      	ldr	r2, [r7, #32]
 8007308:	60da      	str	r2, [r3, #12]
 800730a:	e0c9      	b.n	80074a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007312:	e0c5      	b.n	80074a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800731c:	d16d      	bne.n	80073fa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800731e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007322:	3b01      	subs	r3, #1
 8007324:	2b07      	cmp	r3, #7
 8007326:	d82d      	bhi.n	8007384 <UART_SetConfig+0x300>
 8007328:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <UART_SetConfig+0x2ac>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007351 	.word	0x08007351
 8007334:	08007359 	.word	0x08007359
 8007338:	08007385 	.word	0x08007385
 800733c:	0800735f 	.word	0x0800735f
 8007340:	08007385 	.word	0x08007385
 8007344:	08007385 	.word	0x08007385
 8007348:	08007385 	.word	0x08007385
 800734c:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007350:	f7fe f95a 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8007354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007356:	e01b      	b.n	8007390 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b08      	ldr	r3, [pc, #32]	@ (800737c <UART_SetConfig+0x2f8>)
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800735c:	e018      	b.n	8007390 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fe f8bd 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8007362:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007364:	e014      	b.n	8007390 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800736c:	e010      	b.n	8007390 <UART_SetConfig+0x30c>
 800736e:	bf00      	nop
 8007370:	cfff69f3 	.word	0xcfff69f3
 8007374:	40008000 	.word	0x40008000
 8007378:	40013800 	.word	0x40013800
 800737c:	00f42400 	.word	0x00f42400
 8007380:	0800e910 	.word	0x0800e910
      default:
        pclk = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800738e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8084 	beq.w	80074a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739c:	4a4b      	ldr	r2, [pc, #300]	@ (80074cc <UART_SetConfig+0x448>)
 800739e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073aa:	005a      	lsls	r2, r3, #1
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	441a      	add	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d916      	bls.n	80073f2 <UART_SetConfig+0x36e>
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ca:	d212      	bcs.n	80073f2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f023 030f 	bic.w	r3, r3, #15
 80073d4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	8bfb      	ldrh	r3, [r7, #30]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	8bfa      	ldrh	r2, [r7, #30]
 80073ee:	60da      	str	r2, [r3, #12]
 80073f0:	e056      	b.n	80074a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073f8:	e052      	b.n	80074a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	3b01      	subs	r3, #1
 8007400:	2b07      	cmp	r3, #7
 8007402:	d822      	bhi.n	800744a <UART_SetConfig+0x3c6>
 8007404:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <UART_SetConfig+0x388>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	0800742d 	.word	0x0800742d
 8007410:	08007435 	.word	0x08007435
 8007414:	0800744b 	.word	0x0800744b
 8007418:	0800743b 	.word	0x0800743b
 800741c:	0800744b 	.word	0x0800744b
 8007420:	0800744b 	.word	0x0800744b
 8007424:	0800744b 	.word	0x0800744b
 8007428:	08007443 	.word	0x08007443
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fe f8ec 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8007430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007432:	e010      	b.n	8007456 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007434:	4b26      	ldr	r3, [pc, #152]	@ (80074d0 <UART_SetConfig+0x44c>)
 8007436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007438:	e00d      	b.n	8007456 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743a:	f7fe f84f 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800743e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007440:	e009      	b.n	8007456 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007448:	e005      	b.n	8007456 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007454:	bf00      	nop
    }

    if (pclk != 0U)
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	2b00      	cmp	r3, #0
 800745a:	d021      	beq.n	80074a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	4a1a      	ldr	r2, [pc, #104]	@ (80074cc <UART_SetConfig+0x448>)
 8007462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007466:	461a      	mov	r2, r3
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	fbb3 f2f2 	udiv	r2, r3, r2
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	441a      	add	r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	fbb2 f3f3 	udiv	r3, r2, r3
 800747e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	2b0f      	cmp	r3, #15
 8007484:	d909      	bls.n	800749a <UART_SetConfig+0x416>
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800748c:	d205      	bcs.n	800749a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	b29a      	uxth	r2, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60da      	str	r2, [r3, #12]
 8007498:	e002      	b.n	80074a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2200      	movs	r2, #0
 80074b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3730      	adds	r7, #48	@ 0x30
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ca:	bf00      	nop
 80074cc:	0800e910 	.word	0x0800e910
 80074d0:	00f42400 	.word	0x00f42400

080074d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01a      	beq.n	80075ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075d2:	d10a      	bne.n	80075ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	605a      	str	r2, [r3, #4]
  }
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b098      	sub	sp, #96	@ 0x60
 800761c:	af02      	add	r7, sp, #8
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007628:	f7fa ff86 	bl	8002538 <HAL_GetTick>
 800762c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d12f      	bne.n	800769c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800763c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007644:	2200      	movs	r2, #0
 8007646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f88e 	bl	800776c <UART_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d022      	beq.n	800769c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800766a:	653b      	str	r3, [r7, #80]	@ 0x50
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007674:	647b      	str	r3, [r7, #68]	@ 0x44
 8007676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800767a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e063      	b.n	8007764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d149      	bne.n	800773e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b2:	2200      	movs	r2, #0
 80076b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f857 	bl	800776c <UART_WaitOnFlagUntilTimeout>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d03c      	beq.n	800773e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	623b      	str	r3, [r7, #32]
   return(result);
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e6      	bne.n	80076c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60fb      	str	r3, [r7, #12]
   return(result);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007716:	61fa      	str	r2, [r7, #28]
 8007718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	69b9      	ldr	r1, [r7, #24]
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	617b      	str	r3, [r7, #20]
   return(result);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e012      	b.n	8007764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2220      	movs	r2, #32
 800774a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3758      	adds	r7, #88	@ 0x58
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777c:	e04f      	b.n	800781e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007784:	d04b      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007786:	f7fa fed7 	bl	8002538 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <UART_WaitOnFlagUntilTimeout+0x30>
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e04e      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d037      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b80      	cmp	r3, #128	@ 0x80
 80077b2:	d034      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d031      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d110      	bne.n	80077ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2208      	movs	r2, #8
 80077ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f879 	bl	80078c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2208      	movs	r2, #8
 80077da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e029      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077f8:	d111      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f85f 	bl	80078c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e00f      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4013      	ands	r3, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	bf0c      	ite	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	2300      	movne	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	429a      	cmp	r2, r3
 800783a:	d0a0      	beq.n	800777e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007846:	b480      	push	{r7}
 8007848:	b08f      	sub	sp, #60	@ 0x3c
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	61fb      	str	r3, [r7, #28]
   return(result);
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800786e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3308      	adds	r3, #8
 800789e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a0:	61ba      	str	r2, [r7, #24]
 80078a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	613b      	str	r3, [r7, #16]
   return(result);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e5      	bne.n	8007880 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80078bc:	bf00      	nop
 80078be:	373c      	adds	r7, #60	@ 0x3c
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b095      	sub	sp, #84	@ 0x54
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80078f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e6      	bne.n	80078d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3308      	adds	r3, #8
 8007908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	61fb      	str	r3, [r7, #28]
   return(result);
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800792c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e3      	bne.n	8007902 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d118      	bne.n	8007974 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	647b      	str	r3, [r7, #68]	@ 0x44
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007960:	61bb      	str	r3, [r7, #24]
 8007962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	613b      	str	r3, [r7, #16]
   return(result);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e6      	bne.n	8007942 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007988:	bf00      	nop
 800798a:	3754      	adds	r7, #84	@ 0x54
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b090      	sub	sp, #64	@ 0x40
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d137      	bne.n	8007a20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80079b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	623b      	str	r3, [r7, #32]
   return(result);
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80079da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	69b9      	ldr	r1, [r7, #24]
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	617b      	str	r3, [r7, #20]
   return(result);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a1e:	e002      	b.n	8007a26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007a20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007a22:	f7f9 fd8d 	bl	8001540 <HAL_UART_TxCpltCallback>
}
 8007a26:	bf00      	nop
 8007a28:	3740      	adds	r7, #64	@ 0x40
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff fb01 	bl	8007044 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a72:	2b80      	cmp	r3, #128	@ 0x80
 8007a74:	d109      	bne.n	8007a8a <UART_DMAError+0x40>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b21      	cmp	r3, #33	@ 0x21
 8007a7a:	d106      	bne.n	8007a8a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f7ff fede 	bl	8007846 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a94:	2b40      	cmp	r3, #64	@ 0x40
 8007a96:	d109      	bne.n	8007aac <UART_DMAError+0x62>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b22      	cmp	r3, #34	@ 0x22
 8007a9c:	d106      	bne.n	8007aac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	f7ff ff0e 	bl	80078c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab2:	f043 0210 	orr.w	r2, r3, #16
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007abc:	6978      	ldr	r0, [r7, #20]
 8007abe:	f7ff facb 	bl	8007058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff fab9 	bl	8007058 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b088      	sub	sp, #32
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0a:	61fb      	str	r3, [r7, #28]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6979      	ldr	r1, [r7, #20]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	613b      	str	r3, [r7, #16]
   return(result);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7f9 fd02 	bl	8001540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b3c:	bf00      	nop
 8007b3e:	3720      	adds	r7, #32
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d101      	bne.n	8007b96 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e027      	b.n	8007be6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2224      	movs	r2, #36	@ 0x24
 8007ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0201 	bic.w	r2, r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007bc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e02d      	b.n	8007c66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2224      	movs	r2, #36	@ 0x24
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f850 	bl	8007cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e02d      	b.n	8007ce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2224      	movs	r2, #36	@ 0x24
 8007c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f812 	bl	8007cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d108      	bne.n	8007d0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d0c:	e031      	b.n	8007d72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d0e:	2308      	movs	r3, #8
 8007d10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d12:	2308      	movs	r3, #8
 8007d14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	0e5b      	lsrs	r3, r3, #25
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	0f5b      	lsrs	r3, r3, #29
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	7b3a      	ldrb	r2, [r7, #12]
 8007d3a:	4911      	ldr	r1, [pc, #68]	@ (8007d80 <UARTEx_SetNbDataToProcess+0x94>)
 8007d3c:	5c8a      	ldrb	r2, [r1, r2]
 8007d3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d42:	7b3a      	ldrb	r2, [r7, #12]
 8007d44:	490f      	ldr	r1, [pc, #60]	@ (8007d84 <UARTEx_SetNbDataToProcess+0x98>)
 8007d46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	7b7a      	ldrb	r2, [r7, #13]
 8007d58:	4909      	ldr	r1, [pc, #36]	@ (8007d80 <UARTEx_SetNbDataToProcess+0x94>)
 8007d5a:	5c8a      	ldrb	r2, [r1, r2]
 8007d5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d60:	7b7a      	ldrb	r2, [r7, #13]
 8007d62:	4908      	ldr	r1, [pc, #32]	@ (8007d84 <UARTEx_SetNbDataToProcess+0x98>)
 8007d64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	0800e928 	.word	0x0800e928
 8007d84:	0800e930 	.word	0x0800e930

08007d88 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d92:	f107 0308 	add.w	r3, r7, #8
 8007d96:	2218      	movs	r2, #24
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 f982 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007da0:	233f      	movs	r3, #63	@ 0x3f
 8007da2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007da4:	2381      	movs	r3, #129	@ 0x81
 8007da6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007da8:	1dfb      	adds	r3, r7, #7
 8007daa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007dac:	2301      	movs	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fbfe 	bl	80095b8 <hci_send_req>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da01      	bge.n	8007dc6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007dc2:	23ff      	movs	r3, #255	@ 0xff
 8007dc4:	e000      	b.n	8007dc8 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8007dd0:	b5b0      	push	{r4, r5, r7, lr}
 8007dd2:	b0ce      	sub	sp, #312	@ 0x138
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	460c      	mov	r4, r1
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007de6:	462a      	mov	r2, r5
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007df2:	4622      	mov	r2, r4
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dfa:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8007dfe:	4602      	mov	r2, r0
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e06:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007e16:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	f107 0210 	add.w	r2, r7, #16
 8007e20:	4413      	add	r3, r2
 8007e22:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007e26:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007e2a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007e2e:	4413      	add	r3, r2
 8007e30:	3309      	adds	r3, #9
 8007e32:	f107 0210 	add.w	r2, r7, #16
 8007e36:	4413      	add	r3, r2
 8007e38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007e3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e40:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e52:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007e56:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e62:	3301      	adds	r3, #1
 8007e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e6c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007e70:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8007e74:	8812      	ldrh	r2, [r2, #0]
 8007e76:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e7e:	3302      	adds	r3, #2
 8007e80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007e84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e88:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007e8c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8007e90:	8812      	ldrh	r2, [r2, #0]
 8007e92:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ea4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007ea8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ebe:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007ec2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ec8:	3301      	adds	r3, #1
 8007eca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ed2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007ed6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007edc:	3301      	adds	r3, #1
 8007ede:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007eec:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 f8c7 	bl	8009084 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007ef6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007efa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007efe:	4413      	add	r3, r2
 8007f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007f04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f08:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007f0c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f12:	3301      	adds	r3, #1
 8007f14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007f18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007f22:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 f8ac 	bl	8009084 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007f2c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007f30:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007f34:	4413      	add	r3, r2
 8007f36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8007f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f3e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8007f42:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f48:	3302      	adds	r3, #2
 8007f4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f52:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8007f56:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f5c:	3302      	adds	r3, #2
 8007f5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f66:	2218      	movs	r2, #24
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 f89a 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f70:	233f      	movs	r3, #63	@ 0x3f
 8007f72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8007f76:	2383      	movs	r3, #131	@ 0x83
 8007f78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007f8c:	f107 030f 	add.w	r3, r7, #15
 8007f90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fb09 	bl	80095b8 <hci_send_req>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da01      	bge.n	8007fb0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007fac:	23ff      	movs	r3, #255	@ 0xff
 8007fae:	e004      	b.n	8007fba <aci_gap_set_discoverable+0x1ea>
  return status;
 8007fb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fb4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007fb8:	781b      	ldrb	r3, [r3, #0]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bdb0      	pop	{r4, r5, r7, pc}

08007fc4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b0cc      	sub	sp, #304	@ 0x130
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4602      	mov	r2, r0
 8007fcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fd0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007fd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007fd6:	f107 0310 	add.w	r3, r7, #16
 8007fda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007fde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007fe2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ff4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ff8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007ffc:	7812      	ldrb	r2, [r2, #0]
 8007ffe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008000:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008004:	3301      	adds	r3, #1
 8008006:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800800a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800800e:	2218      	movs	r2, #24
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f846 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008018:	233f      	movs	r3, #63	@ 0x3f
 800801a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800801e:	2385      	movs	r3, #133	@ 0x85
 8008020:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008024:	f107 0310 	add.w	r3, r7, #16
 8008028:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800802c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008030:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008034:	f107 030f 	add.w	r3, r7, #15
 8008038:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800803c:	2301      	movs	r3, #1
 800803e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f001 fab5 	bl	80095b8 <hci_send_req>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	da01      	bge.n	8008058 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008054:	23ff      	movs	r3, #255	@ 0xff
 8008056:	e004      	b.n	8008062 <aci_gap_set_io_capability+0x9e>
  return status;
 8008058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800805c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008060:	781b      	ldrb	r3, [r3, #0]
}
 8008062:	4618      	mov	r0, r3
 8008064:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800806c:	b5b0      	push	{r4, r5, r7, lr}
 800806e:	b0cc      	sub	sp, #304	@ 0x130
 8008070:	af00      	add	r7, sp, #0
 8008072:	4605      	mov	r5, r0
 8008074:	460c      	mov	r4, r1
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800807e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008082:	462a      	mov	r2, r5
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800808a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800808e:	4622      	mov	r2, r4
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008096:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800809a:	4602      	mov	r2, r0
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080a6:	460a      	mov	r2, r1
 80080a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80080b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80080c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080cc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080d8:	3301      	adds	r3, #1
 80080da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80080e6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80080ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080f2:	3301      	adds	r3, #1
 80080f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80080f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008100:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008108:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800810c:	3301      	adds	r3, #1
 800810e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008112:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008116:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800811a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800811e:	7812      	ldrb	r2, [r2, #0]
 8008120:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008122:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008126:	3301      	adds	r3, #1
 8008128:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800812c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008130:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8008134:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800813a:	3301      	adds	r3, #1
 800813c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008140:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008144:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8008148:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800814a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800814e:	3301      	adds	r3, #1
 8008150:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008154:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008158:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800815c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800815e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008162:	3301      	adds	r3, #1
 8008164:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008168:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800816c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008170:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008178:	3304      	adds	r3, #4
 800817a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800817e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008182:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008186:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800818c:	3301      	adds	r3, #1
 800818e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008192:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008196:	2218      	movs	r2, #24
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f000 ff82 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081a0:	233f      	movs	r3, #63	@ 0x3f
 80081a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80081a6:	2386      	movs	r3, #134	@ 0x86
 80081a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80081ac:	f107 0310 	add.w	r3, r7, #16
 80081b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80081b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80081bc:	f107 030f 	add.w	r3, r7, #15
 80081c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80081c4:	2301      	movs	r3, #1
 80081c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f9f1 	bl	80095b8 <hci_send_req>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da01      	bge.n	80081e0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80081dc:	23ff      	movs	r3, #255	@ 0xff
 80081de:	e004      	b.n	80081ea <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80081e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80081e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80081e8:	781b      	ldrb	r3, [r3, #0]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bdb0      	pop	{r4, r5, r7, pc}

080081f4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b0cc      	sub	sp, #304	@ 0x130
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4602      	mov	r2, r0
 80081fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008200:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008204:	6019      	str	r1, [r3, #0]
 8008206:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800820a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800820e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008210:	f107 0310 	add.w	r3, r7, #16
 8008214:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008218:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800821c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800822a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800822e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008232:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008236:	8812      	ldrh	r2, [r2, #0]
 8008238:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800823a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800823e:	3302      	adds	r3, #2
 8008240:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8008244:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008248:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800824c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008256:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800825a:	3304      	adds	r3, #4
 800825c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008260:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008264:	2218      	movs	r2, #24
 8008266:	2100      	movs	r1, #0
 8008268:	4618      	mov	r0, r3
 800826a:	f000 ff1b 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800826e:	233f      	movs	r3, #63	@ 0x3f
 8008270:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008274:	2388      	movs	r3, #136	@ 0x88
 8008276:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800827a:	f107 0310 	add.w	r3, r7, #16
 800827e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008282:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008286:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800828a:	f107 030f 	add.w	r3, r7, #15
 800828e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008292:	2301      	movs	r3, #1
 8008294:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008298:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f98a 	bl	80095b8 <hci_send_req>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da01      	bge.n	80082ae <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80082aa:	23ff      	movs	r3, #255	@ 0xff
 80082ac:	e004      	b.n	80082b8 <aci_gap_pass_key_resp+0xc4>
  return status;
 80082ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80082b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80082b6:	781b      	ldrb	r3, [r3, #0]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80082c2:	b590      	push	{r4, r7, lr}
 80082c4:	b0cd      	sub	sp, #308	@ 0x134
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4604      	mov	r4, r0
 80082ca:	4608      	mov	r0, r1
 80082cc:	4611      	mov	r1, r2
 80082ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80082d2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80082dc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80082e0:	4622      	mov	r2, r4
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80082e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80082ec:	4602      	mov	r2, r0
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80082f4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80082f8:	460a      	mov	r2, r1
 80082fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	2207      	movs	r2, #7
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fec9 	bl	80090a4 <Osal_MemSet>
  int index_input = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8008318:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800831c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008320:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008324:	7812      	ldrb	r2, [r2, #0]
 8008326:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008328:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800832c:	3301      	adds	r3, #1
 800832e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008332:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008336:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800833a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800833e:	7812      	ldrb	r2, [r2, #0]
 8008340:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008342:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008346:	3301      	adds	r3, #1
 8008348:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800834c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008350:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008354:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008358:	7812      	ldrb	r2, [r2, #0]
 800835a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800835c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008360:	3301      	adds	r3, #1
 8008362:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800836a:	2218      	movs	r2, #24
 800836c:	2100      	movs	r1, #0
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fe98 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008374:	233f      	movs	r3, #63	@ 0x3f
 8008376:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800837a:	238a      	movs	r3, #138	@ 0x8a
 800837c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008380:	f107 0310 	add.w	r3, r7, #16
 8008384:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008388:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800838c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008390:	f107 0308 	add.w	r3, r7, #8
 8008394:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008398:	2307      	movs	r3, #7
 800839a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800839e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 f907 	bl	80095b8 <hci_send_req>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	da01      	bge.n	80083b4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80083b0:	23ff      	movs	r3, #255	@ 0xff
 80083b2:	e02e      	b.n	8008412 <aci_gap_init+0x150>
  if ( resp.Status )
 80083b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80083b8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <aci_gap_init+0x10c>
    return resp.Status;
 80083c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80083c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	e021      	b.n	8008412 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80083ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80083d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80083d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80083e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80083e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80083ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80083f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083fa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80083fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008400:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008404:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008408:	b29a      	uxth	r2, r3
 800840a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800840e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008418:	46bd      	mov	sp, r7
 800841a:	bd90      	pop	{r4, r7, pc}

0800841c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b0cc      	sub	sp, #304	@ 0x130
 8008420:	af00      	add	r7, sp, #0
 8008422:	4602      	mov	r2, r0
 8008424:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008428:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800842c:	6019      	str	r1, [r3, #0]
 800842e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008432:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008436:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008438:	f107 0310 	add.w	r3, r7, #16
 800843c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008440:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008444:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008452:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008456:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800845a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008462:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008466:	3301      	adds	r3, #1
 8008468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800846c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008470:	1c58      	adds	r0, r3, #1
 8008472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008476:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008480:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008484:	6819      	ldr	r1, [r3, #0]
 8008486:	f000 fdfd 	bl	8009084 <Osal_MemCpy>
  index_input += AdvDataLen;
 800848a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800848e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008498:	4413      	add	r3, r2
 800849a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800849e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084a2:	2218      	movs	r2, #24
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fdfc 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084ac:	233f      	movs	r3, #63	@ 0x3f
 80084ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80084b2:	238e      	movs	r3, #142	@ 0x8e
 80084b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80084c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80084c8:	f107 030f 	add.w	r3, r7, #15
 80084cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80084da:	2100      	movs	r1, #0
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 f86b 	bl	80095b8 <hci_send_req>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	da01      	bge.n	80084ec <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80084e8:	23ff      	movs	r3, #255	@ 0xff
 80084ea:	e004      	b.n	80084f6 <aci_gap_update_adv_data+0xda>
  return status;
 80084ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80084f4:	781b      	ldrb	r3, [r3, #0]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	2218      	movs	r2, #24
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fdc6 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008518:	233f      	movs	r3, #63	@ 0x3f
 800851a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800851c:	2392      	movs	r3, #146	@ 0x92
 800851e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008520:	1dfb      	adds	r3, r7, #7
 8008522:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008524:	2301      	movs	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008528:	f107 0308 	add.w	r3, r7, #8
 800852c:	2100      	movs	r1, #0
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f842 	bl	80095b8 <hci_send_req>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	da01      	bge.n	800853e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800853a:	23ff      	movs	r3, #255	@ 0xff
 800853c:	e000      	b.n	8008540 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800853e:	79fb      	ldrb	r3, [r7, #7]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3720      	adds	r7, #32
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b0cc      	sub	sp, #304	@ 0x130
 800854c:	af00      	add	r7, sp, #0
 800854e:	4602      	mov	r2, r0
 8008550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008554:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800855e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008562:	460a      	mov	r2, r1
 8008564:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008566:	f107 0310 	add.w	r3, r7, #16
 800856a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800856e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008572:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008576:	2200      	movs	r2, #0
 8008578:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008580:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008584:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008588:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008590:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008594:	3302      	adds	r3, #2
 8008596:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800859a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800859e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085a2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80085aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085ae:	3301      	adds	r3, #1
 80085b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085b8:	2218      	movs	r2, #24
 80085ba:	2100      	movs	r1, #0
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fd71 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085c2:	233f      	movs	r3, #63	@ 0x3f
 80085c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80085c8:	23a5      	movs	r3, #165	@ 0xa5
 80085ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80085ce:	f107 0310 	add.w	r3, r7, #16
 80085d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80085d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80085da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80085de:	f107 030f 	add.w	r3, r7, #15
 80085e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 ffe0 	bl	80095b8 <hci_send_req>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da01      	bge.n	8008602 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80085fe:	23ff      	movs	r3, #255	@ 0xff
 8008600:	e004      	b.n	800860c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008606:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800860a:	781b      	ldrb	r3, [r3, #0]
}
 800860c:	4618      	mov	r0, r3
 800860e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b088      	sub	sp, #32
 800861a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008620:	f107 0308 	add.w	r3, r7, #8
 8008624:	2218      	movs	r2, #24
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fd3b 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800862e:	233f      	movs	r3, #63	@ 0x3f
 8008630:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008632:	f240 1301 	movw	r3, #257	@ 0x101
 8008636:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008638:	1dfb      	adds	r3, r7, #7
 800863a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800863c:	2301      	movs	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008640:	f107 0308 	add.w	r3, r7, #8
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f000 ffb6 	bl	80095b8 <hci_send_req>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	da01      	bge.n	8008656 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008652:	23ff      	movs	r3, #255	@ 0xff
 8008654:	e000      	b.n	8008658 <aci_gatt_init+0x42>
  return status;
 8008656:	79fb      	ldrb	r3, [r7, #7]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008660:	b590      	push	{r4, r7, lr}
 8008662:	b0cf      	sub	sp, #316	@ 0x13c
 8008664:	af00      	add	r7, sp, #0
 8008666:	4604      	mov	r4, r0
 8008668:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800866c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008670:	6001      	str	r1, [r0, #0]
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800867a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800867e:	4622      	mov	r2, r4
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008686:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800868a:	4602      	mov	r2, r0
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008692:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008696:	460a      	mov	r2, r1
 8008698:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800869a:	f107 0310 	add.w	r3, r7, #16
 800869e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80086a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086a6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d00a      	beq.n	80086c6 <aci_gatt_add_service+0x66>
 80086b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086b4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d101      	bne.n	80086c2 <aci_gatt_add_service+0x62>
 80086be:	2311      	movs	r3, #17
 80086c0:	e002      	b.n	80086c8 <aci_gatt_add_service+0x68>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <aci_gatt_add_service+0x68>
 80086c6:	2303      	movs	r3, #3
 80086c8:	f107 0210 	add.w	r2, r7, #16
 80086cc:	4413      	add	r3, r2
 80086ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80086d2:	f107 030c 	add.w	r3, r7, #12
 80086d6:	2203      	movs	r2, #3
 80086d8:	2100      	movs	r1, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fce2 	bl	80090a4 <Osal_MemSet>
  int index_input = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80086e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80086ea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80086ee:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80086f2:	7812      	ldrb	r2, [r2, #0]
 80086f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80086fa:	3301      	adds	r3, #1
 80086fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008700:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008704:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d002      	beq.n	8008714 <aci_gatt_add_service+0xb4>
 800870e:	2b02      	cmp	r3, #2
 8008710:	d004      	beq.n	800871c <aci_gatt_add_service+0xbc>
 8008712:	e007      	b.n	8008724 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008714:	2302      	movs	r3, #2
 8008716:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800871a:	e005      	b.n	8008728 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800871c:	2310      	movs	r3, #16
 800871e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008722:	e001      	b.n	8008728 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008724:	2397      	movs	r3, #151	@ 0x97
 8008726:	e06c      	b.n	8008802 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008728:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800872c:	1c58      	adds	r0, r3, #1
 800872e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8008732:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008736:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800873a:	6819      	ldr	r1, [r3, #0]
 800873c:	f000 fca2 	bl	8009084 <Osal_MemCpy>
    index_input += size;
 8008740:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8008744:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008748:	4413      	add	r3, r2
 800874a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800874e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008752:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008756:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800875a:	7812      	ldrb	r2, [r2, #0]
 800875c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800875e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008762:	3301      	adds	r3, #1
 8008764:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008768:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800876c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008770:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8008774:	7812      	ldrb	r2, [r2, #0]
 8008776:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008778:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800877c:	3301      	adds	r3, #1
 800877e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008786:	2218      	movs	r2, #24
 8008788:	2100      	movs	r1, #0
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fc8a 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008790:	233f      	movs	r3, #63	@ 0x3f
 8008792:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8008796:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800879a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800879e:	f107 0310 	add.w	r3, r7, #16
 80087a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80087a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80087b6:	2303      	movs	r3, #3
 80087b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fef8 	bl	80095b8 <hci_send_req>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da01      	bge.n	80087d2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80087ce:	23ff      	movs	r3, #255	@ 0xff
 80087d0:	e017      	b.n	8008802 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80087d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <aci_gatt_add_service+0x18c>
    return resp.Status;
 80087e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	e00a      	b.n	8008802 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80087ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80087fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8008808:	46bd      	mov	sp, r7
 800880a:	bd90      	pop	{r4, r7, pc}

0800880c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800880c:	b590      	push	{r4, r7, lr}
 800880e:	b0d1      	sub	sp, #324	@ 0x144
 8008810:	af00      	add	r7, sp, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800881a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800881e:	600a      	str	r2, [r1, #0]
 8008820:	4619      	mov	r1, r3
 8008822:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008826:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800882a:	4622      	mov	r2, r4
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008832:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008836:	4602      	mov	r2, r0
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800883e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8008842:	460a      	mov	r2, r1
 8008844:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008846:	f107 0318 	add.w	r3, r7, #24
 800884a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800884e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008852:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d00a      	beq.n	8008872 <aci_gatt_add_char+0x66>
 800885c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008860:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d101      	bne.n	800886e <aci_gatt_add_char+0x62>
 800886a:	2313      	movs	r3, #19
 800886c:	e002      	b.n	8008874 <aci_gatt_add_char+0x68>
 800886e:	2303      	movs	r3, #3
 8008870:	e000      	b.n	8008874 <aci_gatt_add_char+0x68>
 8008872:	2305      	movs	r3, #5
 8008874:	f107 0218 	add.w	r2, r7, #24
 8008878:	4413      	add	r3, r2
 800887a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800887e:	f107 0314 	add.w	r3, r7, #20
 8008882:	2203      	movs	r2, #3
 8008884:	2100      	movs	r1, #0
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fc0c 	bl	80090a4 <Osal_MemSet>
  int index_input = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8008892:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008896:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800889a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800889e:	8812      	ldrh	r2, [r2, #0]
 80088a0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80088a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80088a6:	3302      	adds	r3, #2
 80088a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80088ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80088b0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80088b4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80088b8:	7812      	ldrb	r2, [r2, #0]
 80088ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80088bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80088c0:	3301      	adds	r3, #1
 80088c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80088c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088ca:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d002      	beq.n	80088da <aci_gatt_add_char+0xce>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d004      	beq.n	80088e2 <aci_gatt_add_char+0xd6>
 80088d8:	e007      	b.n	80088ea <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80088da:	2302      	movs	r3, #2
 80088dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80088e0:	e005      	b.n	80088ee <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80088e2:	2310      	movs	r3, #16
 80088e4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80088e8:	e001      	b.n	80088ee <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80088ea:	2397      	movs	r3, #151	@ 0x97
 80088ec:	e091      	b.n	8008a12 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80088ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80088f2:	1cd8      	adds	r0, r3, #3
 80088f4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80088f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088fc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008900:	6819      	ldr	r1, [r3, #0]
 8008902:	f000 fbbf 	bl	8009084 <Osal_MemCpy>
    index_input += size;
 8008906:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800890a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800890e:	4413      	add	r3, r2
 8008910:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008918:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800891c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008920:	8812      	ldrh	r2, [r2, #0]
 8008922:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008924:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008928:	3302      	adds	r3, #2
 800892a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800892e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008932:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008936:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008938:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800893c:	3301      	adds	r3, #1
 800893e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008942:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008946:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800894a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800894c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008950:	3301      	adds	r3, #1
 8008952:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008956:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800895a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800895e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008960:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008964:	3301      	adds	r3, #1
 8008966:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800896a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800896e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8008972:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008974:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008978:	3301      	adds	r3, #1
 800897a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800897e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008982:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8008986:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008988:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800898c:	3301      	adds	r3, #1
 800898e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008992:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008996:	2218      	movs	r2, #24
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fb82 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089a0:	233f      	movs	r3, #63	@ 0x3f
 80089a2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80089a6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80089aa:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80089ae:	f107 0318 	add.w	r3, r7, #24
 80089b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80089b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80089be:	f107 0314 	add.w	r3, r7, #20
 80089c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80089c6:	2303      	movs	r3, #3
 80089c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fdf0 	bl	80095b8 <hci_send_req>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	da01      	bge.n	80089e2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80089de:	23ff      	movs	r3, #255	@ 0xff
 80089e0:	e017      	b.n	8008a12 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80089e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80089e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80089f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80089f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	e00a      	b.n	8008a12 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80089fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008a0e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd90      	pop	{r4, r7, pc}

08008a1c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008a1c:	b5b0      	push	{r4, r5, r7, lr}
 8008a1e:	b0cc      	sub	sp, #304	@ 0x130
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4605      	mov	r5, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	4610      	mov	r0, r2
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a2e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008a32:	462a      	mov	r2, r5
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a3e:	4622      	mov	r2, r4
 8008a40:	801a      	strh	r2, [r3, #0]
 8008a42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a46:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a52:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008a56:	460a      	mov	r2, r1
 8008a58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008a5a:	f107 0310 	add.w	r3, r7, #16
 8008a5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008a66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8008a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008a7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008a80:	8812      	ldrh	r2, [r2, #0]
 8008a82:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a88:	3302      	adds	r3, #2
 8008a8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8008a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008a96:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008aa2:	3302      	adds	r3, #2
 8008aa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8008aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008aac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ab0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8008ab4:	7812      	ldrb	r2, [r2, #0]
 8008ab6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008abc:	3301      	adds	r3, #1
 8008abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ac6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008aca:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ae0:	1d98      	adds	r0, r3, #6
 8008ae2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ae6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8008af2:	f000 fac7 	bl	8009084 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008af6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008afa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008b04:	4413      	add	r3, r2
 8008b06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b0e:	2218      	movs	r2, #24
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fac6 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b18:	233f      	movs	r3, #63	@ 0x3f
 8008b1a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8008b1e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008b22:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b26:	f107 0310 	add.w	r3, r7, #16
 8008b2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008b36:	f107 030f 	add.w	r3, r7, #15
 8008b3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fd34 	bl	80095b8 <hci_send_req>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da01      	bge.n	8008b5a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008b56:	23ff      	movs	r3, #255	@ 0xff
 8008b58:	e004      	b.n	8008b64 <aci_gatt_update_char_value+0x148>
  return status;
 8008b5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b5e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b62:	781b      	ldrb	r3, [r3, #0]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdb0      	pop	{r4, r5, r7, pc}

08008b6e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b0cc      	sub	sp, #304	@ 0x130
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	4602      	mov	r2, r0
 8008b76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b7a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008b7e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008b88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ba2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008ba6:	8812      	ldrh	r2, [r2, #0]
 8008ba8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008bae:	3302      	adds	r3, #2
 8008bb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bb8:	2218      	movs	r2, #24
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fa71 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bc2:	233f      	movs	r3, #63	@ 0x3f
 8008bc4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8008bc8:	f240 1325 	movw	r3, #293	@ 0x125
 8008bcc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008bdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008be0:	f107 030f 	add.w	r3, r7, #15
 8008be4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fcdf 	bl	80095b8 <hci_send_req>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da01      	bge.n	8008c04 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8008c00:	23ff      	movs	r3, #255	@ 0xff
 8008c02:	e004      	b.n	8008c0e <aci_gatt_confirm_indication+0xa0>
  return status;
 8008c04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c0c:	781b      	ldrb	r3, [r3, #0]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b0cc      	sub	sp, #304	@ 0x130
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4602      	mov	r2, r0
 8008c20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c24:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008c28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8008c2a:	f107 0310 	add.w	r3, r7, #16
 8008c2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008c32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c4c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008c50:	8812      	ldrh	r2, [r2, #0]
 8008c52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c58:	3302      	adds	r3, #2
 8008c5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c62:	2218      	movs	r2, #24
 8008c64:	2100      	movs	r1, #0
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fa1c 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c6c:	233f      	movs	r3, #63	@ 0x3f
 8008c6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8008c72:	f240 1327 	movw	r3, #295	@ 0x127
 8008c76:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008c8a:	f107 030f 	add.w	r3, r7, #15
 8008c8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008c92:	2301      	movs	r3, #1
 8008c94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fc8a 	bl	80095b8 <hci_send_req>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	da01      	bge.n	8008cae <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8008caa:	23ff      	movs	r3, #255	@ 0xff
 8008cac:	e004      	b.n	8008cb8 <aci_gatt_allow_read+0xa0>
  return status;
 8008cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008cb6:	781b      	ldrb	r3, [r3, #0]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b0cc      	sub	sp, #304	@ 0x130
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ccc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cd6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008cda:	4602      	mov	r2, r0
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ce2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008ce6:	460a      	mov	r2, r1
 8008ce8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008cea:	f107 0310 	add.w	r3, r7, #16
 8008cee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008cf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cf6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8008d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d0c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008d10:	7812      	ldrb	r2, [r2, #0]
 8008d12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8008d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008d2a:	7812      	ldrb	r2, [r2, #0]
 8008d2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d32:	3301      	adds	r3, #1
 8008d34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d3c:	1c98      	adds	r0, r3, #2
 8008d3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d42:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008d46:	781a      	ldrb	r2, [r3, #0]
 8008d48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d50:	6819      	ldr	r1, [r3, #0]
 8008d52:	f000 f997 	bl	8009084 <Osal_MemCpy>
  index_input += Length;
 8008d56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d5a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008d64:	4413      	add	r3, r2
 8008d66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d6e:	2218      	movs	r2, #24
 8008d70:	2100      	movs	r1, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f996 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d78:	233f      	movs	r3, #63	@ 0x3f
 8008d7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8008d7e:	230c      	movs	r3, #12
 8008d80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008d84:	f107 0310 	add.w	r3, r7, #16
 8008d88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008d94:	f107 030f 	add.w	r3, r7, #15
 8008d98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008da2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008da6:	2100      	movs	r1, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fc05 	bl	80095b8 <hci_send_req>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da01      	bge.n	8008db8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008db4:	23ff      	movs	r3, #255	@ 0xff
 8008db6:	e004      	b.n	8008dc2 <aci_hal_write_config_data+0x100>
  return status;
 8008db8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dbc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008dc0:	781b      	ldrb	r3, [r3, #0]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b0cc      	sub	sp, #304	@ 0x130
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dd8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008de2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008de6:	460a      	mov	r2, r1
 8008de8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008dea:	f107 0310 	add.w	r3, r7, #16
 8008dee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008df2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008df6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8008e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e0c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e18:	3301      	adds	r3, #1
 8008e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8008e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e32:	3301      	adds	r3, #1
 8008e34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e3c:	2218      	movs	r2, #24
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f92f 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e46:	233f      	movs	r3, #63	@ 0x3f
 8008e48:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8008e4c:	230f      	movs	r3, #15
 8008e4e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008e52:	f107 0310 	add.w	r3, r7, #16
 8008e56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008e5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008e62:	f107 030f 	add.w	r3, r7, #15
 8008e66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e74:	2100      	movs	r1, #0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fb9e 	bl	80095b8 <hci_send_req>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da01      	bge.n	8008e86 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008e82:	23ff      	movs	r3, #255	@ 0xff
 8008e84:	e004      	b.n	8008e90 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008e86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e8e:	781b      	ldrb	r3, [r3, #0]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b0cc      	sub	sp, #304	@ 0x130
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ea6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008eaa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008eac:	f107 0310 	add.w	r3, r7, #16
 8008eb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008eb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008eb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008eca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ece:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008ed2:	8812      	ldrh	r2, [r2, #0]
 8008ed4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008eda:	3302      	adds	r3, #2
 8008edc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ee4:	2218      	movs	r2, #24
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f8db 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eee:	233f      	movs	r3, #63	@ 0x3f
 8008ef0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8008ef4:	2318      	movs	r3, #24
 8008ef6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008efa:	f107 0310 	add.w	r3, r7, #16
 8008efe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008f02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008f0a:	f107 030f 	add.w	r3, r7, #15
 8008f0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008f12:	2301      	movs	r3, #1
 8008f14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fb4a 	bl	80095b8 <hci_send_req>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da01      	bge.n	8008f2e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008f2a:	23ff      	movs	r3, #255	@ 0xff
 8008f2c:	e004      	b.n	8008f38 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008f2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f36:	781b      	ldrb	r3, [r3, #0]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b088      	sub	sp, #32
 8008f46:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f4c:	f107 0308 	add.w	r3, r7, #8
 8008f50:	2218      	movs	r2, #24
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f8a5 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x03;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f62:	1dfb      	adds	r3, r7, #7
 8008f64:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f66:	2301      	movs	r3, #1
 8008f68:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fb21 	bl	80095b8 <hci_send_req>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	da01      	bge.n	8008f80 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008f7c:	23ff      	movs	r3, #255	@ 0xff
 8008f7e:	e000      	b.n	8008f82 <hci_reset+0x40>
  return status;
 8008f80:	79fb      	ldrb	r3, [r7, #7]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3720      	adds	r7, #32
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008f8a:	b590      	push	{r4, r7, lr}
 8008f8c:	b0cd      	sub	sp, #308	@ 0x134
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	4604      	mov	r4, r0
 8008f92:	4608      	mov	r0, r1
 8008f94:	4611      	mov	r1, r2
 8008f96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f9a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fa6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008faa:	4602      	mov	r2, r0
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fb2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008fba:	f107 0310 	add.w	r3, r7, #16
 8008fbe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008fc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fc6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008fdc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ff2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008ff6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009002:	3301      	adds	r3, #1
 8009004:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009008:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800900c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009010:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800901c:	3301      	adds	r3, #1
 800901e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009026:	2218      	movs	r2, #24
 8009028:	2100      	movs	r1, #0
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f83a 	bl	80090a4 <Osal_MemSet>
  rq.ogf = 0x08;
 8009030:	2308      	movs	r3, #8
 8009032:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8009036:	2331      	movs	r3, #49	@ 0x31
 8009038:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800903c:	f107 0310 	add.w	r3, r7, #16
 8009040:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009044:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009048:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800904c:	f107 030f 	add.w	r3, r7, #15
 8009050:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009054:	2301      	movs	r3, #1
 8009056:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800905a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800905e:	2100      	movs	r1, #0
 8009060:	4618      	mov	r0, r3
 8009062:	f000 faa9 	bl	80095b8 <hci_send_req>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	da01      	bge.n	8009070 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800906c:	23ff      	movs	r3, #255	@ 0xff
 800906e:	e004      	b.n	800907a <hci_le_set_default_phy+0xf0>
  return status;
 8009070:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009074:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009078:	781b      	ldrb	r3, [r3, #0]
}
 800907a:	4618      	mov	r0, r3
 800907c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009080:	46bd      	mov	sp, r7
 8009082:	bd90      	pop	{r4, r7, pc}

08009084 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f003 fba6 	bl	800c7e6 <memcpy>
 800909a:	4603      	mov	r3, r0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f003 fb1b 	bl	800c6f0 <memset>
 80090ba:	4603      	mov	r3, r0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  return;
 80090c8:	bf00      	nop
}
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80090d2:	b480      	push	{r7}
 80090d4:	af00      	add	r7, sp, #0
  return;
 80090d6:	bf00      	nop
}
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80090e0:	b480      	push	{r7}
 80090e2:	af00      	add	r7, sp, #0
  return;
 80090e4:	bf00      	nop
}
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80090ee:	b480      	push	{r7}
 80090f0:	af00      	add	r7, sp, #0
  return;
 80090f2:	bf00      	nop
}
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
  return;
 8009100:	bf00      	nop
}
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800910a:	b480      	push	{r7}
 800910c:	af00      	add	r7, sp, #0
  return;
 800910e:	bf00      	nop
}
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  return;
 800911c:	bf00      	nop
}
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009126:	b480      	push	{r7}
 8009128:	af00      	add	r7, sp, #0
  return;
 800912a:	bf00      	nop
}
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  return;
 8009138:	bf00      	nop
}
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009142:	b480      	push	{r7}
 8009144:	af00      	add	r7, sp, #0
  return;
 8009146:	bf00      	nop
}
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  return;
 8009154:	bf00      	nop
}
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800915e:	b480      	push	{r7}
 8009160:	af00      	add	r7, sp, #0
  return;
 8009162:	bf00      	nop
}
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return;
 8009170:	bf00      	nop
}
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800917a:	b480      	push	{r7}
 800917c:	af00      	add	r7, sp, #0
  return;
 800917e:	bf00      	nop
}
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return;
 800918c:	bf00      	nop
}
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009196:	b480      	push	{r7}
 8009198:	af00      	add	r7, sp, #0
  return;
 800919a:	bf00      	nop
}
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  return;
 80091a8:	bf00      	nop
}
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
	...

080091b4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80091b8:	4b04      	ldr	r3, [pc, #16]	@ (80091cc <SVCCTL_Init+0x18>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80091be:	4b04      	ldr	r3, [pc, #16]	@ (80091d0 <SVCCTL_Init+0x1c>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80091c4:	f000 f806 	bl	80091d4 <SVCCTL_SvcInit>

  return;
 80091c8:	bf00      	nop
}
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000090 	.word	0x20000090
 80091d0:	200000b0 	.word	0x200000b0

080091d4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  BAS_Init();
 80091d8:	f7ff ff74 	bl	80090c4 <BAS_Init>

  BLS_Init();
 80091dc:	f7ff ff79 	bl	80090d2 <BLS_Init>

  CRS_STM_Init();
 80091e0:	f7ff ff7e 	bl	80090e0 <CRS_STM_Init>

  DIS_Init();
 80091e4:	f7ff ff83 	bl	80090ee <DIS_Init>

  EDS_STM_Init();
 80091e8:	f7ff ff88 	bl	80090fc <EDS_STM_Init>

  HIDS_Init();
 80091ec:	f7ff ff8d 	bl	800910a <HIDS_Init>

  HRS_Init();
 80091f0:	f7ff ff92 	bl	8009118 <HRS_Init>

  HTS_Init();
 80091f4:	f7ff ff97 	bl	8009126 <HTS_Init>

  IAS_Init();
 80091f8:	f7ff ff9c 	bl	8009134 <IAS_Init>

  LLS_Init();
 80091fc:	f7ff ffa1 	bl	8009142 <LLS_Init>

  TPS_Init();
 8009200:	f7ff ffa6 	bl	8009150 <TPS_Init>

  MOTENV_STM_Init();
 8009204:	f7ff ffab 	bl	800915e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009208:	f7ff ffb0 	bl	800916c <P2PS_STM_Init>

  ZDD_STM_Init();
 800920c:	f7ff ffb5 	bl	800917a <ZDD_STM_Init>

  OTAS_STM_Init();
 8009210:	f7ff ffba 	bl	8009188 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009214:	f7ff ffc6 	bl	80091a4 <BVOPUS_STM_Init>

  MESH_Init();
 8009218:	f7ff ffbd 	bl	8009196 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800921c:	f002 fa78 	bl	800b710 <SVCCTL_InitCustomSvc>
  
  return;
 8009220:	bf00      	nop
}
 8009222:	bd80      	pop	{r7, pc}

08009224 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800922c:	4b09      	ldr	r3, [pc, #36]	@ (8009254 <SVCCTL_RegisterSvcHandler+0x30>)
 800922e:	7f1b      	ldrb	r3, [r3, #28]
 8009230:	4619      	mov	r1, r3
 8009232:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <SVCCTL_RegisterSvcHandler+0x30>)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800923a:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <SVCCTL_RegisterSvcHandler+0x30>)
 800923c:	7f1b      	ldrb	r3, [r3, #28]
 800923e:	3301      	adds	r3, #1
 8009240:	b2da      	uxtb	r2, r3
 8009242:	4b04      	ldr	r3, [pc, #16]	@ (8009254 <SVCCTL_RegisterSvcHandler+0x30>)
 8009244:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009246:	bf00      	nop
}
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000090 	.word	0x20000090

08009258 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3301      	adds	r3, #1
 8009264:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2bff      	cmp	r3, #255	@ 0xff
 8009270:	d125      	bne.n	80092be <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	3302      	adds	r3, #2
 8009276:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	b29b      	uxth	r3, r3
 800927e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009286:	d118      	bne.n	80092ba <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009288:	2300      	movs	r3, #0
 800928a:	757b      	strb	r3, [r7, #21]
 800928c:	e00d      	b.n	80092aa <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800928e:	7d7b      	ldrb	r3, [r7, #21]
 8009290:	4a1a      	ldr	r2, [pc, #104]	@ (80092fc <SVCCTL_UserEvtRx+0xa4>)
 8009292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
 800929a:	4603      	mov	r3, r0
 800929c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d108      	bne.n	80092b6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80092a4:	7d7b      	ldrb	r3, [r7, #21]
 80092a6:	3301      	adds	r3, #1
 80092a8:	757b      	strb	r3, [r7, #21]
 80092aa:	4b14      	ldr	r3, [pc, #80]	@ (80092fc <SVCCTL_UserEvtRx+0xa4>)
 80092ac:	7f1b      	ldrb	r3, [r3, #28]
 80092ae:	7d7a      	ldrb	r2, [r7, #21]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d3ec      	bcc.n	800928e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80092b4:	e002      	b.n	80092bc <SVCCTL_UserEvtRx+0x64>
              break;
 80092b6:	bf00      	nop
          break;
 80092b8:	e000      	b.n	80092bc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80092ba:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80092bc:	e000      	b.n	80092c0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80092be:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d00f      	beq.n	80092e6 <SVCCTL_UserEvtRx+0x8e>
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	dc10      	bgt.n	80092ec <SVCCTL_UserEvtRx+0x94>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <SVCCTL_UserEvtRx+0x7c>
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d006      	beq.n	80092e0 <SVCCTL_UserEvtRx+0x88>
 80092d2:	e00b      	b.n	80092ec <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 fc57 	bl	800ab88 <SVCCTL_App_Notification>
 80092da:	4603      	mov	r3, r0
 80092dc:	75bb      	strb	r3, [r7, #22]
      break;
 80092de:	e008      	b.n	80092f2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80092e0:	2301      	movs	r3, #1
 80092e2:	75bb      	strb	r3, [r7, #22]
      break;
 80092e4:	e005      	b.n	80092f2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75bb      	strb	r3, [r7, #22]
      break;
 80092ea:	e002      	b.n	80092f2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80092ec:	2301      	movs	r3, #1
 80092ee:	75bb      	strb	r3, [r7, #22]
      break;
 80092f0:	bf00      	nop
  }

  return (return_status);
 80092f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000090 	.word	0x20000090

08009300 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009308:	f107 030c 	add.w	r3, r7, #12
 800930c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	212e      	movs	r1, #46	@ 0x2e
 8009318:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800931c:	f000 fae8 	bl	80098f0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	330b      	adds	r3, #11
 8009324:	78db      	ldrb	r3, [r3, #3]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b088      	sub	sp, #32
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009336:	f107 030c 	add.w	r3, r7, #12
 800933a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	210f      	movs	r1, #15
 8009346:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800934a:	f000 fad1 	bl	80098f0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	330b      	adds	r3, #11
 8009352:	78db      	ldrb	r3, [r3, #3]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009364:	f107 030c 	add.w	r3, r7, #12
 8009368:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	2110      	movs	r1, #16
 8009370:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8009374:	f000 fabc 	bl	80098f0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	330b      	adds	r3, #11
 800937c:	78db      	ldrb	r3, [r3, #3]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009388:	b480      	push	{r7}
 800938a:	b08b      	sub	sp, #44	@ 0x2c
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80093b0:	4b4a      	ldr	r3, [pc, #296]	@ (80094dc <SHCI_GetWirelessFwInfo+0x154>)
 80093b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80093b8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80093c2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a44      	ldr	r2, [pc, #272]	@ (80094e0 <SHCI_GetWirelessFwInfo+0x158>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d10f      	bne.n	80093f4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	e01a      	b.n	800942a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80093fc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009400:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	0e1b      	lsrs	r3, r3, #24
 800942e:	b2da      	uxtb	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	0c1b      	lsrs	r3, r3, #16
 8009438:	b2da      	uxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	0a1b      	lsrs	r3, r3, #8
 8009442:	b2da      	uxtb	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944a:	091b      	lsrs	r3, r3, #4
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	b2da      	uxtb	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	b2da      	uxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	0e1b      	lsrs	r3, r3, #24
 800946a:	b2da      	uxtb	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	b2da      	uxtb	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	0e1b      	lsrs	r3, r3, #24
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	0e1b      	lsrs	r3, r3, #24
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	372c      	adds	r7, #44	@ 0x2c
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	58004000 	.word	0x58004000
 80094e0:	a94656b9 	.word	0xa94656b9

080094e4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4a08      	ldr	r2, [pc, #32]	@ (8009514 <hci_init+0x30>)
 80094f4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80094f6:	4a08      	ldr	r2, [pc, #32]	@ (8009518 <hci_init+0x34>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80094fc:	4806      	ldr	r0, [pc, #24]	@ (8009518 <hci_init+0x34>)
 80094fe:	f000 f979 	bl	80097f4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f8da 	bl	80096c0 <TlInit>

  return;
 800950c:	bf00      	nop
}
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	200004b4 	.word	0x200004b4
 8009518:	2000048c 	.word	0x2000048c

0800951c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009522:	4822      	ldr	r0, [pc, #136]	@ (80095ac <hci_user_evt_proc+0x90>)
 8009524:	f000 fde8 	bl	800a0f8 <LST_is_empty>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d12b      	bne.n	8009586 <hci_user_evt_proc+0x6a>
 800952e:	4b20      	ldr	r3, [pc, #128]	@ (80095b0 <hci_user_evt_proc+0x94>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d027      	beq.n	8009586 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009536:	f107 030c 	add.w	r3, r7, #12
 800953a:	4619      	mov	r1, r3
 800953c:	481b      	ldr	r0, [pc, #108]	@ (80095ac <hci_user_evt_proc+0x90>)
 800953e:	f000 fe6a 	bl	800a216 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009542:	4b1c      	ldr	r3, [pc, #112]	@ (80095b4 <hci_user_evt_proc+0x98>)
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800954e:	2301      	movs	r3, #1
 8009550:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009552:	4b18      	ldr	r3, [pc, #96]	@ (80095b4 <hci_user_evt_proc+0x98>)
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	1d3a      	adds	r2, r7, #4
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800955c:	793a      	ldrb	r2, [r7, #4]
 800955e:	4b14      	ldr	r3, [pc, #80]	@ (80095b0 <hci_user_evt_proc+0x94>)
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e002      	b.n	800956a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009564:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <hci_user_evt_proc+0x94>)
 8009566:	2201      	movs	r2, #1
 8009568:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800956a:	4b11      	ldr	r3, [pc, #68]	@ (80095b0 <hci_user_evt_proc+0x94>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4618      	mov	r0, r3
 8009576:	f000 fc0d 	bl	8009d94 <TL_MM_EvtDone>
 800957a:	e004      	b.n	8009586 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4619      	mov	r1, r3
 8009580:	480a      	ldr	r0, [pc, #40]	@ (80095ac <hci_user_evt_proc+0x90>)
 8009582:	f000 fddb 	bl	800a13c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009586:	4809      	ldr	r0, [pc, #36]	@ (80095ac <hci_user_evt_proc+0x90>)
 8009588:	f000 fdb6 	bl	800a0f8 <LST_is_empty>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <hci_user_evt_proc+0x86>
 8009592:	4b07      	ldr	r3, [pc, #28]	@ (80095b0 <hci_user_evt_proc+0x94>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800959a:	4804      	ldr	r0, [pc, #16]	@ (80095ac <hci_user_evt_proc+0x90>)
 800959c:	f001 ff5a 	bl	800b454 <hci_notify_asynch_evt>
  }


  return;
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
}
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200000b8 	.word	0x200000b8
 80095b0:	200000c4 	.word	0x200000c4
 80095b4:	2000048c 	.word	0x2000048c

080095b8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b088      	sub	sp, #32
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80095c4:	2000      	movs	r0, #0
 80095c6:	f000 f8d1 	bl	800976c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80095ca:	2300      	movs	r3, #0
 80095cc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	b21b      	sxth	r3, r3
 80095d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095d8:	b21a      	sxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	029b      	lsls	r3, r3, #10
 80095e0:	b21b      	sxth	r3, r3
 80095e2:	4313      	orrs	r3, r2
 80095e4:	b21b      	sxth	r3, r3
 80095e6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80095e8:	4b33      	ldr	r3, [pc, #204]	@ (80096b8 <hci_send_req+0x100>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	b2d9      	uxtb	r1, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	8bbb      	ldrh	r3, [r7, #28]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f890 	bl	8009720 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009600:	e04e      	b.n	80096a0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009602:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009606:	f001 ff3c 	bl	800b482 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800960a:	e043      	b.n	8009694 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4619      	mov	r1, r3
 8009612:	482a      	ldr	r0, [pc, #168]	@ (80096bc <hci_send_req+0x104>)
 8009614:	f000 fdff 	bl	800a216 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	7a5b      	ldrb	r3, [r3, #9]
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d114      	bne.n	800964a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	330b      	adds	r3, #11
 8009624:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	b29b      	uxth	r3, r3
 800962c:	8bba      	ldrh	r2, [r7, #28]
 800962e:	429a      	cmp	r2, r3
 8009630:	d104      	bne.n	800963c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d027      	beq.n	8009694 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009644:	2301      	movs	r3, #1
 8009646:	77fb      	strb	r3, [r7, #31]
 8009648:	e024      	b.n	8009694 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	330b      	adds	r3, #11
 800964e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009656:	b29b      	uxth	r3, r3
 8009658:	8bba      	ldrh	r2, [r7, #28]
 800965a:	429a      	cmp	r2, r3
 800965c:	d114      	bne.n	8009688 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	7a9b      	ldrb	r3, [r3, #10]
 8009662:	3b03      	subs	r3, #3
 8009664:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	695a      	ldr	r2, [r3, #20]
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	429a      	cmp	r2, r3
 800966e:	bfa8      	it	ge
 8009670:	461a      	movge	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6918      	ldr	r0, [r3, #16]
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	1cd9      	adds	r1, r3, #3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	461a      	mov	r2, r3
 8009684:	f003 f8af 	bl	800c7e6 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009690:	2301      	movs	r3, #1
 8009692:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009694:	4809      	ldr	r0, [pc, #36]	@ (80096bc <hci_send_req+0x104>)
 8009696:	f000 fd2f 	bl	800a0f8 <LST_is_empty>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0b5      	beq.n	800960c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80096a0:	7ffb      	ldrb	r3, [r7, #31]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0ad      	beq.n	8009602 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80096a6:	2001      	movs	r0, #1
 80096a8:	f000 f860 	bl	800976c <NotifyCmdStatus>

  return 0;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200004b8 	.word	0x200004b8
 80096bc:	200004ac 	.word	0x200004ac

080096c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80096c8:	480f      	ldr	r0, [pc, #60]	@ (8009708 <TlInit+0x48>)
 80096ca:	f000 fd05 	bl	800a0d8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80096ce:	4a0f      	ldr	r2, [pc, #60]	@ (800970c <TlInit+0x4c>)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80096d4:	480e      	ldr	r0, [pc, #56]	@ (8009710 <TlInit+0x50>)
 80096d6:	f000 fcff 	bl	800a0d8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80096da:	4b0e      	ldr	r3, [pc, #56]	@ (8009714 <TlInit+0x54>)
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80096e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009718 <TlInit+0x58>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00a      	beq.n	80096fe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80096ec:	4b0b      	ldr	r3, [pc, #44]	@ (800971c <TlInit+0x5c>)
 80096ee:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80096f0:	4b09      	ldr	r3, [pc, #36]	@ (8009718 <TlInit+0x58>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f107 0208 	add.w	r2, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
  }

  return;
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
}
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	200004ac 	.word	0x200004ac
 800970c:	200000c0 	.word	0x200000c0
 8009710:	200000b8 	.word	0x200000b8
 8009714:	200000c4 	.word	0x200000c4
 8009718:	2000048c 	.word	0x2000048c
 800971c:	080097ad 	.word	0x080097ad

08009720 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	603a      	str	r2, [r7, #0]
 800972a:	80fb      	strh	r3, [r7, #6]
 800972c:	460b      	mov	r3, r1
 800972e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009730:	4b0c      	ldr	r3, [pc, #48]	@ (8009764 <SendCmd+0x44>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	88fa      	ldrh	r2, [r7, #6]
 8009736:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800973a:	4b0a      	ldr	r3, [pc, #40]	@ (8009764 <SendCmd+0x44>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	797a      	ldrb	r2, [r7, #5]
 8009740:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009742:	4b08      	ldr	r3, [pc, #32]	@ (8009764 <SendCmd+0x44>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	330c      	adds	r3, #12
 8009748:	797a      	ldrb	r2, [r7, #5]
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	4618      	mov	r0, r3
 800974e:	f003 f84a 	bl	800c7e6 <memcpy>

  hciContext.io.Send(0,0);
 8009752:	4b05      	ldr	r3, [pc, #20]	@ (8009768 <SendCmd+0x48>)
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2100      	movs	r1, #0
 8009758:	2000      	movs	r0, #0
 800975a:	4798      	blx	r3

  return;
 800975c:	bf00      	nop
}
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	200000c0 	.word	0x200000c0
 8009768:	2000048c 	.word	0x2000048c

0800976c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d108      	bne.n	800978e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800977c:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <NotifyCmdStatus+0x3c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00d      	beq.n	80097a0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009784:	4b08      	ldr	r3, [pc, #32]	@ (80097a8 <NotifyCmdStatus+0x3c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2000      	movs	r0, #0
 800978a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800978c:	e008      	b.n	80097a0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800978e:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <NotifyCmdStatus+0x3c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009796:	4b04      	ldr	r3, [pc, #16]	@ (80097a8 <NotifyCmdStatus+0x3c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2001      	movs	r0, #1
 800979c:	4798      	blx	r3
  return;
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
}
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	200004b4 	.word	0x200004b4

080097ac <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7a5b      	ldrb	r3, [r3, #9]
 80097b8:	2b0f      	cmp	r3, #15
 80097ba:	d003      	beq.n	80097c4 <TlEvtReceived+0x18>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7a5b      	ldrb	r3, [r3, #9]
 80097c0:	2b0e      	cmp	r3, #14
 80097c2:	d107      	bne.n	80097d4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4809      	ldr	r0, [pc, #36]	@ (80097ec <TlEvtReceived+0x40>)
 80097c8:	f000 fcde 	bl	800a188 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80097cc:	2000      	movs	r0, #0
 80097ce:	f001 fe4d 	bl	800b46c <hci_cmd_resp_release>
 80097d2:	e006      	b.n	80097e2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	4806      	ldr	r0, [pc, #24]	@ (80097f0 <TlEvtReceived+0x44>)
 80097d8:	f000 fcd6 	bl	800a188 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80097dc:	4804      	ldr	r0, [pc, #16]	@ (80097f0 <TlEvtReceived+0x44>)
 80097de:	f001 fe39 	bl	800b454 <hci_notify_asynch_evt>
  }

  return;
 80097e2:	bf00      	nop
}
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200004ac 	.word	0x200004ac
 80097f0:	200000b8 	.word	0x200000b8

080097f4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a05      	ldr	r2, [pc, #20]	@ (8009814 <hci_register_io_bus+0x20>)
 8009800:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a04      	ldr	r2, [pc, #16]	@ (8009818 <hci_register_io_bus+0x24>)
 8009806:	611a      	str	r2, [r3, #16]

  return;
 8009808:	bf00      	nop
}
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	08009b0d 	.word	0x08009b0d
 8009818:	08009b75 	.word	0x08009b75

0800981c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	4a08      	ldr	r2, [pc, #32]	@ (800984c <shci_init+0x30>)
 800982c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800982e:	4a08      	ldr	r2, [pc, #32]	@ (8009850 <shci_init+0x34>)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009834:	4806      	ldr	r0, [pc, #24]	@ (8009850 <shci_init+0x34>)
 8009836:	f000 f915 	bl	8009a64 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f898 	bl	8009974 <TlInit>

  return;
 8009844:	bf00      	nop
}
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	200004dc 	.word	0x200004dc
 8009850:	200004bc 	.word	0x200004bc

08009854 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800985a:	4822      	ldr	r0, [pc, #136]	@ (80098e4 <shci_user_evt_proc+0x90>)
 800985c:	f000 fc4c 	bl	800a0f8 <LST_is_empty>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d12b      	bne.n	80098be <shci_user_evt_proc+0x6a>
 8009866:	4b20      	ldr	r3, [pc, #128]	@ (80098e8 <shci_user_evt_proc+0x94>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d027      	beq.n	80098be <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	4619      	mov	r1, r3
 8009874:	481b      	ldr	r0, [pc, #108]	@ (80098e4 <shci_user_evt_proc+0x90>)
 8009876:	f000 fcce 	bl	800a216 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800987a:	4b1c      	ldr	r3, [pc, #112]	@ (80098ec <shci_user_evt_proc+0x98>)
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00c      	beq.n	800989c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009886:	2301      	movs	r3, #1
 8009888:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800988a:	4b18      	ldr	r3, [pc, #96]	@ (80098ec <shci_user_evt_proc+0x98>)
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	1d3a      	adds	r2, r7, #4
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009894:	793a      	ldrb	r2, [r7, #4]
 8009896:	4b14      	ldr	r3, [pc, #80]	@ (80098e8 <shci_user_evt_proc+0x94>)
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	e002      	b.n	80098a2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800989c:	4b12      	ldr	r3, [pc, #72]	@ (80098e8 <shci_user_evt_proc+0x94>)
 800989e:	2201      	movs	r2, #1
 80098a0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80098a2:	4b11      	ldr	r3, [pc, #68]	@ (80098e8 <shci_user_evt_proc+0x94>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d004      	beq.n	80098b4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fa71 	bl	8009d94 <TL_MM_EvtDone>
 80098b2:	e004      	b.n	80098be <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4619      	mov	r1, r3
 80098b8:	480a      	ldr	r0, [pc, #40]	@ (80098e4 <shci_user_evt_proc+0x90>)
 80098ba:	f000 fc3f 	bl	800a13c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80098be:	4809      	ldr	r0, [pc, #36]	@ (80098e4 <shci_user_evt_proc+0x90>)
 80098c0:	f000 fc1a 	bl	800a0f8 <LST_is_empty>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d107      	bne.n	80098da <shci_user_evt_proc+0x86>
 80098ca:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <shci_user_evt_proc+0x94>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80098d2:	4804      	ldr	r0, [pc, #16]	@ (80098e4 <shci_user_evt_proc+0x90>)
 80098d4:	f7f7 fccc 	bl	8001270 <shci_notify_asynch_evt>
  }


  return;
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
}
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	200000c8 	.word	0x200000c8
 80098e8:	200000d8 	.word	0x200000d8
 80098ec:	200004bc 	.word	0x200004bc

080098f0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60ba      	str	r2, [r7, #8]
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	4603      	mov	r3, r0
 80098fc:	81fb      	strh	r3, [r7, #14]
 80098fe:	460b      	mov	r3, r1
 8009900:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009902:	2000      	movs	r0, #0
 8009904:	f000 f868 	bl	80099d8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009908:	4b17      	ldr	r3, [pc, #92]	@ (8009968 <shci_send+0x78>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	89fa      	ldrh	r2, [r7, #14]
 800990e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009912:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <shci_send+0x78>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	7b7a      	ldrb	r2, [r7, #13]
 8009918:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800991a:	4b13      	ldr	r3, [pc, #76]	@ (8009968 <shci_send+0x78>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	330c      	adds	r3, #12
 8009920:	7b7a      	ldrb	r2, [r7, #13]
 8009922:	68b9      	ldr	r1, [r7, #8]
 8009924:	4618      	mov	r0, r3
 8009926:	f002 ff5e 	bl	800c7e6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800992a:	4b10      	ldr	r3, [pc, #64]	@ (800996c <shci_send+0x7c>)
 800992c:	2201      	movs	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009930:	4b0f      	ldr	r3, [pc, #60]	@ (8009970 <shci_send+0x80>)
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2100      	movs	r1, #0
 8009936:	2000      	movs	r0, #0
 8009938:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800993a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800993e:	f7f7 fcae 	bl	800129e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f103 0008 	add.w	r0, r3, #8
 8009948:	4b07      	ldr	r3, [pc, #28]	@ (8009968 <shci_send+0x78>)
 800994a:	6819      	ldr	r1, [r3, #0]
 800994c:	4b06      	ldr	r3, [pc, #24]	@ (8009968 <shci_send+0x78>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	789b      	ldrb	r3, [r3, #2]
 8009952:	3303      	adds	r3, #3
 8009954:	461a      	mov	r2, r3
 8009956:	f002 ff46 	bl	800c7e6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800995a:	2001      	movs	r0, #1
 800995c:	f000 f83c 	bl	80099d8 <Cmd_SetStatus>

  return;
 8009960:	bf00      	nop
}
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200000d4 	.word	0x200000d4
 800996c:	200004e0 	.word	0x200004e0
 8009970:	200004bc 	.word	0x200004bc

08009974 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800997c:	4a10      	ldr	r2, [pc, #64]	@ (80099c0 <TlInit+0x4c>)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009982:	4810      	ldr	r0, [pc, #64]	@ (80099c4 <TlInit+0x50>)
 8009984:	f000 fba8 	bl	800a0d8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009988:	2001      	movs	r0, #1
 800998a:	f000 f825 	bl	80099d8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800998e:	4b0e      	ldr	r3, [pc, #56]	@ (80099c8 <TlInit+0x54>)
 8009990:	2201      	movs	r2, #1
 8009992:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009994:	4b0d      	ldr	r3, [pc, #52]	@ (80099cc <TlInit+0x58>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00c      	beq.n	80099b6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <TlInit+0x5c>)
 80099a2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80099a4:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <TlInit+0x60>)
 80099a6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80099a8:	4b08      	ldr	r3, [pc, #32]	@ (80099cc <TlInit+0x58>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f107 020c 	add.w	r2, r7, #12
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
  }

  return;
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
}
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	200000d4 	.word	0x200000d4
 80099c4:	200000c8 	.word	0x200000c8
 80099c8:	200000d8 	.word	0x200000d8
 80099cc:	200004bc 	.word	0x200004bc
 80099d0:	08009a29 	.word	0x08009a29
 80099d4:	08009a41 	.word	0x08009a41

080099d8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10b      	bne.n	8009a00 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80099e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009a20 <Cmd_SetStatus+0x48>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80099f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a20 <Cmd_SetStatus+0x48>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2000      	movs	r0, #0
 80099f6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80099f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a24 <Cmd_SetStatus+0x4c>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80099fe:	e00b      	b.n	8009a18 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009a00:	4b08      	ldr	r3, [pc, #32]	@ (8009a24 <Cmd_SetStatus+0x4c>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009a06:	4b06      	ldr	r3, [pc, #24]	@ (8009a20 <Cmd_SetStatus+0x48>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009a0e:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <Cmd_SetStatus+0x48>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2001      	movs	r0, #1
 8009a14:	4798      	blx	r3
  return;
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
}
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	200004dc 	.word	0x200004dc
 8009a24:	200000d0 	.word	0x200000d0

08009a28 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009a30:	2000      	movs	r0, #0
 8009a32:	f7f7 fc29 	bl	8001288 <shci_cmd_resp_release>

  return;
 8009a36:	bf00      	nop
}
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4805      	ldr	r0, [pc, #20]	@ (8009a60 <TlUserEvtReceived+0x20>)
 8009a4c:	f000 fb9c 	bl	800a188 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009a50:	4803      	ldr	r0, [pc, #12]	@ (8009a60 <TlUserEvtReceived+0x20>)
 8009a52:	f7f7 fc0d 	bl	8001270 <shci_notify_asynch_evt>

  return;
 8009a56:	bf00      	nop
}
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200000c8 	.word	0x200000c8

08009a64 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a05      	ldr	r2, [pc, #20]	@ (8009a84 <shci_register_io_bus+0x20>)
 8009a70:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a04      	ldr	r2, [pc, #16]	@ (8009a88 <shci_register_io_bus+0x24>)
 8009a76:	611a      	str	r2, [r3, #16]

  return;
 8009a78:	bf00      	nop
}
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	08009c21 	.word	0x08009c21
 8009a88:	08009c75 	.word	0x08009c75

08009a8c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009a90:	f002 f8ee 	bl	800bc70 <HW_IPCC_Enable>

  return;
 8009a94:	bf00      	nop
}
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <TL_Init>:


void TL_Init( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009a9c:	4b10      	ldr	r3, [pc, #64]	@ (8009ae0 <TL_Init+0x48>)
 8009a9e:	4a11      	ldr	r2, [pc, #68]	@ (8009ae4 <TL_Init+0x4c>)
 8009aa0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae0 <TL_Init+0x48>)
 8009aa4:	4a10      	ldr	r2, [pc, #64]	@ (8009ae8 <TL_Init+0x50>)
 8009aa6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae0 <TL_Init+0x48>)
 8009aaa:	4a10      	ldr	r2, [pc, #64]	@ (8009aec <TL_Init+0x54>)
 8009aac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009aae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae0 <TL_Init+0x48>)
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8009af0 <TL_Init+0x58>)
 8009ab2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <TL_Init+0x48>)
 8009ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8009af4 <TL_Init+0x5c>)
 8009ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009aba:	4b09      	ldr	r3, [pc, #36]	@ (8009ae0 <TL_Init+0x48>)
 8009abc:	4a0e      	ldr	r2, [pc, #56]	@ (8009af8 <TL_Init+0x60>)
 8009abe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009ac0:	4b07      	ldr	r3, [pc, #28]	@ (8009ae0 <TL_Init+0x48>)
 8009ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8009afc <TL_Init+0x64>)
 8009ac4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009ac6:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <TL_Init+0x48>)
 8009ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8009b00 <TL_Init+0x68>)
 8009aca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009acc:	4b04      	ldr	r3, [pc, #16]	@ (8009ae0 <TL_Init+0x48>)
 8009ace:	4a0d      	ldr	r2, [pc, #52]	@ (8009b04 <TL_Init+0x6c>)
 8009ad0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009ad2:	4b03      	ldr	r3, [pc, #12]	@ (8009ae0 <TL_Init+0x48>)
 8009ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8009b08 <TL_Init+0x70>)
 8009ad6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009ad8:	f002 f8de 	bl	800bc98 <HW_IPCC_Init>

  return;
 8009adc:	bf00      	nop
}
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20030000 	.word	0x20030000
 8009ae4:	20030028 	.word	0x20030028
 8009ae8:	20030048 	.word	0x20030048
 8009aec:	20030058 	.word	0x20030058
 8009af0:	20030068 	.word	0x20030068
 8009af4:	20030070 	.word	0x20030070
 8009af8:	20030078 	.word	0x20030078
 8009afc:	20030080 	.word	0x20030080
 8009b00:	2003009c 	.word	0x2003009c
 8009b04:	200300a0 	.word	0x200300a0
 8009b08:	200300ac 	.word	0x200300ac

08009b0c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009b18:	4811      	ldr	r0, [pc, #68]	@ (8009b60 <TL_BLE_Init+0x54>)
 8009b1a:	f000 fadd 	bl	800a0d8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009b1e:	4b11      	ldr	r3, [pc, #68]	@ (8009b64 <TL_BLE_Init+0x58>)
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	68da      	ldr	r2, [r3, #12]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4a0c      	ldr	r2, [pc, #48]	@ (8009b68 <TL_BLE_Init+0x5c>)
 8009b38:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	4a08      	ldr	r2, [pc, #32]	@ (8009b60 <TL_BLE_Init+0x54>)
 8009b3e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009b40:	f002 f8c0 	bl	800bcc4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a08      	ldr	r2, [pc, #32]	@ (8009b6c <TL_BLE_Init+0x60>)
 8009b4a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4a07      	ldr	r2, [pc, #28]	@ (8009b70 <TL_BLE_Init+0x64>)
 8009b52:	6013      	str	r3, [r2, #0]

  return 0;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	200300c8 	.word	0x200300c8
 8009b64:	20030000 	.word	0x20030000
 8009b68:	20030a58 	.word	0x20030a58
 8009b6c:	200004ec 	.word	0x200004ec
 8009b70:	200004f0 	.word	0x200004f0

08009b74 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009b80:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <TL_BLE_SendCmd+0x34>)
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2201      	movs	r2, #1
 8009b88:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009b8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ba8 <TL_BLE_SendCmd+0x34>)
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	2001      	movs	r0, #1
 8009b94:	f000 f96c 	bl	8009e70 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009b98:	f002 f89e 	bl	800bcd8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20030000 	.word	0x20030000

08009bac <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009bb2:	e01c      	b.n	8009bee <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009bb4:	1d3b      	adds	r3, r7, #4
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4812      	ldr	r0, [pc, #72]	@ (8009c04 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009bba:	f000 fb2c 	bl	800a216 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7a5b      	ldrb	r3, [r3, #9]
 8009bc2:	2b0f      	cmp	r3, #15
 8009bc4:	d003      	beq.n	8009bce <HW_IPCC_BLE_RxEvtNot+0x22>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7a5b      	ldrb	r3, [r3, #9]
 8009bca:	2b0e      	cmp	r3, #14
 8009bcc:	d105      	bne.n	8009bda <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	2002      	movs	r0, #2
 8009bd4:	f000 f94c 	bl	8009e70 <OutputDbgTrace>
 8009bd8:	e004      	b.n	8009be4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	2003      	movs	r0, #3
 8009be0:	f000 f946 	bl	8009e70 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009be4:	4b08      	ldr	r3, [pc, #32]	@ (8009c08 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009bee:	4805      	ldr	r0, [pc, #20]	@ (8009c04 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009bf0:	f000 fa82 	bl	800a0f8 <LST_is_empty>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0dc      	beq.n	8009bb4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009bfa:	bf00      	nop
}
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200300c8 	.word	0x200300c8
 8009c08:	200004ec 	.word	0x200004ec

08009c0c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009c10:	4b02      	ldr	r3, [pc, #8]	@ (8009c1c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4798      	blx	r3

  return;
 8009c16:	bf00      	nop
}
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200004f0 	.word	0x200004f0

08009c20 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009c2c:	480d      	ldr	r0, [pc, #52]	@ (8009c64 <TL_SYS_Init+0x44>)
 8009c2e:	f000 fa53 	bl	800a0d8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009c32:	4b0d      	ldr	r3, [pc, #52]	@ (8009c68 <TL_SYS_Init+0x48>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4a08      	ldr	r2, [pc, #32]	@ (8009c64 <TL_SYS_Init+0x44>)
 8009c44:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009c46:	f002 f869 	bl	800bd1c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a07      	ldr	r2, [pc, #28]	@ (8009c6c <TL_SYS_Init+0x4c>)
 8009c50:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	4a06      	ldr	r2, [pc, #24]	@ (8009c70 <TL_SYS_Init+0x50>)
 8009c58:	6013      	str	r3, [r2, #0]

  return 0;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	200300d0 	.word	0x200300d0
 8009c68:	20030000 	.word	0x20030000
 8009c6c:	200004f4 	.word	0x200004f4
 8009c70:	200004f8 	.word	0x200004f8

08009c74 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009c80:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <TL_SYS_SendCmd+0x34>)
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2210      	movs	r2, #16
 8009c88:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <TL_SYS_SendCmd+0x34>)
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4619      	mov	r1, r3
 8009c92:	2004      	movs	r0, #4
 8009c94:	f000 f8ec 	bl	8009e70 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009c98:	f002 f84a 	bl	800bd30 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20030000 	.word	0x20030000

08009cac <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009cb0:	4b07      	ldr	r3, [pc, #28]	@ (8009cd0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	2005      	movs	r0, #5
 8009cba:	f000 f8d9 	bl	8009e70 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009cbe:	4b05      	ldr	r3, [pc, #20]	@ (8009cd4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a03      	ldr	r2, [pc, #12]	@ (8009cd0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009cc4:	68d2      	ldr	r2, [r2, #12]
 8009cc6:	6812      	ldr	r2, [r2, #0]
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4798      	blx	r3

  return;
 8009ccc:	bf00      	nop
}
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20030000 	.word	0x20030000
 8009cd4:	200004f4 	.word	0x200004f4

08009cd8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009cde:	e00e      	b.n	8009cfe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009ce0:	1d3b      	adds	r3, r7, #4
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	480b      	ldr	r0, [pc, #44]	@ (8009d14 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009ce6:	f000 fa96 	bl	800a216 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4619      	mov	r1, r3
 8009cee:	2006      	movs	r0, #6
 8009cf0:	f000 f8be 	bl	8009e70 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009cf4:	4b08      	ldr	r3, [pc, #32]	@ (8009d18 <HW_IPCC_SYS_EvtNot+0x40>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009cfe:	4805      	ldr	r0, [pc, #20]	@ (8009d14 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009d00:	f000 f9fa 	bl	800a0f8 <LST_is_empty>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0ea      	beq.n	8009ce0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009d0a:	bf00      	nop
}
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	200300d0 	.word	0x200300d0
 8009d18:	200004f8 	.word	0x200004f8

08009d1c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009d24:	4817      	ldr	r0, [pc, #92]	@ (8009d84 <TL_MM_Init+0x68>)
 8009d26:	f000 f9d7 	bl	800a0d8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009d2a:	4817      	ldr	r0, [pc, #92]	@ (8009d88 <TL_MM_Init+0x6c>)
 8009d2c:	f000 f9d4 	bl	800a0d8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009d30:	4b16      	ldr	r3, [pc, #88]	@ (8009d8c <TL_MM_Init+0x70>)
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	4a16      	ldr	r2, [pc, #88]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d36:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009d38:	4b15      	ldr	r3, [pc, #84]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	6892      	ldr	r2, [r2, #8]
 8009d40:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009d42:	4b13      	ldr	r3, [pc, #76]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	68d2      	ldr	r2, [r2, #12]
 8009d4a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009d4c:	4b10      	ldr	r3, [pc, #64]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a0c      	ldr	r2, [pc, #48]	@ (8009d84 <TL_MM_Init+0x68>)
 8009d52:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009d54:	4b0e      	ldr	r3, [pc, #56]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6852      	ldr	r2, [r2, #4]
 8009d66:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009d68:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6912      	ldr	r2, [r2, #16]
 8009d70:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009d72:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <TL_MM_Init+0x74>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	6952      	ldr	r2, [r2, #20]
 8009d7a:	619a      	str	r2, [r3, #24]

  return;
 8009d7c:	bf00      	nop
}
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200300b8 	.word	0x200300b8
 8009d88:	200004e4 	.word	0x200004e4
 8009d8c:	20030000 	.word	0x20030000
 8009d90:	200004fc 	.word	0x200004fc

08009d94 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	4807      	ldr	r0, [pc, #28]	@ (8009dbc <TL_MM_EvtDone+0x28>)
 8009da0:	f000 f9f2 	bl	800a188 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	2000      	movs	r0, #0
 8009da8:	f000 f862 	bl	8009e70 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009dac:	4804      	ldr	r0, [pc, #16]	@ (8009dc0 <TL_MM_EvtDone+0x2c>)
 8009dae:	f001 ffe5 	bl	800bd7c <HW_IPCC_MM_SendFreeBuf>

  return;
 8009db2:	bf00      	nop
}
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	200004e4 	.word	0x200004e4
 8009dc0:	08009dc5 	.word	0x08009dc5

08009dc4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009dca:	e00c      	b.n	8009de6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009dcc:	1d3b      	adds	r3, r7, #4
 8009dce:	4619      	mov	r1, r3
 8009dd0:	480a      	ldr	r0, [pc, #40]	@ (8009dfc <SendFreeBuf+0x38>)
 8009dd2:	f000 fa20 	bl	800a216 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009e00 <SendFreeBuf+0x3c>)
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4611      	mov	r1, r2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 f9d1 	bl	800a188 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009de6:	4805      	ldr	r0, [pc, #20]	@ (8009dfc <SendFreeBuf+0x38>)
 8009de8:	f000 f986 	bl	800a0f8 <LST_is_empty>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0ec      	beq.n	8009dcc <SendFreeBuf+0x8>
  }

  return;
 8009df2:	bf00      	nop
}
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	200004e4 	.word	0x200004e4
 8009e00:	20030000 	.word	0x20030000

08009e04 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009e08:	4805      	ldr	r0, [pc, #20]	@ (8009e20 <TL_TRACES_Init+0x1c>)
 8009e0a:	f000 f965 	bl	800a0d8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009e0e:	4b05      	ldr	r3, [pc, #20]	@ (8009e24 <TL_TRACES_Init+0x20>)
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	4a03      	ldr	r2, [pc, #12]	@ (8009e20 <TL_TRACES_Init+0x1c>)
 8009e14:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009e16:	f001 ffe7 	bl	800bde8 <HW_IPCC_TRACES_Init>

  return;
 8009e1a:	bf00      	nop
}
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	200300c0 	.word	0x200300c0
 8009e24:	20030000 	.word	0x20030000

08009e28 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009e2e:	e008      	b.n	8009e42 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009e30:	1d3b      	adds	r3, r7, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4808      	ldr	r0, [pc, #32]	@ (8009e58 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009e36:	f000 f9ee 	bl	800a216 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 f80d 	bl	8009e5c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009e42:	4805      	ldr	r0, [pc, #20]	@ (8009e58 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009e44:	f000 f958 	bl	800a0f8 <LST_is_empty>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009e4e:	bf00      	nop
}
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200300c0 	.word	0x200300c0

08009e5c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b087      	sub	sp, #28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	6039      	str	r1, [r7, #0]
 8009e7a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	2b06      	cmp	r3, #6
 8009e80:	d845      	bhi.n	8009f0e <OutputDbgTrace+0x9e>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <OutputDbgTrace+0x18>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea5 	.word	0x08009ea5
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009ecf 	.word	0x08009ecf
 8009e94:	08009ee3 	.word	0x08009ee3
 8009e98:	08009eef 	.word	0x08009eef
 8009e9c:	08009ef5 	.word	0x08009ef5
 8009ea0:	08009f03 	.word	0x08009f03
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	7a5b      	ldrb	r3, [r3, #9]
 8009eac:	2bff      	cmp	r3, #255	@ 0xff
 8009eae:	d005      	beq.n	8009ebc <OutputDbgTrace+0x4c>
 8009eb0:	2bff      	cmp	r3, #255	@ 0xff
 8009eb2:	dc05      	bgt.n	8009ec0 <OutputDbgTrace+0x50>
 8009eb4:	2b0e      	cmp	r3, #14
 8009eb6:	d005      	beq.n	8009ec4 <OutputDbgTrace+0x54>
 8009eb8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009eba:	e001      	b.n	8009ec0 <OutputDbgTrace+0x50>
          break;
 8009ebc:	bf00      	nop
 8009ebe:	e027      	b.n	8009f10 <OutputDbgTrace+0xa0>
          break;
 8009ec0:	bf00      	nop
 8009ec2:	e025      	b.n	8009f10 <OutputDbgTrace+0xa0>
          break;
 8009ec4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009ec6:	e023      	b.n	8009f10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009ecc:	e020      	b.n	8009f10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	7a5b      	ldrb	r3, [r3, #9]
 8009ed6:	2b0e      	cmp	r3, #14
 8009ed8:	d001      	beq.n	8009ede <OutputDbgTrace+0x6e>
 8009eda:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009edc:	e000      	b.n	8009ee0 <OutputDbgTrace+0x70>
          break;
 8009ede:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ee0:	e016      	b.n	8009f10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	7a5b      	ldrb	r3, [r3, #9]
 8009eea:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009eec:	e010      	b.n	8009f10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009ef2:	e00d      	b.n	8009f10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	785b      	ldrb	r3, [r3, #1]
 8009efc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8009efe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f00:	e006      	b.n	8009f10 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	7a5b      	ldrb	r3, [r3, #9]
 8009f0a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f0c:	e000      	b.n	8009f10 <OutputDbgTrace+0xa0>

    default:
      break;
 8009f0e:	bf00      	nop
  }

  return;
 8009f10:	bf00      	nop
}
 8009f12:	371c      	adds	r7, #28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f22:	f3ef 8310 	mrs	r3, PRIMASK
 8009f26:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f28:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009f2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f2c:	b672      	cpsid	i
}
 8009f2e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009f30:	1cbb      	adds	r3, r7, #2
 8009f32:	4619      	mov	r1, r3
 8009f34:	4812      	ldr	r0, [pc, #72]	@ (8009f80 <DbgTrace_TxCpltCallback+0x64>)
 8009f36:	f000 fbe5 	bl	800a704 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009f3a:	1cbb      	adds	r3, r7, #2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4810      	ldr	r0, [pc, #64]	@ (8009f80 <DbgTrace_TxCpltCallback+0x64>)
 8009f40:	f000 fccf 	bl	800a8e2 <CircularQueue_Sense>
 8009f44:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00c      	beq.n	8009f66 <DbgTrace_TxCpltCallback+0x4a>
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f383 8810 	msr	PRIMASK, r3
}
 8009f56:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009f58:	887b      	ldrh	r3, [r7, #2]
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f84 <DbgTrace_TxCpltCallback+0x68>)
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6938      	ldr	r0, [r7, #16]
 8009f60:	f7f6 feeb 	bl	8000d3a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009f64:	e008      	b.n	8009f78 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009f66:	4b08      	ldr	r3, [pc, #32]	@ (8009f88 <DbgTrace_TxCpltCallback+0x6c>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	701a      	strb	r2, [r3, #0]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f383 8810 	msr	PRIMASK, r3
}
 8009f76:	bf00      	nop
}
 8009f78:	bf00      	nop
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20000500 	.word	0x20000500
 8009f84:	08009f1d 	.word	0x08009f1d
 8009f88:	20000011 	.word	0x20000011

08009f8c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009f92:	f7f6 fecc 	bl	8000d2e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009f96:	2302      	movs	r3, #2
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009fa0:	4903      	ldr	r1, [pc, #12]	@ (8009fb0 <DbgTraceInit+0x24>)
 8009fa2:	4804      	ldr	r0, [pc, #16]	@ (8009fb4 <DbgTraceInit+0x28>)
 8009fa4:	f000 f956 	bl	800a254 <CircularQueue_Init>
#endif 
#endif
  return;
 8009fa8:	bf00      	nop
}
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000520 	.word	0x20000520
 8009fb4:	20000500 	.word	0x20000500

08009fb8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f805 	bl	8009fd8 <DbgTraceWrite>
 8009fce:	4603      	mov	r3, r0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08a      	sub	sp, #40	@ 0x28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fec:	61bb      	str	r3, [r7, #24]
  return(result);
 8009fee:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009ff0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ff8:	d102      	bne.n	800a000 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ffe:	e037      	b.n	800a070 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d006      	beq.n	800a014 <DbgTraceWrite+0x3c>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d003      	beq.n	800a014 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
 800a012:	e02d      	b.n	800a070 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d02a      	beq.n	800a070 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a01e:	b672      	cpsid	i
}
 800a020:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	b29a      	uxth	r2, r3
 800a026:	2301      	movs	r3, #1
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	4814      	ldr	r0, [pc, #80]	@ (800a07c <DbgTraceWrite+0xa4>)
 800a02c:	f000 f944 	bl	800a2b8 <CircularQueue_Add>
 800a030:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d015      	beq.n	800a064 <DbgTraceWrite+0x8c>
 800a038:	4b11      	ldr	r3, [pc, #68]	@ (800a080 <DbgTraceWrite+0xa8>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d010      	beq.n	800a064 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a042:	4b0f      	ldr	r3, [pc, #60]	@ (800a080 <DbgTraceWrite+0xa8>)
 800a044:	2200      	movs	r2, #0
 800a046:	701a      	strb	r2, [r3, #0]
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f383 8810 	msr	PRIMASK, r3
}
 800a052:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	b29b      	uxth	r3, r3
 800a058:	4a0a      	ldr	r2, [pc, #40]	@ (800a084 <DbgTraceWrite+0xac>)
 800a05a:	4619      	mov	r1, r3
 800a05c:	69f8      	ldr	r0, [r7, #28]
 800a05e:	f7f6 fe6c 	bl	8000d3a <DbgOutputTraces>
 800a062:	e005      	b.n	800a070 <DbgTraceWrite+0x98>
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f383 8810 	msr	PRIMASK, r3
}
 800a06e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a072:	4618      	mov	r0, r3
 800a074:	3728      	adds	r7, #40	@ 0x28
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000500 	.word	0x20000500
 800a080:	20000011 	.word	0x20000011
 800a084:	08009f1d 	.word	0x08009f1d

0800a088 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a092:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d0 <OTP_Read+0x48>)
 800a094:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a096:	e002      	b.n	800a09e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3b08      	subs	r3, #8
 800a09c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3307      	adds	r3, #7
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	79fa      	ldrb	r2, [r7, #7]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d003      	beq.n	800a0b2 <OTP_Read+0x2a>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4a09      	ldr	r2, [pc, #36]	@ (800a0d4 <OTP_Read+0x4c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d1f2      	bne.n	800a098 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3307      	adds	r3, #7
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	79fa      	ldrb	r2, [r7, #7]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d001      	beq.n	800a0c2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	1fff73f8 	.word	0x1fff73f8
 800a0d4:	1fff7000 	.word	0x1fff7000

0800a0d8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	605a      	str	r2, [r3, #4]
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a100:	f3ef 8310 	mrs	r3, PRIMASK
 800a104:	60fb      	str	r3, [r7, #12]
  return(result);
 800a106:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a108:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a10a:	b672      	cpsid	i
}
 800a10c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	429a      	cmp	r2, r3
 800a116:	d102      	bne.n	800a11e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
 800a11c:	e001      	b.n	800a122 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f383 8810 	msr	PRIMASK, r3
}
 800a12c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a130:	4618      	mov	r0, r3
 800a132:	371c      	adds	r7, #28
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a146:	f3ef 8310 	mrs	r3, PRIMASK
 800a14a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a14c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a14e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a150:	b672      	cpsid	i
}
 800a152:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	605a      	str	r2, [r3, #4]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f383 8810 	msr	PRIMASK, r3
}
 800a17a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a17c:	bf00      	nop
 800a17e:	371c      	adds	r7, #28
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a192:	f3ef 8310 	mrs	r3, PRIMASK
 800a196:	60fb      	str	r3, [r7, #12]
  return(result);
 800a198:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a19a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a19c:	b672      	cpsid	i
}
 800a19e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685a      	ldr	r2, [r3, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f383 8810 	msr	PRIMASK, r3
}
 800a1c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1e6:	b672      	cpsid	i
}
 800a1e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	6812      	ldr	r2, [r2, #0]
 800a1f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	6852      	ldr	r2, [r2, #4]
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f383 8810 	msr	PRIMASK, r3
}
 800a208:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a220:	f3ef 8310 	mrs	r3, PRIMASK
 800a224:	60fb      	str	r3, [r7, #12]
  return(result);
 800a226:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a22a:	b672      	cpsid	i
}
 800a22c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff ffca 	bl	800a1d4 <LST_remove_node>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f383 8810 	msr	PRIMASK, r3
}
 800a24a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a24c:	bf00      	nop
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	887a      	ldrh	r2, [r7, #2]
 800a28a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	7e3a      	ldrb	r2, [r7, #24]
 800a290:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a292:	7e3b      	ldrb	r3, [r7, #24]
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d006      	beq.n	800a2aa <CircularQueue_Init+0x56>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	891b      	ldrh	r3, [r3, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a2a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2a8:	e000      	b.n	800a2ac <CircularQueue_Init+0x58>
  }
  return 0;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08e      	sub	sp, #56	@ 0x38
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2d8:	2300      	movs	r3, #0
 800a2da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a2dc:	2300      	movs	r3, #0
 800a2de:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	891b      	ldrh	r3, [r3, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <CircularQueue_Add+0x38>
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	e000      	b.n	800a2f2 <CircularQueue_Add+0x3a>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d029      	beq.n	800a350 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	891b      	ldrh	r3, [r3, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d122      	bne.n	800a34a <CircularQueue_Add+0x92>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	4413      	add	r3, r2
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	4299      	cmp	r1, r3
 800a322:	d306      	bcc.n	800a332 <CircularQueue_Add+0x7a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6919      	ldr	r1, [r3, #16]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	1acb      	subs	r3, r1, r3
 800a32e:	3301      	adds	r3, #1
 800a330:	e002      	b.n	800a338 <CircularQueue_Add+0x80>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	3301      	adds	r3, #1
 800a338:	4413      	add	r3, r2
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	b29b      	uxth	r3, r3
 800a340:	4403      	add	r3, r0
 800a342:	b29b      	uxth	r3, r3
 800a344:	3302      	adds	r3, #2
 800a346:	b29b      	uxth	r3, r3
 800a348:	e001      	b.n	800a34e <CircularQueue_Add+0x96>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	891b      	ldrh	r3, [r3, #8]
 800a34e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	891b      	ldrh	r3, [r3, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	429a      	cmp	r2, r3
 800a368:	d307      	bcc.n	800a37a <CircularQueue_Add+0xc2>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6919      	ldr	r1, [r3, #16]
 800a372:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a374:	440b      	add	r3, r1
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	e000      	b.n	800a37c <CircularQueue_Add+0xc4>
 800a37a:	2300      	movs	r3, #0
 800a37c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a37e:	88fa      	ldrh	r2, [r7, #6]
 800a380:	7ffb      	ldrb	r3, [r7, #31]
 800a382:	4413      	add	r3, r2
 800a384:	461a      	mov	r2, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d80b      	bhi.n	800a3aa <CircularQueue_Add+0xf2>
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	7ffb      	ldrb	r3, [r7, #31]
 800a396:	4413      	add	r3, r2
 800a398:	461a      	mov	r2, r3
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3a0:	fb01 f202 	mul.w	r2, r1, r2
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	e000      	b.n	800a3ac <CircularQueue_Add+0xf4>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a3ae:	7dfa      	ldrb	r2, [r7, #23]
 800a3b0:	7ffb      	ldrb	r3, [r7, #31]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	bf8c      	ite	hi
 800a3b6:	2301      	movhi	r3, #1
 800a3b8:	2300      	movls	r3, #0
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a3be:	7fbb      	ldrb	r3, [r7, #30]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d008      	beq.n	800a3d6 <CircularQueue_Add+0x11e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	7f1b      	ldrb	r3, [r3, #28]
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <CircularQueue_Add+0x11e>
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	e000      	b.n	800a3d8 <CircularQueue_Add+0x120>
 800a3d6:	8bbb      	ldrh	r3, [r7, #28]
 800a3d8:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a3da:	7fbb      	ldrb	r3, [r7, #30]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d008      	beq.n	800a3f2 <CircularQueue_Add+0x13a>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	7f1b      	ldrb	r3, [r3, #28]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <CircularQueue_Add+0x13a>
 800a3ec:	7ffb      	ldrb	r3, [r7, #31]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	e000      	b.n	800a3f4 <CircularQueue_Add+0x13c>
 800a3f2:	8bbb      	ldrh	r3, [r7, #28]
 800a3f4:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a3f6:	88fb      	ldrh	r3, [r7, #6]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 817e 	beq.w	800a6fa <CircularQueue_Add+0x442>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	695a      	ldr	r2, [r3, #20]
 800a402:	88f9      	ldrh	r1, [r7, #6]
 800a404:	7ffb      	ldrb	r3, [r7, #31]
 800a406:	440b      	add	r3, r1
 800a408:	4619      	mov	r1, r3
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	fb01 f303 	mul.w	r3, r1, r3
 800a410:	441a      	add	r2, r3
 800a412:	8bbb      	ldrh	r3, [r7, #28]
 800a414:	441a      	add	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	f200 816d 	bhi.w	800a6fa <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a420:	2300      	movs	r3, #0
 800a422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a424:	e14a      	b.n	800a6bc <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	691a      	ldr	r2, [r3, #16]
 800a42a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a42c:	441a      	add	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	429a      	cmp	r2, r3
 800a434:	d307      	bcc.n	800a446 <CircularQueue_Add+0x18e>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a43c:	441a      	add	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	e003      	b.n	800a44e <CircularQueue_Add+0x196>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	691a      	ldr	r2, [r3, #16]
 800a44a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a44c:	4413      	add	r3, r2
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	891b      	ldrh	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d130      	bne.n	800a4c2 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	6339      	str	r1, [r7, #48]	@ 0x30
 800a46a:	4413      	add	r3, r2
 800a46c:	88fa      	ldrh	r2, [r7, #6]
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a478:	429a      	cmp	r2, r3
 800a47a:	d304      	bcc.n	800a486 <CircularQueue_Add+0x1ce>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	e000      	b.n	800a488 <CircularQueue_Add+0x1d0>
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a48a:	88fb      	ldrh	r3, [r7, #6]
 800a48c:	0a1b      	lsrs	r3, r3, #8
 800a48e:	b298      	uxth	r0, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a496:	1c59      	adds	r1, r3, #1
 800a498:	6339      	str	r1, [r7, #48]	@ 0x30
 800a49a:	4413      	add	r3, r2
 800a49c:	b2c2      	uxtb	r2, r0
 800a49e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d304      	bcc.n	800a4b4 <CircularQueue_Add+0x1fc>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	e000      	b.n	800a4b6 <CircularQueue_Add+0x1fe>
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	1c9a      	adds	r2, r3, #2
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a4c2:	88fa      	ldrh	r2, [r7, #6]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6859      	ldr	r1, [r3, #4]
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	1acb      	subs	r3, r1, r3
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	bf28      	it	cs
 800a4d0:	4613      	movcs	r3, r2
 800a4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d007      	beq.n	800a4ec <CircularQueue_Add+0x234>
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d225      	bcs.n	800a530 <CircularQueue_Add+0x278>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	7f1b      	ldrb	r3, [r3, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d121      	bne.n	800a530 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	18d0      	adds	r0, r2, r3
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4f8:	fb02 f303 	mul.w	r3, r2, r3
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	4413      	add	r3, r2
 800a500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a502:	4619      	mov	r1, r3
 800a504:	f002 f96f 	bl	800c7e6 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	695a      	ldr	r2, [r3, #20]
 800a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50e:	441a      	add	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a514:	2300      	movs	r3, #0
 800a516:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a51c:	88fa      	ldrh	r2, [r7, #6]
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a524:	7ffb      	ldrb	r3, [r7, #31]
 800a526:	b29a      	uxth	r2, r3
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	4413      	add	r3, r2
 800a52c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a52e:	e0a4      	b.n	800a67a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 80a1 	beq.w	800a67a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	7f1b      	ldrb	r3, [r3, #28]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b00      	cmp	r3, #0
 800a542:	d03a      	beq.n	800a5ba <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	891b      	ldrh	r3, [r3, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10d      	bne.n	800a568 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	3b02      	subs	r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	22ff      	movs	r2, #255	@ 0xff
 800a558:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a560:	3b01      	subs	r3, #1
 800a562:	4413      	add	r3, r2
 800a564:	22ff      	movs	r2, #255	@ 0xff
 800a566:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	695a      	ldr	r2, [r3, #20]
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	441a      	add	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a57c:	2300      	movs	r3, #0
 800a57e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	891b      	ldrh	r3, [r3, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d16f      	bne.n	800a668 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	1c59      	adds	r1, r3, #1
 800a590:	6339      	str	r1, [r7, #48]	@ 0x30
 800a592:	4413      	add	r3, r2
 800a594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	0a18      	lsrs	r0, r3, #8
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5a8:	4413      	add	r3, r2
 800a5aa:	b2c2      	uxtb	r2, r0
 800a5ac:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	695b      	ldr	r3, [r3, #20]
 800a5b2:	1c9a      	adds	r2, r3, #2
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	615a      	str	r2, [r3, #20]
 800a5b8:	e056      	b.n	800a668 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	7f1b      	ldrb	r3, [r3, #28]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d050      	beq.n	800a668 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	891b      	ldrh	r3, [r3, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d14a      	bne.n	800a664 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	3b02      	subs	r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5da:	b2d2      	uxtb	r2, r2
 800a5dc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e0:	0a19      	lsrs	r1, r3, #8
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	b2ca      	uxtb	r2, r1
 800a5ee:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	18d0      	adds	r0, r2, r3
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5fc:	fb02 f303 	mul.w	r3, r2, r3
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	4413      	add	r3, r2
 800a604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a606:	4619      	mov	r1, r3
 800a608:	f002 f8ed 	bl	800c7e6 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	695a      	ldr	r2, [r3, #20]
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	441a      	add	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a62e:	2300      	movs	r3, #0
 800a630:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	1c59      	adds	r1, r3, #1
 800a63a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a63c:	4413      	add	r3, r2
 800a63e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a640:	b2d2      	uxtb	r2, r2
 800a642:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a646:	0a18      	lsrs	r0, r3, #8
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	1c59      	adds	r1, r3, #1
 800a650:	6339      	str	r1, [r7, #48]	@ 0x30
 800a652:	4413      	add	r3, r2
 800a654:	b2c2      	uxtb	r2, r0
 800a656:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	1c9a      	adds	r2, r3, #2
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	615a      	str	r2, [r3, #20]
 800a662:	e001      	b.n	800a668 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a664:	2300      	movs	r3, #0
 800a666:	e049      	b.n	800a6fc <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a668:	7ffb      	ldrb	r3, [r7, #31]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4413      	add	r3, r2
 800a672:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d015      	beq.n	800a6ac <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	18d0      	adds	r0, r2, r3
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a68c:	fb03 f202 	mul.w	r2, r3, r2
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	4413      	add	r3, r2
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	4413      	add	r3, r2
 800a698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a69a:	4619      	mov	r1, r3
 800a69c:	f002 f8a3 	bl	800c7e6 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a6:	441a      	add	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	f4ff aeb0 	bcc.w	800a426 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6919      	ldr	r1, [r3, #16]
 800a6ce:	7ffb      	ldrb	r3, [r7, #31]
 800a6d0:	4419      	add	r1, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	d307      	bcc.n	800a6ea <CircularQueue_Add+0x432>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6919      	ldr	r1, [r3, #16]
 800a6de:	7ffb      	ldrb	r3, [r7, #31]
 800a6e0:	4419      	add	r1, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	1acb      	subs	r3, r1, r3
 800a6e8:	e003      	b.n	800a6f2 <CircularQueue_Add+0x43a>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6919      	ldr	r1, [r3, #16]
 800a6ee:	7ffb      	ldrb	r3, [r7, #31]
 800a6f0:	440b      	add	r3, r1
 800a6f2:	4413      	add	r3, r2
 800a6f4:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	e000      	b.n	800a6fc <CircularQueue_Add+0x444>
    return NULL;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3738      	adds	r7, #56	@ 0x38
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	891b      	ldrh	r3, [r3, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <CircularQueue_Remove+0x1e>
 800a71e:	2302      	movs	r3, #2
 800a720:	e000      	b.n	800a724 <CircularQueue_Remove+0x20>
 800a722:	2300      	movs	r3, #0
 800a724:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 80ca 	beq.w	800a8c8 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	891b      	ldrh	r3, [r3, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d120      	bne.n	800a77e <CircularQueue_Remove+0x7a>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4413      	add	r3, r2
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	1c59      	adds	r1, r3, #1
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	4299      	cmp	r1, r3
 800a75a:	d306      	bcc.n	800a76a <CircularQueue_Remove+0x66>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68d9      	ldr	r1, [r3, #12]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	1acb      	subs	r3, r1, r3
 800a766:	3301      	adds	r3, #1
 800a768:	e002      	b.n	800a770 <CircularQueue_Remove+0x6c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	b29b      	uxth	r3, r3
 800a778:	4403      	add	r3, r0
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	e001      	b.n	800a782 <CircularQueue_Remove+0x7e>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	891b      	ldrh	r3, [r3, #8]
 800a782:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7f1b      	ldrb	r3, [r3, #28]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d056      	beq.n	800a83e <CircularQueue_Remove+0x13a>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	7f1b      	ldrb	r3, [r3, #28]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d150      	bne.n	800a83e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a79c:	897b      	ldrh	r3, [r7, #10]
 800a79e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d103      	bne.n	800a7ae <CircularQueue_Remove+0xaa>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	891b      	ldrh	r3, [r3, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d012      	beq.n	800a7d4 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d941      	bls.n	800a83e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	891b      	ldrh	r3, [r3, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d03d      	beq.n	800a83e <CircularQueue_Remove+0x13a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	8912      	ldrh	r2, [r2, #8]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d234      	bcs.n	800a83e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	695a      	ldr	r2, [r3, #20]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68d9      	ldr	r1, [r3, #12]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	1acb      	subs	r3, r1, r3
 800a7e2:	441a      	add	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	891b      	ldrh	r3, [r3, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d120      	bne.n	800a838 <CircularQueue_Remove+0x134>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	1c59      	adds	r1, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	4299      	cmp	r1, r3
 800a814:	d306      	bcc.n	800a824 <CircularQueue_Remove+0x120>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68d9      	ldr	r1, [r3, #12]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	1acb      	subs	r3, r1, r3
 800a820:	3301      	adds	r3, #1
 800a822:	e002      	b.n	800a82a <CircularQueue_Remove+0x126>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	4413      	add	r3, r2
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	b29b      	uxth	r3, r3
 800a832:	4403      	add	r3, r0
 800a834:	b29b      	uxth	r3, r3
 800a836:	e001      	b.n	800a83c <CircularQueue_Remove+0x138>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	891b      	ldrh	r3, [r3, #8]
 800a83c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68d9      	ldr	r1, [r3, #12]
 800a846:	7a7b      	ldrb	r3, [r7, #9]
 800a848:	4419      	add	r1, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	4299      	cmp	r1, r3
 800a850:	d307      	bcc.n	800a862 <CircularQueue_Remove+0x15e>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68d9      	ldr	r1, [r3, #12]
 800a856:	7a7b      	ldrb	r3, [r7, #9]
 800a858:	4419      	add	r1, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	1acb      	subs	r3, r1, r3
 800a860:	e003      	b.n	800a86a <CircularQueue_Remove+0x166>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68d9      	ldr	r1, [r3, #12]
 800a866:	7a7b      	ldrb	r3, [r7, #9]
 800a868:	440b      	add	r3, r1
 800a86a:	4413      	add	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	8979      	ldrh	r1, [r7, #10]
 800a874:	7a7a      	ldrb	r2, [r7, #9]
 800a876:	440a      	add	r2, r1
 800a878:	1a9a      	subs	r2, r3, r2
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01b      	beq.n	800a8be <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	897b      	ldrh	r3, [r7, #10]
 800a88c:	441a      	add	r2, r3
 800a88e:	7a7b      	ldrb	r3, [r7, #9]
 800a890:	441a      	add	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	429a      	cmp	r2, r3
 800a898:	d309      	bcc.n	800a8ae <CircularQueue_Remove+0x1aa>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	897b      	ldrh	r3, [r7, #10]
 800a8a0:	441a      	add	r2, r3
 800a8a2:	7a7b      	ldrb	r3, [r7, #9]
 800a8a4:	441a      	add	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	e005      	b.n	800a8ba <CircularQueue_Remove+0x1b6>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	897b      	ldrh	r3, [r7, #10]
 800a8b4:	441a      	add	r2, r3
 800a8b6:	7a7b      	ldrb	r3, [r7, #9]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	1e5a      	subs	r2, r3, #1
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	897a      	ldrh	r2, [r7, #10]
 800a8d2:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b087      	sub	sp, #28
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	891b      	ldrh	r3, [r3, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <CircularQueue_Sense+0x1e>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e000      	b.n	800a902 <CircularQueue_Sense+0x20>
 800a900:	2300      	movs	r3, #0
 800a902:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 808e 	beq.w	800aa32 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	891b      	ldrh	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d120      	bne.n	800a966 <CircularQueue_Sense+0x84>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	4413      	add	r3, r2
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	1c59      	adds	r1, r3, #1
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	4299      	cmp	r1, r3
 800a942:	d306      	bcc.n	800a952 <CircularQueue_Sense+0x70>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68d9      	ldr	r1, [r3, #12]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	1acb      	subs	r3, r1, r3
 800a94e:	3301      	adds	r3, #1
 800a950:	e002      	b.n	800a958 <CircularQueue_Sense+0x76>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	b29b      	uxth	r3, r3
 800a960:	4403      	add	r3, r0
 800a962:	b29b      	uxth	r3, r3
 800a964:	e001      	b.n	800a96a <CircularQueue_Sense+0x88>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	891b      	ldrh	r3, [r3, #8]
 800a96a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7f1b      	ldrb	r3, [r3, #28]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	d047      	beq.n	800aa08 <CircularQueue_Sense+0x126>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7f1b      	ldrb	r3, [r3, #28]
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d141      	bne.n	800aa08 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a984:	8a7b      	ldrh	r3, [r7, #18]
 800a986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d103      	bne.n	800a996 <CircularQueue_Sense+0xb4>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	891b      	ldrh	r3, [r3, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d012      	beq.n	800a9bc <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d932      	bls.n	800aa08 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	891b      	ldrh	r3, [r3, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d02e      	beq.n	800aa08 <CircularQueue_Sense+0x126>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	8912      	ldrh	r2, [r2, #8]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d225      	bcs.n	800aa08 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	891b      	ldrh	r3, [r3, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d11c      	bne.n	800aa02 <CircularQueue_Sense+0x120>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	4299      	cmp	r1, r3
 800a9e2:	d305      	bcc.n	800a9f0 <CircularQueue_Sense+0x10e>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	68f9      	ldr	r1, [r7, #12]
 800a9ea:	1acb      	subs	r3, r1, r3
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	e001      	b.n	800a9f4 <CircularQueue_Sense+0x112>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	4413      	add	r3, r2
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4403      	add	r3, r0
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	e001      	b.n	800aa06 <CircularQueue_Sense+0x124>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	891b      	ldrh	r3, [r3, #8]
 800aa06:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	7af9      	ldrb	r1, [r7, #11]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4419      	add	r1, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4299      	cmp	r1, r3
 800aa18:	d306      	bcc.n	800aa28 <CircularQueue_Sense+0x146>
 800aa1a:	7af9      	ldrb	r1, [r7, #11]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4419      	add	r1, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	1acb      	subs	r3, r1, r3
 800aa26:	e002      	b.n	800aa2e <CircularQueue_Sense+0x14c>
 800aa28:	7af9      	ldrb	r1, [r7, #11]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	440b      	add	r3, r1
 800aa2e:	4413      	add	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	8a7a      	ldrh	r2, [r7, #18]
 800aa3c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800aa3e:	697b      	ldr	r3, [r7, #20]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	371c      	adds	r7, #28
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800aa50:	4b03      	ldr	r3, [pc, #12]	@ (800aa60 <LL_FLASH_GetUDN+0x14>)
 800aa52:	681b      	ldr	r3, [r3, #0]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	1fff7580 	.word	0x1fff7580

0800aa64 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800aa68:	4b03      	ldr	r3, [pc, #12]	@ (800aa78 <LL_FLASH_GetDeviceID+0x14>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	b2db      	uxtb	r3, r3
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	1fff7584 	.word	0x1fff7584

0800aa7c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800aa80:	4b03      	ldr	r3, [pc, #12]	@ (800aa90 <LL_FLASH_GetSTCompanyID+0x14>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	0a1b      	lsrs	r3, r3, #8
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	1fff7584 	.word	0x1fff7584

0800aa94 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800aa94:	b5b0      	push	{r4, r5, r7, lr}
 800aa96:	b090      	sub	sp, #64	@ 0x40
 800aa98:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aa9a:	2392      	movs	r3, #146	@ 0x92
 800aa9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800aaa0:	4b31      	ldr	r3, [pc, #196]	@ (800ab68 <APP_BLE_Init+0xd4>)
 800aaa2:	1d3c      	adds	r4, r7, #4
 800aaa4:	461d      	mov	r5, r3
 800aaa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aab6:	c403      	stmia	r4!, {r0, r1}
 800aab8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800aaba:	f000 fa67 	bl	800af8c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800aabe:	2101      	movs	r1, #1
 800aac0:	2002      	movs	r0, #2
 800aac2:	f001 f9b9 	bl	800be38 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800aac6:	4a29      	ldr	r2, [pc, #164]	@ (800ab6c <APP_BLE_Init+0xd8>)
 800aac8:	2100      	movs	r1, #0
 800aaca:	2002      	movs	r0, #2
 800aacc:	f001 fae0 	bl	800c090 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800aad0:	1d3b      	adds	r3, r7, #4
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fc14 	bl	8009300 <SHCI_C2_BLE_Init>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800aade:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d008      	beq.n	800aaf8 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800aae6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800aaea:	4619      	mov	r1, r3
 800aaec:	4820      	ldr	r0, [pc, #128]	@ (800ab70 <APP_BLE_Init+0xdc>)
 800aaee:	f001 fcaf 	bl	800c450 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800aaf2:	f7f7 f8d9 	bl	8001ca8 <Error_Handler>
 800aaf6:	e002      	b.n	800aafe <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800aaf8:	481e      	ldr	r0, [pc, #120]	@ (800ab74 <APP_BLE_Init+0xe0>)
 800aafa:	f001 fca9 	bl	800c450 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800aafe:	f000 fa5b 	bl	800afb8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ab02:	f7fe fb57 	bl	80091b4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ab06:	4b1c      	ldr	r3, [pc, #112]	@ (800ab78 <APP_BLE_Init+0xe4>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ab0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ab78 <APP_BLE_Init+0xe4>)
 800ab10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab14:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ab16:	4a19      	ldr	r2, [pc, #100]	@ (800ab7c <APP_BLE_Init+0xe8>)
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	f001 fab8 	bl	800c090 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ab20:	2006      	movs	r0, #6
 800ab22:	f7fe f9ba 	bl	8008e9a <aci_hal_set_radio_activity_mask>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800ab2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d006      	beq.n	800ab42 <APP_BLE_Init+0xae>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ab34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4811      	ldr	r0, [pc, #68]	@ (800ab80 <APP_BLE_Init+0xec>)
 800ab3c:	f001 fc88 	bl	800c450 <iprintf>
 800ab40:	e002      	b.n	800ab48 <APP_BLE_Init+0xb4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ab42:	4810      	ldr	r0, [pc, #64]	@ (800ab84 <APP_BLE_Init+0xf0>)
 800ab44:	f001 fc84 	bl	800c450 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800ab48:	f000 fd10 	bl	800b56c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab78 <APP_BLE_Init+0xe4>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ab52:	4b09      	ldr	r3, [pc, #36]	@ (800ab78 <APP_BLE_Init+0xe4>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800ab58:	2001      	movs	r0, #1
 800ab5a:	f000 fbbb 	bl	800b2d4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800ab5e:	bf00      	nop
}
 800ab60:	3740      	adds	r7, #64	@ 0x40
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bdb0      	pop	{r4, r5, r7, pc}
 800ab66:	bf00      	nop
 800ab68:	0800d6f8 	.word	0x0800d6f8
 800ab6c:	0800951d 	.word	0x0800951d
 800ab70:	0800d61c 	.word	0x0800d61c
 800ab74:	0800d654 	.word	0x0800d654
 800ab78:	20001528 	.word	0x20001528
 800ab7c:	0800b3fd 	.word	0x0800b3fd
 800ab80:	0800d67c 	.word	0x0800d67c
 800ab84:	0800d6c0 	.word	0x0800d6c0

0800ab88 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ab88:	b5b0      	push	{r4, r5, r7, lr}
 800ab8a:	b090      	sub	sp, #64	@ 0x40
 800ab8c:	af04      	add	r7, sp, #16
 800ab8e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ab90:	2392      	movs	r3, #146	@ 0x92
 800ab92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800ab9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2bff      	cmp	r3, #255	@ 0xff
 800aba2:	f000 80e9 	beq.w	800ad78 <SVCCTL_App_Notification+0x1f0>
 800aba6:	2bff      	cmp	r3, #255	@ 0xff
 800aba8:	f300 81d9 	bgt.w	800af5e <SVCCTL_App_Notification+0x3d6>
 800abac:	2b3e      	cmp	r3, #62	@ 0x3e
 800abae:	d042      	beq.n	800ac36 <SVCCTL_App_Notification+0xae>
 800abb0:	2b3e      	cmp	r3, #62	@ 0x3e
 800abb2:	f300 81d4 	bgt.w	800af5e <SVCCTL_App_Notification+0x3d6>
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d002      	beq.n	800abc0 <SVCCTL_App_Notification+0x38>
 800abba:	2b10      	cmp	r3, #16
 800abbc:	d02e      	beq.n	800ac1c <SVCCTL_App_Notification+0x94>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800abbe:	e1ce      	b.n	800af5e <SVCCTL_App_Notification+0x3d6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc2:	3302      	adds	r3, #2
 800abc4:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800abcc:	b29a      	uxth	r2, r3
 800abce:	4bb3      	ldr	r3, [pc, #716]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800abd0:	8adb      	ldrh	r3, [r3, #22]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d114      	bne.n	800ac00 <SVCCTL_App_Notification+0x78>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800abd6:	4bb1      	ldr	r3, [pc, #708]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800abd8:	2200      	movs	r2, #0
 800abda:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800abdc:	4baf      	ldr	r3, [pc, #700]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800abe4:	48ae      	ldr	r0, [pc, #696]	@ (800aea0 <SVCCTL_App_Notification+0x318>)
 800abe6:	f001 fca3 	bl	800c530 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800abf0:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800abf2:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800abf8:	461a      	mov	r2, r3
 800abfa:	48aa      	ldr	r0, [pc, #680]	@ (800aea4 <SVCCTL_App_Notification+0x31c>)
 800abfc:	f001 fc28 	bl	800c450 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ac00:	2001      	movs	r0, #1
 800ac02:	f000 fb67 	bl	800b2d4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800ac06:	4ba8      	ldr	r3, [pc, #672]	@ (800aea8 <SVCCTL_App_Notification+0x320>)
 800ac08:	2201      	movs	r2, #1
 800ac0a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ac0c:	4ba3      	ldr	r3, [pc, #652]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ac0e:	8ada      	ldrh	r2, [r3, #22]
 800ac10:	4ba5      	ldr	r3, [pc, #660]	@ (800aea8 <SVCCTL_App_Notification+0x320>)
 800ac12:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800ac14:	48a4      	ldr	r0, [pc, #656]	@ (800aea8 <SVCCTL_App_Notification+0x320>)
 800ac16:	f000 fc95 	bl	800b544 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ac1a:	e1a3      	b.n	800af64 <SVCCTL_App_Notification+0x3dc>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800ac1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1e:	3302      	adds	r3, #2
 800ac20:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800ac22:	48a2      	ldr	r0, [pc, #648]	@ (800aeac <SVCCTL_App_Notification+0x324>)
 800ac24:	f001 fc84 	bl	800c530 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	48a0      	ldr	r0, [pc, #640]	@ (800aeb0 <SVCCTL_App_Notification+0x328>)
 800ac30:	f001 fc0e 	bl	800c450 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800ac34:	e196      	b.n	800af64 <SVCCTL_App_Notification+0x3dc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ac36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac38:	3302      	adds	r3, #2
 800ac3a:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d02e      	beq.n	800aca2 <SVCCTL_App_Notification+0x11a>
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	f040 8095 	bne.w	800ad74 <SVCCTL_App_Notification+0x1ec>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800ac50:	4898      	ldr	r0, [pc, #608]	@ (800aeb4 <SVCCTL_App_Notification+0x32c>)
 800ac52:	f001 fc6d 	bl	800c530 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ac5c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f5 fd62 	bl	8000728 <__aeabi_i2d>
 800ac64:	f04f 0200 	mov.w	r2, #0
 800ac68:	4b93      	ldr	r3, [pc, #588]	@ (800aeb8 <SVCCTL_App_Notification+0x330>)
 800ac6a:	f7f5 fae1 	bl	8000230 <__aeabi_dmul>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4610      	mov	r0, r2
 800ac74:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ac7c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ac7e:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	9400      	str	r4, [sp, #0]
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4888      	ldr	r0, [pc, #544]	@ (800aebc <SVCCTL_App_Notification+0x334>)
 800ac9c:	f001 fbd8 	bl	800c450 <iprintf>
          break;
 800aca0:	e069      	b.n	800ad76 <SVCCTL_App_Notification+0x1ee>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	3301      	adds	r3, #1
 800aca6:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	4619      	mov	r1, r3
 800acb2:	4883      	ldr	r0, [pc, #524]	@ (800aec0 <SVCCTL_App_Notification+0x338>)
 800acb4:	f001 fbcc 	bl	800c450 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800acbc:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800acc2:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800acc8:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800acce:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800acd4:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800acda:	9302      	str	r3, [sp, #8]
 800acdc:	9101      	str	r1, [sp, #4]
 800acde:	9200      	str	r2, [sp, #0]
 800ace0:	462b      	mov	r3, r5
 800ace2:	4622      	mov	r2, r4
 800ace4:	4601      	mov	r1, r0
 800ace6:	4877      	ldr	r0, [pc, #476]	@ (800aec4 <SVCCTL_App_Notification+0x33c>)
 800ace8:	f001 fbb2 	bl	800c450 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800acf2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f5 fd17 	bl	8000728 <__aeabi_i2d>
 800acfa:	f04f 0200 	mov.w	r2, #0
 800acfe:	4b6e      	ldr	r3, [pc, #440]	@ (800aeb8 <SVCCTL_App_Notification+0x330>)
 800ad00:	f7f5 fa96 	bl	8000230 <__aeabi_dmul>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800ad12:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ad14:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	9400      	str	r4, [sp, #0]
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4862      	ldr	r0, [pc, #392]	@ (800aebc <SVCCTL_App_Notification+0x334>)
 800ad32:	f001 fb8d 	bl	800c450 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ad36:	4b59      	ldr	r3, [pc, #356]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ad38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ad3c:	2b04      	cmp	r3, #4
 800ad3e:	d104      	bne.n	800ad4a <SVCCTL_App_Notification+0x1c2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ad40:	4b56      	ldr	r3, [pc, #344]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ad42:	2206      	movs	r2, #6
 800ad44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800ad48:	e003      	b.n	800ad52 <SVCCTL_App_Notification+0x1ca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ad4a:	4b54      	ldr	r3, [pc, #336]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ad4c:	2205      	movs	r2, #5
 800ad4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	4b50      	ldr	r3, [pc, #320]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ad5c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800ad5e:	4b52      	ldr	r3, [pc, #328]	@ (800aea8 <SVCCTL_App_Notification+0x320>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ad64:	4b4d      	ldr	r3, [pc, #308]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ad66:	8ada      	ldrh	r2, [r3, #22]
 800ad68:	4b4f      	ldr	r3, [pc, #316]	@ (800aea8 <SVCCTL_App_Notification+0x320>)
 800ad6a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800ad6c:	484e      	ldr	r0, [pc, #312]	@ (800aea8 <SVCCTL_App_Notification+0x320>)
 800ad6e:	f000 fbe9 	bl	800b544 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ad72:	e000      	b.n	800ad76 <SVCCTL_App_Notification+0x1ee>
          break;
 800ad74:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ad76:	e0f5      	b.n	800af64 <SVCCTL_App_Notification+0x3dc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800ad78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	f000 80ce 	beq.w	800af2a <SVCCTL_App_Notification+0x3a2>
 800ad8e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ad92:	4293      	cmp	r3, r2
 800ad94:	f300 80e5 	bgt.w	800af62 <SVCCTL_App_Notification+0x3da>
 800ad98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad9c:	f000 80db 	beq.w	800af56 <SVCCTL_App_Notification+0x3ce>
 800ada0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada4:	f300 80dd 	bgt.w	800af62 <SVCCTL_App_Notification+0x3da>
 800ada8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800adac:	4293      	cmp	r3, r2
 800adae:	f300 80d8 	bgt.w	800af62 <SVCCTL_App_Notification+0x3da>
 800adb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adb6:	dc06      	bgt.n	800adc6 <SVCCTL_App_Notification+0x23e>
 800adb8:	2b04      	cmp	r3, #4
 800adba:	f000 80ce 	beq.w	800af5a <SVCCTL_App_Notification+0x3d2>
 800adbe:	2b06      	cmp	r3, #6
 800adc0:	f000 80bc 	beq.w	800af3c <SVCCTL_App_Notification+0x3b4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800adc4:	e0cd      	b.n	800af62 <SVCCTL_App_Notification+0x3da>
 800adc6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800adca:	2b09      	cmp	r3, #9
 800adcc:	f200 80c9 	bhi.w	800af62 <SVCCTL_App_Notification+0x3da>
 800add0:	a201      	add	r2, pc, #4	@ (adr r2, 800add8 <SVCCTL_App_Notification+0x250>)
 800add2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add6:	bf00      	nop
 800add8:	0800aef5 	.word	0x0800aef5
 800addc:	0800ae11 	.word	0x0800ae11
 800ade0:	0800af63 	.word	0x0800af63
 800ade4:	0800af63 	.word	0x0800af63
 800ade8:	0800af63 	.word	0x0800af63
 800adec:	0800af63 	.word	0x0800af63
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800af63 	.word	0x0800af63
 800adf8:	0800ae47 	.word	0x0800ae47
 800adfc:	0800ae09 	.word	0x0800ae09
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ae00:	4831      	ldr	r0, [pc, #196]	@ (800aec8 <SVCCTL_App_Notification+0x340>)
 800ae02:	f001 fb25 	bl	800c450 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ae06:	e0a9      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ae08:	4830      	ldr	r0, [pc, #192]	@ (800aecc <SVCCTL_App_Notification+0x344>)
 800ae0a:	f001 fb91 	bl	800c530 <puts>
          break;
 800ae0e:	e0a5      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800ae10:	482f      	ldr	r0, [pc, #188]	@ (800aed0 <SVCCTL_App_Notification+0x348>)
 800ae12:	f001 fb8d 	bl	800c530 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ae16:	4b21      	ldr	r3, [pc, #132]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ae18:	8adb      	ldrh	r3, [r3, #22]
 800ae1a:	492e      	ldr	r1, [pc, #184]	@ (800aed4 <SVCCTL_App_Notification+0x34c>)
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd f9e9 	bl	80081f4 <aci_gap_pass_key_resp>
 800ae22:	4603      	mov	r3, r0
 800ae24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800ae28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d006      	beq.n	800ae3e <SVCCTL_App_Notification+0x2b6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800ae30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae34:	4619      	mov	r1, r3
 800ae36:	4828      	ldr	r0, [pc, #160]	@ (800aed8 <SVCCTL_App_Notification+0x350>)
 800ae38:	f001 fb0a 	bl	800c450 <iprintf>
          break;
 800ae3c:	e08e      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800ae3e:	4827      	ldr	r0, [pc, #156]	@ (800aedc <SVCCTL_App_Notification+0x354>)
 800ae40:	f001 fb76 	bl	800c530 <puts>
          break;
 800ae44:	e08a      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800ae46:	4826      	ldr	r0, [pc, #152]	@ (800aee0 <SVCCTL_App_Notification+0x358>)
 800ae48:	f001 fb72 	bl	800c530 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800ae50:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ae54:	4619      	mov	r1, r3
 800ae56:	4823      	ldr	r0, [pc, #140]	@ (800aee4 <SVCCTL_App_Notification+0x35c>)
 800ae58:	f001 fafa 	bl	800c450 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5e:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800ae60:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ae64:	4619      	mov	r1, r3
 800ae66:	4820      	ldr	r0, [pc, #128]	@ (800aee8 <SVCCTL_App_Notification+0x360>)
 800ae68:	f001 faf2 	bl	800c450 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ae6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae9c <SVCCTL_App_Notification+0x314>)
 800ae6e:	8adb      	ldrh	r3, [r3, #22]
 800ae70:	2101      	movs	r1, #1
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fb68 	bl	8008548 <aci_gap_numeric_comparison_value_confirm_yesno>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800ae7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d006      	beq.n	800ae94 <SVCCTL_App_Notification+0x30c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800ae86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4817      	ldr	r0, [pc, #92]	@ (800aeec <SVCCTL_App_Notification+0x364>)
 800ae8e:	f001 fadf 	bl	800c450 <iprintf>
          break;
 800ae92:	e063      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800ae94:	4816      	ldr	r0, [pc, #88]	@ (800aef0 <SVCCTL_App_Notification+0x368>)
 800ae96:	f001 fb4b 	bl	800c530 <puts>
          break;
 800ae9a:	e05f      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
 800ae9c:	20001528 	.word	0x20001528
 800aea0:	0800d734 	.word	0x0800d734
 800aea4:	0800d760 	.word	0x0800d760
 800aea8:	200015ac 	.word	0x200015ac
 800aeac:	0800d79c 	.word	0x0800d79c
 800aeb0:	0800d7c0 	.word	0x0800d7c0
 800aeb4:	0800d7d8 	.word	0x0800d7d8
 800aeb8:	3ff40000 	.word	0x3ff40000
 800aebc:	0800d80c 	.word	0x0800d80c
 800aec0:	0800d878 	.word	0x0800d878
 800aec4:	0800d8c0 	.word	0x0800d8c0
 800aec8:	0800d910 	.word	0x0800d910
 800aecc:	0800d938 	.word	0x0800d938
 800aed0:	0800d968 	.word	0x0800d968
 800aed4:	0001b207 	.word	0x0001b207
 800aed8:	0800d990 	.word	0x0800d990
 800aedc:	0800d9c4 	.word	0x0800d9c4
 800aee0:	0800d9ec 	.word	0x0800d9ec
 800aee4:	0800da20 	.word	0x0800da20
 800aee8:	0800da3c 	.word	0x0800da3c
 800aeec:	0800da54 	.word	0x0800da54
 800aef0:	0800daa4 	.word	0x0800daa4
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	3302      	adds	r3, #2
 800aef8:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800aefa:	481d      	ldr	r0, [pc, #116]	@ (800af70 <SVCCTL_App_Notification+0x3e8>)
 800aefc:	f001 fb18 	bl	800c530 <puts>
          if (p_pairing_complete->Status != 0)
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	789b      	ldrb	r3, [r3, #2]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d009      	beq.n	800af1c <SVCCTL_App_Notification+0x394>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	789b      	ldrb	r3, [r3, #2]
 800af0c:	4619      	mov	r1, r3
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	78db      	ldrb	r3, [r3, #3]
 800af12:	461a      	mov	r2, r3
 800af14:	4817      	ldr	r0, [pc, #92]	@ (800af74 <SVCCTL_App_Notification+0x3ec>)
 800af16:	f001 fa9b 	bl	800c450 <iprintf>
 800af1a:	e002      	b.n	800af22 <SVCCTL_App_Notification+0x39a>
            APP_DBG_MSG("     - Pairing Success\n");
 800af1c:	4816      	ldr	r0, [pc, #88]	@ (800af78 <SVCCTL_App_Notification+0x3f0>)
 800af1e:	f001 fb07 	bl	800c530 <puts>
          APP_DBG_MSG("\n");
 800af22:	200a      	movs	r0, #10
 800af24:	f001 faa6 	bl	800c474 <putchar>
          break;
 800af28:	e018      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800af2a:	4814      	ldr	r0, [pc, #80]	@ (800af7c <SVCCTL_App_Notification+0x3f4>)
 800af2c:	f001 fa90 	bl	800c450 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800af30:	4b13      	ldr	r3, [pc, #76]	@ (800af80 <SVCCTL_App_Notification+0x3f8>)
 800af32:	8adb      	ldrh	r3, [r3, #22]
 800af34:	4618      	mov	r0, r3
 800af36:	f7fd fe1a 	bl	8008b6e <aci_gatt_confirm_indication>
        break;
 800af3a:	e00f      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	3302      	adds	r3, #2
 800af40:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 800af42:	4810      	ldr	r0, [pc, #64]	@ (800af84 <SVCCTL_App_Notification+0x3fc>)
 800af44:	f001 faf4 	bl	800c530 <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	4619      	mov	r1, r3
 800af4e:	480e      	ldr	r0, [pc, #56]	@ (800af88 <SVCCTL_App_Notification+0x400>)
 800af50:	f001 fa7e 	bl	800c450 <iprintf>
          break;
 800af54:	e002      	b.n	800af5c <SVCCTL_App_Notification+0x3d4>
          break;
 800af56:	bf00      	nop
 800af58:	e003      	b.n	800af62 <SVCCTL_App_Notification+0x3da>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800af5a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800af5c:	e001      	b.n	800af62 <SVCCTL_App_Notification+0x3da>
      break;
 800af5e:	bf00      	nop
 800af60:	e000      	b.n	800af64 <SVCCTL_App_Notification+0x3dc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800af62:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800af64:	2301      	movs	r3, #1
}
 800af66:	4618      	mov	r0, r3
 800af68:	3730      	adds	r7, #48	@ 0x30
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bdb0      	pop	{r4, r5, r7, pc}
 800af6e:	bf00      	nop
 800af70:	0800daec 	.word	0x0800daec
 800af74:	0800db18 	.word	0x0800db18
 800af78:	0800db54 	.word	0x0800db54
 800af7c:	0800db6c 	.word	0x0800db6c
 800af80:	20001528 	.word	0x20001528
 800af84:	0800db94 	.word	0x0800db94
 800af88:	0800dbb8 	.word	0x0800dbb8

0800af8c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800af92:	4b06      	ldr	r3, [pc, #24]	@ (800afac <Ble_Tl_Init+0x20>)
 800af94:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800af96:	4b06      	ldr	r3, [pc, #24]	@ (800afb0 <Ble_Tl_Init+0x24>)
 800af98:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800af9a:	463b      	mov	r3, r7
 800af9c:	4619      	mov	r1, r3
 800af9e:	4805      	ldr	r0, [pc, #20]	@ (800afb4 <Ble_Tl_Init+0x28>)
 800afa0:	f7fe faa0 	bl	80094e4 <hci_init>

  return;
 800afa4:	bf00      	nop
}
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	200300d8 	.word	0x200300d8
 800afb0:	0800b4d1 	.word	0x0800b4d1
 800afb4:	0800b499 	.word	0x0800b499

0800afb8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800afb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afba:	b08d      	sub	sp, #52	@ 0x34
 800afbc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800afbe:	2300      	movs	r3, #0
 800afc0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800afc2:	2392      	movs	r3, #146	@ 0x92
 800afc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800afc6:	48a5      	ldr	r0, [pc, #660]	@ (800b25c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800afc8:	f001 fab2 	bl	800c530 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800afcc:	f7fd ffb9 	bl	8008f42 <hci_reset>
 800afd0:	4603      	mov	r3, r0
 800afd2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	4619      	mov	r1, r3
 800afde:	48a0      	ldr	r0, [pc, #640]	@ (800b260 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800afe0:	f001 fa36 	bl	800c450 <iprintf>
 800afe4:	e002      	b.n	800afec <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800afe6:	489f      	ldr	r0, [pc, #636]	@ (800b264 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800afe8:	f001 faa2 	bl	800c530 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800afec:	f000 f9c2 	bl	800b374 <BleGetBdAddress>
 800aff0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	2106      	movs	r1, #6
 800aff6:	2000      	movs	r0, #0
 800aff8:	f7fd fe63 	bl	8008cc2 <aci_hal_write_config_data>
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b006:	7dfb      	ldrb	r3, [r7, #23]
 800b008:	4619      	mov	r1, r3
 800b00a:	4897      	ldr	r0, [pc, #604]	@ (800b268 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b00c:	f001 fa20 	bl	800c450 <iprintf>
 800b010:	e021      	b.n	800b056 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b012:	4896      	ldr	r0, [pc, #600]	@ (800b26c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b014:	f001 fa8c 	bl	800c530 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	3305      	adds	r3, #5
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	3304      	adds	r3, #4
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	461c      	mov	r4, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	3303      	adds	r3, #3
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	461d      	mov	r5, r3
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	3302      	adds	r3, #2
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	3301      	adds	r3, #1
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	4619      	mov	r1, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	9302      	str	r3, [sp, #8]
 800b046:	9101      	str	r1, [sp, #4]
 800b048:	9200      	str	r2, [sp, #0]
 800b04a:	462b      	mov	r3, r5
 800b04c:	4622      	mov	r2, r4
 800b04e:	4601      	mov	r1, r0
 800b050:	4887      	ldr	r0, [pc, #540]	@ (800b270 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b052:	f001 f9fd 	bl	800c450 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b056:	4a87      	ldr	r2, [pc, #540]	@ (800b274 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b058:	2110      	movs	r1, #16
 800b05a:	2018      	movs	r0, #24
 800b05c:	f7fd fe31 	bl	8008cc2 <aci_hal_write_config_data>
 800b060:	4603      	mov	r3, r0
 800b062:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	4619      	mov	r1, r3
 800b06e:	4882      	ldr	r0, [pc, #520]	@ (800b278 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b070:	f001 f9ee 	bl	800c450 <iprintf>
 800b074:	e002      	b.n	800b07c <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b076:	4881      	ldr	r0, [pc, #516]	@ (800b27c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b078:	f001 fa5a 	bl	800c530 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b07c:	4a80      	ldr	r2, [pc, #512]	@ (800b280 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b07e:	2110      	movs	r1, #16
 800b080:	2008      	movs	r0, #8
 800b082:	f7fd fe1e 	bl	8008cc2 <aci_hal_write_config_data>
 800b086:	4603      	mov	r3, r0
 800b088:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d005      	beq.n	800b09c <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	4619      	mov	r1, r3
 800b094:	487b      	ldr	r0, [pc, #492]	@ (800b284 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b096:	f001 f9db 	bl	800c450 <iprintf>
 800b09a:	e002      	b.n	800b0a2 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b09c:	487a      	ldr	r0, [pc, #488]	@ (800b288 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b09e:	f001 fa47 	bl	800c530 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b0a2:	2118      	movs	r1, #24
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	f7fd fe91 	bl	8008dcc <aci_hal_set_tx_power_level>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4874      	ldr	r0, [pc, #464]	@ (800b28c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b0ba:	f001 f9c9 	bl	800c450 <iprintf>
 800b0be:	e002      	b.n	800b0c6 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b0c0:	4873      	ldr	r0, [pc, #460]	@ (800b290 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b0c2:	f001 fa35 	bl	800c530 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b0c6:	f7fd faa6 	bl	8008616 <aci_gatt_init>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d005      	beq.n	800b0e0 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	486e      	ldr	r0, [pc, #440]	@ (800b294 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b0da:	f001 f9b9 	bl	800c450 <iprintf>
 800b0de:	e002      	b.n	800b0e6 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b0e0:	486d      	ldr	r0, [pc, #436]	@ (800b298 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b0e2:	f001 fa25 	bl	800c530 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	f043 0301 	orr.w	r3, r3, #1
 800b0f0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d02b      	beq.n	800b150 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b0f8:	4b68      	ldr	r3, [pc, #416]	@ (800b29c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b0fa:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b0fc:	1dba      	adds	r2, r7, #6
 800b0fe:	7bf8      	ldrb	r0, [r7, #15]
 800b100:	1cbb      	adds	r3, r7, #2
 800b102:	9301      	str	r3, [sp, #4]
 800b104:	1d3b      	adds	r3, r7, #4
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4613      	mov	r3, r2
 800b10a:	2208      	movs	r2, #8
 800b10c:	2100      	movs	r1, #0
 800b10e:	f7fd f8d8 	bl	80082c2 <aci_gap_init>
 800b112:	4603      	mov	r3, r0
 800b114:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d005      	beq.n	800b128 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	4619      	mov	r1, r3
 800b120:	485f      	ldr	r0, [pc, #380]	@ (800b2a0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b122:	f001 f995 	bl	800c450 <iprintf>
 800b126:	e002      	b.n	800b12e <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b128:	485e      	ldr	r0, [pc, #376]	@ (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b12a:	f001 fa01 	bl	800c530 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b12e:	88fc      	ldrh	r4, [r7, #6]
 800b130:	88bd      	ldrh	r5, [r7, #4]
 800b132:	68b8      	ldr	r0, [r7, #8]
 800b134:	f7f5 f824 	bl	8000180 <strlen>
 800b138:	4603      	mov	r3, r0
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	2200      	movs	r2, #0
 800b144:	4629      	mov	r1, r5
 800b146:	4620      	mov	r0, r4
 800b148:	f7fd fc68 	bl	8008a1c <aci_gatt_update_char_value>
 800b14c:	4603      	mov	r3, r0
 800b14e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b150:	88f8      	ldrh	r0, [r7, #6]
 800b152:	8879      	ldrh	r1, [r7, #2]
 800b154:	463b      	mov	r3, r7
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	2302      	movs	r3, #2
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7fd fc5e 	bl	8008a1c <aci_gatt_update_char_value>
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b164:	2202      	movs	r2, #2
 800b166:	2102      	movs	r1, #2
 800b168:	2000      	movs	r0, #0
 800b16a:	f7fd ff0e 	bl	8008f8a <hci_le_set_default_phy>
 800b16e:	4603      	mov	r3, r0
 800b170:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b172:	7dfb      	ldrb	r3, [r7, #23]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	4619      	mov	r1, r3
 800b17c:	484a      	ldr	r0, [pc, #296]	@ (800b2a8 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800b17e:	f001 f967 	bl	800c450 <iprintf>
 800b182:	e002      	b.n	800b18a <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800b184:	4849      	ldr	r0, [pc, #292]	@ (800b2ac <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800b186:	f001 f9d3 	bl	800c530 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b18a:	4b49      	ldr	r3, [pc, #292]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b18c:	2201      	movs	r2, #1
 800b18e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b190:	4b47      	ldr	r3, [pc, #284]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f7fc ff15 	bl	8007fc4 <aci_gap_set_io_capability>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d005      	beq.n	800b1b0 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	4842      	ldr	r0, [pc, #264]	@ (800b2b4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800b1aa:	f001 f951 	bl	800c450 <iprintf>
 800b1ae:	e002      	b.n	800b1b6 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b1b0:	4841      	ldr	r0, [pc, #260]	@ (800b2b8 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800b1b2:	f001 f9bd 	bl	800c530 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b1bc:	4b3c      	ldr	r3, [pc, #240]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1be:	2208      	movs	r2, #8
 800b1c0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b1c2:	4b3b      	ldr	r3, [pc, #236]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1c4:	2210      	movs	r2, #16
 800b1c6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b1c8:	4b39      	ldr	r3, [pc, #228]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b1ce:	4b38      	ldr	r3, [pc, #224]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1d0:	4a3a      	ldr	r2, [pc, #232]	@ (800b2bc <Ble_Hci_Gap_Gatt_Init+0x304>)
 800b1d2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b1d4:	4b36      	ldr	r3, [pc, #216]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b1da:	4b35      	ldr	r3, [pc, #212]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1dc:	789c      	ldrb	r4, [r3, #2]
 800b1de:	4b34      	ldr	r3, [pc, #208]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1e0:	785d      	ldrb	r5, [r3, #1]
 800b1e2:	4b33      	ldr	r3, [pc, #204]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1e4:	791b      	ldrb	r3, [r3, #4]
 800b1e6:	4a32      	ldr	r2, [pc, #200]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1e8:	7952      	ldrb	r2, [r2, #5]
 800b1ea:	4931      	ldr	r1, [pc, #196]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1ec:	78c9      	ldrb	r1, [r1, #3]
 800b1ee:	4830      	ldr	r0, [pc, #192]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b1f0:	6880      	ldr	r0, [r0, #8]
 800b1f2:	2600      	movs	r6, #0
 800b1f4:	9604      	str	r6, [sp, #16]
 800b1f6:	9003      	str	r0, [sp, #12]
 800b1f8:	9102      	str	r1, [sp, #8]
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	2201      	movs	r2, #1
 800b202:	4629      	mov	r1, r5
 800b204:	4620      	mov	r0, r4
 800b206:	f7fc ff31 	bl	800806c <aci_gap_set_authentication_requirement>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	4619      	mov	r1, r3
 800b218:	4829      	ldr	r0, [pc, #164]	@ (800b2c0 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800b21a:	f001 f919 	bl	800c450 <iprintf>
 800b21e:	e002      	b.n	800b226 <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b220:	4828      	ldr	r0, [pc, #160]	@ (800b2c4 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800b222:	f001 f985 	bl	800c530 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b226:	4b22      	ldr	r3, [pc, #136]	@ (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b228:	789b      	ldrb	r3, [r3, #2]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00f      	beq.n	800b24e <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800b22e:	f7fd f967 	bl	8008500 <aci_gap_configure_filter_accept_list>
 800b232:	4603      	mov	r3, r0
 800b234:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d005      	beq.n	800b248 <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
 800b23e:	4619      	mov	r1, r3
 800b240:	4821      	ldr	r0, [pc, #132]	@ (800b2c8 <Ble_Hci_Gap_Gatt_Init+0x310>)
 800b242:	f001 f905 	bl	800c450 <iprintf>
 800b246:	e002      	b.n	800b24e <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b248:	4820      	ldr	r0, [pc, #128]	@ (800b2cc <Ble_Hci_Gap_Gatt_Init+0x314>)
 800b24a:	f001 f971 	bl	800c530 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b24e:	4820      	ldr	r0, [pc, #128]	@ (800b2d0 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800b250:	f001 f8fe 	bl	800c450 <iprintf>
}
 800b254:	bf00      	nop
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25c:	0800dbd0 	.word	0x0800dbd0
 800b260:	0800dbfc 	.word	0x0800dbfc
 800b264:	0800dc2c 	.word	0x0800dc2c
 800b268:	0800dc4c 	.word	0x0800dc4c
 800b26c:	0800dca8 	.word	0x0800dca8
 800b270:	0800dcf4 	.word	0x0800dcf4
 800b274:	0800e940 	.word	0x0800e940
 800b278:	0800dd30 	.word	0x0800dd30
 800b27c:	0800dd88 	.word	0x0800dd88
 800b280:	0800e950 	.word	0x0800e950
 800b284:	0800ddd0 	.word	0x0800ddd0
 800b288:	0800de28 	.word	0x0800de28
 800b28c:	0800de70 	.word	0x0800de70
 800b290:	0800deb0 	.word	0x0800deb0
 800b294:	0800dee0 	.word	0x0800dee0
 800b298:	0800df14 	.word	0x0800df14
 800b29c:	0800df38 	.word	0x0800df38
 800b2a0:	0800df44 	.word	0x0800df44
 800b2a4:	0800df74 	.word	0x0800df74
 800b2a8:	0800df94 	.word	0x0800df94
 800b2ac:	0800dfd0 	.word	0x0800dfd0
 800b2b0:	20001528 	.word	0x20001528
 800b2b4:	0800dffc 	.word	0x0800dffc
 800b2b8:	0800e03c 	.word	0x0800e03c
 800b2bc:	0001b207 	.word	0x0001b207
 800b2c0:	0800e06c 	.word	0x0800e06c
 800b2c4:	0800e0b8 	.word	0x0800e0b8
 800b2c8:	0800e0f4 	.word	0x0800e0f4
 800b2cc:	0800e134 	.word	0x0800e134
 800b2d0:	0800e164 	.word	0x0800e164

0800b2d4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08c      	sub	sp, #48	@ 0x30
 800b2d8:	af08      	add	r7, sp, #32
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b2de:	2392      	movs	r3, #146	@ 0x92
 800b2e0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b35c <Adv_Request+0x88>)
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9306      	str	r3, [sp, #24]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9305      	str	r3, [sp, #20]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	9304      	str	r3, [sp, #16]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	9303      	str	r3, [sp, #12]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9302      	str	r3, [sp, #8]
 800b2fe:	2300      	movs	r3, #0
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	2300      	movs	r3, #0
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	2300      	movs	r3, #0
 800b308:	22a0      	movs	r2, #160	@ 0xa0
 800b30a:	2180      	movs	r1, #128	@ 0x80
 800b30c:	2000      	movs	r0, #0
 800b30e:	f7fc fd5f 	bl	8007dd0 <aci_gap_set_discoverable>
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	4619      	mov	r1, r3
 800b320:	480f      	ldr	r0, [pc, #60]	@ (800b360 <Adv_Request+0x8c>)
 800b322:	f001 f895 	bl	800c450 <iprintf>
 800b326:	e002      	b.n	800b32e <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b328:	480e      	ldr	r0, [pc, #56]	@ (800b364 <Adv_Request+0x90>)
 800b32a:	f001 f901 	bl	800c530 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b32e:	490e      	ldr	r1, [pc, #56]	@ (800b368 <Adv_Request+0x94>)
 800b330:	200c      	movs	r0, #12
 800b332:	f7fd f873 	bl	800841c <aci_gap_update_adv_data>
 800b336:	4603      	mov	r3, r0
 800b338:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	4619      	mov	r1, r3
 800b344:	4809      	ldr	r0, [pc, #36]	@ (800b36c <Adv_Request+0x98>)
 800b346:	f001 f883 	bl	800c450 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b34a:	e003      	b.n	800b354 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b34c:	4808      	ldr	r0, [pc, #32]	@ (800b370 <Adv_Request+0x9c>)
 800b34e:	f001 f87f 	bl	800c450 <iprintf>
  return;
 800b352:	bf00      	nop
}
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20001528 	.word	0x20001528
 800b360:	0800e190 	.word	0x0800e190
 800b364:	0800e1c8 	.word	0x0800e1c8
 800b368:	20000014 	.word	0x20000014
 800b36c:	0800e1f0 	.word	0x0800e1f0
 800b370:	0800e224 	.word	0x0800e224

0800b374 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b37a:	f7ff fb67 	bl	800aa4c <LL_FLASH_GetUDN>
 800b37e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b386:	d023      	beq.n	800b3d0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b388:	f7ff fb78 	bl	800aa7c <LL_FLASH_GetSTCompanyID>
 800b38c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b38e:	f7ff fb69 	bl	800aa64 <LL_FLASH_GetDeviceID>
 800b392:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	b2da      	uxtb	r2, r3
 800b398:	4b16      	ldr	r3, [pc, #88]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b39a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	0a1b      	lsrs	r3, r3, #8
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	4b14      	ldr	r3, [pc, #80]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b3a4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	4b12      	ldr	r3, [pc, #72]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b3ac:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	4b10      	ldr	r3, [pc, #64]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b3b4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	0a1b      	lsrs	r3, r3, #8
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b3be:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	0c1b      	lsrs	r3, r3, #16
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b3c8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f4 <BleGetBdAddress+0x80>)
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	e00b      	b.n	800b3e8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	f7fe fe59 	bl	800a088 <OTP_Read>
 800b3d6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	e001      	b.n	800b3e8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b3e4:	4b04      	ldr	r3, [pc, #16]	@ (800b3f8 <BleGetBdAddress+0x84>)
 800b3e6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b3e8:	697b      	ldr	r3, [r7, #20]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20001520 	.word	0x20001520
 800b3f8:	0800e938 	.word	0x0800e938

0800b3fc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b402:	4b10      	ldr	r3, [pc, #64]	@ (800b444 <Adv_Cancel+0x48>)
 800b404:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b408:	2b05      	cmp	r3, #5
 800b40a:	d017      	beq.n	800b43c <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b40c:	2392      	movs	r3, #146	@ 0x92
 800b40e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b410:	f7fc fcba 	bl	8007d88 <aci_gap_set_non_discoverable>
 800b414:	4603      	mov	r3, r0
 800b416:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b418:	4b0a      	ldr	r3, [pc, #40]	@ (800b444 <Adv_Cancel+0x48>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b426:	4808      	ldr	r0, [pc, #32]	@ (800b448 <Adv_Cancel+0x4c>)
 800b428:	f001 f812 	bl	800c450 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b42c:	e006      	b.n	800b43c <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800b42e:	4807      	ldr	r0, [pc, #28]	@ (800b44c <Adv_Cancel+0x50>)
 800b430:	f001 f80e 	bl	800c450 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b434:	4806      	ldr	r0, [pc, #24]	@ (800b450 <Adv_Cancel+0x54>)
 800b436:	f001 f80b 	bl	800c450 <iprintf>
  return;
 800b43a:	bf00      	nop
 800b43c:	bf00      	nop
}
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	20001528 	.word	0x20001528
 800b448:	0800e24c 	.word	0x0800e24c
 800b44c:	0800e270 	.word	0x0800e270
 800b450:	0800e278 	.word	0x0800e278

0800b454 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b45c:	2100      	movs	r1, #0
 800b45e:	2002      	movs	r0, #2
 800b460:	f000 fe38 	bl	800c0d4 <UTIL_SEQ_SetTask>

  return;
 800b464:	bf00      	nop
}
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b474:	2001      	movs	r0, #1
 800b476:	f000 fe99 	bl	800c1ac <UTIL_SEQ_SetEvt>

  return;
 800b47a:	bf00      	nop
}
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b48a:	2001      	movs	r0, #1
 800b48c:	f000 feae 	bl	800c1ec <UTIL_SEQ_WaitEvt>

  return;
 800b490:	bf00      	nop
}
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fd fed4 	bl	8009258 <SVCCTL_UserEvtRx>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b4c0:	e003      	b.n	800b4ca <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	701a      	strb	r2, [r3, #0]
  return;
 800b4c8:	bf00      	nop
}
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b4da:	79fb      	ldrb	r3, [r7, #7]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <BLE_StatusNot+0x16>
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d006      	beq.n	800b4f2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b4e4:	e00b      	b.n	800b4fe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 fe1e 	bl	800c12c <UTIL_SEQ_PauseTask>
      break;
 800b4f0:	e005      	b.n	800b4fe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fe38 	bl	800c16c <UTIL_SEQ_ResumeTask>
      break;
 800b4fc:	bf00      	nop
  }

  return;
 800b4fe:	bf00      	nop
}
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b04      	cmp	r3, #4
 800b516:	d80d      	bhi.n	800b534 <Custom_STM_App_Notification+0x2c>
 800b518:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <Custom_STM_App_Notification+0x18>)
 800b51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51e:	bf00      	nop
 800b520:	0800b535 	.word	0x0800b535
 800b524:	0800b535 	.word	0x0800b535
 800b528:	0800b535 	.word	0x0800b535
 800b52c:	0800b535 	.word	0x0800b535
 800b530:	0800b535 	.word	0x0800b535

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b534:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b536:	bf00      	nop
}
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop

0800b544 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <Custom_APP_Notification+0x16>
 800b554:	2b01      	cmp	r3, #1
 800b556:	d002      	beq.n	800b55e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b558:	e002      	b.n	800b560 <Custom_APP_Notification+0x1c>
      break;
 800b55a:	bf00      	nop
 800b55c:	e000      	b.n	800b560 <Custom_APP_Notification+0x1c>
      break;
 800b55e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b560:	bf00      	nop
}
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	 Custom_STM_App_Update_Char(CUSTOM_STM_TIME_STAMP, (uint8_t*)&timestamp);
 800b570:	4904      	ldr	r1, [pc, #16]	@ (800b584 <Custom_APP_Init+0x18>)
 800b572:	2000      	movs	r0, #0
 800b574:	f000 f9ac 	bl	800b8d0 <Custom_STM_App_Update_Char>
	 Custom_STM_App_Update_Char(CUSTOM_STM_PILL_1, (uint8_t*)&pill_1);
 800b578:	4903      	ldr	r1, [pc, #12]	@ (800b588 <Custom_APP_Init+0x1c>)
 800b57a:	2001      	movs	r0, #1
 800b57c:	f000 f9a8 	bl	800b8d0 <Custom_STM_App_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b580:	bf00      	nop
}
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000020 	.word	0x20000020
 800b588:	20000024 	.word	0x20000024

0800b58c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08e      	sub	sp, #56	@ 0x38
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b594:	2300      	movs	r3, #0
 800b596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3301      	adds	r3, #1
 800b59e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2bff      	cmp	r3, #255	@ 0xff
 800b5a6:	f040 80a8 	bne.w	800b6fa <Custom_STM_Event_Handler+0x16e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800b5ba:	2b1a      	cmp	r3, #26
 800b5bc:	f200 8097 	bhi.w	800b6ee <Custom_STM_Event_Handler+0x162>
 800b5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c8 <Custom_STM_Event_Handler+0x3c>)
 800b5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c6:	bf00      	nop
 800b5c8:	0800b635 	.word	0x0800b635
 800b5cc:	0800b6ef 	.word	0x0800b6ef
 800b5d0:	0800b6ef 	.word	0x0800b6ef
 800b5d4:	0800b6ef 	.word	0x0800b6ef
 800b5d8:	0800b6ef 	.word	0x0800b6ef
 800b5dc:	0800b6ef 	.word	0x0800b6ef
 800b5e0:	0800b6ef 	.word	0x0800b6ef
 800b5e4:	0800b6ef 	.word	0x0800b6ef
 800b5e8:	0800b6ef 	.word	0x0800b6ef
 800b5ec:	0800b6ef 	.word	0x0800b6ef
 800b5f0:	0800b6ef 	.word	0x0800b6ef
 800b5f4:	0800b6ef 	.word	0x0800b6ef
 800b5f8:	0800b6ef 	.word	0x0800b6ef
 800b5fc:	0800b6ef 	.word	0x0800b6ef
 800b600:	0800b6ef 	.word	0x0800b6ef
 800b604:	0800b6ef 	.word	0x0800b6ef
 800b608:	0800b6ef 	.word	0x0800b6ef
 800b60c:	0800b6ef 	.word	0x0800b6ef
 800b610:	0800b6ef 	.word	0x0800b6ef
 800b614:	0800b66f 	.word	0x0800b66f
 800b618:	0800b6ef 	.word	0x0800b6ef
 800b61c:	0800b6ef 	.word	0x0800b6ef
 800b620:	0800b6ef 	.word	0x0800b6ef
 800b624:	0800b6ef 	.word	0x0800b6ef
 800b628:	0800b6ef 	.word	0x0800b6ef
 800b62c:	0800b6ef 	.word	0x0800b6ef
 800b630:	0800b6d1 	.word	0x0800b6d1
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b636:	3302      	adds	r3, #2
 800b638:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTime_StampHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	885b      	ldrh	r3, [r3, #2]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	461a      	mov	r2, r3
 800b642:	4b31      	ldr	r3, [pc, #196]	@ (800b708 <Custom_STM_Event_Handler+0x17c>)
 800b644:	885b      	ldrh	r3, [r3, #2]
 800b646:	3301      	adds	r3, #1
 800b648:	429a      	cmp	r2, r3
 800b64a:	d103      	bne.n	800b654 <Custom_STM_Event_Handler+0xc8>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b64c:	2301      	movs	r3, #1
 800b64e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800b652:	e04e      	b.n	800b6f2 <Custom_STM_Event_Handler+0x166>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	885b      	ldrh	r3, [r3, #2]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	461a      	mov	r2, r3
 800b65c:	4b2a      	ldr	r3, [pc, #168]	@ (800b708 <Custom_STM_Event_Handler+0x17c>)
 800b65e:	889b      	ldrh	r3, [r3, #4]
 800b660:	3301      	adds	r3, #1
 800b662:	429a      	cmp	r2, r3
 800b664:	d145      	bne.n	800b6f2 <Custom_STM_Event_Handler+0x166>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b666:	2301      	movs	r3, #1
 800b668:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 800b66c:	e041      	b.n	800b6f2 <Custom_STM_Event_Handler+0x166>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	3302      	adds	r3, #2
 800b672:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomTime_StampHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b676:	885b      	ldrh	r3, [r3, #2]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	461a      	mov	r2, r3
 800b67c:	4b22      	ldr	r3, [pc, #136]	@ (800b708 <Custom_STM_Event_Handler+0x17c>)
 800b67e:	885b      	ldrh	r3, [r3, #2]
 800b680:	3301      	adds	r3, #1
 800b682:	429a      	cmp	r2, r3
 800b684:	d10d      	bne.n	800b6a2 <Custom_STM_Event_Handler+0x116>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b686:	2301      	movs	r3, #1
 800b688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	b29b      	uxth	r3, r3
 800b692:	4618      	mov	r0, r3
 800b694:	f7fd fac0 	bl	8008c18 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */

            Custom_STM_App_Update_Char(CUSTOM_STM_PILL_1, &raw);
 800b698:	491c      	ldr	r1, [pc, #112]	@ (800b70c <Custom_STM_Event_Handler+0x180>)
 800b69a:	2001      	movs	r0, #1
 800b69c:	f000 f918 	bl	800b8d0 <Custom_STM_App_Update_Char>
            /*USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800b6a0:	e029      	b.n	800b6f6 <Custom_STM_Event_Handler+0x16a>
          else if (read_req->Attribute_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a4:	885b      	ldrh	r3, [r3, #2]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4b17      	ldr	r3, [pc, #92]	@ (800b708 <Custom_STM_Event_Handler+0x17c>)
 800b6ac:	889b      	ldrh	r3, [r3, #4]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d120      	bne.n	800b6f6 <Custom_STM_Event_Handler+0x16a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fd faa9 	bl	8008c18 <aci_gatt_allow_read>
            Custom_STM_App_Update_Char(CUSTOM_STM_PILL_1, &raw);
 800b6c6:	4911      	ldr	r1, [pc, #68]	@ (800b70c <Custom_STM_Event_Handler+0x180>)
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f000 f901 	bl	800b8d0 <Custom_STM_App_Update_Char>
          break;
 800b6ce:	e012      	b.n	800b6f6 <Custom_STM_Event_Handler+0x16a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800b6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d2:	3302      	adds	r3, #2
 800b6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800b6d6:	2304      	movs	r3, #4
 800b6d8:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800b6e2:	f107 030c 	add.w	r3, r7, #12
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff ff0e 	bl	800b508 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800b6ec:	e004      	b.n	800b6f8 <Custom_STM_Event_Handler+0x16c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b6ee:	bf00      	nop
 800b6f0:	e004      	b.n	800b6fc <Custom_STM_Event_Handler+0x170>
          break;
 800b6f2:	bf00      	nop
 800b6f4:	e002      	b.n	800b6fc <Custom_STM_Event_Handler+0x170>
          break;
 800b6f6:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b6f8:	e000      	b.n	800b6fc <Custom_STM_Event_Handler+0x170>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b6fa:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b6fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800b700:	4618      	mov	r0, r3
 800b702:	3738      	adds	r7, #56	@ 0x38
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	200015b0 	.word	0x200015b0
 800b70c:	20000460 	.word	0x20000460

0800b710 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08c      	sub	sp, #48	@ 0x30
 800b714:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b716:	2392      	movs	r3, #146	@ 0x92
 800b718:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b71a:	4861      	ldr	r0, [pc, #388]	@ (800b8a0 <SVCCTL_InitCustomSvc+0x190>)
 800b71c:	f7fd fd82 	bl	8009224 <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 800b720:	2305      	movs	r3, #5
 800b722:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PILL_STATUS_UUID(uuid.Char_UUID_128);
 800b724:	238f      	movs	r3, #143	@ 0x8f
 800b726:	713b      	strb	r3, [r7, #4]
 800b728:	23e5      	movs	r3, #229	@ 0xe5
 800b72a:	717b      	strb	r3, [r7, #5]
 800b72c:	23b3      	movs	r3, #179	@ 0xb3
 800b72e:	71bb      	strb	r3, [r7, #6]
 800b730:	23d5      	movs	r3, #213	@ 0xd5
 800b732:	71fb      	strb	r3, [r7, #7]
 800b734:	232e      	movs	r3, #46	@ 0x2e
 800b736:	723b      	strb	r3, [r7, #8]
 800b738:	237f      	movs	r3, #127	@ 0x7f
 800b73a:	727b      	strb	r3, [r7, #9]
 800b73c:	234a      	movs	r3, #74	@ 0x4a
 800b73e:	72bb      	strb	r3, [r7, #10]
 800b740:	2398      	movs	r3, #152	@ 0x98
 800b742:	72fb      	strb	r3, [r7, #11]
 800b744:	232a      	movs	r3, #42	@ 0x2a
 800b746:	733b      	strb	r3, [r7, #12]
 800b748:	2348      	movs	r3, #72	@ 0x48
 800b74a:	737b      	strb	r3, [r7, #13]
 800b74c:	237a      	movs	r3, #122	@ 0x7a
 800b74e:	73bb      	strb	r3, [r7, #14]
 800b750:	23cc      	movs	r3, #204	@ 0xcc
 800b752:	73fb      	strb	r3, [r7, #15]
 800b754:	2304      	movs	r3, #4
 800b756:	743b      	strb	r3, [r7, #16]
 800b758:	2300      	movs	r3, #0
 800b75a:	747b      	strb	r3, [r7, #17]
 800b75c:	2300      	movs	r3, #0
 800b75e:	74bb      	strb	r3, [r7, #18]
 800b760:	2300      	movs	r3, #0
 800b762:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b764:	7dbb      	ldrb	r3, [r7, #22]
 800b766:	1d39      	adds	r1, r7, #4
 800b768:	4a4e      	ldr	r2, [pc, #312]	@ (800b8a4 <SVCCTL_InitCustomSvc+0x194>)
 800b76a:	9200      	str	r2, [sp, #0]
 800b76c:	2201      	movs	r2, #1
 800b76e:	2002      	movs	r0, #2
 800b770:	f7fc ff76 	bl	8008660 <aci_gatt_add_service>
 800b774:	4603      	mov	r3, r0
 800b776:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomPill_StatusHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d005      	beq.n	800b78a <SVCCTL_InitCustomSvc+0x7a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: PILL_STATUS, error code: 0x%x \n\r", ret);
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	4619      	mov	r1, r3
 800b782:	4849      	ldr	r0, [pc, #292]	@ (800b8a8 <SVCCTL_InitCustomSvc+0x198>)
 800b784:	f000 fe64 	bl	800c450 <iprintf>
 800b788:	e002      	b.n	800b790 <SVCCTL_InitCustomSvc+0x80>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: PILL_STATUS \n\r");
 800b78a:	4848      	ldr	r0, [pc, #288]	@ (800b8ac <SVCCTL_InitCustomSvc+0x19c>)
 800b78c:	f000 fe60 	bl	800c450 <iprintf>
  }

  /**
   *  time_stamp
   */
  COPY_TIME_STAMP_UUID(uuid.Char_UUID_128);
 800b790:	2319      	movs	r3, #25
 800b792:	713b      	strb	r3, [r7, #4]
 800b794:	23ed      	movs	r3, #237	@ 0xed
 800b796:	717b      	strb	r3, [r7, #5]
 800b798:	2382      	movs	r3, #130	@ 0x82
 800b79a:	71bb      	strb	r3, [r7, #6]
 800b79c:	23ae      	movs	r3, #174	@ 0xae
 800b79e:	71fb      	strb	r3, [r7, #7]
 800b7a0:	23ed      	movs	r3, #237	@ 0xed
 800b7a2:	723b      	strb	r3, [r7, #8]
 800b7a4:	2321      	movs	r3, #33	@ 0x21
 800b7a6:	727b      	strb	r3, [r7, #9]
 800b7a8:	234c      	movs	r3, #76	@ 0x4c
 800b7aa:	72bb      	strb	r3, [r7, #10]
 800b7ac:	239d      	movs	r3, #157	@ 0x9d
 800b7ae:	72fb      	strb	r3, [r7, #11]
 800b7b0:	2341      	movs	r3, #65	@ 0x41
 800b7b2:	733b      	strb	r3, [r7, #12]
 800b7b4:	2345      	movs	r3, #69	@ 0x45
 800b7b6:	737b      	strb	r3, [r7, #13]
 800b7b8:	2322      	movs	r3, #34	@ 0x22
 800b7ba:	73bb      	strb	r3, [r7, #14]
 800b7bc:	238e      	movs	r3, #142	@ 0x8e
 800b7be:	73fb      	strb	r3, [r7, #15]
 800b7c0:	2305      	movs	r3, #5
 800b7c2:	743b      	strb	r3, [r7, #16]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	747b      	strb	r3, [r7, #17]
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	74bb      	strb	r3, [r7, #18]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPill_StatusHdle,
 800b7d0:	4b34      	ldr	r3, [pc, #208]	@ (800b8a4 <SVCCTL_InitCustomSvc+0x194>)
 800b7d2:	8818      	ldrh	r0, [r3, #0]
 800b7d4:	4b36      	ldr	r3, [pc, #216]	@ (800b8b0 <SVCCTL_InitCustomSvc+0x1a0>)
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	1d3a      	adds	r2, r7, #4
 800b7da:	4936      	ldr	r1, [pc, #216]	@ (800b8b4 <SVCCTL_InitCustomSvc+0x1a4>)
 800b7dc:	9105      	str	r1, [sp, #20]
 800b7de:	2100      	movs	r1, #0
 800b7e0:	9104      	str	r1, [sp, #16]
 800b7e2:	2110      	movs	r1, #16
 800b7e4:	9103      	str	r1, [sp, #12]
 800b7e6:	2105      	movs	r1, #5
 800b7e8:	9102      	str	r1, [sp, #8]
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	9101      	str	r1, [sp, #4]
 800b7ee:	210a      	movs	r1, #10
 800b7f0:	9100      	str	r1, [sp, #0]
 800b7f2:	2102      	movs	r1, #2
 800b7f4:	f7fd f80a 	bl	800880c <aci_gatt_add_char>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomTime_StampHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <SVCCTL_InitCustomSvc+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : TIME_STAMP, error code: 0x%x \n\r", ret);
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	4619      	mov	r1, r3
 800b806:	482c      	ldr	r0, [pc, #176]	@ (800b8b8 <SVCCTL_InitCustomSvc+0x1a8>)
 800b808:	f000 fe22 	bl	800c450 <iprintf>
 800b80c:	e002      	b.n	800b814 <SVCCTL_InitCustomSvc+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TIME_STAMP \n\r");
 800b80e:	482b      	ldr	r0, [pc, #172]	@ (800b8bc <SVCCTL_InitCustomSvc+0x1ac>)
 800b810:	f000 fe1e 	bl	800c450 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  PILL_1
   */
  COPY_PILL_1_UUID(uuid.Char_UUID_128);
 800b814:	2319      	movs	r3, #25
 800b816:	713b      	strb	r3, [r7, #4]
 800b818:	23ed      	movs	r3, #237	@ 0xed
 800b81a:	717b      	strb	r3, [r7, #5]
 800b81c:	2382      	movs	r3, #130	@ 0x82
 800b81e:	71bb      	strb	r3, [r7, #6]
 800b820:	23ae      	movs	r3, #174	@ 0xae
 800b822:	71fb      	strb	r3, [r7, #7]
 800b824:	23ed      	movs	r3, #237	@ 0xed
 800b826:	723b      	strb	r3, [r7, #8]
 800b828:	2321      	movs	r3, #33	@ 0x21
 800b82a:	727b      	strb	r3, [r7, #9]
 800b82c:	234c      	movs	r3, #76	@ 0x4c
 800b82e:	72bb      	strb	r3, [r7, #10]
 800b830:	239d      	movs	r3, #157	@ 0x9d
 800b832:	72fb      	strb	r3, [r7, #11]
 800b834:	2341      	movs	r3, #65	@ 0x41
 800b836:	733b      	strb	r3, [r7, #12]
 800b838:	2345      	movs	r3, #69	@ 0x45
 800b83a:	737b      	strb	r3, [r7, #13]
 800b83c:	2322      	movs	r3, #34	@ 0x22
 800b83e:	73bb      	strb	r3, [r7, #14]
 800b840:	238e      	movs	r3, #142	@ 0x8e
 800b842:	73fb      	strb	r3, [r7, #15]
 800b844:	2306      	movs	r3, #6
 800b846:	743b      	strb	r3, [r7, #16]
 800b848:	2300      	movs	r3, #0
 800b84a:	747b      	strb	r3, [r7, #17]
 800b84c:	2300      	movs	r3, #0
 800b84e:	74bb      	strb	r3, [r7, #18]
 800b850:	2300      	movs	r3, #0
 800b852:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPill_StatusHdle,
 800b854:	4b13      	ldr	r3, [pc, #76]	@ (800b8a4 <SVCCTL_InitCustomSvc+0x194>)
 800b856:	8818      	ldrh	r0, [r3, #0]
 800b858:	4b19      	ldr	r3, [pc, #100]	@ (800b8c0 <SVCCTL_InitCustomSvc+0x1b0>)
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	1d3a      	adds	r2, r7, #4
 800b85e:	4919      	ldr	r1, [pc, #100]	@ (800b8c4 <SVCCTL_InitCustomSvc+0x1b4>)
 800b860:	9105      	str	r1, [sp, #20]
 800b862:	2100      	movs	r1, #0
 800b864:	9104      	str	r1, [sp, #16]
 800b866:	2110      	movs	r1, #16
 800b868:	9103      	str	r1, [sp, #12]
 800b86a:	2105      	movs	r1, #5
 800b86c:	9102      	str	r1, [sp, #8]
 800b86e:	2100      	movs	r1, #0
 800b870:	9101      	str	r1, [sp, #4]
 800b872:	210a      	movs	r1, #10
 800b874:	9100      	str	r1, [sp, #0]
 800b876:	2102      	movs	r1, #2
 800b878:	f7fc ffc8 	bl	800880c <aci_gatt_add_char>
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomPill_1Hdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d005      	beq.n	800b892 <SVCCTL_InitCustomSvc+0x182>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : PILL_1, error code: 0x%x \n\r", ret);
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	4619      	mov	r1, r3
 800b88a:	480f      	ldr	r0, [pc, #60]	@ (800b8c8 <SVCCTL_InitCustomSvc+0x1b8>)
 800b88c:	f000 fde0 	bl	800c450 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b890:	e003      	b.n	800b89a <SVCCTL_InitCustomSvc+0x18a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : PILL_1 \n\r");
 800b892:	480e      	ldr	r0, [pc, #56]	@ (800b8cc <SVCCTL_InitCustomSvc+0x1bc>)
 800b894:	f000 fddc 	bl	800c450 <iprintf>
  return;
 800b898:	bf00      	nop
}
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	0800b58d 	.word	0x0800b58d
 800b8a4:	200015b0 	.word	0x200015b0
 800b8a8:	0800e294 	.word	0x0800e294
 800b8ac:	0800e2e0 	.word	0x0800e2e0
 800b8b0:	20000026 	.word	0x20000026
 800b8b4:	200015b2 	.word	0x200015b2
 800b8b8:	0800e318 	.word	0x0800e318
 800b8bc:	0800e364 	.word	0x0800e364
 800b8c0:	20000028 	.word	0x20000028
 800b8c4:	200015b4 	.word	0x200015b4
 800b8c8:	0800e39c 	.word	0x0800e39c
 800b8cc:	0800e3e4 	.word	0x0800e3e4

0800b8d0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	6039      	str	r1, [r7, #0]
 800b8da:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b8dc:	2392      	movs	r3, #146	@ 0x92
 800b8de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <Custom_STM_App_Update_Char+0x1c>
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d01c      	beq.n	800b924 <Custom_STM_App_Update_Char+0x54>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800b8ea:	e037      	b.n	800b95c <Custom_STM_App_Update_Char+0x8c>
      ret = aci_gatt_update_char_value(CustomContext.CustomPill_StatusHdle,
 800b8ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b968 <Custom_STM_App_Update_Char+0x98>)
 800b8ee:	8818      	ldrh	r0, [r3, #0]
 800b8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b968 <Custom_STM_App_Update_Char+0x98>)
 800b8f2:	8859      	ldrh	r1, [r3, #2]
 800b8f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b96c <Custom_STM_App_Update_Char+0x9c>)
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	4613      	mov	r3, r2
 800b900:	2200      	movs	r2, #0
 800b902:	f7fd f88b 	bl	8008a1c <aci_gatt_update_char_value>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <Custom_STM_App_Update_Char+0x4c>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value TIME_STAMP command, result : 0x%x \n\r", ret);
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	4619      	mov	r1, r3
 800b914:	4816      	ldr	r0, [pc, #88]	@ (800b970 <Custom_STM_App_Update_Char+0xa0>)
 800b916:	f000 fd9b 	bl	800c450 <iprintf>
      break;
 800b91a:	e01f      	b.n	800b95c <Custom_STM_App_Update_Char+0x8c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TIME_STAMP command\n\r");
 800b91c:	4815      	ldr	r0, [pc, #84]	@ (800b974 <Custom_STM_App_Update_Char+0xa4>)
 800b91e:	f000 fd97 	bl	800c450 <iprintf>
      break;
 800b922:	e01b      	b.n	800b95c <Custom_STM_App_Update_Char+0x8c>
      ret = aci_gatt_update_char_value(CustomContext.CustomPill_StatusHdle,
 800b924:	4b10      	ldr	r3, [pc, #64]	@ (800b968 <Custom_STM_App_Update_Char+0x98>)
 800b926:	8818      	ldrh	r0, [r3, #0]
 800b928:	4b0f      	ldr	r3, [pc, #60]	@ (800b968 <Custom_STM_App_Update_Char+0x98>)
 800b92a:	8899      	ldrh	r1, [r3, #4]
 800b92c:	4b12      	ldr	r3, [pc, #72]	@ (800b978 <Custom_STM_App_Update_Char+0xa8>)
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	b2da      	uxtb	r2, r3
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	4613      	mov	r3, r2
 800b938:	2200      	movs	r2, #0
 800b93a:	f7fd f86f 	bl	8008a1c <aci_gatt_update_char_value>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <Custom_STM_App_Update_Char+0x84>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value PILL_1 command, result : 0x%x \n\r", ret);
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	4619      	mov	r1, r3
 800b94c:	480b      	ldr	r0, [pc, #44]	@ (800b97c <Custom_STM_App_Update_Char+0xac>)
 800b94e:	f000 fd7f 	bl	800c450 <iprintf>
      break;
 800b952:	e002      	b.n	800b95a <Custom_STM_App_Update_Char+0x8a>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PILL_1 command\n\r");
 800b954:	480a      	ldr	r0, [pc, #40]	@ (800b980 <Custom_STM_App_Update_Char+0xb0>)
 800b956:	f000 fd7b 	bl	800c450 <iprintf>
      break;
 800b95a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	200015b0 	.word	0x200015b0
 800b96c:	20000026 	.word	0x20000026
 800b970:	0800e418 	.word	0x0800e418
 800b974:	0800e464 	.word	0x0800e464
 800b978:	20000028 	.word	0x20000028
 800b97c:	0800e4a0 	.word	0x0800e4a0
 800b980:	0800e4e8 	.word	0x0800e4e8

0800b984 <LL_PWR_EnableBootC2>:
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b988:	4b05      	ldr	r3, [pc, #20]	@ (800b9a0 <LL_PWR_EnableBootC2+0x1c>)
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	4a04      	ldr	r2, [pc, #16]	@ (800b9a0 <LL_PWR_EnableBootC2+0x1c>)
 800b98e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b992:	60d3      	str	r3, [r2, #12]
}
 800b994:	bf00      	nop
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	58000400 	.word	0x58000400

0800b9a4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b9ac:	4b06      	ldr	r3, [pc, #24]	@ (800b9c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b9ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b9b2:	4905      	ldr	r1, [pc, #20]	@ (800b9c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	58000800 	.word	0x58000800

0800b9cc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b9d4:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b9d6:	6a1a      	ldr	r2, [r3, #32]
 800b9d8:	4904      	ldr	r1, [pc, #16]	@ (800b9ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	620b      	str	r3, [r1, #32]
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	58000800 	.word	0x58000800

0800b9f0 <LL_AHB3_GRP1_EnableClock>:
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b9f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ba08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4013      	ands	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba14:	68fb      	ldr	r3, [r7, #12]
}
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b085      	sub	sp, #20
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ba2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba2e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ba32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ba3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba42:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4013      	ands	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
}
 800ba4e:	bf00      	nop
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	601a      	str	r2, [r3, #0]
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f043 0201 	orr.w	r2, r3, #1
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	601a      	str	r2, [r3, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	43db      	mvns	r3, r3
 800baae:	401a      	ands	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	605a      	str	r2, [r3, #4]
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	041b      	lsls	r3, r3, #16
 800bad2:	431a      	orrs	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	605a      	str	r2, [r3, #4]
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	43db      	mvns	r3, r3
 800baf6:	401a      	ands	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	605a      	str	r2, [r3, #4]
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	609a      	str	r2, [r3, #8]
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	041a      	lsls	r2, r3, #16
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	609a      	str	r2, [r3, #8]
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	4013      	ands	r3, r2
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d101      	bne.n	800bb5e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e000      	b.n	800bb60 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	69da      	ldr	r2, [r3, #28]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d101      	bne.n	800bb88 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e000      	b.n	800bb8a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
	...

0800bb98 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bb9c:	2102      	movs	r1, #2
 800bb9e:	4818      	ldr	r0, [pc, #96]	@ (800bc00 <HW_IPCC_Rx_Handler+0x68>)
 800bba0:	f7ff ffe4 	bl	800bb6c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d008      	beq.n	800bbbc <HW_IPCC_Rx_Handler+0x24>
 800bbaa:	4b15      	ldr	r3, [pc, #84]	@ (800bc00 <HW_IPCC_Rx_Handler+0x68>)
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f003 0302 	and.w	r3, r3, #2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d102      	bne.n	800bbbc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800bbb6:	f000 f8d5 	bl	800bd64 <HW_IPCC_SYS_EvtHandler>
 800bbba:	e01e      	b.n	800bbfa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	4810      	ldr	r0, [pc, #64]	@ (800bc00 <HW_IPCC_Rx_Handler+0x68>)
 800bbc0:	f7ff ffd4 	bl	800bb6c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <HW_IPCC_Rx_Handler+0x44>
 800bbca:	4b0d      	ldr	r3, [pc, #52]	@ (800bc00 <HW_IPCC_Rx_Handler+0x68>)
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d102      	bne.n	800bbdc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800bbd6:	f000 f889 	bl	800bcec <HW_IPCC_BLE_EvtHandler>
 800bbda:	e00e      	b.n	800bbfa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bbdc:	2108      	movs	r1, #8
 800bbde:	4808      	ldr	r0, [pc, #32]	@ (800bc00 <HW_IPCC_Rx_Handler+0x68>)
 800bbe0:	f7ff ffc4 	bl	800bb6c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d008      	beq.n	800bbfc <HW_IPCC_Rx_Handler+0x64>
 800bbea:	4b05      	ldr	r3, [pc, #20]	@ (800bc00 <HW_IPCC_Rx_Handler+0x68>)
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f003 0308 	and.w	r3, r3, #8
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d102      	bne.n	800bbfc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800bbf6:	f000 f901 	bl	800bdfc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
}
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	58000c00 	.word	0x58000c00

0800bc04 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bc08:	2102      	movs	r1, #2
 800bc0a:	4818      	ldr	r0, [pc, #96]	@ (800bc6c <HW_IPCC_Tx_Handler+0x68>)
 800bc0c:	f7ff ff99 	bl	800bb42 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d108      	bne.n	800bc28 <HW_IPCC_Tx_Handler+0x24>
 800bc16:	4b15      	ldr	r3, [pc, #84]	@ (800bc6c <HW_IPCC_Tx_Handler+0x68>)
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d102      	bne.n	800bc28 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800bc22:	f000 f893 	bl	800bd4c <HW_IPCC_SYS_CmdEvtHandler>
 800bc26:	e01e      	b.n	800bc66 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800bc28:	2108      	movs	r1, #8
 800bc2a:	4810      	ldr	r0, [pc, #64]	@ (800bc6c <HW_IPCC_Tx_Handler+0x68>)
 800bc2c:	f7ff ff89 	bl	800bb42 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d108      	bne.n	800bc48 <HW_IPCC_Tx_Handler+0x44>
 800bc36:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <HW_IPCC_Tx_Handler+0x68>)
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800bc42:	f000 f8bd 	bl	800bdc0 <HW_IPCC_MM_FreeBufHandler>
 800bc46:	e00e      	b.n	800bc66 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bc48:	2120      	movs	r1, #32
 800bc4a:	4808      	ldr	r0, [pc, #32]	@ (800bc6c <HW_IPCC_Tx_Handler+0x68>)
 800bc4c:	f7ff ff79 	bl	800bb42 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d108      	bne.n	800bc68 <HW_IPCC_Tx_Handler+0x64>
 800bc56:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <HW_IPCC_Tx_Handler+0x68>)
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800bc62:	f000 f84f 	bl	800bd04 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
}
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	58000c00 	.word	0x58000c00

0800bc70 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bc74:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bc78:	f7ff fed3 	bl	800ba22 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bc7c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bc80:	f7ff fea4 	bl	800b9cc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bc84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bc88:	f7ff fe8c 	bl	800b9a4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bc8c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bc8e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bc90:	f7ff fe78 	bl	800b984 <LL_PWR_EnableBootC2>

  return;
 800bc94:	bf00      	nop
}
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bc9c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bca0:	f7ff fea6 	bl	800b9f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bca4:	4806      	ldr	r0, [pc, #24]	@ (800bcc0 <HW_IPCC_Init+0x28>)
 800bca6:	f7ff fee8 	bl	800ba7a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bcaa:	4805      	ldr	r0, [pc, #20]	@ (800bcc0 <HW_IPCC_Init+0x28>)
 800bcac:	f7ff fed5 	bl	800ba5a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bcb0:	202c      	movs	r0, #44	@ 0x2c
 800bcb2:	f7f7 fe16 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bcb6:	202d      	movs	r0, #45	@ 0x2d
 800bcb8:	f7f7 fe13 	bl	80038e2 <HAL_NVIC_EnableIRQ>

  return;
 800bcbc:	bf00      	nop
}
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	58000c00 	.word	0x58000c00

0800bcc4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bcc8:	2101      	movs	r1, #1
 800bcca:	4802      	ldr	r0, [pc, #8]	@ (800bcd4 <HW_IPCC_BLE_Init+0x10>)
 800bccc:	f7ff ff0a 	bl	800bae4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bcd0:	bf00      	nop
}
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	58000c00 	.word	0x58000c00

0800bcd8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800bcdc:	2101      	movs	r1, #1
 800bcde:	4802      	ldr	r0, [pc, #8]	@ (800bce8 <HW_IPCC_BLE_SendCmd+0x10>)
 800bce0:	f7ff ff20 	bl	800bb24 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bce4:	bf00      	nop
}
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	58000c00 	.word	0x58000c00

0800bcec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bcf0:	f7fd ff5c 	bl	8009bac <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	4802      	ldr	r0, [pc, #8]	@ (800bd00 <HW_IPCC_BLE_EvtHandler+0x14>)
 800bcf8:	f7ff ff06 	bl	800bb08 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bcfc:	bf00      	nop
}
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	58000c00 	.word	0x58000c00

0800bd04 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bd08:	2120      	movs	r1, #32
 800bd0a:	4803      	ldr	r0, [pc, #12]	@ (800bd18 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bd0c:	f7ff fed8 	bl	800bac0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bd10:	f7fd ff7c 	bl	8009c0c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800bd14:	bf00      	nop
}
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	58000c00 	.word	0x58000c00

0800bd1c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bd20:	2102      	movs	r1, #2
 800bd22:	4802      	ldr	r0, [pc, #8]	@ (800bd2c <HW_IPCC_SYS_Init+0x10>)
 800bd24:	f7ff fede 	bl	800bae4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bd28:	bf00      	nop
}
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	58000c00 	.word	0x58000c00

0800bd30 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bd34:	2102      	movs	r1, #2
 800bd36:	4804      	ldr	r0, [pc, #16]	@ (800bd48 <HW_IPCC_SYS_SendCmd+0x18>)
 800bd38:	f7ff fef4 	bl	800bb24 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bd3c:	2102      	movs	r1, #2
 800bd3e:	4802      	ldr	r0, [pc, #8]	@ (800bd48 <HW_IPCC_SYS_SendCmd+0x18>)
 800bd40:	f7ff feab 	bl	800ba9a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bd44:	bf00      	nop
}
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	58000c00 	.word	0x58000c00

0800bd4c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bd50:	2102      	movs	r1, #2
 800bd52:	4803      	ldr	r0, [pc, #12]	@ (800bd60 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bd54:	f7ff feb4 	bl	800bac0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bd58:	f7fd ffa8 	bl	8009cac <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bd5c:	bf00      	nop
}
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	58000c00 	.word	0x58000c00

0800bd64 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bd68:	f7fd ffb6 	bl	8009cd8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bd6c:	2102      	movs	r1, #2
 800bd6e:	4802      	ldr	r0, [pc, #8]	@ (800bd78 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bd70:	f7ff feca 	bl	800bb08 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bd74:	bf00      	nop
}
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	58000c00 	.word	0x58000c00

0800bd7c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bd84:	2108      	movs	r1, #8
 800bd86:	480c      	ldr	r0, [pc, #48]	@ (800bdb8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bd88:	f7ff fedb 	bl	800bb42 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d007      	beq.n	800bda2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bd92:	4a0a      	ldr	r2, [pc, #40]	@ (800bdbc <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bd98:	2108      	movs	r1, #8
 800bd9a:	4807      	ldr	r0, [pc, #28]	@ (800bdb8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bd9c:	f7ff fe7d 	bl	800ba9a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bda0:	e006      	b.n	800bdb0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bda6:	2108      	movs	r1, #8
 800bda8:	4803      	ldr	r0, [pc, #12]	@ (800bdb8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bdaa:	f7ff febb 	bl	800bb24 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800bdae:	bf00      	nop
}
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	58000c00 	.word	0x58000c00
 800bdbc:	200015b8 	.word	0x200015b8

0800bdc0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bdc4:	2108      	movs	r1, #8
 800bdc6:	4806      	ldr	r0, [pc, #24]	@ (800bde0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bdc8:	f7ff fe7a 	bl	800bac0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bdcc:	4b05      	ldr	r3, [pc, #20]	@ (800bde4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bdd2:	2108      	movs	r1, #8
 800bdd4:	4802      	ldr	r0, [pc, #8]	@ (800bde0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bdd6:	f7ff fea5 	bl	800bb24 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bdda:	bf00      	nop
}
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	58000c00 	.word	0x58000c00
 800bde4:	200015b8 	.word	0x200015b8

0800bde8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bdec:	2108      	movs	r1, #8
 800bdee:	4802      	ldr	r0, [pc, #8]	@ (800bdf8 <HW_IPCC_TRACES_Init+0x10>)
 800bdf0:	f7ff fe78 	bl	800bae4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bdf4:	bf00      	nop
}
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	58000c00 	.word	0x58000c00

0800bdfc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800be00:	f7fe f812 	bl	8009e28 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800be04:	2108      	movs	r1, #8
 800be06:	4802      	ldr	r0, [pc, #8]	@ (800be10 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800be08:	f7ff fe7e 	bl	800bb08 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800be0c:	bf00      	nop
}
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	58000c00 	.word	0x58000c00

0800be14 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800be14:	b480      	push	{r7}
 800be16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800be18:	4b05      	ldr	r3, [pc, #20]	@ (800be30 <UTIL_LPM_Init+0x1c>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800be1e:	4b05      	ldr	r3, [pc, #20]	@ (800be34 <UTIL_LPM_Init+0x20>)
 800be20:	2200      	movs	r2, #0
 800be22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800be24:	bf00      	nop
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	200015bc 	.word	0x200015bc
 800be34:	200015c0 	.word	0x200015c0

0800be38 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800be38:	b480      	push	{r7}
 800be3a:	b087      	sub	sp, #28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be44:	f3ef 8310 	mrs	r3, PRIMASK
 800be48:	613b      	str	r3, [r7, #16]
  return(result);
 800be4a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800be4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be4e:	b672      	cpsid	i
}
 800be50:	bf00      	nop
  
  switch(state)
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d008      	beq.n	800be6a <UTIL_LPM_SetOffMode+0x32>
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d10e      	bne.n	800be7a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800be5c:	4b0d      	ldr	r3, [pc, #52]	@ (800be94 <UTIL_LPM_SetOffMode+0x5c>)
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4313      	orrs	r3, r2
 800be64:	4a0b      	ldr	r2, [pc, #44]	@ (800be94 <UTIL_LPM_SetOffMode+0x5c>)
 800be66:	6013      	str	r3, [r2, #0]
      break;
 800be68:	e008      	b.n	800be7c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	43da      	mvns	r2, r3
 800be6e:	4b09      	ldr	r3, [pc, #36]	@ (800be94 <UTIL_LPM_SetOffMode+0x5c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4013      	ands	r3, r2
 800be74:	4a07      	ldr	r2, [pc, #28]	@ (800be94 <UTIL_LPM_SetOffMode+0x5c>)
 800be76:	6013      	str	r3, [r2, #0]
      break;
 800be78:	e000      	b.n	800be7c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800be7a:	bf00      	nop
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f383 8810 	msr	PRIMASK, r3
}
 800be86:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800be88:	bf00      	nop
 800be8a:	371c      	adds	r7, #28
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	200015c0 	.word	0x200015c0

0800be98 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b090      	sub	sp, #64	@ 0x40
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bea0:	4b73      	ldr	r3, [pc, #460]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800bea6:	4b72      	ldr	r3, [pc, #456]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4013      	ands	r3, r2
 800beae:	4a70      	ldr	r2, [pc, #448]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800beb0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800beb2:	4b70      	ldr	r3, [pc, #448]	@ (800c074 <UTIL_SEQ_Run+0x1dc>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800beb8:	4b6f      	ldr	r3, [pc, #444]	@ (800c078 <UTIL_SEQ_Run+0x1e0>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bebe:	4b6f      	ldr	r3, [pc, #444]	@ (800c07c <UTIL_SEQ_Run+0x1e4>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800bec4:	4b6e      	ldr	r3, [pc, #440]	@ (800c080 <UTIL_SEQ_Run+0x1e8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800beca:	e08d      	b.n	800bfe8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bed0:	e002      	b.n	800bed8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed4:	3301      	adds	r3, #1
 800bed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bed8:	4a6a      	ldr	r2, [pc, #424]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800beda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bedc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	401a      	ands	r2, r3
 800bee4:	4b62      	ldr	r3, [pc, #392]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4013      	ands	r3, r2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0f1      	beq.n	800bed2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800beee:	4a65      	ldr	r2, [pc, #404]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	401a      	ands	r2, r3
 800befa:	4b5d      	ldr	r3, [pc, #372]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4013      	ands	r3, r2
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bf02:	4a60      	ldr	r2, [pc, #384]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bf04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	4413      	add	r3, r2
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0e:	4013      	ands	r3, r2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d106      	bne.n	800bf22 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bf14:	4a5b      	ldr	r2, [pc, #364]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bf16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf20:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bf22:	4a58      	ldr	r2, [pc, #352]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bf24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	4413      	add	r3, r2
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2e:	4013      	ands	r3, r2
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f9b3 	bl	800c29c <SEQ_BitPosition>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4b53      	ldr	r3, [pc, #332]	@ (800c088 <UTIL_SEQ_Run+0x1f0>)
 800bf3c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bf3e:	4a51      	ldr	r2, [pc, #324]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bf40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4413      	add	r3, r2
 800bf46:	685a      	ldr	r2, [r3, #4]
 800bf48:	4b4f      	ldr	r3, [pc, #316]	@ (800c088 <UTIL_SEQ_Run+0x1f0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf52:	43db      	mvns	r3, r3
 800bf54:	401a      	ands	r2, r3
 800bf56:	494b      	ldr	r1, [pc, #300]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bf58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	440b      	add	r3, r1
 800bf5e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf60:	f3ef 8310 	mrs	r3, PRIMASK
 800bf64:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf66:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf6a:	b672      	cpsid	i
}
 800bf6c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bf6e:	4b46      	ldr	r3, [pc, #280]	@ (800c088 <UTIL_SEQ_Run+0x1f0>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2201      	movs	r2, #1
 800bf74:	fa02 f303 	lsl.w	r3, r2, r3
 800bf78:	43da      	mvns	r2, r3
 800bf7a:	4b3e      	ldr	r3, [pc, #248]	@ (800c074 <UTIL_SEQ_Run+0x1dc>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	4a3c      	ldr	r2, [pc, #240]	@ (800c074 <UTIL_SEQ_Run+0x1dc>)
 800bf82:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bf84:	2301      	movs	r3, #1
 800bf86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf88:	e013      	b.n	800bfb2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bf8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	4a3d      	ldr	r2, [pc, #244]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bf90:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bf94:	4b3c      	ldr	r3, [pc, #240]	@ (800c088 <UTIL_SEQ_Run+0x1f0>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9e:	43da      	mvns	r2, r3
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	400a      	ands	r2, r1
 800bfa6:	4937      	ldr	r1, [pc, #220]	@ (800c084 <UTIL_SEQ_Run+0x1ec>)
 800bfa8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bfac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e8      	bne.n	800bf8a <UTIL_SEQ_Run+0xf2>
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f383 8810 	msr	PRIMASK, r3
}
 800bfc2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bfc4:	4b30      	ldr	r3, [pc, #192]	@ (800c088 <UTIL_SEQ_Run+0x1f0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a30      	ldr	r2, [pc, #192]	@ (800c08c <UTIL_SEQ_Run+0x1f4>)
 800bfca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfce:	4798      	blx	r3

    local_taskset = TaskSet;
 800bfd0:	4b28      	ldr	r3, [pc, #160]	@ (800c074 <UTIL_SEQ_Run+0x1dc>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800bfd6:	4b28      	ldr	r3, [pc, #160]	@ (800c078 <UTIL_SEQ_Run+0x1e0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800bfdc:	4b27      	ldr	r3, [pc, #156]	@ (800c07c <UTIL_SEQ_Run+0x1e4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800bfe2:	4b27      	ldr	r3, [pc, #156]	@ (800c080 <UTIL_SEQ_Run+0x1e8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bfe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	401a      	ands	r2, r3
 800bfee:	4b20      	ldr	r3, [pc, #128]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4013      	ands	r3, r2
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d005      	beq.n	800c004 <UTIL_SEQ_Run+0x16c>
 800bff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffc:	4013      	ands	r3, r2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f43f af64 	beq.w	800becc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c004:	4b20      	ldr	r3, [pc, #128]	@ (800c088 <UTIL_SEQ_Run+0x1f0>)
 800c006:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c00a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c00c:	f000 f938 	bl	800c280 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c010:	f3ef 8310 	mrs	r3, PRIMASK
 800c014:	613b      	str	r3, [r7, #16]
  return(result);
 800c016:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c018:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c01a:	b672      	cpsid	i
}
 800c01c:	bf00      	nop
  local_taskset = TaskSet;
 800c01e:	4b15      	ldr	r3, [pc, #84]	@ (800c074 <UTIL_SEQ_Run+0x1dc>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800c024:	4b14      	ldr	r3, [pc, #80]	@ (800c078 <UTIL_SEQ_Run+0x1e0>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800c02a:	4b14      	ldr	r3, [pc, #80]	@ (800c07c <UTIL_SEQ_Run+0x1e4>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c034:	401a      	ands	r2, r3
 800c036:	4b0e      	ldr	r3, [pc, #56]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d107      	bne.n	800c050 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c040:	4b0f      	ldr	r3, [pc, #60]	@ (800c080 <UTIL_SEQ_Run+0x1e8>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c046:	4013      	ands	r3, r2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c04c:	f7f5 f8fc 	bl	8001248 <UTIL_SEQ_Idle>
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f383 8810 	msr	PRIMASK, r3
}
 800c05a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c05c:	f000 f917 	bl	800c28e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c060:	4a03      	ldr	r2, [pc, #12]	@ (800c070 <UTIL_SEQ_Run+0x1d8>)
 800c062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c064:	6013      	str	r3, [r2, #0]

  return;
 800c066:	bf00      	nop
}
 800c068:	3740      	adds	r7, #64	@ 0x40
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20000030 	.word	0x20000030
 800c074:	200015c4 	.word	0x200015c4
 800c078:	200015c8 	.word	0x200015c8
 800c07c:	2000002c 	.word	0x2000002c
 800c080:	200015cc 	.word	0x200015cc
 800c084:	20001654 	.word	0x20001654
 800c088:	200015d0 	.word	0x200015d0
 800c08c:	200015d4 	.word	0x200015d4

0800c090 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c09c:	f3ef 8310 	mrs	r3, PRIMASK
 800c0a0:	617b      	str	r3, [r7, #20]
  return(result);
 800c0a2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c0a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0a6:	b672      	cpsid	i
}
 800c0a8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f8f6 	bl	800c29c <SEQ_BitPosition>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4a06      	ldr	r2, [pc, #24]	@ (800c0d0 <UTIL_SEQ_RegTask+0x40>)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	f383 8810 	msr	PRIMASK, r3
}
 800c0c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c0c8:	bf00      	nop
}
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200015d4 	.word	0x200015d4

0800c0d4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b087      	sub	sp, #28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0de:	f3ef 8310 	mrs	r3, PRIMASK
 800c0e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c0e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0e8:	b672      	cpsid	i
}
 800c0ea:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c124 <UTIL_SEQ_SetTask+0x50>)
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	4a0b      	ldr	r2, [pc, #44]	@ (800c124 <UTIL_SEQ_SetTask+0x50>)
 800c0f6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c0f8:	4a0b      	ldr	r2, [pc, #44]	@ (800c128 <UTIL_SEQ_SetTask+0x54>)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	431a      	orrs	r2, r3
 800c104:	4908      	ldr	r1, [pc, #32]	@ (800c128 <UTIL_SEQ_SetTask+0x54>)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f383 8810 	msr	PRIMASK, r3
}
 800c116:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c118:	bf00      	nop
}
 800c11a:	371c      	adds	r7, #28
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	200015c4 	.word	0x200015c4
 800c128:	20001654 	.word	0x20001654

0800c12c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c134:	f3ef 8310 	mrs	r3, PRIMASK
 800c138:	60fb      	str	r3, [r7, #12]
  return(result);
 800c13a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c13e:	b672      	cpsid	i
}
 800c140:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	43da      	mvns	r2, r3
 800c146:	4b08      	ldr	r3, [pc, #32]	@ (800c168 <UTIL_SEQ_PauseTask+0x3c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4013      	ands	r3, r2
 800c14c:	4a06      	ldr	r2, [pc, #24]	@ (800c168 <UTIL_SEQ_PauseTask+0x3c>)
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	f383 8810 	msr	PRIMASK, r3
}
 800c15a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c15c:	bf00      	nop
}
 800c15e:	371c      	adds	r7, #28
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	2000002c 	.word	0x2000002c

0800c16c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c16c:	b480      	push	{r7}
 800c16e:	b087      	sub	sp, #28
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c174:	f3ef 8310 	mrs	r3, PRIMASK
 800c178:	60fb      	str	r3, [r7, #12]
  return(result);
 800c17a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c17c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c17e:	b672      	cpsid	i
}
 800c180:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c182:	4b09      	ldr	r3, [pc, #36]	@ (800c1a8 <UTIL_SEQ_ResumeTask+0x3c>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4313      	orrs	r3, r2
 800c18a:	4a07      	ldr	r2, [pc, #28]	@ (800c1a8 <UTIL_SEQ_ResumeTask+0x3c>)
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	f383 8810 	msr	PRIMASK, r3
}
 800c198:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c19a:	bf00      	nop
}
 800c19c:	371c      	adds	r7, #28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	2000002c 	.word	0x2000002c

0800c1ac <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b087      	sub	sp, #28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c1bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1be:	b672      	cpsid	i
}
 800c1c0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c1c2:	4b09      	ldr	r3, [pc, #36]	@ (800c1e8 <UTIL_SEQ_SetEvt+0x3c>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	4a07      	ldr	r2, [pc, #28]	@ (800c1e8 <UTIL_SEQ_SetEvt+0x3c>)
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f383 8810 	msr	PRIMASK, r3
}
 800c1d8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c1da:	bf00      	nop
}
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	200015c8 	.word	0x200015c8

0800c1ec <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c1f4:	4b1f      	ldr	r3, [pc, #124]	@ (800c274 <UTIL_SEQ_WaitEvt+0x88>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c1fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c274 <UTIL_SEQ_WaitEvt+0x88>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c202:	d102      	bne.n	800c20a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c204:	2300      	movs	r3, #0
 800c206:	61fb      	str	r3, [r7, #28]
 800c208:	e005      	b.n	800c216 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c20a:	4b1a      	ldr	r3, [pc, #104]	@ (800c274 <UTIL_SEQ_WaitEvt+0x88>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2201      	movs	r2, #1
 800c210:	fa02 f303 	lsl.w	r3, r2, r3
 800c214:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c216:	4b18      	ldr	r3, [pc, #96]	@ (800c278 <UTIL_SEQ_WaitEvt+0x8c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c21c:	4a16      	ldr	r2, [pc, #88]	@ (800c278 <UTIL_SEQ_WaitEvt+0x8c>)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c222:	e003      	b.n	800c22c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c224:	6879      	ldr	r1, [r7, #4]
 800c226:	69f8      	ldr	r0, [r7, #28]
 800c228:	f7f5 f815 	bl	8001256 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c22c:	4b13      	ldr	r3, [pc, #76]	@ (800c27c <UTIL_SEQ_WaitEvt+0x90>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4013      	ands	r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0f5      	beq.n	800c224 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c238:	4a0e      	ldr	r2, [pc, #56]	@ (800c274 <UTIL_SEQ_WaitEvt+0x88>)
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c23e:	f3ef 8310 	mrs	r3, PRIMASK
 800c242:	60bb      	str	r3, [r7, #8]
  return(result);
 800c244:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c248:	b672      	cpsid	i
}
 800c24a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	43da      	mvns	r2, r3
 800c250:	4b0a      	ldr	r3, [pc, #40]	@ (800c27c <UTIL_SEQ_WaitEvt+0x90>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4013      	ands	r3, r2
 800c256:	4a09      	ldr	r2, [pc, #36]	@ (800c27c <UTIL_SEQ_WaitEvt+0x90>)
 800c258:	6013      	str	r3, [r2, #0]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f383 8810 	msr	PRIMASK, r3
}
 800c264:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c266:	4a04      	ldr	r2, [pc, #16]	@ (800c278 <UTIL_SEQ_WaitEvt+0x8c>)
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	6013      	str	r3, [r2, #0]
  return;
 800c26c:	bf00      	nop
}
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	200015d0 	.word	0x200015d0
 800c278:	200015cc 	.word	0x200015cc
 800c27c:	200015c8 	.word	0x200015c8

0800c280 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c284:	bf00      	nop
}
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c28e:	b480      	push	{r7}
 800c290:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c292:	bf00      	nop
}
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <SEQ_BitPosition+0x16>
    return 32U;
 800c2ae:	2320      	movs	r3, #32
 800c2b0:	e003      	b.n	800c2ba <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	fab3 f383 	clz	r3, r3
 800c2b8:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800c2ba:	f1c3 031f 	rsb	r3, r3, #31
 800c2be:	b2db      	uxtb	r3, r3
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <std>:
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	b510      	push	{r4, lr}
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2da:	6083      	str	r3, [r0, #8]
 800c2dc:	8181      	strh	r1, [r0, #12]
 800c2de:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2e0:	81c2      	strh	r2, [r0, #14]
 800c2e2:	6183      	str	r3, [r0, #24]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	2208      	movs	r2, #8
 800c2e8:	305c      	adds	r0, #92	@ 0x5c
 800c2ea:	f000 fa01 	bl	800c6f0 <memset>
 800c2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c324 <std+0x58>)
 800c2f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <std+0x5c>)
 800c2f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c32c <std+0x60>)
 800c2f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c330 <std+0x64>)
 800c2fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c334 <std+0x68>)
 800c300:	6224      	str	r4, [r4, #32]
 800c302:	429c      	cmp	r4, r3
 800c304:	d006      	beq.n	800c314 <std+0x48>
 800c306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c30a:	4294      	cmp	r4, r2
 800c30c:	d002      	beq.n	800c314 <std+0x48>
 800c30e:	33d0      	adds	r3, #208	@ 0xd0
 800c310:	429c      	cmp	r4, r3
 800c312:	d105      	bne.n	800c320 <std+0x54>
 800c314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c31c:	f000 ba60 	b.w	800c7e0 <__retarget_lock_init_recursive>
 800c320:	bd10      	pop	{r4, pc}
 800c322:	bf00      	nop
 800c324:	0800c541 	.word	0x0800c541
 800c328:	0800c563 	.word	0x0800c563
 800c32c:	0800c59b 	.word	0x0800c59b
 800c330:	0800c5bf 	.word	0x0800c5bf
 800c334:	2000165c 	.word	0x2000165c

0800c338 <stdio_exit_handler>:
 800c338:	4a02      	ldr	r2, [pc, #8]	@ (800c344 <stdio_exit_handler+0xc>)
 800c33a:	4903      	ldr	r1, [pc, #12]	@ (800c348 <stdio_exit_handler+0x10>)
 800c33c:	4803      	ldr	r0, [pc, #12]	@ (800c34c <stdio_exit_handler+0x14>)
 800c33e:	f000 b869 	b.w	800c414 <_fwalk_sglue>
 800c342:	bf00      	nop
 800c344:	20000034 	.word	0x20000034
 800c348:	0800d09d 	.word	0x0800d09d
 800c34c:	20000044 	.word	0x20000044

0800c350 <cleanup_stdio>:
 800c350:	6841      	ldr	r1, [r0, #4]
 800c352:	4b0c      	ldr	r3, [pc, #48]	@ (800c384 <cleanup_stdio+0x34>)
 800c354:	4299      	cmp	r1, r3
 800c356:	b510      	push	{r4, lr}
 800c358:	4604      	mov	r4, r0
 800c35a:	d001      	beq.n	800c360 <cleanup_stdio+0x10>
 800c35c:	f000 fe9e 	bl	800d09c <_fflush_r>
 800c360:	68a1      	ldr	r1, [r4, #8]
 800c362:	4b09      	ldr	r3, [pc, #36]	@ (800c388 <cleanup_stdio+0x38>)
 800c364:	4299      	cmp	r1, r3
 800c366:	d002      	beq.n	800c36e <cleanup_stdio+0x1e>
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 fe97 	bl	800d09c <_fflush_r>
 800c36e:	68e1      	ldr	r1, [r4, #12]
 800c370:	4b06      	ldr	r3, [pc, #24]	@ (800c38c <cleanup_stdio+0x3c>)
 800c372:	4299      	cmp	r1, r3
 800c374:	d004      	beq.n	800c380 <cleanup_stdio+0x30>
 800c376:	4620      	mov	r0, r4
 800c378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c37c:	f000 be8e 	b.w	800d09c <_fflush_r>
 800c380:	bd10      	pop	{r4, pc}
 800c382:	bf00      	nop
 800c384:	2000165c 	.word	0x2000165c
 800c388:	200016c4 	.word	0x200016c4
 800c38c:	2000172c 	.word	0x2000172c

0800c390 <global_stdio_init.part.0>:
 800c390:	b510      	push	{r4, lr}
 800c392:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c0 <global_stdio_init.part.0+0x30>)
 800c394:	4c0b      	ldr	r4, [pc, #44]	@ (800c3c4 <global_stdio_init.part.0+0x34>)
 800c396:	4a0c      	ldr	r2, [pc, #48]	@ (800c3c8 <global_stdio_init.part.0+0x38>)
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	4620      	mov	r0, r4
 800c39c:	2200      	movs	r2, #0
 800c39e:	2104      	movs	r1, #4
 800c3a0:	f7ff ff94 	bl	800c2cc <std>
 800c3a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	2109      	movs	r1, #9
 800c3ac:	f7ff ff8e 	bl	800c2cc <std>
 800c3b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ba:	2112      	movs	r1, #18
 800c3bc:	f7ff bf86 	b.w	800c2cc <std>
 800c3c0:	20001794 	.word	0x20001794
 800c3c4:	2000165c 	.word	0x2000165c
 800c3c8:	0800c339 	.word	0x0800c339

0800c3cc <__sfp_lock_acquire>:
 800c3cc:	4801      	ldr	r0, [pc, #4]	@ (800c3d4 <__sfp_lock_acquire+0x8>)
 800c3ce:	f000 ba08 	b.w	800c7e2 <__retarget_lock_acquire_recursive>
 800c3d2:	bf00      	nop
 800c3d4:	2000179d 	.word	0x2000179d

0800c3d8 <__sfp_lock_release>:
 800c3d8:	4801      	ldr	r0, [pc, #4]	@ (800c3e0 <__sfp_lock_release+0x8>)
 800c3da:	f000 ba03 	b.w	800c7e4 <__retarget_lock_release_recursive>
 800c3de:	bf00      	nop
 800c3e0:	2000179d 	.word	0x2000179d

0800c3e4 <__sinit>:
 800c3e4:	b510      	push	{r4, lr}
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	f7ff fff0 	bl	800c3cc <__sfp_lock_acquire>
 800c3ec:	6a23      	ldr	r3, [r4, #32]
 800c3ee:	b11b      	cbz	r3, 800c3f8 <__sinit+0x14>
 800c3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3f4:	f7ff bff0 	b.w	800c3d8 <__sfp_lock_release>
 800c3f8:	4b04      	ldr	r3, [pc, #16]	@ (800c40c <__sinit+0x28>)
 800c3fa:	6223      	str	r3, [r4, #32]
 800c3fc:	4b04      	ldr	r3, [pc, #16]	@ (800c410 <__sinit+0x2c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1f5      	bne.n	800c3f0 <__sinit+0xc>
 800c404:	f7ff ffc4 	bl	800c390 <global_stdio_init.part.0>
 800c408:	e7f2      	b.n	800c3f0 <__sinit+0xc>
 800c40a:	bf00      	nop
 800c40c:	0800c351 	.word	0x0800c351
 800c410:	20001794 	.word	0x20001794

0800c414 <_fwalk_sglue>:
 800c414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c418:	4607      	mov	r7, r0
 800c41a:	4688      	mov	r8, r1
 800c41c:	4614      	mov	r4, r2
 800c41e:	2600      	movs	r6, #0
 800c420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c424:	f1b9 0901 	subs.w	r9, r9, #1
 800c428:	d505      	bpl.n	800c436 <_fwalk_sglue+0x22>
 800c42a:	6824      	ldr	r4, [r4, #0]
 800c42c:	2c00      	cmp	r4, #0
 800c42e:	d1f7      	bne.n	800c420 <_fwalk_sglue+0xc>
 800c430:	4630      	mov	r0, r6
 800c432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c436:	89ab      	ldrh	r3, [r5, #12]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d907      	bls.n	800c44c <_fwalk_sglue+0x38>
 800c43c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c440:	3301      	adds	r3, #1
 800c442:	d003      	beq.n	800c44c <_fwalk_sglue+0x38>
 800c444:	4629      	mov	r1, r5
 800c446:	4638      	mov	r0, r7
 800c448:	47c0      	blx	r8
 800c44a:	4306      	orrs	r6, r0
 800c44c:	3568      	adds	r5, #104	@ 0x68
 800c44e:	e7e9      	b.n	800c424 <_fwalk_sglue+0x10>

0800c450 <iprintf>:
 800c450:	b40f      	push	{r0, r1, r2, r3}
 800c452:	b507      	push	{r0, r1, r2, lr}
 800c454:	4906      	ldr	r1, [pc, #24]	@ (800c470 <iprintf+0x20>)
 800c456:	ab04      	add	r3, sp, #16
 800c458:	6808      	ldr	r0, [r1, #0]
 800c45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c45e:	6881      	ldr	r1, [r0, #8]
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	f000 faf1 	bl	800ca48 <_vfiprintf_r>
 800c466:	b003      	add	sp, #12
 800c468:	f85d eb04 	ldr.w	lr, [sp], #4
 800c46c:	b004      	add	sp, #16
 800c46e:	4770      	bx	lr
 800c470:	20000040 	.word	0x20000040

0800c474 <putchar>:
 800c474:	4b02      	ldr	r3, [pc, #8]	@ (800c480 <putchar+0xc>)
 800c476:	4601      	mov	r1, r0
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	6882      	ldr	r2, [r0, #8]
 800c47c:	f000 be98 	b.w	800d1b0 <_putc_r>
 800c480:	20000040 	.word	0x20000040

0800c484 <_puts_r>:
 800c484:	6a03      	ldr	r3, [r0, #32]
 800c486:	b570      	push	{r4, r5, r6, lr}
 800c488:	6884      	ldr	r4, [r0, #8]
 800c48a:	4605      	mov	r5, r0
 800c48c:	460e      	mov	r6, r1
 800c48e:	b90b      	cbnz	r3, 800c494 <_puts_r+0x10>
 800c490:	f7ff ffa8 	bl	800c3e4 <__sinit>
 800c494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c496:	07db      	lsls	r3, r3, #31
 800c498:	d405      	bmi.n	800c4a6 <_puts_r+0x22>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	0598      	lsls	r0, r3, #22
 800c49e:	d402      	bmi.n	800c4a6 <_puts_r+0x22>
 800c4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a2:	f000 f99e 	bl	800c7e2 <__retarget_lock_acquire_recursive>
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	0719      	lsls	r1, r3, #28
 800c4aa:	d502      	bpl.n	800c4b2 <_puts_r+0x2e>
 800c4ac:	6923      	ldr	r3, [r4, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d135      	bne.n	800c51e <_puts_r+0x9a>
 800c4b2:	4621      	mov	r1, r4
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f000 f8c5 	bl	800c644 <__swsetup_r>
 800c4ba:	b380      	cbz	r0, 800c51e <_puts_r+0x9a>
 800c4bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c4c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4c2:	07da      	lsls	r2, r3, #31
 800c4c4:	d405      	bmi.n	800c4d2 <_puts_r+0x4e>
 800c4c6:	89a3      	ldrh	r3, [r4, #12]
 800c4c8:	059b      	lsls	r3, r3, #22
 800c4ca:	d402      	bmi.n	800c4d2 <_puts_r+0x4e>
 800c4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4ce:	f000 f989 	bl	800c7e4 <__retarget_lock_release_recursive>
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	bd70      	pop	{r4, r5, r6, pc}
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	da04      	bge.n	800c4e4 <_puts_r+0x60>
 800c4da:	69a2      	ldr	r2, [r4, #24]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	dc17      	bgt.n	800c510 <_puts_r+0x8c>
 800c4e0:	290a      	cmp	r1, #10
 800c4e2:	d015      	beq.n	800c510 <_puts_r+0x8c>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	6022      	str	r2, [r4, #0]
 800c4ea:	7019      	strb	r1, [r3, #0]
 800c4ec:	68a3      	ldr	r3, [r4, #8]
 800c4ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	60a3      	str	r3, [r4, #8]
 800c4f6:	2900      	cmp	r1, #0
 800c4f8:	d1ed      	bne.n	800c4d6 <_puts_r+0x52>
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	da11      	bge.n	800c522 <_puts_r+0x9e>
 800c4fe:	4622      	mov	r2, r4
 800c500:	210a      	movs	r1, #10
 800c502:	4628      	mov	r0, r5
 800c504:	f000 f85f 	bl	800c5c6 <__swbuf_r>
 800c508:	3001      	adds	r0, #1
 800c50a:	d0d7      	beq.n	800c4bc <_puts_r+0x38>
 800c50c:	250a      	movs	r5, #10
 800c50e:	e7d7      	b.n	800c4c0 <_puts_r+0x3c>
 800c510:	4622      	mov	r2, r4
 800c512:	4628      	mov	r0, r5
 800c514:	f000 f857 	bl	800c5c6 <__swbuf_r>
 800c518:	3001      	adds	r0, #1
 800c51a:	d1e7      	bne.n	800c4ec <_puts_r+0x68>
 800c51c:	e7ce      	b.n	800c4bc <_puts_r+0x38>
 800c51e:	3e01      	subs	r6, #1
 800c520:	e7e4      	b.n	800c4ec <_puts_r+0x68>
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	6022      	str	r2, [r4, #0]
 800c528:	220a      	movs	r2, #10
 800c52a:	701a      	strb	r2, [r3, #0]
 800c52c:	e7ee      	b.n	800c50c <_puts_r+0x88>
	...

0800c530 <puts>:
 800c530:	4b02      	ldr	r3, [pc, #8]	@ (800c53c <puts+0xc>)
 800c532:	4601      	mov	r1, r0
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	f7ff bfa5 	b.w	800c484 <_puts_r>
 800c53a:	bf00      	nop
 800c53c:	20000040 	.word	0x20000040

0800c540 <__sread>:
 800c540:	b510      	push	{r4, lr}
 800c542:	460c      	mov	r4, r1
 800c544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c548:	f000 f8fc 	bl	800c744 <_read_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	bfab      	itete	ge
 800c550:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c552:	89a3      	ldrhlt	r3, [r4, #12]
 800c554:	181b      	addge	r3, r3, r0
 800c556:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c55a:	bfac      	ite	ge
 800c55c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c55e:	81a3      	strhlt	r3, [r4, #12]
 800c560:	bd10      	pop	{r4, pc}

0800c562 <__swrite>:
 800c562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c566:	461f      	mov	r7, r3
 800c568:	898b      	ldrh	r3, [r1, #12]
 800c56a:	05db      	lsls	r3, r3, #23
 800c56c:	4605      	mov	r5, r0
 800c56e:	460c      	mov	r4, r1
 800c570:	4616      	mov	r6, r2
 800c572:	d505      	bpl.n	800c580 <__swrite+0x1e>
 800c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c578:	2302      	movs	r3, #2
 800c57a:	2200      	movs	r2, #0
 800c57c:	f000 f8d0 	bl	800c720 <_lseek_r>
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c58a:	81a3      	strh	r3, [r4, #12]
 800c58c:	4632      	mov	r2, r6
 800c58e:	463b      	mov	r3, r7
 800c590:	4628      	mov	r0, r5
 800c592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c596:	f000 b8e7 	b.w	800c768 <_write_r>

0800c59a <__sseek>:
 800c59a:	b510      	push	{r4, lr}
 800c59c:	460c      	mov	r4, r1
 800c59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a2:	f000 f8bd 	bl	800c720 <_lseek_r>
 800c5a6:	1c43      	adds	r3, r0, #1
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	bf15      	itete	ne
 800c5ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5b6:	81a3      	strheq	r3, [r4, #12]
 800c5b8:	bf18      	it	ne
 800c5ba:	81a3      	strhne	r3, [r4, #12]
 800c5bc:	bd10      	pop	{r4, pc}

0800c5be <__sclose>:
 800c5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c2:	f000 b89d 	b.w	800c700 <_close_r>

0800c5c6 <__swbuf_r>:
 800c5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c8:	460e      	mov	r6, r1
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	b118      	cbz	r0, 800c5d8 <__swbuf_r+0x12>
 800c5d0:	6a03      	ldr	r3, [r0, #32]
 800c5d2:	b90b      	cbnz	r3, 800c5d8 <__swbuf_r+0x12>
 800c5d4:	f7ff ff06 	bl	800c3e4 <__sinit>
 800c5d8:	69a3      	ldr	r3, [r4, #24]
 800c5da:	60a3      	str	r3, [r4, #8]
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	071a      	lsls	r2, r3, #28
 800c5e0:	d501      	bpl.n	800c5e6 <__swbuf_r+0x20>
 800c5e2:	6923      	ldr	r3, [r4, #16]
 800c5e4:	b943      	cbnz	r3, 800c5f8 <__swbuf_r+0x32>
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	f000 f82b 	bl	800c644 <__swsetup_r>
 800c5ee:	b118      	cbz	r0, 800c5f8 <__swbuf_r+0x32>
 800c5f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	6922      	ldr	r2, [r4, #16]
 800c5fc:	1a98      	subs	r0, r3, r2
 800c5fe:	6963      	ldr	r3, [r4, #20]
 800c600:	b2f6      	uxtb	r6, r6
 800c602:	4283      	cmp	r3, r0
 800c604:	4637      	mov	r7, r6
 800c606:	dc05      	bgt.n	800c614 <__swbuf_r+0x4e>
 800c608:	4621      	mov	r1, r4
 800c60a:	4628      	mov	r0, r5
 800c60c:	f000 fd46 	bl	800d09c <_fflush_r>
 800c610:	2800      	cmp	r0, #0
 800c612:	d1ed      	bne.n	800c5f0 <__swbuf_r+0x2a>
 800c614:	68a3      	ldr	r3, [r4, #8]
 800c616:	3b01      	subs	r3, #1
 800c618:	60a3      	str	r3, [r4, #8]
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	1c5a      	adds	r2, r3, #1
 800c61e:	6022      	str	r2, [r4, #0]
 800c620:	701e      	strb	r6, [r3, #0]
 800c622:	6962      	ldr	r2, [r4, #20]
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	429a      	cmp	r2, r3
 800c628:	d004      	beq.n	800c634 <__swbuf_r+0x6e>
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	07db      	lsls	r3, r3, #31
 800c62e:	d5e1      	bpl.n	800c5f4 <__swbuf_r+0x2e>
 800c630:	2e0a      	cmp	r6, #10
 800c632:	d1df      	bne.n	800c5f4 <__swbuf_r+0x2e>
 800c634:	4621      	mov	r1, r4
 800c636:	4628      	mov	r0, r5
 800c638:	f000 fd30 	bl	800d09c <_fflush_r>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d0d9      	beq.n	800c5f4 <__swbuf_r+0x2e>
 800c640:	e7d6      	b.n	800c5f0 <__swbuf_r+0x2a>
	...

0800c644 <__swsetup_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4b29      	ldr	r3, [pc, #164]	@ (800c6ec <__swsetup_r+0xa8>)
 800c648:	4605      	mov	r5, r0
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	460c      	mov	r4, r1
 800c64e:	b118      	cbz	r0, 800c658 <__swsetup_r+0x14>
 800c650:	6a03      	ldr	r3, [r0, #32]
 800c652:	b90b      	cbnz	r3, 800c658 <__swsetup_r+0x14>
 800c654:	f7ff fec6 	bl	800c3e4 <__sinit>
 800c658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c65c:	0719      	lsls	r1, r3, #28
 800c65e:	d422      	bmi.n	800c6a6 <__swsetup_r+0x62>
 800c660:	06da      	lsls	r2, r3, #27
 800c662:	d407      	bmi.n	800c674 <__swsetup_r+0x30>
 800c664:	2209      	movs	r2, #9
 800c666:	602a      	str	r2, [r5, #0]
 800c668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c672:	e033      	b.n	800c6dc <__swsetup_r+0x98>
 800c674:	0758      	lsls	r0, r3, #29
 800c676:	d512      	bpl.n	800c69e <__swsetup_r+0x5a>
 800c678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c67a:	b141      	cbz	r1, 800c68e <__swsetup_r+0x4a>
 800c67c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c680:	4299      	cmp	r1, r3
 800c682:	d002      	beq.n	800c68a <__swsetup_r+0x46>
 800c684:	4628      	mov	r0, r5
 800c686:	f000 f8bd 	bl	800c804 <_free_r>
 800c68a:	2300      	movs	r3, #0
 800c68c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	2300      	movs	r3, #0
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f043 0308 	orr.w	r3, r3, #8
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	b94b      	cbnz	r3, 800c6be <__swsetup_r+0x7a>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c6b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6b4:	d003      	beq.n	800c6be <__swsetup_r+0x7a>
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	f000 fd3d 	bl	800d138 <__smakebuf_r>
 800c6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6c2:	f013 0201 	ands.w	r2, r3, #1
 800c6c6:	d00a      	beq.n	800c6de <__swsetup_r+0x9a>
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	60a2      	str	r2, [r4, #8]
 800c6cc:	6962      	ldr	r2, [r4, #20]
 800c6ce:	4252      	negs	r2, r2
 800c6d0:	61a2      	str	r2, [r4, #24]
 800c6d2:	6922      	ldr	r2, [r4, #16]
 800c6d4:	b942      	cbnz	r2, 800c6e8 <__swsetup_r+0xa4>
 800c6d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c6da:	d1c5      	bne.n	800c668 <__swsetup_r+0x24>
 800c6dc:	bd38      	pop	{r3, r4, r5, pc}
 800c6de:	0799      	lsls	r1, r3, #30
 800c6e0:	bf58      	it	pl
 800c6e2:	6962      	ldrpl	r2, [r4, #20]
 800c6e4:	60a2      	str	r2, [r4, #8]
 800c6e6:	e7f4      	b.n	800c6d2 <__swsetup_r+0x8e>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	e7f7      	b.n	800c6dc <__swsetup_r+0x98>
 800c6ec:	20000040 	.word	0x20000040

0800c6f0 <memset>:
 800c6f0:	4402      	add	r2, r0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d100      	bne.n	800c6fa <memset+0xa>
 800c6f8:	4770      	bx	lr
 800c6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fe:	e7f9      	b.n	800c6f4 <memset+0x4>

0800c700 <_close_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d06      	ldr	r5, [pc, #24]	@ (800c71c <_close_r+0x1c>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f5 fd8f 	bl	800222e <_close>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d102      	bne.n	800c71a <_close_r+0x1a>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	b103      	cbz	r3, 800c71a <_close_r+0x1a>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	20001798 	.word	0x20001798

0800c720 <_lseek_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d07      	ldr	r5, [pc, #28]	@ (800c740 <_lseek_r+0x20>)
 800c724:	4604      	mov	r4, r0
 800c726:	4608      	mov	r0, r1
 800c728:	4611      	mov	r1, r2
 800c72a:	2200      	movs	r2, #0
 800c72c:	602a      	str	r2, [r5, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	f7f5 fda4 	bl	800227c <_lseek>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_lseek_r+0x1e>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_lseek_r+0x1e>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	20001798 	.word	0x20001798

0800c744 <_read_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	4d07      	ldr	r5, [pc, #28]	@ (800c764 <_read_r+0x20>)
 800c748:	4604      	mov	r4, r0
 800c74a:	4608      	mov	r0, r1
 800c74c:	4611      	mov	r1, r2
 800c74e:	2200      	movs	r2, #0
 800c750:	602a      	str	r2, [r5, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	f7f5 fd4e 	bl	80021f4 <_read>
 800c758:	1c43      	adds	r3, r0, #1
 800c75a:	d102      	bne.n	800c762 <_read_r+0x1e>
 800c75c:	682b      	ldr	r3, [r5, #0]
 800c75e:	b103      	cbz	r3, 800c762 <_read_r+0x1e>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	20001798 	.word	0x20001798

0800c768 <_write_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d07      	ldr	r5, [pc, #28]	@ (800c788 <_write_r+0x20>)
 800c76c:	4604      	mov	r4, r0
 800c76e:	4608      	mov	r0, r1
 800c770:	4611      	mov	r1, r2
 800c772:	2200      	movs	r2, #0
 800c774:	602a      	str	r2, [r5, #0]
 800c776:	461a      	mov	r2, r3
 800c778:	f7fd fc1e 	bl	8009fb8 <_write>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_write_r+0x1e>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b103      	cbz	r3, 800c786 <_write_r+0x1e>
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	20001798 	.word	0x20001798

0800c78c <__errno>:
 800c78c:	4b01      	ldr	r3, [pc, #4]	@ (800c794 <__errno+0x8>)
 800c78e:	6818      	ldr	r0, [r3, #0]
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	20000040 	.word	0x20000040

0800c798 <__libc_init_array>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	4d0d      	ldr	r5, [pc, #52]	@ (800c7d0 <__libc_init_array+0x38>)
 800c79c:	4c0d      	ldr	r4, [pc, #52]	@ (800c7d4 <__libc_init_array+0x3c>)
 800c79e:	1b64      	subs	r4, r4, r5
 800c7a0:	10a4      	asrs	r4, r4, #2
 800c7a2:	2600      	movs	r6, #0
 800c7a4:	42a6      	cmp	r6, r4
 800c7a6:	d109      	bne.n	800c7bc <__libc_init_array+0x24>
 800c7a8:	4d0b      	ldr	r5, [pc, #44]	@ (800c7d8 <__libc_init_array+0x40>)
 800c7aa:	4c0c      	ldr	r4, [pc, #48]	@ (800c7dc <__libc_init_array+0x44>)
 800c7ac:	f000 fd66 	bl	800d27c <_init>
 800c7b0:	1b64      	subs	r4, r4, r5
 800c7b2:	10a4      	asrs	r4, r4, #2
 800c7b4:	2600      	movs	r6, #0
 800c7b6:	42a6      	cmp	r6, r4
 800c7b8:	d105      	bne.n	800c7c6 <__libc_init_array+0x2e>
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c0:	4798      	blx	r3
 800c7c2:	3601      	adds	r6, #1
 800c7c4:	e7ee      	b.n	800c7a4 <__libc_init_array+0xc>
 800c7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ca:	4798      	blx	r3
 800c7cc:	3601      	adds	r6, #1
 800c7ce:	e7f2      	b.n	800c7b6 <__libc_init_array+0x1e>
 800c7d0:	0800e99c 	.word	0x0800e99c
 800c7d4:	0800e99c 	.word	0x0800e99c
 800c7d8:	0800e99c 	.word	0x0800e99c
 800c7dc:	0800e9a0 	.word	0x0800e9a0

0800c7e0 <__retarget_lock_init_recursive>:
 800c7e0:	4770      	bx	lr

0800c7e2 <__retarget_lock_acquire_recursive>:
 800c7e2:	4770      	bx	lr

0800c7e4 <__retarget_lock_release_recursive>:
 800c7e4:	4770      	bx	lr

0800c7e6 <memcpy>:
 800c7e6:	440a      	add	r2, r1
 800c7e8:	4291      	cmp	r1, r2
 800c7ea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c7ee:	d100      	bne.n	800c7f2 <memcpy+0xc>
 800c7f0:	4770      	bx	lr
 800c7f2:	b510      	push	{r4, lr}
 800c7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7fc:	4291      	cmp	r1, r2
 800c7fe:	d1f9      	bne.n	800c7f4 <memcpy+0xe>
 800c800:	bd10      	pop	{r4, pc}
	...

0800c804 <_free_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4605      	mov	r5, r0
 800c808:	2900      	cmp	r1, #0
 800c80a:	d041      	beq.n	800c890 <_free_r+0x8c>
 800c80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c810:	1f0c      	subs	r4, r1, #4
 800c812:	2b00      	cmp	r3, #0
 800c814:	bfb8      	it	lt
 800c816:	18e4      	addlt	r4, r4, r3
 800c818:	f000 f8e0 	bl	800c9dc <__malloc_lock>
 800c81c:	4a1d      	ldr	r2, [pc, #116]	@ (800c894 <_free_r+0x90>)
 800c81e:	6813      	ldr	r3, [r2, #0]
 800c820:	b933      	cbnz	r3, 800c830 <_free_r+0x2c>
 800c822:	6063      	str	r3, [r4, #4]
 800c824:	6014      	str	r4, [r2, #0]
 800c826:	4628      	mov	r0, r5
 800c828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c82c:	f000 b8dc 	b.w	800c9e8 <__malloc_unlock>
 800c830:	42a3      	cmp	r3, r4
 800c832:	d908      	bls.n	800c846 <_free_r+0x42>
 800c834:	6820      	ldr	r0, [r4, #0]
 800c836:	1821      	adds	r1, r4, r0
 800c838:	428b      	cmp	r3, r1
 800c83a:	bf01      	itttt	eq
 800c83c:	6819      	ldreq	r1, [r3, #0]
 800c83e:	685b      	ldreq	r3, [r3, #4]
 800c840:	1809      	addeq	r1, r1, r0
 800c842:	6021      	streq	r1, [r4, #0]
 800c844:	e7ed      	b.n	800c822 <_free_r+0x1e>
 800c846:	461a      	mov	r2, r3
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	b10b      	cbz	r3, 800c850 <_free_r+0x4c>
 800c84c:	42a3      	cmp	r3, r4
 800c84e:	d9fa      	bls.n	800c846 <_free_r+0x42>
 800c850:	6811      	ldr	r1, [r2, #0]
 800c852:	1850      	adds	r0, r2, r1
 800c854:	42a0      	cmp	r0, r4
 800c856:	d10b      	bne.n	800c870 <_free_r+0x6c>
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	4401      	add	r1, r0
 800c85c:	1850      	adds	r0, r2, r1
 800c85e:	4283      	cmp	r3, r0
 800c860:	6011      	str	r1, [r2, #0]
 800c862:	d1e0      	bne.n	800c826 <_free_r+0x22>
 800c864:	6818      	ldr	r0, [r3, #0]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	6053      	str	r3, [r2, #4]
 800c86a:	4408      	add	r0, r1
 800c86c:	6010      	str	r0, [r2, #0]
 800c86e:	e7da      	b.n	800c826 <_free_r+0x22>
 800c870:	d902      	bls.n	800c878 <_free_r+0x74>
 800c872:	230c      	movs	r3, #12
 800c874:	602b      	str	r3, [r5, #0]
 800c876:	e7d6      	b.n	800c826 <_free_r+0x22>
 800c878:	6820      	ldr	r0, [r4, #0]
 800c87a:	1821      	adds	r1, r4, r0
 800c87c:	428b      	cmp	r3, r1
 800c87e:	bf04      	itt	eq
 800c880:	6819      	ldreq	r1, [r3, #0]
 800c882:	685b      	ldreq	r3, [r3, #4]
 800c884:	6063      	str	r3, [r4, #4]
 800c886:	bf04      	itt	eq
 800c888:	1809      	addeq	r1, r1, r0
 800c88a:	6021      	streq	r1, [r4, #0]
 800c88c:	6054      	str	r4, [r2, #4]
 800c88e:	e7ca      	b.n	800c826 <_free_r+0x22>
 800c890:	bd38      	pop	{r3, r4, r5, pc}
 800c892:	bf00      	nop
 800c894:	200017a4 	.word	0x200017a4

0800c898 <sbrk_aligned>:
 800c898:	b570      	push	{r4, r5, r6, lr}
 800c89a:	4e0f      	ldr	r6, [pc, #60]	@ (800c8d8 <sbrk_aligned+0x40>)
 800c89c:	460c      	mov	r4, r1
 800c89e:	6831      	ldr	r1, [r6, #0]
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	b911      	cbnz	r1, 800c8aa <sbrk_aligned+0x12>
 800c8a4:	f000 fcda 	bl	800d25c <_sbrk_r>
 800c8a8:	6030      	str	r0, [r6, #0]
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	f000 fcd5 	bl	800d25c <_sbrk_r>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	d103      	bne.n	800c8be <sbrk_aligned+0x26>
 800c8b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	bd70      	pop	{r4, r5, r6, pc}
 800c8be:	1cc4      	adds	r4, r0, #3
 800c8c0:	f024 0403 	bic.w	r4, r4, #3
 800c8c4:	42a0      	cmp	r0, r4
 800c8c6:	d0f8      	beq.n	800c8ba <sbrk_aligned+0x22>
 800c8c8:	1a21      	subs	r1, r4, r0
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f000 fcc6 	bl	800d25c <_sbrk_r>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d1f2      	bne.n	800c8ba <sbrk_aligned+0x22>
 800c8d4:	e7ef      	b.n	800c8b6 <sbrk_aligned+0x1e>
 800c8d6:	bf00      	nop
 800c8d8:	200017a0 	.word	0x200017a0

0800c8dc <_malloc_r>:
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	1ccd      	adds	r5, r1, #3
 800c8e2:	f025 0503 	bic.w	r5, r5, #3
 800c8e6:	3508      	adds	r5, #8
 800c8e8:	2d0c      	cmp	r5, #12
 800c8ea:	bf38      	it	cc
 800c8ec:	250c      	movcc	r5, #12
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	db01      	blt.n	800c8f8 <_malloc_r+0x1c>
 800c8f4:	42a9      	cmp	r1, r5
 800c8f6:	d904      	bls.n	800c902 <_malloc_r+0x26>
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	6033      	str	r3, [r6, #0]
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9d8 <_malloc_r+0xfc>
 800c906:	f000 f869 	bl	800c9dc <__malloc_lock>
 800c90a:	f8d8 3000 	ldr.w	r3, [r8]
 800c90e:	461c      	mov	r4, r3
 800c910:	bb44      	cbnz	r4, 800c964 <_malloc_r+0x88>
 800c912:	4629      	mov	r1, r5
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff ffbf 	bl	800c898 <sbrk_aligned>
 800c91a:	1c43      	adds	r3, r0, #1
 800c91c:	4604      	mov	r4, r0
 800c91e:	d158      	bne.n	800c9d2 <_malloc_r+0xf6>
 800c920:	f8d8 4000 	ldr.w	r4, [r8]
 800c924:	4627      	mov	r7, r4
 800c926:	2f00      	cmp	r7, #0
 800c928:	d143      	bne.n	800c9b2 <_malloc_r+0xd6>
 800c92a:	2c00      	cmp	r4, #0
 800c92c:	d04b      	beq.n	800c9c6 <_malloc_r+0xea>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	4639      	mov	r1, r7
 800c932:	4630      	mov	r0, r6
 800c934:	eb04 0903 	add.w	r9, r4, r3
 800c938:	f000 fc90 	bl	800d25c <_sbrk_r>
 800c93c:	4581      	cmp	r9, r0
 800c93e:	d142      	bne.n	800c9c6 <_malloc_r+0xea>
 800c940:	6821      	ldr	r1, [r4, #0]
 800c942:	1a6d      	subs	r5, r5, r1
 800c944:	4629      	mov	r1, r5
 800c946:	4630      	mov	r0, r6
 800c948:	f7ff ffa6 	bl	800c898 <sbrk_aligned>
 800c94c:	3001      	adds	r0, #1
 800c94e:	d03a      	beq.n	800c9c6 <_malloc_r+0xea>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	442b      	add	r3, r5
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	f8d8 3000 	ldr.w	r3, [r8]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	bb62      	cbnz	r2, 800c9b8 <_malloc_r+0xdc>
 800c95e:	f8c8 7000 	str.w	r7, [r8]
 800c962:	e00f      	b.n	800c984 <_malloc_r+0xa8>
 800c964:	6822      	ldr	r2, [r4, #0]
 800c966:	1b52      	subs	r2, r2, r5
 800c968:	d420      	bmi.n	800c9ac <_malloc_r+0xd0>
 800c96a:	2a0b      	cmp	r2, #11
 800c96c:	d917      	bls.n	800c99e <_malloc_r+0xc2>
 800c96e:	1961      	adds	r1, r4, r5
 800c970:	42a3      	cmp	r3, r4
 800c972:	6025      	str	r5, [r4, #0]
 800c974:	bf18      	it	ne
 800c976:	6059      	strne	r1, [r3, #4]
 800c978:	6863      	ldr	r3, [r4, #4]
 800c97a:	bf08      	it	eq
 800c97c:	f8c8 1000 	streq.w	r1, [r8]
 800c980:	5162      	str	r2, [r4, r5]
 800c982:	604b      	str	r3, [r1, #4]
 800c984:	4630      	mov	r0, r6
 800c986:	f000 f82f 	bl	800c9e8 <__malloc_unlock>
 800c98a:	f104 000b 	add.w	r0, r4, #11
 800c98e:	1d23      	adds	r3, r4, #4
 800c990:	f020 0007 	bic.w	r0, r0, #7
 800c994:	1ac2      	subs	r2, r0, r3
 800c996:	bf1c      	itt	ne
 800c998:	1a1b      	subne	r3, r3, r0
 800c99a:	50a3      	strne	r3, [r4, r2]
 800c99c:	e7af      	b.n	800c8fe <_malloc_r+0x22>
 800c99e:	6862      	ldr	r2, [r4, #4]
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	bf0c      	ite	eq
 800c9a4:	f8c8 2000 	streq.w	r2, [r8]
 800c9a8:	605a      	strne	r2, [r3, #4]
 800c9aa:	e7eb      	b.n	800c984 <_malloc_r+0xa8>
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	6864      	ldr	r4, [r4, #4]
 800c9b0:	e7ae      	b.n	800c910 <_malloc_r+0x34>
 800c9b2:	463c      	mov	r4, r7
 800c9b4:	687f      	ldr	r7, [r7, #4]
 800c9b6:	e7b6      	b.n	800c926 <_malloc_r+0x4a>
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	d1fb      	bne.n	800c9b8 <_malloc_r+0xdc>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	6053      	str	r3, [r2, #4]
 800c9c4:	e7de      	b.n	800c984 <_malloc_r+0xa8>
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	6033      	str	r3, [r6, #0]
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f000 f80c 	bl	800c9e8 <__malloc_unlock>
 800c9d0:	e794      	b.n	800c8fc <_malloc_r+0x20>
 800c9d2:	6005      	str	r5, [r0, #0]
 800c9d4:	e7d6      	b.n	800c984 <_malloc_r+0xa8>
 800c9d6:	bf00      	nop
 800c9d8:	200017a4 	.word	0x200017a4

0800c9dc <__malloc_lock>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	@ (800c9e4 <__malloc_lock+0x8>)
 800c9de:	f7ff bf00 	b.w	800c7e2 <__retarget_lock_acquire_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	2000179c 	.word	0x2000179c

0800c9e8 <__malloc_unlock>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	@ (800c9f0 <__malloc_unlock+0x8>)
 800c9ea:	f7ff befb 	b.w	800c7e4 <__retarget_lock_release_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	2000179c 	.word	0x2000179c

0800c9f4 <__sfputc_r>:
 800c9f4:	6893      	ldr	r3, [r2, #8]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	b410      	push	{r4}
 800c9fc:	6093      	str	r3, [r2, #8]
 800c9fe:	da08      	bge.n	800ca12 <__sfputc_r+0x1e>
 800ca00:	6994      	ldr	r4, [r2, #24]
 800ca02:	42a3      	cmp	r3, r4
 800ca04:	db01      	blt.n	800ca0a <__sfputc_r+0x16>
 800ca06:	290a      	cmp	r1, #10
 800ca08:	d103      	bne.n	800ca12 <__sfputc_r+0x1e>
 800ca0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca0e:	f7ff bdda 	b.w	800c5c6 <__swbuf_r>
 800ca12:	6813      	ldr	r3, [r2, #0]
 800ca14:	1c58      	adds	r0, r3, #1
 800ca16:	6010      	str	r0, [r2, #0]
 800ca18:	7019      	strb	r1, [r3, #0]
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <__sfputs_r>:
 800ca22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca24:	4606      	mov	r6, r0
 800ca26:	460f      	mov	r7, r1
 800ca28:	4614      	mov	r4, r2
 800ca2a:	18d5      	adds	r5, r2, r3
 800ca2c:	42ac      	cmp	r4, r5
 800ca2e:	d101      	bne.n	800ca34 <__sfputs_r+0x12>
 800ca30:	2000      	movs	r0, #0
 800ca32:	e007      	b.n	800ca44 <__sfputs_r+0x22>
 800ca34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca38:	463a      	mov	r2, r7
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f7ff ffda 	bl	800c9f4 <__sfputc_r>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d1f3      	bne.n	800ca2c <__sfputs_r+0xa>
 800ca44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca48 <_vfiprintf_r>:
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	b09d      	sub	sp, #116	@ 0x74
 800ca50:	4614      	mov	r4, r2
 800ca52:	4698      	mov	r8, r3
 800ca54:	4606      	mov	r6, r0
 800ca56:	b118      	cbz	r0, 800ca60 <_vfiprintf_r+0x18>
 800ca58:	6a03      	ldr	r3, [r0, #32]
 800ca5a:	b90b      	cbnz	r3, 800ca60 <_vfiprintf_r+0x18>
 800ca5c:	f7ff fcc2 	bl	800c3e4 <__sinit>
 800ca60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca62:	07d9      	lsls	r1, r3, #31
 800ca64:	d405      	bmi.n	800ca72 <_vfiprintf_r+0x2a>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	059a      	lsls	r2, r3, #22
 800ca6a:	d402      	bmi.n	800ca72 <_vfiprintf_r+0x2a>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca6e:	f7ff feb8 	bl	800c7e2 <__retarget_lock_acquire_recursive>
 800ca72:	89ab      	ldrh	r3, [r5, #12]
 800ca74:	071b      	lsls	r3, r3, #28
 800ca76:	d501      	bpl.n	800ca7c <_vfiprintf_r+0x34>
 800ca78:	692b      	ldr	r3, [r5, #16]
 800ca7a:	b99b      	cbnz	r3, 800caa4 <_vfiprintf_r+0x5c>
 800ca7c:	4629      	mov	r1, r5
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f7ff fde0 	bl	800c644 <__swsetup_r>
 800ca84:	b170      	cbz	r0, 800caa4 <_vfiprintf_r+0x5c>
 800ca86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca88:	07dc      	lsls	r4, r3, #31
 800ca8a:	d504      	bpl.n	800ca96 <_vfiprintf_r+0x4e>
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca90:	b01d      	add	sp, #116	@ 0x74
 800ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca96:	89ab      	ldrh	r3, [r5, #12]
 800ca98:	0598      	lsls	r0, r3, #22
 800ca9a:	d4f7      	bmi.n	800ca8c <_vfiprintf_r+0x44>
 800ca9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca9e:	f7ff fea1 	bl	800c7e4 <__retarget_lock_release_recursive>
 800caa2:	e7f3      	b.n	800ca8c <_vfiprintf_r+0x44>
 800caa4:	2300      	movs	r3, #0
 800caa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800caa8:	2320      	movs	r3, #32
 800caaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800caae:	f8cd 800c 	str.w	r8, [sp, #12]
 800cab2:	2330      	movs	r3, #48	@ 0x30
 800cab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc64 <_vfiprintf_r+0x21c>
 800cab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cabc:	f04f 0901 	mov.w	r9, #1
 800cac0:	4623      	mov	r3, r4
 800cac2:	469a      	mov	sl, r3
 800cac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cac8:	b10a      	cbz	r2, 800cace <_vfiprintf_r+0x86>
 800caca:	2a25      	cmp	r2, #37	@ 0x25
 800cacc:	d1f9      	bne.n	800cac2 <_vfiprintf_r+0x7a>
 800cace:	ebba 0b04 	subs.w	fp, sl, r4
 800cad2:	d00b      	beq.n	800caec <_vfiprintf_r+0xa4>
 800cad4:	465b      	mov	r3, fp
 800cad6:	4622      	mov	r2, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	4630      	mov	r0, r6
 800cadc:	f7ff ffa1 	bl	800ca22 <__sfputs_r>
 800cae0:	3001      	adds	r0, #1
 800cae2:	f000 80a7 	beq.w	800cc34 <_vfiprintf_r+0x1ec>
 800cae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae8:	445a      	add	r2, fp
 800caea:	9209      	str	r2, [sp, #36]	@ 0x24
 800caec:	f89a 3000 	ldrb.w	r3, [sl]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f000 809f 	beq.w	800cc34 <_vfiprintf_r+0x1ec>
 800caf6:	2300      	movs	r3, #0
 800caf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb00:	f10a 0a01 	add.w	sl, sl, #1
 800cb04:	9304      	str	r3, [sp, #16]
 800cb06:	9307      	str	r3, [sp, #28]
 800cb08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb0e:	4654      	mov	r4, sl
 800cb10:	2205      	movs	r2, #5
 800cb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb16:	4853      	ldr	r0, [pc, #332]	@ (800cc64 <_vfiprintf_r+0x21c>)
 800cb18:	f7f3 fb3a 	bl	8000190 <memchr>
 800cb1c:	9a04      	ldr	r2, [sp, #16]
 800cb1e:	b9d8      	cbnz	r0, 800cb58 <_vfiprintf_r+0x110>
 800cb20:	06d1      	lsls	r1, r2, #27
 800cb22:	bf44      	itt	mi
 800cb24:	2320      	movmi	r3, #32
 800cb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb2a:	0713      	lsls	r3, r2, #28
 800cb2c:	bf44      	itt	mi
 800cb2e:	232b      	movmi	r3, #43	@ 0x2b
 800cb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb34:	f89a 3000 	ldrb.w	r3, [sl]
 800cb38:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb3a:	d015      	beq.n	800cb68 <_vfiprintf_r+0x120>
 800cb3c:	9a07      	ldr	r2, [sp, #28]
 800cb3e:	4654      	mov	r4, sl
 800cb40:	2000      	movs	r0, #0
 800cb42:	f04f 0c0a 	mov.w	ip, #10
 800cb46:	4621      	mov	r1, r4
 800cb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb4c:	3b30      	subs	r3, #48	@ 0x30
 800cb4e:	2b09      	cmp	r3, #9
 800cb50:	d94b      	bls.n	800cbea <_vfiprintf_r+0x1a2>
 800cb52:	b1b0      	cbz	r0, 800cb82 <_vfiprintf_r+0x13a>
 800cb54:	9207      	str	r2, [sp, #28]
 800cb56:	e014      	b.n	800cb82 <_vfiprintf_r+0x13a>
 800cb58:	eba0 0308 	sub.w	r3, r0, r8
 800cb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb60:	4313      	orrs	r3, r2
 800cb62:	9304      	str	r3, [sp, #16]
 800cb64:	46a2      	mov	sl, r4
 800cb66:	e7d2      	b.n	800cb0e <_vfiprintf_r+0xc6>
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	1d19      	adds	r1, r3, #4
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	9103      	str	r1, [sp, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	bfbb      	ittet	lt
 800cb74:	425b      	neglt	r3, r3
 800cb76:	f042 0202 	orrlt.w	r2, r2, #2
 800cb7a:	9307      	strge	r3, [sp, #28]
 800cb7c:	9307      	strlt	r3, [sp, #28]
 800cb7e:	bfb8      	it	lt
 800cb80:	9204      	strlt	r2, [sp, #16]
 800cb82:	7823      	ldrb	r3, [r4, #0]
 800cb84:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb86:	d10a      	bne.n	800cb9e <_vfiprintf_r+0x156>
 800cb88:	7863      	ldrb	r3, [r4, #1]
 800cb8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb8c:	d132      	bne.n	800cbf4 <_vfiprintf_r+0x1ac>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	1d1a      	adds	r2, r3, #4
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	9203      	str	r2, [sp, #12]
 800cb96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb9a:	3402      	adds	r4, #2
 800cb9c:	9305      	str	r3, [sp, #20]
 800cb9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc74 <_vfiprintf_r+0x22c>
 800cba2:	7821      	ldrb	r1, [r4, #0]
 800cba4:	2203      	movs	r2, #3
 800cba6:	4650      	mov	r0, sl
 800cba8:	f7f3 faf2 	bl	8000190 <memchr>
 800cbac:	b138      	cbz	r0, 800cbbe <_vfiprintf_r+0x176>
 800cbae:	9b04      	ldr	r3, [sp, #16]
 800cbb0:	eba0 000a 	sub.w	r0, r0, sl
 800cbb4:	2240      	movs	r2, #64	@ 0x40
 800cbb6:	4082      	lsls	r2, r0
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	3401      	adds	r4, #1
 800cbbc:	9304      	str	r3, [sp, #16]
 800cbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc2:	4829      	ldr	r0, [pc, #164]	@ (800cc68 <_vfiprintf_r+0x220>)
 800cbc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbc8:	2206      	movs	r2, #6
 800cbca:	f7f3 fae1 	bl	8000190 <memchr>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d03f      	beq.n	800cc52 <_vfiprintf_r+0x20a>
 800cbd2:	4b26      	ldr	r3, [pc, #152]	@ (800cc6c <_vfiprintf_r+0x224>)
 800cbd4:	bb1b      	cbnz	r3, 800cc1e <_vfiprintf_r+0x1d6>
 800cbd6:	9b03      	ldr	r3, [sp, #12]
 800cbd8:	3307      	adds	r3, #7
 800cbda:	f023 0307 	bic.w	r3, r3, #7
 800cbde:	3308      	adds	r3, #8
 800cbe0:	9303      	str	r3, [sp, #12]
 800cbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbe4:	443b      	add	r3, r7
 800cbe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbe8:	e76a      	b.n	800cac0 <_vfiprintf_r+0x78>
 800cbea:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbee:	460c      	mov	r4, r1
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	e7a8      	b.n	800cb46 <_vfiprintf_r+0xfe>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	3401      	adds	r4, #1
 800cbf8:	9305      	str	r3, [sp, #20]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f04f 0c0a 	mov.w	ip, #10
 800cc00:	4620      	mov	r0, r4
 800cc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc06:	3a30      	subs	r2, #48	@ 0x30
 800cc08:	2a09      	cmp	r2, #9
 800cc0a:	d903      	bls.n	800cc14 <_vfiprintf_r+0x1cc>
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d0c6      	beq.n	800cb9e <_vfiprintf_r+0x156>
 800cc10:	9105      	str	r1, [sp, #20]
 800cc12:	e7c4      	b.n	800cb9e <_vfiprintf_r+0x156>
 800cc14:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc18:	4604      	mov	r4, r0
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e7f0      	b.n	800cc00 <_vfiprintf_r+0x1b8>
 800cc1e:	ab03      	add	r3, sp, #12
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	462a      	mov	r2, r5
 800cc24:	4b12      	ldr	r3, [pc, #72]	@ (800cc70 <_vfiprintf_r+0x228>)
 800cc26:	a904      	add	r1, sp, #16
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f3af 8000 	nop.w
 800cc2e:	4607      	mov	r7, r0
 800cc30:	1c78      	adds	r0, r7, #1
 800cc32:	d1d6      	bne.n	800cbe2 <_vfiprintf_r+0x19a>
 800cc34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc36:	07d9      	lsls	r1, r3, #31
 800cc38:	d405      	bmi.n	800cc46 <_vfiprintf_r+0x1fe>
 800cc3a:	89ab      	ldrh	r3, [r5, #12]
 800cc3c:	059a      	lsls	r2, r3, #22
 800cc3e:	d402      	bmi.n	800cc46 <_vfiprintf_r+0x1fe>
 800cc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc42:	f7ff fdcf 	bl	800c7e4 <__retarget_lock_release_recursive>
 800cc46:	89ab      	ldrh	r3, [r5, #12]
 800cc48:	065b      	lsls	r3, r3, #25
 800cc4a:	f53f af1f 	bmi.w	800ca8c <_vfiprintf_r+0x44>
 800cc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc50:	e71e      	b.n	800ca90 <_vfiprintf_r+0x48>
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	462a      	mov	r2, r5
 800cc58:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <_vfiprintf_r+0x228>)
 800cc5a:	a904      	add	r1, sp, #16
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f000 f879 	bl	800cd54 <_printf_i>
 800cc62:	e7e4      	b.n	800cc2e <_vfiprintf_r+0x1e6>
 800cc64:	0800e960 	.word	0x0800e960
 800cc68:	0800e96a 	.word	0x0800e96a
 800cc6c:	00000000 	.word	0x00000000
 800cc70:	0800ca23 	.word	0x0800ca23
 800cc74:	0800e966 	.word	0x0800e966

0800cc78 <_printf_common>:
 800cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	4698      	mov	r8, r3
 800cc80:	688a      	ldr	r2, [r1, #8]
 800cc82:	690b      	ldr	r3, [r1, #16]
 800cc84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	bfb8      	it	lt
 800cc8c:	4613      	movlt	r3, r2
 800cc8e:	6033      	str	r3, [r6, #0]
 800cc90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cc94:	4607      	mov	r7, r0
 800cc96:	460c      	mov	r4, r1
 800cc98:	b10a      	cbz	r2, 800cc9e <_printf_common+0x26>
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	6033      	str	r3, [r6, #0]
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	0699      	lsls	r1, r3, #26
 800cca2:	bf42      	ittt	mi
 800cca4:	6833      	ldrmi	r3, [r6, #0]
 800cca6:	3302      	addmi	r3, #2
 800cca8:	6033      	strmi	r3, [r6, #0]
 800ccaa:	6825      	ldr	r5, [r4, #0]
 800ccac:	f015 0506 	ands.w	r5, r5, #6
 800ccb0:	d106      	bne.n	800ccc0 <_printf_common+0x48>
 800ccb2:	f104 0a19 	add.w	sl, r4, #25
 800ccb6:	68e3      	ldr	r3, [r4, #12]
 800ccb8:	6832      	ldr	r2, [r6, #0]
 800ccba:	1a9b      	subs	r3, r3, r2
 800ccbc:	42ab      	cmp	r3, r5
 800ccbe:	dc26      	bgt.n	800cd0e <_printf_common+0x96>
 800ccc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ccc4:	6822      	ldr	r2, [r4, #0]
 800ccc6:	3b00      	subs	r3, #0
 800ccc8:	bf18      	it	ne
 800ccca:	2301      	movne	r3, #1
 800cccc:	0692      	lsls	r2, r2, #26
 800ccce:	d42b      	bmi.n	800cd28 <_printf_common+0xb0>
 800ccd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ccd4:	4641      	mov	r1, r8
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	47c8      	blx	r9
 800ccda:	3001      	adds	r0, #1
 800ccdc:	d01e      	beq.n	800cd1c <_printf_common+0xa4>
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	6922      	ldr	r2, [r4, #16]
 800cce2:	f003 0306 	and.w	r3, r3, #6
 800cce6:	2b04      	cmp	r3, #4
 800cce8:	bf02      	ittt	eq
 800ccea:	68e5      	ldreq	r5, [r4, #12]
 800ccec:	6833      	ldreq	r3, [r6, #0]
 800ccee:	1aed      	subeq	r5, r5, r3
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	bf0c      	ite	eq
 800ccf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccf8:	2500      	movne	r5, #0
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	bfc4      	itt	gt
 800ccfe:	1a9b      	subgt	r3, r3, r2
 800cd00:	18ed      	addgt	r5, r5, r3
 800cd02:	2600      	movs	r6, #0
 800cd04:	341a      	adds	r4, #26
 800cd06:	42b5      	cmp	r5, r6
 800cd08:	d11a      	bne.n	800cd40 <_printf_common+0xc8>
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	e008      	b.n	800cd20 <_printf_common+0xa8>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	4652      	mov	r2, sl
 800cd12:	4641      	mov	r1, r8
 800cd14:	4638      	mov	r0, r7
 800cd16:	47c8      	blx	r9
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d103      	bne.n	800cd24 <_printf_common+0xac>
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd24:	3501      	adds	r5, #1
 800cd26:	e7c6      	b.n	800ccb6 <_printf_common+0x3e>
 800cd28:	18e1      	adds	r1, r4, r3
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	2030      	movs	r0, #48	@ 0x30
 800cd2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd32:	4422      	add	r2, r4
 800cd34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	e7c7      	b.n	800ccd0 <_printf_common+0x58>
 800cd40:	2301      	movs	r3, #1
 800cd42:	4622      	mov	r2, r4
 800cd44:	4641      	mov	r1, r8
 800cd46:	4638      	mov	r0, r7
 800cd48:	47c8      	blx	r9
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	d0e6      	beq.n	800cd1c <_printf_common+0xa4>
 800cd4e:	3601      	adds	r6, #1
 800cd50:	e7d9      	b.n	800cd06 <_printf_common+0x8e>
	...

0800cd54 <_printf_i>:
 800cd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd58:	7e0f      	ldrb	r7, [r1, #24]
 800cd5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd5c:	2f78      	cmp	r7, #120	@ 0x78
 800cd5e:	4691      	mov	r9, r2
 800cd60:	4680      	mov	r8, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	469a      	mov	sl, r3
 800cd66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd6a:	d807      	bhi.n	800cd7c <_printf_i+0x28>
 800cd6c:	2f62      	cmp	r7, #98	@ 0x62
 800cd6e:	d80a      	bhi.n	800cd86 <_printf_i+0x32>
 800cd70:	2f00      	cmp	r7, #0
 800cd72:	f000 80d2 	beq.w	800cf1a <_printf_i+0x1c6>
 800cd76:	2f58      	cmp	r7, #88	@ 0x58
 800cd78:	f000 80b9 	beq.w	800ceee <_printf_i+0x19a>
 800cd7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cd84:	e03a      	b.n	800cdfc <_printf_i+0xa8>
 800cd86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cd8a:	2b15      	cmp	r3, #21
 800cd8c:	d8f6      	bhi.n	800cd7c <_printf_i+0x28>
 800cd8e:	a101      	add	r1, pc, #4	@ (adr r1, 800cd94 <_printf_i+0x40>)
 800cd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd94:	0800cded 	.word	0x0800cded
 800cd98:	0800ce01 	.word	0x0800ce01
 800cd9c:	0800cd7d 	.word	0x0800cd7d
 800cda0:	0800cd7d 	.word	0x0800cd7d
 800cda4:	0800cd7d 	.word	0x0800cd7d
 800cda8:	0800cd7d 	.word	0x0800cd7d
 800cdac:	0800ce01 	.word	0x0800ce01
 800cdb0:	0800cd7d 	.word	0x0800cd7d
 800cdb4:	0800cd7d 	.word	0x0800cd7d
 800cdb8:	0800cd7d 	.word	0x0800cd7d
 800cdbc:	0800cd7d 	.word	0x0800cd7d
 800cdc0:	0800cf01 	.word	0x0800cf01
 800cdc4:	0800ce2b 	.word	0x0800ce2b
 800cdc8:	0800cebb 	.word	0x0800cebb
 800cdcc:	0800cd7d 	.word	0x0800cd7d
 800cdd0:	0800cd7d 	.word	0x0800cd7d
 800cdd4:	0800cf23 	.word	0x0800cf23
 800cdd8:	0800cd7d 	.word	0x0800cd7d
 800cddc:	0800ce2b 	.word	0x0800ce2b
 800cde0:	0800cd7d 	.word	0x0800cd7d
 800cde4:	0800cd7d 	.word	0x0800cd7d
 800cde8:	0800cec3 	.word	0x0800cec3
 800cdec:	6833      	ldr	r3, [r6, #0]
 800cdee:	1d1a      	adds	r2, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6032      	str	r2, [r6, #0]
 800cdf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e09d      	b.n	800cf3c <_printf_i+0x1e8>
 800ce00:	6833      	ldr	r3, [r6, #0]
 800ce02:	6820      	ldr	r0, [r4, #0]
 800ce04:	1d19      	adds	r1, r3, #4
 800ce06:	6031      	str	r1, [r6, #0]
 800ce08:	0606      	lsls	r6, r0, #24
 800ce0a:	d501      	bpl.n	800ce10 <_printf_i+0xbc>
 800ce0c:	681d      	ldr	r5, [r3, #0]
 800ce0e:	e003      	b.n	800ce18 <_printf_i+0xc4>
 800ce10:	0645      	lsls	r5, r0, #25
 800ce12:	d5fb      	bpl.n	800ce0c <_printf_i+0xb8>
 800ce14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	da03      	bge.n	800ce24 <_printf_i+0xd0>
 800ce1c:	232d      	movs	r3, #45	@ 0x2d
 800ce1e:	426d      	negs	r5, r5
 800ce20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce24:	4859      	ldr	r0, [pc, #356]	@ (800cf8c <_printf_i+0x238>)
 800ce26:	230a      	movs	r3, #10
 800ce28:	e011      	b.n	800ce4e <_printf_i+0xfa>
 800ce2a:	6821      	ldr	r1, [r4, #0]
 800ce2c:	6833      	ldr	r3, [r6, #0]
 800ce2e:	0608      	lsls	r0, r1, #24
 800ce30:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce34:	d402      	bmi.n	800ce3c <_printf_i+0xe8>
 800ce36:	0649      	lsls	r1, r1, #25
 800ce38:	bf48      	it	mi
 800ce3a:	b2ad      	uxthmi	r5, r5
 800ce3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce3e:	4853      	ldr	r0, [pc, #332]	@ (800cf8c <_printf_i+0x238>)
 800ce40:	6033      	str	r3, [r6, #0]
 800ce42:	bf14      	ite	ne
 800ce44:	230a      	movne	r3, #10
 800ce46:	2308      	moveq	r3, #8
 800ce48:	2100      	movs	r1, #0
 800ce4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce4e:	6866      	ldr	r6, [r4, #4]
 800ce50:	60a6      	str	r6, [r4, #8]
 800ce52:	2e00      	cmp	r6, #0
 800ce54:	bfa2      	ittt	ge
 800ce56:	6821      	ldrge	r1, [r4, #0]
 800ce58:	f021 0104 	bicge.w	r1, r1, #4
 800ce5c:	6021      	strge	r1, [r4, #0]
 800ce5e:	b90d      	cbnz	r5, 800ce64 <_printf_i+0x110>
 800ce60:	2e00      	cmp	r6, #0
 800ce62:	d04b      	beq.n	800cefc <_printf_i+0x1a8>
 800ce64:	4616      	mov	r6, r2
 800ce66:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce6a:	fb03 5711 	mls	r7, r3, r1, r5
 800ce6e:	5dc7      	ldrb	r7, [r0, r7]
 800ce70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce74:	462f      	mov	r7, r5
 800ce76:	42bb      	cmp	r3, r7
 800ce78:	460d      	mov	r5, r1
 800ce7a:	d9f4      	bls.n	800ce66 <_printf_i+0x112>
 800ce7c:	2b08      	cmp	r3, #8
 800ce7e:	d10b      	bne.n	800ce98 <_printf_i+0x144>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	07df      	lsls	r7, r3, #31
 800ce84:	d508      	bpl.n	800ce98 <_printf_i+0x144>
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	6861      	ldr	r1, [r4, #4]
 800ce8a:	4299      	cmp	r1, r3
 800ce8c:	bfde      	ittt	le
 800ce8e:	2330      	movle	r3, #48	@ 0x30
 800ce90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce94:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ce98:	1b92      	subs	r2, r2, r6
 800ce9a:	6122      	str	r2, [r4, #16]
 800ce9c:	f8cd a000 	str.w	sl, [sp]
 800cea0:	464b      	mov	r3, r9
 800cea2:	aa03      	add	r2, sp, #12
 800cea4:	4621      	mov	r1, r4
 800cea6:	4640      	mov	r0, r8
 800cea8:	f7ff fee6 	bl	800cc78 <_printf_common>
 800ceac:	3001      	adds	r0, #1
 800ceae:	d14a      	bne.n	800cf46 <_printf_i+0x1f2>
 800ceb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ceb4:	b004      	add	sp, #16
 800ceb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	f043 0320 	orr.w	r3, r3, #32
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	4833      	ldr	r0, [pc, #204]	@ (800cf90 <_printf_i+0x23c>)
 800cec4:	2778      	movs	r7, #120	@ 0x78
 800cec6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	6831      	ldr	r1, [r6, #0]
 800cece:	061f      	lsls	r7, r3, #24
 800ced0:	f851 5b04 	ldr.w	r5, [r1], #4
 800ced4:	d402      	bmi.n	800cedc <_printf_i+0x188>
 800ced6:	065f      	lsls	r7, r3, #25
 800ced8:	bf48      	it	mi
 800ceda:	b2ad      	uxthmi	r5, r5
 800cedc:	6031      	str	r1, [r6, #0]
 800cede:	07d9      	lsls	r1, r3, #31
 800cee0:	bf44      	itt	mi
 800cee2:	f043 0320 	orrmi.w	r3, r3, #32
 800cee6:	6023      	strmi	r3, [r4, #0]
 800cee8:	b11d      	cbz	r5, 800cef2 <_printf_i+0x19e>
 800ceea:	2310      	movs	r3, #16
 800ceec:	e7ac      	b.n	800ce48 <_printf_i+0xf4>
 800ceee:	4827      	ldr	r0, [pc, #156]	@ (800cf8c <_printf_i+0x238>)
 800cef0:	e7e9      	b.n	800cec6 <_printf_i+0x172>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	f023 0320 	bic.w	r3, r3, #32
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	e7f6      	b.n	800ceea <_printf_i+0x196>
 800cefc:	4616      	mov	r6, r2
 800cefe:	e7bd      	b.n	800ce7c <_printf_i+0x128>
 800cf00:	6833      	ldr	r3, [r6, #0]
 800cf02:	6825      	ldr	r5, [r4, #0]
 800cf04:	6961      	ldr	r1, [r4, #20]
 800cf06:	1d18      	adds	r0, r3, #4
 800cf08:	6030      	str	r0, [r6, #0]
 800cf0a:	062e      	lsls	r6, r5, #24
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	d501      	bpl.n	800cf14 <_printf_i+0x1c0>
 800cf10:	6019      	str	r1, [r3, #0]
 800cf12:	e002      	b.n	800cf1a <_printf_i+0x1c6>
 800cf14:	0668      	lsls	r0, r5, #25
 800cf16:	d5fb      	bpl.n	800cf10 <_printf_i+0x1bc>
 800cf18:	8019      	strh	r1, [r3, #0]
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	6123      	str	r3, [r4, #16]
 800cf1e:	4616      	mov	r6, r2
 800cf20:	e7bc      	b.n	800ce9c <_printf_i+0x148>
 800cf22:	6833      	ldr	r3, [r6, #0]
 800cf24:	1d1a      	adds	r2, r3, #4
 800cf26:	6032      	str	r2, [r6, #0]
 800cf28:	681e      	ldr	r6, [r3, #0]
 800cf2a:	6862      	ldr	r2, [r4, #4]
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	4630      	mov	r0, r6
 800cf30:	f7f3 f92e 	bl	8000190 <memchr>
 800cf34:	b108      	cbz	r0, 800cf3a <_printf_i+0x1e6>
 800cf36:	1b80      	subs	r0, r0, r6
 800cf38:	6060      	str	r0, [r4, #4]
 800cf3a:	6863      	ldr	r3, [r4, #4]
 800cf3c:	6123      	str	r3, [r4, #16]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf44:	e7aa      	b.n	800ce9c <_printf_i+0x148>
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	4632      	mov	r2, r6
 800cf4a:	4649      	mov	r1, r9
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	47d0      	blx	sl
 800cf50:	3001      	adds	r0, #1
 800cf52:	d0ad      	beq.n	800ceb0 <_printf_i+0x15c>
 800cf54:	6823      	ldr	r3, [r4, #0]
 800cf56:	079b      	lsls	r3, r3, #30
 800cf58:	d413      	bmi.n	800cf82 <_printf_i+0x22e>
 800cf5a:	68e0      	ldr	r0, [r4, #12]
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	4298      	cmp	r0, r3
 800cf60:	bfb8      	it	lt
 800cf62:	4618      	movlt	r0, r3
 800cf64:	e7a6      	b.n	800ceb4 <_printf_i+0x160>
 800cf66:	2301      	movs	r3, #1
 800cf68:	4632      	mov	r2, r6
 800cf6a:	4649      	mov	r1, r9
 800cf6c:	4640      	mov	r0, r8
 800cf6e:	47d0      	blx	sl
 800cf70:	3001      	adds	r0, #1
 800cf72:	d09d      	beq.n	800ceb0 <_printf_i+0x15c>
 800cf74:	3501      	adds	r5, #1
 800cf76:	68e3      	ldr	r3, [r4, #12]
 800cf78:	9903      	ldr	r1, [sp, #12]
 800cf7a:	1a5b      	subs	r3, r3, r1
 800cf7c:	42ab      	cmp	r3, r5
 800cf7e:	dcf2      	bgt.n	800cf66 <_printf_i+0x212>
 800cf80:	e7eb      	b.n	800cf5a <_printf_i+0x206>
 800cf82:	2500      	movs	r5, #0
 800cf84:	f104 0619 	add.w	r6, r4, #25
 800cf88:	e7f5      	b.n	800cf76 <_printf_i+0x222>
 800cf8a:	bf00      	nop
 800cf8c:	0800e971 	.word	0x0800e971
 800cf90:	0800e982 	.word	0x0800e982

0800cf94 <__sflush_r>:
 800cf94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9c:	0716      	lsls	r6, r2, #28
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	d454      	bmi.n	800d04e <__sflush_r+0xba>
 800cfa4:	684b      	ldr	r3, [r1, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dc02      	bgt.n	800cfb0 <__sflush_r+0x1c>
 800cfaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	dd48      	ble.n	800d042 <__sflush_r+0xae>
 800cfb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfb2:	2e00      	cmp	r6, #0
 800cfb4:	d045      	beq.n	800d042 <__sflush_r+0xae>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfbc:	682f      	ldr	r7, [r5, #0]
 800cfbe:	6a21      	ldr	r1, [r4, #32]
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	d030      	beq.n	800d026 <__sflush_r+0x92>
 800cfc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	0759      	lsls	r1, r3, #29
 800cfca:	d505      	bpl.n	800cfd8 <__sflush_r+0x44>
 800cfcc:	6863      	ldr	r3, [r4, #4]
 800cfce:	1ad2      	subs	r2, r2, r3
 800cfd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfd2:	b10b      	cbz	r3, 800cfd8 <__sflush_r+0x44>
 800cfd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfd6:	1ad2      	subs	r2, r2, r3
 800cfd8:	2300      	movs	r3, #0
 800cfda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfdc:	6a21      	ldr	r1, [r4, #32]
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b0      	blx	r6
 800cfe2:	1c43      	adds	r3, r0, #1
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	d106      	bne.n	800cff6 <__sflush_r+0x62>
 800cfe8:	6829      	ldr	r1, [r5, #0]
 800cfea:	291d      	cmp	r1, #29
 800cfec:	d82b      	bhi.n	800d046 <__sflush_r+0xb2>
 800cfee:	4a2a      	ldr	r2, [pc, #168]	@ (800d098 <__sflush_r+0x104>)
 800cff0:	410a      	asrs	r2, r1
 800cff2:	07d6      	lsls	r6, r2, #31
 800cff4:	d427      	bmi.n	800d046 <__sflush_r+0xb2>
 800cff6:	2200      	movs	r2, #0
 800cff8:	6062      	str	r2, [r4, #4]
 800cffa:	04d9      	lsls	r1, r3, #19
 800cffc:	6922      	ldr	r2, [r4, #16]
 800cffe:	6022      	str	r2, [r4, #0]
 800d000:	d504      	bpl.n	800d00c <__sflush_r+0x78>
 800d002:	1c42      	adds	r2, r0, #1
 800d004:	d101      	bne.n	800d00a <__sflush_r+0x76>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	b903      	cbnz	r3, 800d00c <__sflush_r+0x78>
 800d00a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d00c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d00e:	602f      	str	r7, [r5, #0]
 800d010:	b1b9      	cbz	r1, 800d042 <__sflush_r+0xae>
 800d012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d016:	4299      	cmp	r1, r3
 800d018:	d002      	beq.n	800d020 <__sflush_r+0x8c>
 800d01a:	4628      	mov	r0, r5
 800d01c:	f7ff fbf2 	bl	800c804 <_free_r>
 800d020:	2300      	movs	r3, #0
 800d022:	6363      	str	r3, [r4, #52]	@ 0x34
 800d024:	e00d      	b.n	800d042 <__sflush_r+0xae>
 800d026:	2301      	movs	r3, #1
 800d028:	4628      	mov	r0, r5
 800d02a:	47b0      	blx	r6
 800d02c:	4602      	mov	r2, r0
 800d02e:	1c50      	adds	r0, r2, #1
 800d030:	d1c9      	bne.n	800cfc6 <__sflush_r+0x32>
 800d032:	682b      	ldr	r3, [r5, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0c6      	beq.n	800cfc6 <__sflush_r+0x32>
 800d038:	2b1d      	cmp	r3, #29
 800d03a:	d001      	beq.n	800d040 <__sflush_r+0xac>
 800d03c:	2b16      	cmp	r3, #22
 800d03e:	d11e      	bne.n	800d07e <__sflush_r+0xea>
 800d040:	602f      	str	r7, [r5, #0]
 800d042:	2000      	movs	r0, #0
 800d044:	e022      	b.n	800d08c <__sflush_r+0xf8>
 800d046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d04a:	b21b      	sxth	r3, r3
 800d04c:	e01b      	b.n	800d086 <__sflush_r+0xf2>
 800d04e:	690f      	ldr	r7, [r1, #16]
 800d050:	2f00      	cmp	r7, #0
 800d052:	d0f6      	beq.n	800d042 <__sflush_r+0xae>
 800d054:	0793      	lsls	r3, r2, #30
 800d056:	680e      	ldr	r6, [r1, #0]
 800d058:	bf08      	it	eq
 800d05a:	694b      	ldreq	r3, [r1, #20]
 800d05c:	600f      	str	r7, [r1, #0]
 800d05e:	bf18      	it	ne
 800d060:	2300      	movne	r3, #0
 800d062:	eba6 0807 	sub.w	r8, r6, r7
 800d066:	608b      	str	r3, [r1, #8]
 800d068:	f1b8 0f00 	cmp.w	r8, #0
 800d06c:	dde9      	ble.n	800d042 <__sflush_r+0xae>
 800d06e:	6a21      	ldr	r1, [r4, #32]
 800d070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d072:	4643      	mov	r3, r8
 800d074:	463a      	mov	r2, r7
 800d076:	4628      	mov	r0, r5
 800d078:	47b0      	blx	r6
 800d07a:	2800      	cmp	r0, #0
 800d07c:	dc08      	bgt.n	800d090 <__sflush_r+0xfc>
 800d07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	4407      	add	r7, r0
 800d092:	eba8 0800 	sub.w	r8, r8, r0
 800d096:	e7e7      	b.n	800d068 <__sflush_r+0xd4>
 800d098:	dfbffffe 	.word	0xdfbffffe

0800d09c <_fflush_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	690b      	ldr	r3, [r1, #16]
 800d0a0:	4605      	mov	r5, r0
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	b913      	cbnz	r3, 800d0ac <_fflush_r+0x10>
 800d0a6:	2500      	movs	r5, #0
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	b118      	cbz	r0, 800d0b6 <_fflush_r+0x1a>
 800d0ae:	6a03      	ldr	r3, [r0, #32]
 800d0b0:	b90b      	cbnz	r3, 800d0b6 <_fflush_r+0x1a>
 800d0b2:	f7ff f997 	bl	800c3e4 <__sinit>
 800d0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0f3      	beq.n	800d0a6 <_fflush_r+0xa>
 800d0be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0c0:	07d0      	lsls	r0, r2, #31
 800d0c2:	d404      	bmi.n	800d0ce <_fflush_r+0x32>
 800d0c4:	0599      	lsls	r1, r3, #22
 800d0c6:	d402      	bmi.n	800d0ce <_fflush_r+0x32>
 800d0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ca:	f7ff fb8a 	bl	800c7e2 <__retarget_lock_acquire_recursive>
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	f7ff ff5f 	bl	800cf94 <__sflush_r>
 800d0d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0d8:	07da      	lsls	r2, r3, #31
 800d0da:	4605      	mov	r5, r0
 800d0dc:	d4e4      	bmi.n	800d0a8 <_fflush_r+0xc>
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	059b      	lsls	r3, r3, #22
 800d0e2:	d4e1      	bmi.n	800d0a8 <_fflush_r+0xc>
 800d0e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0e6:	f7ff fb7d 	bl	800c7e4 <__retarget_lock_release_recursive>
 800d0ea:	e7dd      	b.n	800d0a8 <_fflush_r+0xc>

0800d0ec <__swhatbuf_r>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f4:	2900      	cmp	r1, #0
 800d0f6:	b096      	sub	sp, #88	@ 0x58
 800d0f8:	4615      	mov	r5, r2
 800d0fa:	461e      	mov	r6, r3
 800d0fc:	da0d      	bge.n	800d11a <__swhatbuf_r+0x2e>
 800d0fe:	89a3      	ldrh	r3, [r4, #12]
 800d100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d104:	f04f 0100 	mov.w	r1, #0
 800d108:	bf14      	ite	ne
 800d10a:	2340      	movne	r3, #64	@ 0x40
 800d10c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d110:	2000      	movs	r0, #0
 800d112:	6031      	str	r1, [r6, #0]
 800d114:	602b      	str	r3, [r5, #0]
 800d116:	b016      	add	sp, #88	@ 0x58
 800d118:	bd70      	pop	{r4, r5, r6, pc}
 800d11a:	466a      	mov	r2, sp
 800d11c:	f000 f87c 	bl	800d218 <_fstat_r>
 800d120:	2800      	cmp	r0, #0
 800d122:	dbec      	blt.n	800d0fe <__swhatbuf_r+0x12>
 800d124:	9901      	ldr	r1, [sp, #4]
 800d126:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d12a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d12e:	4259      	negs	r1, r3
 800d130:	4159      	adcs	r1, r3
 800d132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d136:	e7eb      	b.n	800d110 <__swhatbuf_r+0x24>

0800d138 <__smakebuf_r>:
 800d138:	898b      	ldrh	r3, [r1, #12]
 800d13a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13c:	079d      	lsls	r5, r3, #30
 800d13e:	4606      	mov	r6, r0
 800d140:	460c      	mov	r4, r1
 800d142:	d507      	bpl.n	800d154 <__smakebuf_r+0x1c>
 800d144:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d148:	6023      	str	r3, [r4, #0]
 800d14a:	6123      	str	r3, [r4, #16]
 800d14c:	2301      	movs	r3, #1
 800d14e:	6163      	str	r3, [r4, #20]
 800d150:	b003      	add	sp, #12
 800d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d154:	ab01      	add	r3, sp, #4
 800d156:	466a      	mov	r2, sp
 800d158:	f7ff ffc8 	bl	800d0ec <__swhatbuf_r>
 800d15c:	9f00      	ldr	r7, [sp, #0]
 800d15e:	4605      	mov	r5, r0
 800d160:	4639      	mov	r1, r7
 800d162:	4630      	mov	r0, r6
 800d164:	f7ff fbba 	bl	800c8dc <_malloc_r>
 800d168:	b948      	cbnz	r0, 800d17e <__smakebuf_r+0x46>
 800d16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d16e:	059a      	lsls	r2, r3, #22
 800d170:	d4ee      	bmi.n	800d150 <__smakebuf_r+0x18>
 800d172:	f023 0303 	bic.w	r3, r3, #3
 800d176:	f043 0302 	orr.w	r3, r3, #2
 800d17a:	81a3      	strh	r3, [r4, #12]
 800d17c:	e7e2      	b.n	800d144 <__smakebuf_r+0xc>
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	6020      	str	r0, [r4, #0]
 800d182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d186:	81a3      	strh	r3, [r4, #12]
 800d188:	9b01      	ldr	r3, [sp, #4]
 800d18a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d18e:	b15b      	cbz	r3, 800d1a8 <__smakebuf_r+0x70>
 800d190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d194:	4630      	mov	r0, r6
 800d196:	f000 f851 	bl	800d23c <_isatty_r>
 800d19a:	b128      	cbz	r0, 800d1a8 <__smakebuf_r+0x70>
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	f023 0303 	bic.w	r3, r3, #3
 800d1a2:	f043 0301 	orr.w	r3, r3, #1
 800d1a6:	81a3      	strh	r3, [r4, #12]
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	431d      	orrs	r5, r3
 800d1ac:	81a5      	strh	r5, [r4, #12]
 800d1ae:	e7cf      	b.n	800d150 <__smakebuf_r+0x18>

0800d1b0 <_putc_r>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	460d      	mov	r5, r1
 800d1b4:	4614      	mov	r4, r2
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	b118      	cbz	r0, 800d1c2 <_putc_r+0x12>
 800d1ba:	6a03      	ldr	r3, [r0, #32]
 800d1bc:	b90b      	cbnz	r3, 800d1c2 <_putc_r+0x12>
 800d1be:	f7ff f911 	bl	800c3e4 <__sinit>
 800d1c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1c4:	07d8      	lsls	r0, r3, #31
 800d1c6:	d405      	bmi.n	800d1d4 <_putc_r+0x24>
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	0599      	lsls	r1, r3, #22
 800d1cc:	d402      	bmi.n	800d1d4 <_putc_r+0x24>
 800d1ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1d0:	f7ff fb07 	bl	800c7e2 <__retarget_lock_acquire_recursive>
 800d1d4:	68a3      	ldr	r3, [r4, #8]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	60a3      	str	r3, [r4, #8]
 800d1dc:	da05      	bge.n	800d1ea <_putc_r+0x3a>
 800d1de:	69a2      	ldr	r2, [r4, #24]
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	db12      	blt.n	800d20a <_putc_r+0x5a>
 800d1e4:	b2eb      	uxtb	r3, r5
 800d1e6:	2b0a      	cmp	r3, #10
 800d1e8:	d00f      	beq.n	800d20a <_putc_r+0x5a>
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	6022      	str	r2, [r4, #0]
 800d1f0:	701d      	strb	r5, [r3, #0]
 800d1f2:	b2ed      	uxtb	r5, r5
 800d1f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1f6:	07da      	lsls	r2, r3, #31
 800d1f8:	d405      	bmi.n	800d206 <_putc_r+0x56>
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	059b      	lsls	r3, r3, #22
 800d1fe:	d402      	bmi.n	800d206 <_putc_r+0x56>
 800d200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d202:	f7ff faef 	bl	800c7e4 <__retarget_lock_release_recursive>
 800d206:	4628      	mov	r0, r5
 800d208:	bd70      	pop	{r4, r5, r6, pc}
 800d20a:	4629      	mov	r1, r5
 800d20c:	4622      	mov	r2, r4
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff f9d9 	bl	800c5c6 <__swbuf_r>
 800d214:	4605      	mov	r5, r0
 800d216:	e7ed      	b.n	800d1f4 <_putc_r+0x44>

0800d218 <_fstat_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	@ (800d238 <_fstat_r+0x20>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	4611      	mov	r1, r2
 800d224:	602b      	str	r3, [r5, #0]
 800d226:	f7f5 f80e 	bl	8002246 <_fstat>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	d102      	bne.n	800d234 <_fstat_r+0x1c>
 800d22e:	682b      	ldr	r3, [r5, #0]
 800d230:	b103      	cbz	r3, 800d234 <_fstat_r+0x1c>
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	bd38      	pop	{r3, r4, r5, pc}
 800d236:	bf00      	nop
 800d238:	20001798 	.word	0x20001798

0800d23c <_isatty_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d06      	ldr	r5, [pc, #24]	@ (800d258 <_isatty_r+0x1c>)
 800d240:	2300      	movs	r3, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	f7f5 f80d 	bl	8002266 <_isatty>
 800d24c:	1c43      	adds	r3, r0, #1
 800d24e:	d102      	bne.n	800d256 <_isatty_r+0x1a>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	b103      	cbz	r3, 800d256 <_isatty_r+0x1a>
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	20001798 	.word	0x20001798

0800d25c <_sbrk_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4d06      	ldr	r5, [pc, #24]	@ (800d278 <_sbrk_r+0x1c>)
 800d260:	2300      	movs	r3, #0
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	f7f5 f816 	bl	8002298 <_sbrk>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_sbrk_r+0x1a>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_sbrk_r+0x1a>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	20001798 	.word	0x20001798

0800d27c <_init>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	bf00      	nop
 800d280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d282:	bc08      	pop	{r3}
 800d284:	469e      	mov	lr, r3
 800d286:	4770      	bx	lr

0800d288 <_fini>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	bf00      	nop
 800d28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28e:	bc08      	pop	{r3}
 800d290:	469e      	mov	lr, r3
 800d292:	4770      	bx	lr
