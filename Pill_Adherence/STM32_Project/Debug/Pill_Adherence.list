
Pill_Adherence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d090  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015f4  0800d1d0  0800d1d0  0000e1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e7c4  0800e7c4  0000f7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e7cc  0800e7cc  0000f7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e7d0  0800e7d0  0000f7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  20000008  0800e7d4  00010008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000094  0800e860  00010094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0800e895  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d4  200000e0  0800e8a6  000100e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017b4  0800e8a6  000107b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00011000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00011000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800e8a6  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00034901  00000000  00000000  00010a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006cc0  00000000  00000000  00045398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003030  00000000  00000000  0004c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000251b  00000000  00000000  0004f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ffdc  00000000  00000000  000515a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034e70  00000000  00000000  0008157f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00113099  00000000  00000000  000b63ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001c9488  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d4c4  00000000  00000000  001c94cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001d6990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d1b8 	.word	0x0800d1b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800d1b8 	.word	0x0800d1b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000af6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000afa:	4905      	ldr	r1, [pc, #20]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58000800 	.word	0x58000800

08000b14 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b52:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b82:	f001 fd2b 	bl	80025dc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b86:	f001 fd2f 	bl	80025e8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000b8e:	f7ff ffad 	bl	8000aec <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b92:	f009 fa35 	bl	800a000 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000b96:	f000 f821 	bl	8000bdc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000b9a:	f000 f8c1 	bl	8000d20 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000b9e:	bf00      	nop
}
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <APPD_EnableCPU2+0x34>)
 8000bac:	1d3c      	adds	r4, r7, #4
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	c403      	stmia	r4!, {r0, r1}
 8000bba:	8022      	strh	r2, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c13      	lsrs	r3, r2, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc2:	f009 f959 	bl	8009e78 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f008 fbea 	bl	80093a2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bce:	bf00      	nop
}
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800d1d0 	.word	0x0800d1d0

08000bdc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	e036      	b.n	8000c70 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	4a43      	ldr	r2, [pc, #268]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	799b      	ldrb	r3, [r3, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d02c      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	4a40      	ldr	r2, [pc, #256]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c18:	4a3f      	ldr	r2, [pc, #252]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01b      	beq.n	8000c56 <APPD_SetCPU2GpioConfig+0x7a>
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d821      	bhi.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c28:	d003      	beq.n	8000c32 <APPD_SetCPU2GpioConfig+0x56>
 8000c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d009      	beq.n	8000c44 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c30:	e01a      	b.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	4a37      	ldr	r2, [pc, #220]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	889a      	ldrh	r2, [r3, #4]
 8000c3c:	8bbb      	ldrh	r3, [r7, #28]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	83bb      	strh	r3, [r7, #28]
          break;
 8000c42:	e012      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	889a      	ldrh	r2, [r3, #4]
 8000c4e:	8b7b      	ldrh	r3, [r7, #26]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	837b      	strh	r3, [r7, #26]
          break;
 8000c54:	e009      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	889a      	ldrh	r2, [r3, #4]
 8000c60:	8b3b      	ldrh	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	833b      	strh	r3, [r7, #24]
          break;
 8000c66:	e000      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c68:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	77fb      	strb	r3, [r7, #31]
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	2b25      	cmp	r3, #37	@ 0x25
 8000c74:	d9c5      	bls.n	8000c02 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c82:	8bbb      	ldrh	r3, [r7, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d014      	beq.n	8000cb2 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c88:	8bbb      	ldrh	r3, [r7, #28]
 8000c8a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff41 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff57 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f003 f9c2 	bl	8004028 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ca4:	8bbb      	ldrh	r3, [r7, #28]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f003 fb2b 	bl	8004308 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cb2:	8b7b      	ldrh	r3, [r7, #26]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d012      	beq.n	8000cde <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cb8:	8b7b      	ldrh	r3, [r7, #26]
 8000cba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff29 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff ff3f 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cce:	f003 f9ab 	bl	8004028 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cd2:	8b7b      	ldrh	r3, [r7, #26]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f003 fb15 	bl	8004308 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cde:	8b3b      	ldrh	r3, [r7, #24]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000ce4:	8b3b      	ldrh	r3, [r7, #24]
 8000ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff ff13 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f7ff ff29 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000cfa:	f003 f995 	bl	8004028 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000cfe:	8b3b      	ldrh	r3, [r7, #24]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f003 faff 	bl	8004308 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
}
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800e570 	.word	0x0800e570
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	48000400 	.word	0x48000400

08000d20 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d24:	bf00      	nop
}
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d32:	f000 ff29 	bl	8001b88 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d36:	bf00      	nop
}
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	460b      	mov	r3, r1
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d48:	897a      	ldrh	r2, [r7, #10]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 fbb0 	bl	80014b4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d54:	bf00      	nop
}
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	f023 0207 	bic.w	r2, r3, #7
 8000d6e:	4905      	ldr	r1, [pc, #20]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58000400 	.word	0x58000400

08000d88 <LL_EXTI_EnableIT_32_63>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000d96:	4905      	ldr	r1, [pc, #20]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58000800 	.word	0x58000800

08000db0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	cafecafe 	.word	0xcafecafe

08000dec <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <LL_DBGMCU_GetDeviceID+0x18>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e0042000 	.word	0xe0042000

08000e30 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	b29b      	uxth	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e0042000 	.word	0xe0042000

08000e4c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	22ff      	movs	r2, #255	@ 0xff
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	22ca      	movs	r2, #202	@ 0xca
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2253      	movs	r2, #83	@ 0x53
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f023 0207 	bic.w	r2, r3, #7
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <MX_APPE_Config+0x18>)
 8000eb2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000eb6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000eb8:	f000 f826 	bl	8000f08 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ebc:	f000 f82b 	bl	8000f16 <Config_HSE>

  return;
 8000ec0:	bf00      	nop
}
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	58004000 	.word	0x58004000

08000ec8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ecc:	f000 f837 	bl	8000f3e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ed0:	f000 f850 	bl	8000f74 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ed4:	4904      	ldr	r1, [pc, #16]	@ (8000ee8 <MX_APPE_Init+0x20>)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 fa12 	bl	8001300 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000edc:	f7ff fe4f 	bl	8000b7e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ee0:	f000 f856 	bl	8000f90 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */
/* USER CODE END APPE_Init_2 */

   return;
 8000ee4:	bf00      	nop
}
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002a0 	.word	0x200002a0

08000eec <Init_Smps>:

void Init_Smps(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ef0:	bf00      	nop
}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <Init_Exti>:

void Init_Exti(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000efe:	2050      	movs	r0, #80	@ 0x50
 8000f00:	f7ff ff42 	bl	8000d88 <LL_EXTI_EnableIT_32_63>

  return;
 8000f04:	bf00      	nop
}
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f0c:	bf00      	nop
}
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f009 f8ed 	bl	800a0fc <OTP_Read>
 8000f22:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	799b      	ldrb	r3, [r3, #6]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff3e 	bl	8000db0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
}
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <System_Init>:

static void System_Init(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f42:	f7ff ffd3 	bl	8000eec <Init_Smps>

  Init_Exti();
 8000f46:	f7ff ffd8 	bl	8000efa <Init_Exti>

  Init_Rtc();
 8000f4a:	f000 f803 	bl	8000f54 <Init_Rtc>

  return;
 8000f4e:	bf00      	nop
}
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f5a:	f7ff ff84 	bl	8000e66 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f62:	f7ff ff90 	bl	8000e86 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f66:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f68:	f7ff ff70 	bl	8000e4c <LL_RTC_EnableWriteProtection>

  return;
 8000f6c:	bf00      	nop
}
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40002800 	.word	0x40002800

08000f74 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f7c:	f7ff ff36 	bl	8000dec <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f80:	f00a fee6 	bl	800bd50 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff fee9 	bl	8000d5c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000f96:	f008 fdb9 	bl	8009b0c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <appe_Tl_Init+0x50>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f00b f814 	bl	800bfcc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <appe_Tl_Init+0x54>)
 8000fa6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <appe_Tl_Init+0x58>)
 8000faa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480e      	ldr	r0, [pc, #56]	@ (8000fec <appe_Tl_Init+0x5c>)
 8000fb2:	f008 fc6d 	bl	8009890 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <appe_Tl_Init+0x60>)
 8000fb8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <appe_Tl_Init+0x64>)
 8000fbc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <appe_Tl_Init+0x68>)
 8000fc0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000fc2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000fc6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f008 fedf 	bl	8009d90 <TL_MM_Init>

  TL_Enable();
 8000fd2:	f008 fd95 	bl	8009b00 <TL_Enable>

  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	080098c9 	.word	0x080098c9
 8000fe4:	20030734 	.word	0x20030734
 8000fe8:	08000ffd 	.word	0x08000ffd
 8000fec:	08001015 	.word	0x08001015
 8000ff0:	2003094c 	.word	0x2003094c
 8000ff4:	20030840 	.word	0x20030840
 8000ff8:	200301f8 	.word	0x200301f8

08000ffc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001006:	bf00      	nop
}
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	330b      	adds	r3, #11
 8001022:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800102e:	2b07      	cmp	r3, #7
 8001030:	d860      	bhi.n	80010f4 <APPE_SysUserEvtRx+0xe0>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <APPE_SysUserEvtRx+0x24>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001059 	.word	0x08001059
 800103c:	0800109b 	.word	0x0800109b
 8001040:	080010a9 	.word	0x080010a9
 8001044:	080010f5 	.word	0x080010f5
 8001048:	080010c5 	.word	0x080010c5
 800104c:	080010d5 	.word	0x080010d5
 8001050:	080010dd 	.word	0x080010dd
 8001054:	080010ed 	.word	0x080010ed
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4618      	mov	r0, r3
 800105e:	f008 f9cd 	bl	80093fc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	4619      	mov	r1, r3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	461a      	mov	r2, r3
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	4824      	ldr	r0, [pc, #144]	@ (8001100 <APPE_SysUserEvtRx+0xec>)
 800106e:	f00b f98d 	bl	800c38c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	4619      	mov	r1, r3
 8001076:	4823      	ldr	r0, [pc, #140]	@ (8001104 <APPE_SysUserEvtRx+0xf0>)
 8001078:	f00b f988 	bl	800c38c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	4619      	mov	r1, r3
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	461a      	mov	r2, r3
 8001084:	7e3b      	ldrb	r3, [r7, #24]
 8001086:	4820      	ldr	r0, [pc, #128]	@ (8001108 <APPE_SysUserEvtRx+0xf4>)
 8001088:	f00b f980 	bl	800c38c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800108c:	481f      	ldr	r0, [pc, #124]	@ (800110c <APPE_SysUserEvtRx+0xf8>)
 800108e:	f00b f97d 	bl	800c38c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f870 	bl	8001178 <APPE_SysEvtReadyProcessing>
    break;
 8001098:	e02d      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800109a:	481d      	ldr	r0, [pc, #116]	@ (8001110 <APPE_SysUserEvtRx+0xfc>)
 800109c:	f00b f976 	bl	800c38c <iprintf>
    APPE_SysEvtError(pPayload);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f843 	bl	800112c <APPE_SysEvtError>
    break;
 80010a6:	e026      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <APPE_SysUserEvtRx+0x100>)
 80010aa:	f00b f9df 	bl	800c46c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010b2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4816      	ldr	r0, [pc, #88]	@ (8001118 <APPE_SysUserEvtRx+0x104>)
 80010be:	f00b f965 	bl	800c38c <iprintf>
    break;
 80010c2:	e018      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <APPE_SysUserEvtRx+0x108>)
 80010ce:	f00b f95d 	bl	800c38c <iprintf>
    break;
 80010d2:	e010      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80010d4:	4812      	ldr	r0, [pc, #72]	@ (8001120 <APPE_SysUserEvtRx+0x10c>)
 80010d6:	f00b f959 	bl	800c38c <iprintf>
    break;
 80010da:	e00c      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	480f      	ldr	r0, [pc, #60]	@ (8001124 <APPE_SysUserEvtRx+0x110>)
 80010e6:	f00b f951 	bl	800c38c <iprintf>
    break;
 80010ea:	e004      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80010ec:	480e      	ldr	r0, [pc, #56]	@ (8001128 <APPE_SysUserEvtRx+0x114>)
 80010ee:	f00b f94d 	bl	800c38c <iprintf>
    break;
 80010f2:	e000      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80010f4:	bf00      	nop
  }

  return;
 80010f6:	bf00      	nop
}
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800d1ec 	.word	0x0800d1ec
 8001104:	0800d210 	.word	0x0800d210
 8001108:	0800d22c 	.word	0x0800d22c
 800110c:	0800d244 	.word	0x0800d244
 8001110:	0800d264 	.word	0x0800d264
 8001114:	0800d288 	.word	0x0800d288
 8001118:	0800d2d8 	.word	0x0800d2d8
 800111c:	0800d300 	.word	0x0800d300
 8001120:	0800d33c 	.word	0x0800d33c
 8001124:	0800d360 	.word	0x0800d360
 8001128:	0800d39c 	.word	0x0800d39c

0800112c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	330b      	adds	r3, #11
 800113a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3302      	adds	r3, #2
 8001140:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <APPE_SysEvtError+0x40>)
 800114a:	f00b f91f 	bl	800c38c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <APPE_SysEvtError+0x44>)
 8001158:	f00b f988 	bl	800c46c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800115c:	e003      	b.n	8001166 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <APPE_SysEvtError+0x48>)
 8001160:	f00b f984 	bl	800c46c <puts>
  return;
 8001164:	bf00      	nop
}
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800d3c0 	.word	0x0800d3c0
 8001170:	0800d3f0 	.word	0x0800d3f0
 8001174:	0800d42c 	.word	0x0800d42c

08001178 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	330b      	adds	r3, #11
 800119c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3302      	adds	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d128      	bne.n	80011fe <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80011ac:	481d      	ldr	r0, [pc, #116]	@ (8001224 <APPE_SysEvtReadyProcessing+0xac>)
 80011ae:	f00b f95d 	bl	800c46c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80011b2:	f7ff fcf7 	bl	8000ba4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80011b6:	230f      	movs	r3, #15
 80011b8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80011ba:	237f      	movs	r3, #127	@ 0x7f
 80011bc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80011be:	f7ff fe37 	bl	8000e30 <LL_DBGMCU_GetRevisionID>
 80011c2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80011c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011c6:	4818      	ldr	r0, [pc, #96]	@ (8001228 <APPE_SysEvtReadyProcessing+0xb0>)
 80011c8:	f00b f8e0 	bl	800c38c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80011d2:	f7ff fe1f 	bl	8000e14 <LL_DBGMCU_GetDeviceID>
 80011d6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	4814      	ldr	r0, [pc, #80]	@ (800122c <APPE_SysEvtReadyProcessing+0xb4>)
 80011dc:	f00b f8d6 	bl	800c38c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 f8f0 	bl	80093d0 <SHCI_C2_Config>

    APP_BLE_Init();
 80011f0:	f009 fc8a 	bl	800ab08 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2001      	movs	r0, #1
 80011f8:	f00a fdbc 	bl	800bd74 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80011fc:	e00e      	b.n	800121c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001206:	480a      	ldr	r0, [pc, #40]	@ (8001230 <APPE_SysEvtReadyProcessing+0xb8>)
 8001208:	f00b f8c0 	bl	800c38c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  return;
 8001212:	e003      	b.n	800121c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <APPE_SysEvtReadyProcessing+0xbc>)
 8001216:	f00b f8b9 	bl	800c38c <iprintf>
  return;
 800121a:	bf00      	nop
}
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	0800d464 	.word	0x0800d464
 8001228:	0800d480 	.word	0x0800d480
 800122c:	0800d4a4 	.word	0x0800d4a4
 8001230:	0800d4c4 	.word	0x0800d4c4
 8001234:	0800d4f8 	.word	0x0800d4f8

08001238 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001240:	f00a fdc8 	bl	800bdd4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800124c:	bf00      	nop
}
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	f00a fdb6 	bl	800bdd4 <UTIL_SEQ_Run>
  return;
 8001268:	bf00      	nop
}
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001278:	2100      	movs	r1, #0
 800127a:	2004      	movs	r0, #4
 800127c:	f00a fec8 	bl	800c010 <UTIL_SEQ_SetTask>
  return;
 8001280:	bf00      	nop
}
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001290:	2002      	movs	r0, #2
 8001292:	f00a ff29 	bl	800c0e8 <UTIL_SEQ_SetEvt>
  return;
 8001296:	bf00      	nop
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f00a ff3e 	bl	800c128 <UTIL_SEQ_WaitEvt>
  return;
 80012ac:	bf00      	nop
}
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LL_EXTI_EnableIT_0_31>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80012c2:	4905      	ldr	r1, [pc, #20]	@ (80012d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58000800 	.word	0x58000800

080012dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4904      	ldr	r1, [pc, #16]	@ (80012fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]

}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	58000800 	.word	0x58000800

08001300 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800130c:	4b5e      	ldr	r3, [pc, #376]	@ (8001488 <HW_TS_Init+0x188>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	22ca      	movs	r2, #202	@ 0xca
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
 8001314:	4b5c      	ldr	r3, [pc, #368]	@ (8001488 <HW_TS_Init+0x188>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2253      	movs	r2, #83	@ 0x53
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HW_TS_Init+0x18c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <HW_TS_Init+0x18c>)
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001328:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HW_TS_Init+0x18c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f1c3 0304 	rsb	r3, r3, #4
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HW_TS_Init+0x190>)
 800133c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800133e:	4b53      	ldr	r3, [pc, #332]	@ (800148c <HW_TS_Init+0x18c>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001346:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800134a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	2a00      	cmp	r2, #0
 800135c:	d101      	bne.n	8001362 <HW_TS_Init+0x62>
  {
    return 32U;
 800135e:	2220      	movs	r2, #32
 8001360:	e003      	b.n	800136a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	fab2 f282 	clz	r2, r2
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	40d3      	lsrs	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <HW_TS_Init+0x194>)
 8001374:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001376:	4b45      	ldr	r3, [pc, #276]	@ (800148c <HW_TS_Init+0x18c>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	b29b      	uxth	r3, r3
 800137c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001380:	b29b      	uxth	r3, r3
 8001382:	3301      	adds	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HW_TS_Init+0x198>)
 8001388:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800138a:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <HW_TS_Init+0x198>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a40      	ldr	r2, [pc, #256]	@ (8001494 <HW_TS_Init+0x194>)
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800139c:	4a3c      	ldr	r2, [pc, #240]	@ (8001490 <HW_TS_Init+0x190>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	40d3      	lsrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d904      	bls.n	80013b8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <HW_TS_Init+0x19c>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	e003      	b.n	80013c0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HW_TS_Init+0x19c>)
 80013be:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013c4:	f7ff ff8a 	bl	80012dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013cc:	f7ff ff72 	bl	80012b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d13d      	bne.n	8001452 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013d6:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <HW_TS_Init+0x1a0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013dc:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <HW_TS_Init+0x1a4>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	77fb      	strb	r3, [r7, #31]
 80013e8:	e00c      	b.n	8001404 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80013ea:	7ffa      	ldrb	r2, [r7, #31]
 80013ec:	492e      	ldr	r1, [pc, #184]	@ (80014a8 <HW_TS_Init+0x1a8>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	3301      	adds	r3, #1
 8001402:	77fb      	strb	r3, [r7, #31]
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d9ef      	bls.n	80013ea <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HW_TS_Init+0x1ac>)
 800140c:	2206      	movs	r2, #6
 800140e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HW_TS_Init+0x188>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HW_TS_Init+0x188>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800141e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HW_TS_Init+0x188>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HW_TS_Init+0x188>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001430:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <HW_TS_Init+0x1b0>)
 8001434:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001438:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800143a:	2003      	movs	r0, #3
 800143c:	f002 fab3 	bl	80039a6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HW_TS_Init+0x188>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HW_TS_Init+0x188>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e009      	b.n	8001466 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HW_TS_Init+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001460:	2003      	movs	r0, #3
 8001462:	f002 fa92 	bl	800398a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HW_TS_Init+0x188>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	22ff      	movs	r2, #255	@ 0xff
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800146e:	2200      	movs	r2, #0
 8001470:	2103      	movs	r1, #3
 8001472:	2003      	movs	r0, #3
 8001474:	f002 fa55 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001478:	2003      	movs	r0, #3
 800147a:	f002 fa6c 	bl	8003956 <HAL_NVIC_EnableIRQ>

  return;
 800147e:	bf00      	nop
}
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200002a0 	.word	0x200002a0
 800148c:	40002800 	.word	0x40002800
 8001490:	20000195 	.word	0x20000195
 8001494:	20000196 	.word	0x20000196
 8001498:	20000198 	.word	0x20000198
 800149c:	2000019a 	.word	0x2000019a
 80014a0:	20000194 	.word	0x20000194
 80014a4:	20000190 	.word	0x20000190
 80014a8:	200000fc 	.word	0x200000fc
 80014ac:	2000018c 	.word	0x2000018c
 80014b0:	58000800 	.word	0x58000800

080014b4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	4613      	mov	r3, r2
 80014c4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10e      	bne.n	80014f2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80014d4:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HW_UART_Transmit_DMA+0x80>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HW_UART_Transmit_DMA+0x84>)
 80014dc:	4a17      	ldr	r2, [pc, #92]	@ (800153c <HW_UART_Transmit_DMA+0x88>)
 80014de:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4814      	ldr	r0, [pc, #80]	@ (8001538 <HW_UART_Transmit_DMA+0x84>)
 80014e8:	f005 fa24 	bl	8006934 <HAL_UART_Transmit_DMA>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
            break;
 80014f0:	e000      	b.n	80014f4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80014f2:	bf00      	nop
    }

    switch (hal_status)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d816      	bhi.n	8001528 <HW_UART_Transmit_DMA+0x74>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <HW_UART_Transmit_DMA+0x4c>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001517 	.word	0x08001517
 8001508:	0800151d 	.word	0x0800151d
 800150c:	08001523 	.word	0x08001523
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001510:	2300      	movs	r3, #0
 8001512:	75bb      	strb	r3, [r7, #22]
            break;
 8001514:	e009      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001516:	2301      	movs	r3, #1
 8001518:	75bb      	strb	r3, [r7, #22]
            break;
 800151a:	e006      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800151c:	2302      	movs	r3, #2
 800151e:	75bb      	strb	r3, [r7, #22]
            break;
 8001520:	e003      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001522:	2303      	movs	r3, #3
 8001524:	75bb      	strb	r3, [r7, #22]
            break;
 8001526:	e000      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001528:	bf00      	nop
    }

    return hw_status;
 800152a:	7dbb      	ldrb	r3, [r7, #22]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000019c 	.word	0x2000019c
 8001538:	20000310 	.word	0x20000310
 800153c:	40013800 	.word	0x40013800

08001540 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_UART_TxCpltCallback+0x34>)
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_UART_TxCpltCallback+0x38>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_UART_TxCpltCallback+0x38>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4798      	blx	r3
            }
            break;
 8001562:	e001      	b.n	8001568 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001564:	bf00      	nop
 8001566:	e000      	b.n	800156a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001568:	bf00      	nop
    }

    return;
 800156a:	bf00      	nop
}
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40013800 	.word	0x40013800
 8001578:	2000019c 	.word	0x2000019c

0800157c <LL_RCC_LSE_SetDriveCapability>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158c:	f023 0218 	bic.w	r2, r3, #24
 8001590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_AHB1_GRP1_EnableClock>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_AHB2_GRP1_EnableClock>:
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <read_adc>:
#define NUM_ADC 14
volatile uint8_t raw[14];
volatile uint16_t pill_adc[14];
volatile int adc_complete = 0;

void read_adc(){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	adc_complete = 0;
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <read_adc+0x18>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)pill_adc, NUM_ADC);
 8001616:	220e      	movs	r2, #14
 8001618:	4903      	ldr	r1, [pc, #12]	@ (8001628 <read_adc+0x1c>)
 800161a:	4804      	ldr	r0, [pc, #16]	@ (800162c <read_adc+0x20>)
 800161c:	f001 fafe 	bl	8002c1c <HAL_ADC_Start_DMA>

//	uint16_t raw16 = HAL_ADC_GetValue(&hadc1);

//	raw = raw16 >> 4;

	return;
 8001620:	bf00      	nop
}
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000490 	.word	0x20000490
 8001628:	20000474 	.word	0x20000474
 800162c:	200001a0 	.word	0x200001a0

08001630 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001638:	2120      	movs	r1, #32
 800163a:	480f      	ldr	r0, [pc, #60]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x48>)
 800163c:	f002 fe7c 	bl	8004338 <HAL_GPIO_TogglePin>
	adc_complete = 1;
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_ADC_ConvCpltCallback+0x4c>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
//	raw = pill_adc[0];

	for(int i = 0; i < 14; i++){
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e00d      	b.n	8001668 <HAL_ADC_ConvCpltCallback+0x38>
		raw[i] = pill_adc[i];
 800164c:	4a0c      	ldr	r2, [pc, #48]	@ (8001680 <HAL_ADC_ConvCpltCallback+0x50>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001654:	b29b      	uxth	r3, r3
 8001656:	b2d9      	uxtb	r1, r3
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_ADC_ConvCpltCallback+0x54>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 14; i++){
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b0d      	cmp	r3, #13
 800166c:	ddee      	ble.n	800164c <HAL_ADC_ConvCpltCallback+0x1c>
//		raw[i] = i*2;
//		printf("ADC %d: %d\n", i, pill_adc[i]);
	}
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000400 	.word	0x48000400
 800167c:	20000490 	.word	0x20000490
 8001680:	20000474 	.word	0x20000474
 8001684:	20000464 	.word	0x20000464

08001688 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	if(htim == &htim16){
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d105      	bne.n	80016a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001698:	2101      	movs	r1, #1
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800169c:	f002 fe4c 	bl	8004338 <HAL_GPIO_TogglePin>
		read_adc();
 80016a0:	f7ff ffb4 	bl	800160c <read_adc>
	}
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200002c4 	.word	0x200002c4
 80016b0:	48000400 	.word	0x48000400

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f000 ff0a 	bl	80024d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80016bc:	f7ff fbf6 	bl	8000eac <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f81a 	bl	80016f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016c4:	f000 f88c 	bl	80017e0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80016c8:	f000 f9e6 	bl	8001a98 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 80016cc:	f000 f9f8 	bl	8001ac0 <MX_RF_Init>
  MX_GPIO_Init();
 80016d0:	f000 faca 	bl	8001c68 <MX_GPIO_Init>
  MX_DMA_Init();
 80016d4:	f000 faa6 	bl	8001c24 <MX_DMA_Init>
  MX_RTC_Init();
 80016d8:	f000 f9fa 	bl	8001ad0 <MX_RTC_Init>
  MX_ADC1_Init();
 80016dc:	f000 f8a0 	bl	8001820 <MX_ADC1_Init>
  MX_TIM16_Init();
 80016e0:	f000 fa2a 	bl	8001b38 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016e4:	f7ff fbf0 	bl	8000ec8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim16);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <main+0x40>)
 80016ea:	f004 fea7 	bl	800643c <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016ee:	f7ff fda3 	bl	8001238 <MX_APPE_Process>
 80016f2:	e7fc      	b.n	80016ee <main+0x3a>
 80016f4:	200002c4 	.word	0x200002c4

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b09a      	sub	sp, #104	@ 0x68
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2248      	movs	r2, #72	@ 0x48
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00a ff90 	bl	800c62c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV8);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001728:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800172c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f023 0303 	bic.w	r3, r3, #3
 8001738:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001742:	f002 febd 	bl	80044c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001746:	2010      	movs	r0, #16
 8001748:	f7ff ff18 	bl	800157c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <SystemClock_Config+0xe4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <SystemClock_Config+0xe4>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <SystemClock_Config+0xe4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001768:	2327      	movs	r3, #39	@ 0x27
 800176a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001772:	2301      	movs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800177c:	2301      	movs	r3, #1
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001780:	2340      	movs	r3, #64	@ 0x40
 8001782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001784:	2300      	movs	r3, #0
 8001786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001788:	23a0      	movs	r3, #160	@ 0xa0
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	4618      	mov	r0, r3
 8001796:	f003 fa27 	bl	8004be8 <HAL_RCC_OscConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017a0:	f000 fabc 	bl	8001d1c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80017a4:	236f      	movs	r3, #111	@ 0x6f
 80017a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2101      	movs	r1, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fd83 	bl	80052d0 <HAL_RCC_ClockConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80017d0:	f000 faa4 	bl	8001d1c <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3768      	adds	r7, #104	@ 0x68
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	58000400 	.word	0x58000400

080017e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	@ 0x50
 80017e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2250      	movs	r2, #80	@ 0x50
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a ff1d 	bl	800c62c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017f2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017f6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017fc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017fe:	2300      	movs	r3, #0
 8001800:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001802:	2300      	movs	r3, #0
 8001804:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4618      	mov	r0, r3
 800180a:	f004 f99e 	bl	8005b4a <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001814:	f000 fa82 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001818:	bf00      	nop
 800181a:	3750      	adds	r7, #80	@ 0x50
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001836:	4b89      	ldr	r3, [pc, #548]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001838:	4a89      	ldr	r2, [pc, #548]	@ (8001a60 <MX_ADC1_Init+0x240>)
 800183a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800183c:	4b87      	ldr	r3, [pc, #540]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001842:	4b86      	ldr	r3, [pc, #536]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001844:	2210      	movs	r2, #16
 8001846:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001848:	4b84      	ldr	r3, [pc, #528]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800184e:	4b83      	ldr	r3, [pc, #524]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001850:	2201      	movs	r2, #1
 8001852:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001854:	4b81      	ldr	r3, [pc, #516]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001856:	2204      	movs	r2, #4
 8001858:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800185a:	4b80      	ldr	r3, [pc, #512]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 800185c:	2200      	movs	r2, #0
 800185e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001860:	4b7e      	ldr	r3, [pc, #504]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001862:	2200      	movs	r2, #0
 8001864:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 14;
 8001866:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001868:	220e      	movs	r2, #14
 800186a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001874:	4b79      	ldr	r3, [pc, #484]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187a:	4b78      	ldr	r3, [pc, #480]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 800187c:	2200      	movs	r2, #0
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001880:	4b76      	ldr	r3, [pc, #472]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001888:	4b74      	ldr	r3, [pc, #464]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 800188a:	2200      	movs	r2, #0
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800188e:	4b73      	ldr	r3, [pc, #460]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001896:	4871      	ldr	r0, [pc, #452]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001898:	f001 f874 	bl	8002984 <HAL_ADC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80018a2:	f000 fa3b 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80018a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <MX_ADC1_Init+0x244>)
 80018a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018aa:	2306      	movs	r3, #6
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b2:	237f      	movs	r3, #127	@ 0x7f
 80018b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018b6:	2304      	movs	r3, #4
 80018b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	4866      	ldr	r0, [pc, #408]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 80018c4:	f001 fa42 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018ce:	f000 fa25 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <MX_ADC1_Init+0x248>)
 80018d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018d6:	230c      	movs	r3, #12
 80018d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	485f      	ldr	r0, [pc, #380]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 80018e0:	f001 fa34 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80018ea:	f000 fa17 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ee:	4b5f      	ldr	r3, [pc, #380]	@ (8001a6c <MX_ADC1_Init+0x24c>)
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018f2:	2312      	movs	r3, #18
 80018f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f6:	463b      	mov	r3, r7
 80018f8:	4619      	mov	r1, r3
 80018fa:	4858      	ldr	r0, [pc, #352]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 80018fc:	f001 fa26 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001906:	f000 fa09 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800190a:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <MX_ADC1_Init+0x250>)
 800190c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800190e:	2318      	movs	r3, #24
 8001910:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4851      	ldr	r0, [pc, #324]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001918:	f001 fa18 	bl	8002d4c <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001922:	f000 f9fb 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001926:	4b53      	ldr	r3, [pc, #332]	@ (8001a74 <MX_ADC1_Init+0x254>)
 8001928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800192a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800192e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4849      	ldr	r0, [pc, #292]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001936:	f001 fa09 	bl	8002d4c <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8001940:	f000 f9ec 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001944:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <MX_ADC1_Init+0x258>)
 8001946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001948:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800194c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	4619      	mov	r1, r3
 8001952:	4842      	ldr	r0, [pc, #264]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001954:	f001 f9fa 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 800195e:	f000 f9dd 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001962:	4b46      	ldr	r3, [pc, #280]	@ (8001a7c <MX_ADC1_Init+0x25c>)
 8001964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001966:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800196a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	483a      	ldr	r0, [pc, #232]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001972:	f001 f9eb 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 800197c:	f000 f9ce 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001980:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <MX_ADC1_Init+0x260>)
 8001982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001984:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001988:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	4619      	mov	r1, r3
 800198e:	4833      	ldr	r0, [pc, #204]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001990:	f001 f9dc 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 800199a:	f000 f9bf 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800199e:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <MX_ADC1_Init+0x264>)
 80019a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80019a2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	482b      	ldr	r0, [pc, #172]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 80019ae:	f001 f9cd 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 80019b8:	f000 f9b0 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019bc:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <MX_ADC1_Init+0x268>)
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80019c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	4619      	mov	r1, r3
 80019ca:	4824      	ldr	r0, [pc, #144]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 80019cc:	f001 f9be 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC1_Init+0x1ba>
  {
    Error_Handler();
 80019d6:	f000 f9a1 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019da:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <MX_ADC1_Init+0x26c>)
 80019dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80019de:	f240 2306 	movw	r3, #518	@ 0x206
 80019e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	481c      	ldr	r0, [pc, #112]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 80019ea:	f001 f9af 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0x1d8>
  {
    Error_Handler();
 80019f4:	f000 f992 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019f8:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <MX_ADC1_Init+0x270>)
 80019fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80019fc:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001a00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001a08:	f001 f9a0 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8001a12:	f000 f983 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_ADC1_Init+0x274>)
 8001a18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001a1a:	f240 2312 	movw	r3, #530	@ 0x212
 8001a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001a26:	f001 f991 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0x214>
  {
    Error_Handler();
 8001a30:	f000 f974 	bl	8001d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <MX_ADC1_Init+0x24c>)
 8001a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001a38:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <MX_ADC1_Init+0x23c>)
 8001a44:	f001 f982 	bl	8002d4c <HAL_ADC_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_ADC1_Init+0x232>
  {
    Error_Handler();
 8001a4e:	f000 f965 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001a0 	.word	0x200001a0
 8001a60:	50040000 	.word	0x50040000
 8001a64:	3ac04000 	.word	0x3ac04000
 8001a68:	3ef08000 	.word	0x3ef08000
 8001a6c:	04300002 	.word	0x04300002
 8001a70:	19200040 	.word	0x19200040
 8001a74:	1d500080 	.word	0x1d500080
 8001a78:	21800100 	.word	0x21800100
 8001a7c:	25b00200 	.word	0x25b00200
 8001a80:	2a000400 	.word	0x2a000400
 8001a84:	0c900008 	.word	0x0c900008
 8001a88:	32601000 	.word	0x32601000
 8001a8c:	10c00010 	.word	0x10c00010
 8001a90:	08600004 	.word	0x08600004
 8001a94:	14f00020 	.word	0x14f00020

08001a98 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <MX_IPCC_Init+0x20>)
 8001a9e:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <MX_IPCC_Init+0x24>)
 8001aa0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_IPCC_Init+0x20>)
 8001aa4:	f002 fc86 	bl	80043b4 <HAL_IPCC_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001aae:	f000 f935 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000264 	.word	0x20000264
 8001abc:	58000c00 	.word	0x58000c00

08001ac0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <MX_RTC_Init+0x64>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001ae8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001aec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b06:	480a      	ldr	r0, [pc, #40]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001b08:	f004 faa6 	bl	8006058 <HAL_RTC_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 f903 	bl	8001d1c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_RTC_Init+0x60>)
 8001b1c:	f004 fb9c 	bl	8006258 <HAL_RTCEx_SetWakeUpTimer>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001b26:	f000 f8f9 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200002a0 	.word	0x200002a0
 8001b34:	40002800 	.word	0x40002800

08001b38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b3e:	4a11      	ldr	r2, [pc, #68]	@ (8001b84 <MX_TIM16_Init+0x4c>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200-1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b44:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001b48:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_TIM16_Init+0x48>)
 8001b6c:	f004 fc0f 	bl	800638e <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001b76:	f000 f8d1 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002c4 	.word	0x200002c4
 8001b84:	40014400 	.word	0x40014400

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001b8e:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <MX_USART1_UART_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bbe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd2:	4812      	ldr	r0, [pc, #72]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bd4:	f004 fe5e 	bl	8006894 <HAL_UART_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001bde:	f000 f89d 	bl	8001d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001be6:	f006 f83e 	bl	8007c66 <HAL_UARTEx_SetTxFifoThreshold>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001bf0:	f000 f894 	bl	8001d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001bf8:	f006 f873 	bl	8007ce2 <HAL_UARTEx_SetRxFifoThreshold>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001c02:	f000 f88b 	bl	8001d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART1_UART_Init+0x94>)
 8001c08:	f005 fff4 	bl	8007bf4 <HAL_UARTEx_DisableFifoMode>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c12:	f000 f883 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000310 	.word	0x20000310
 8001c20:	40013800 	.word	0x40013800

08001c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c28:	2004      	movs	r0, #4
 8001c2a:	f7ff fcbd 	bl	80015a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff fcba 	bl	80015a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	200b      	movs	r0, #11
 8001c3a:	f001 fe72 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c3e:	200b      	movs	r0, #11
 8001c40:	f001 fe89 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	200c      	movs	r0, #12
 8001c4a:	f001 fe6a 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c4e:	200c      	movs	r0, #12
 8001c50:	f001 fe81 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	200d      	movs	r0, #13
 8001c5a:	f001 fe62 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c5e:	200d      	movs	r0, #13
 8001c60:	f001 fe79 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f7ff fcac 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff fca9 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff fca6 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	2008      	movs	r0, #8
 8001c90:	f7ff fca3 	bl	80015da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2123      	movs	r1, #35	@ 0x23
 8001c98:	481d      	ldr	r0, [pc, #116]	@ (8001d10 <MX_GPIO_Init+0xa8>)
 8001c9a:	f002 fb35 	bl	8004308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4819      	ldr	r0, [pc, #100]	@ (8001d14 <MX_GPIO_Init+0xac>)
 8001cb0:	f002 f9ba 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001cb4:	2323      	movs	r3, #35	@ 0x23
 8001cb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4811      	ldr	r0, [pc, #68]	@ (8001d10 <MX_GPIO_Init+0xa8>)
 8001cca:	f002 f9ad 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8001cce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cec:	f002 f99c 	bl	8004028 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_GPIO_Init+0xb0>)
 8001d02:	f002 f991 	bl	8004028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	48000400 	.word	0x48000400
 8001d14:	48000800 	.word	0x48000800
 8001d18:	48000c00 	.word	0x48000c00

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d20:	b672      	cpsid	i
}
 8001d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <Error_Handler+0x8>

08001d28 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_AHB2_GRP1_EnableClock>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_AHB3_GRP1_EnableClock>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_APB1_GRP1_EnableClock>:
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_APB2_GRP1_EnableClock>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e04:	68fb      	ldr	r3, [r7, #12]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001e16:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001e1a:	f7ff ffaf 	bl	8001d7c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	202e      	movs	r0, #46	@ 0x2e
 8001e24:	f001 fd7d 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e28:	202e      	movs	r0, #46	@ 0x2e
 8001e2a:	f001 fd94 	bl	8003956 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09c      	sub	sp, #112	@ 0x70
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2250      	movs	r2, #80	@ 0x50
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f00a fbe9 	bl	800c62c <memset>
  if(hadc->Instance==ADC1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f48 <HAL_ADC_MspInit+0x114>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d16c      	bne.n	8001f3e <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e68:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 32;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001e6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001e74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001e7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001e80:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fe5a 	bl	8005b4a <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001e9c:	f7ff ff3e 	bl	8001d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ea4:	f7ff ff51 	bl	8001d4a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea8:	2004      	movs	r0, #4
 8001eaa:	f7ff ff4e 	bl	8001d4a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff ff4b 	bl	8001d4a <LL_AHB2_GRP1_EnableClock>
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PA8     ------> ADC1_IN15
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = FRI_0_Pin|FRI_1_Pin|SAT_0_Pin|SAT_1_Pin
 8001eb4:	232f      	movs	r3, #47	@ 0x2f
 8001eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                          |SUN_0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4821      	ldr	r0, [pc, #132]	@ (8001f4c <HAL_ADC_MspInit+0x118>)
 8001ec8:	f002 f8ae 	bl	8004028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MON_0_Pin|MON_1_Pin|TUE_0_Pin|TUE_1_Pin
 8001ecc:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                          |WED_0_Pin|WED_1_Pin|THU_0_Pin|THU_1_Pin
                          |SUN_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee4:	f002 f8a0 	bl	8004028 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001eea:	4a1a      	ldr	r2, [pc, #104]	@ (8001f54 <HAL_ADC_MspInit+0x120>)
 8001eec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f02:	2280      	movs	r2, #128	@ 0x80
 8001f04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f22:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f24:	f001 fd4e 	bl	80039c4 <HAL_DMA_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8001f2e:	f7ff fef5 	bl	8001d1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a06      	ldr	r2, [pc, #24]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f36:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f38:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <HAL_ADC_MspInit+0x11c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f3e:	bf00      	nop
 8001f40:	3770      	adds	r7, #112	@ 0x70
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	50040000 	.word	0x50040000
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	20000204 	.word	0x20000204
 8001f54:	40020030 	.word	0x40020030

08001f58 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <HAL_IPCC_MspInit+0x44>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d113      	bne.n	8001f92 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f6a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001f6e:	f7ff ff05 	bl	8001d7c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	202c      	movs	r0, #44	@ 0x2c
 8001f78:	f001 fcd3 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f7c:	202c      	movs	r0, #44	@ 0x2c
 8001f7e:	f001 fcea 	bl	8003956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	202d      	movs	r0, #45	@ 0x2d
 8001f88:	f001 fccb 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f8c:	202d      	movs	r0, #45	@ 0x2d
 8001f8e:	f001 fce2 	bl	8003956 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58000c00 	.word	0x58000c00

08001fa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b096      	sub	sp, #88	@ 0x58
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa8:	f107 0308 	add.w	r3, r7, #8
 8001fac:	2250      	movs	r2, #80	@ 0x50
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00a fb3b 	bl	800c62c <memset>
  if(hrtc->Instance==RTC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <HAL_RTC_MspInit+0x54>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d115      	bne.n	8001fec <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fc4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fdba 	bl	8005b4a <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001fdc:	f7ff fe9e 	bl	8001d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fe0:	f7ff fea2 	bl	8001d28 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001fe4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001fe8:	f7ff fee1 	bl	8001dae <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001fec:	bf00      	nop
 8001fee:	3758      	adds	r7, #88	@ 0x58
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40002800 	.word	0x40002800

08001ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a09      	ldr	r2, [pc, #36]	@ (800202c <HAL_TIM_Base_MspInit+0x34>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10b      	bne.n	8002022 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800200a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800200e:	f7ff fee7 	bl	8001de0 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	2019      	movs	r0, #25
 8002018:	f001 fc83 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800201c:	2019      	movs	r0, #25
 800201e:	f001 fc9a 	bl	8003956 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40014400 	.word	0x40014400

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b09c      	sub	sp, #112	@ 0x70
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2250      	movs	r2, #80	@ 0x50
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f00a faeb 	bl	800c62c <memset>
  if(huart->Instance==USART1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a43      	ldr	r2, [pc, #268]	@ (8002168 <HAL_UART_MspInit+0x138>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d17f      	bne.n	8002160 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002060:	2301      	movs	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fd6c 	bl	8005b4a <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002078:	f7ff fe50 	bl	8001d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800207c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002080:	f7ff feae 	bl	8001de0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	2002      	movs	r0, #2
 8002086:	f7ff fe60 	bl	8001d4a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800208a:	23c0      	movs	r3, #192	@ 0xc0
 800208c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800209a:	2307      	movs	r3, #7
 800209c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4831      	ldr	r0, [pc, #196]	@ (800216c <HAL_UART_MspInit+0x13c>)
 80020a6:	f001 ffbf 	bl	8004028 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80020aa:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <HAL_UART_MspInit+0x144>)
 80020ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020b2:	220e      	movs	r2, #14
 80020b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c8:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020e0:	4823      	ldr	r0, [pc, #140]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020e2:	f001 fc6f 	bl	80039c4 <HAL_DMA_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80020ec:	f7ff fe16 	bl	8001d1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80020f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_UART_MspInit+0x140>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_UART_MspInit+0x14c>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002106:	220f      	movs	r2, #15
 8002108:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_UART_MspInit+0x148>)
 800210c:	2210      	movs	r2, #16
 800210e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002118:	2280      	movs	r2, #128	@ 0x80
 800211a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_UART_MspInit+0x148>)
 800211e:	2200      	movs	r2, #0
 8002120:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_UART_MspInit+0x148>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002134:	4810      	ldr	r0, [pc, #64]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002136:	f001 fc45 	bl	80039c4 <HAL_DMA_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8002140:	f7ff fdec 	bl	8001d1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0c      	ldr	r2, [pc, #48]	@ (8002178 <HAL_UART_MspInit+0x148>)
 8002148:	67da      	str	r2, [r3, #124]	@ 0x7c
 800214a:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <HAL_UART_MspInit+0x148>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2024      	movs	r0, #36	@ 0x24
 8002156:	f001 fbe4 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800215a:	2024      	movs	r0, #36	@ 0x24
 800215c:	f001 fbfb 	bl	8003956 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002160:	bf00      	nop
 8002162:	3770      	adds	r7, #112	@ 0x70
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800
 800216c:	48000400 	.word	0x48000400
 8002170:	200003a4 	.word	0x200003a4
 8002174:	40020008 	.word	0x40020008
 8002178:	20000404 	.word	0x20000404
 800217c:	4002001c 	.word	0x4002001c

08002180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <NMI_Handler+0x4>

08002188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <MemManage_Handler+0x4>

08002198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <BusFault_Handler+0x4>

080021a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <UsageFault_Handler+0x4>

080021a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d6:	f000 f9d5 	bl	8002584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <DMA1_Channel1_IRQHandler+0x10>)
 80021e6:	f001 fdce 	bl	8003d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200003a4 	.word	0x200003a4

080021f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <DMA1_Channel2_IRQHandler+0x10>)
 80021fa:	f001 fdc4 	bl	8003d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000404 	.word	0x20000404

08002208 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <DMA1_Channel3_IRQHandler+0x10>)
 800220e:	f001 fdba 	bl	8003d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000204 	.word	0x20000204

0800221c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002222:	f004 f959 	bl	80064d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200002c4 	.word	0x200002c4

08002230 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <USART1_IRQHandler+0x10>)
 8002236:	f004 fbfd 	bl	8006a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000310 	.word	0x20000310

08002244 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002248:	f009 fc44 	bl	800bad4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002254:	f009 fc74 	bl	800bb40 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002260:	f002 f884 	bl	800436c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e00a      	b.n	8002290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800227a:	f3af 8000 	nop.w
 800227e:	4601      	mov	r1, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf0      	blt.n	800227a <_read+0x12>
  }

  return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ca:	605a      	str	r2, [r3, #4]
  return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	@ (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f00a f9c4 	bl	800c6c8 <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20030000 	.word	0x20030000
 800236c:	00000400 	.word	0x00000400
 8002370:	20000494 	.word	0x20000494
 8002374:	200017b8 	.word	0x200017b8

08002378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <SystemInit+0x98>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <SystemInit+0x98>)
 8002384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80023a4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <SystemInit+0x9c>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023c2:	f023 0305 	bic.w	r3, r3, #5
 80023c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <SystemInit+0xa0>)
 80023e4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002418 <SystemInit+0xa0>)
 80023ec:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00
 8002414:	faf6fefb 	.word	0xfaf6fefb
 8002418:	22041000 	.word	0x22041000

0800241c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800241c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002420:	3304      	adds	r3, #4

08002422 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002422:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002424:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002426:	d3f9      	bcc.n	800241c <CopyDataInit>
  bx lr
 8002428:	4770      	bx	lr

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800242a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800242c:	3004      	adds	r0, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800242e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>
  bx lr
 8002432:	4770      	bx	lr

08002434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002434:	480c      	ldr	r0, [pc, #48]	@ (8002468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002438:	f7ff ff9e 	bl	8002378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800243c:	480b      	ldr	r0, [pc, #44]	@ (800246c <LoopForever+0x6>)
 800243e:	490c      	ldr	r1, [pc, #48]	@ (8002470 <LoopForever+0xa>)
 8002440:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <LoopForever+0xe>)
 8002442:	2300      	movs	r3, #0
 8002444:	f7ff ffed 	bl	8002422 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002448:	480b      	ldr	r0, [pc, #44]	@ (8002478 <LoopForever+0x12>)
 800244a:	490c      	ldr	r1, [pc, #48]	@ (800247c <LoopForever+0x16>)
 800244c:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <LoopForever+0x1a>)
 800244e:	2300      	movs	r3, #0
 8002450:	f7ff ffe7 	bl	8002422 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002454:	480b      	ldr	r0, [pc, #44]	@ (8002484 <LoopForever+0x1e>)
 8002456:	490c      	ldr	r1, [pc, #48]	@ (8002488 <LoopForever+0x22>)
 8002458:	2300      	movs	r3, #0
 800245a:	f7ff ffe8 	bl	800242e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800245e:	f00a f939 	bl	800c6d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002462:	f7ff f927 	bl	80016b4 <main>

08002466 <LoopForever>:

LoopForever:
  b LoopForever
 8002466:	e7fe      	b.n	8002466 <LoopForever>
  ldr   r0, =_estack
 8002468:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800246c:	20000008 	.word	0x20000008
 8002470:	20000094 	.word	0x20000094
 8002474:	0800e7d4 	.word	0x0800e7d4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002478:	200301e4 	.word	0x200301e4
 800247c:	20030a67 	.word	0x20030a67
 8002480:	0800e8a6 	.word	0x0800e8a6
  INIT_BSS _sbss, _ebss
 8002484:	200000e0 	.word	0x200000e0
 8002488:	200017b4 	.word	0x200017b4

0800248c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC1_IRQHandler>
	...

08002490 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6053      	str	r3, [r2, #4]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e0042000 	.word	0xe0042000

080024b0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	6053      	str	r3, [r2, #4]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e0042000 	.word	0xe0042000

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_Init+0x3c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <HAL_Init+0x3c>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e6:	2003      	movs	r0, #3
 80024e8:	f001 fa10 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ec:	2000      	movs	r0, #0
 80024ee:	f000 f80f 	bl	8002510 <HAL_InitTick>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	e001      	b.n	8002502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024fe:	f7ff fc88 	bl	8001e12 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002502:	79fb      	ldrb	r3, [r7, #7]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58004000 	.word	0x58004000

08002510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <HAL_InitTick+0x6c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d024      	beq.n	800256e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002524:	f003 f880 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <HAL_InitTick+0x6c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	4619      	mov	r1, r3
 8002530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002534:	fbb3 f3f1 	udiv	r3, r3, r1
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fa18 	bl	8003972 <HAL_SYSTICK_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10f      	bne.n	8002568 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b0f      	cmp	r3, #15
 800254c:	d809      	bhi.n	8002562 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254e:	2200      	movs	r2, #0
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002556:	f001 f9e4 	bl	8003922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800255a:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <HAL_InitTick+0x70>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e007      	b.n	8002572 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e004      	b.n	8002572 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e001      	b.n	8002572 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000010 	.word	0x20000010
 8002580:	2000000c 	.word	0x2000000c

08002584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_IncTick+0x20>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_IncTick+0x24>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_IncTick+0x24>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000010 	.word	0x20000010
 80025a8:	20000498 	.word	0x20000498

080025ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_GetTick+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000498 	.word	0x20000498

080025c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_GetTickPrio+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	2000000c 	.word	0x2000000c

080025dc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80025e0:	f7ff ff56 	bl	8002490 <LL_DBGMCU_EnableDBGSleepMode>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80025ec:	f7ff ff60 	bl	80024b0 <LL_DBGMCU_EnableDBGStopMode>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3360      	adds	r3, #96	@ 0x60
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <LL_ADC_SetOffset+0x44>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	4313      	orrs	r3, r2
 800268c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	03fff000 	.word	0x03fff000

080026a4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3360      	adds	r3, #96	@ 0x60
 80026b2:	461a      	mov	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3360      	adds	r3, #96	@ 0x60
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800271e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3330      	adds	r3, #48	@ 0x30
 800273c:	461a      	mov	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	4413      	add	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	211f      	movs	r1, #31
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	f003 011f 	and.w	r1, r3, #31
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3314      	adds	r3, #20
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	0e5b      	lsrs	r3, r3, #25
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	4413      	add	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	0d1b      	lsrs	r3, r3, #20
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2107      	movs	r1, #7
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	401a      	ands	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	0d1b      	lsrs	r3, r3, #20
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	43db      	mvns	r3, r3
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0318 	and.w	r3, r3, #24
 80027fe:	4908      	ldr	r1, [pc, #32]	@ (8002820 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002800:	40d9      	lsrs	r1, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	400b      	ands	r3, r1
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	431a      	orrs	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	0007ffff 	.word	0x0007ffff

08002824 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800285c:	d101      	bne.n	8002862 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002884:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ac:	d101      	bne.n	80028b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <LL_ADC_IsEnabled+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_ADC_IsEnabled+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800291e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002922:	f043 0204 	orr.w	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d101      	bne.n	800294e <LL_ADC_REG_IsConversionOngoing+0x18>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d101      	bne.n	8002974 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e12e      	b.n	8002c00 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fa3f 	bl	8001e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff3d 	bl	8002848 <LL_ADC_IsDeepPowerDownEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff23 	bl	8002824 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff58 	bl	8002898 <LL_ADC_IsInternalRegulatorEnabled>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff3c 	bl	8002870 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f8:	4b83      	ldr	r3, [pc, #524]	@ (8002c08 <HAL_ADC_Init+0x284>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	4a83      	ldr	r2, [pc, #524]	@ (8002c0c <HAL_ADC_Init+0x288>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a0c:	e002      	b.n	8002a14 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f9      	bne.n	8002a0e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff3a 	bl	8002898 <LL_ADC_IsInternalRegulatorEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff73 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 80c7 	bne.w	8002bee <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f040 80c3 	bne.w	8002bee <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a70:	f043 0202 	orr.w	r2, r3, #2
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff33 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a88:	4861      	ldr	r0, [pc, #388]	@ (8002c10 <HAL_ADC_Init+0x28c>)
 8002a8a:	f7ff ff2d 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	485e      	ldr	r0, [pc, #376]	@ (8002c14 <HAL_ADC_Init+0x290>)
 8002a9c:	f7ff fdaa 	bl	80025f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7e5b      	ldrb	r3, [r3, #25]
 8002aa4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aaa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ab0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ab6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abe:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002ac0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d106      	bne.n	8002ae0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	045b      	lsls	r3, r3, #17
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	4b45      	ldr	r3, [pc, #276]	@ (8002c18 <HAL_ADC_Init+0x294>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff0e 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff1b 	bl	800295c <LL_ADC_INJ_IsConversionOngoing>
 8002b26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d13d      	bne.n	8002baa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d13a      	bne.n	8002baa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b50:	f023 0302 	bic.w	r3, r3, #2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	69b9      	ldr	r1, [r7, #24]
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d118      	bne.n	8002b9a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b84:	4311      	orrs	r1, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	611a      	str	r2, [r3, #16]
 8002b98:	e007      	b.n	8002baa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10c      	bne.n	8002bcc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	f023 010f 	bic.w	r1, r3, #15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bca:	e007      	b.n	8002bdc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 020f 	bic.w	r2, r2, #15
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	f023 0303 	bic.w	r3, r3, #3
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bec:	e007      	b.n	8002bfe <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f043 0210 	orr.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	50040000 	.word	0x50040000
 8002c14:	50040300 	.word	0x50040300
 8002c18:	fff0c007 	.word	0xfff0c007

08002c1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fe82 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d167      	bne.n	8002d08 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Start_DMA+0x2a>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e063      	b.n	8002d0e <HAL_ADC_Start_DMA+0xf2>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fc42 	bl	80034d8 <ADC_Enable>
 8002c54:	4603      	mov	r3, r0
 8002c56:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d14f      	bne.n	8002cfe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f023 0206 	bic.w	r2, r3, #6
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c8a:	e002      	b.n	8002c92 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a20      	ldr	r2, [pc, #128]	@ (8002d18 <HAL_ADC_Start_DMA+0xfc>)
 8002c98:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <HAL_ADC_Start_DMA+0x100>)
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d20 <HAL_ADC_Start_DMA+0x104>)
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	221c      	movs	r2, #28
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0210 	orr.w	r2, r2, #16
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3340      	adds	r3, #64	@ 0x40
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f000 ff13 	bl	8003b14 <HAL_DMA_Start_IT>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe09 	bl	800290e <LL_ADC_REG_StartConversion>
 8002cfc:	e006      	b.n	8002d0c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d06:	e001      	b.n	8002d0c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	080035cd 	.word	0x080035cd
 8002d1c:	080036a5 	.word	0x080036a5
 8002d20:	080036c1 	.word	0x080036c1

08002d24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0b6      	sub	sp, #216	@ 0xd8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x22>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e39f      	b.n	80034ae <HAL_ADC_ConfigChannel+0x762>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fddb 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8384 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f7ff fcc9 	bl	800272c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fdc9 	bl	8002936 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fdd5 	bl	800295c <LL_ADC_INJ_IsConversionOngoing>
 8002db2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 81a6 	bne.w	800310c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 81a1 	bne.w	800310c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7ff fcd4 	bl	8002784 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	08db      	lsrs	r3, r3, #3
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d00a      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6919      	ldr	r1, [r3, #16]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e0e:	f7ff fc25 	bl	800265c <LL_ADC_SetOffset>
 8002e12:	e17b      	b.n	800310c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fc42 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0xf4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fc37 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	f003 021f 	and.w	r2, r3, #31
 8002e3e:	e01e      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x132>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fc2c 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8002e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8002e6e:	2320      	movs	r3, #32
 8002e70:	e004      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8002e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x14a>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	e018      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x17c>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002eb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e004      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d106      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fbfb 	bl	80026d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fbdf 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x1ba>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fbd4 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	e01e      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x1f8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fbc9 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002f34:	2320      	movs	r3, #32
 8002f36:	e004      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x210>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	e018      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x242>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e004      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fb98 	bl	80026d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fb7c 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x280>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fb71 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	e01e      	b.n	800300a <HAL_ADC_ConfigChannel+0x2be>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fb66 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e004      	b.n	8003008 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x2d6>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	e016      	b.n	8003050 <HAL_ADC_ConfigChannel+0x304>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003034:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800303a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e004      	b.n	8003050 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	429a      	cmp	r2, r3
 8003052:	d106      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fb37 	bl	80026d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2103      	movs	r1, #3
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fb1b 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <HAL_ADC_ConfigChannel+0x342>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2103      	movs	r1, #3
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fb10 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	e017      	b.n	80030be <HAL_ADC_ConfigChannel+0x372>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2103      	movs	r1, #3
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fb05 	bl	80026a4 <LL_ADC_GetOffsetChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80030b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x38a>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	e011      	b.n	80030fa <HAL_ADC_ConfigChannel+0x3ae>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80030e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80030e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80030f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d106      	bne.n	800310c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	2103      	movs	r1, #3
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fae2 	bl	80026d0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fbe9 	bl	80028e8 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	f040 81c2 	bne.w	80034a2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f7ff fb56 	bl	80027dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a8e      	ldr	r2, [pc, #568]	@ (8003370 <HAL_ADC_ConfigChannel+0x624>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f040 8130 	bne.w	800339c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x418>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	3301      	adds	r3, #1
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	2b09      	cmp	r3, #9
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e019      	b.n	8003198 <HAL_ADC_ConfigChannel+0x44c>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003174:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	e003      	b.n	8003188 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3301      	adds	r3, #1
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2b09      	cmp	r3, #9
 8003190:	bf94      	ite	ls
 8003192:	2301      	movls	r3, #1
 8003194:	2300      	movhi	r3, #0
 8003196:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003198:	2b00      	cmp	r3, #0
 800319a:	d079      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x46c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	069b      	lsls	r3, r3, #26
 80031b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b6:	e015      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x498>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80031d0:	2320      	movs	r3, #32
 80031d2:	e003      	b.n	80031dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	3301      	adds	r3, #1
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x4b8>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0e9b      	lsrs	r3, r3, #26
 80031f6:	3301      	adds	r3, #1
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2101      	movs	r1, #1
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	e017      	b.n	8003234 <HAL_ADC_ConfigChannel+0x4e8>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003214:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e003      	b.n	8003228 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	ea42 0103 	orr.w	r1, r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_ADC_ConfigChannel+0x50e>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0e9b      	lsrs	r3, r3, #26
 800324a:	3301      	adds	r3, #1
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	051b      	lsls	r3, r3, #20
 8003258:	e018      	b.n	800328c <HAL_ADC_ConfigChannel+0x540>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800326c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003272:	2320      	movs	r3, #32
 8003274:	e003      	b.n	800327e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f003 021f 	and.w	r2, r3, #31
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800328c:	430b      	orrs	r3, r1
 800328e:	e080      	b.n	8003392 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x560>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	069b      	lsls	r3, r3, #26
 80032a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032aa:	e015      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x58c>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80032c4:	2320      	movs	r3, #32
 80032c6:	e003      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	069b      	lsls	r3, r3, #26
 80032d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x5ac>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	3301      	adds	r3, #1
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	e017      	b.n	8003328 <HAL_ADC_ConfigChannel+0x5dc>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	61fb      	str	r3, [r7, #28]
  return result;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e003      	b.n	800331c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	ea42 0103 	orr.w	r1, r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10d      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x608>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	3301      	adds	r3, #1
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	3b1e      	subs	r3, #30
 800334c:	051b      	lsls	r3, r3, #20
 800334e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003352:	e01d      	b.n	8003390 <HAL_ADC_ConfigChannel+0x644>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	613b      	str	r3, [r7, #16]
  return result;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e005      	b.n	800337c <HAL_ADC_ConfigChannel+0x630>
 8003370:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f003 021f 	and.w	r2, r3, #31
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	3b1e      	subs	r3, #30
 800338a:	051b      	lsls	r3, r3, #20
 800338c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003390:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003396:	4619      	mov	r1, r3
 8003398:	f7ff f9f4 	bl	8002784 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b45      	ldr	r3, [pc, #276]	@ (80034b8 <HAL_ADC_ConfigChannel+0x76c>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d07c      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a8:	4844      	ldr	r0, [pc, #272]	@ (80034bc <HAL_ADC_ConfigChannel+0x770>)
 80033aa:	f7ff f949 	bl	8002640 <LL_ADC_GetCommonPathInternalCh>
 80033ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b2:	4843      	ldr	r0, [pc, #268]	@ (80034c0 <HAL_ADC_ConfigChannel+0x774>)
 80033b4:	f7ff fa98 	bl	80028e8 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d15e      	bne.n	800347c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a40      	ldr	r2, [pc, #256]	@ (80034c4 <HAL_ADC_ConfigChannel+0x778>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d127      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x6cc>
 80033c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d121      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a39      	ldr	r2, [pc, #228]	@ (80034c0 <HAL_ADC_ConfigChannel+0x774>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d161      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80033de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033e6:	4619      	mov	r1, r3
 80033e8:	4834      	ldr	r0, [pc, #208]	@ (80034bc <HAL_ADC_ConfigChannel+0x770>)
 80033ea:	f7ff f916 	bl	800261a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ee:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <HAL_ADC_ConfigChannel+0x77c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	4a35      	ldr	r2, [pc, #212]	@ (80034cc <HAL_ADC_ConfigChannel+0x780>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003408:	e002      	b.n	8003410 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3b01      	subs	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003416:	e044      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <HAL_ADC_ConfigChannel+0x784>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <HAL_ADC_ConfigChannel+0x6fe>
 8003422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <HAL_ADC_ConfigChannel+0x774>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d134      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800343c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003440:	4619      	mov	r1, r3
 8003442:	481e      	ldr	r0, [pc, #120]	@ (80034bc <HAL_ADC_ConfigChannel+0x770>)
 8003444:	f7ff f8e9 	bl	800261a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003448:	e02b      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_ADC_ConfigChannel+0x788>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d126      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d120      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <HAL_ADC_ConfigChannel+0x774>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d11b      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800346a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800346e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003472:	4619      	mov	r1, r3
 8003474:	4811      	ldr	r0, [pc, #68]	@ (80034bc <HAL_ADC_ConfigChannel+0x770>)
 8003476:	f7ff f8d0 	bl	800261a <LL_ADC_SetCommonPathInternalCh>
 800347a:	e012      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800348e:	e008      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80034aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	37d8      	adds	r7, #216	@ 0xd8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	80080000 	.word	0x80080000
 80034bc:	50040300 	.word	0x50040300
 80034c0:	50040000 	.word	0x50040000
 80034c4:	c7520000 	.word	0xc7520000
 80034c8:	20000008 	.word	0x20000008
 80034cc:	053e2d63 	.word	0x053e2d63
 80034d0:	cb840000 	.word	0xcb840000
 80034d4:	80000001 	.word	0x80000001

080034d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f9fd 	bl	80028e8 <LL_ADC_IsEnabled>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d15e      	bne.n	80035b2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b30      	ldr	r3, [pc, #192]	@ (80035bc <ADC_Enable+0xe4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e04a      	b.n	80035b4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f9cc 	bl	80028c0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003528:	4825      	ldr	r0, [pc, #148]	@ (80035c0 <ADC_Enable+0xe8>)
 800352a:	f7ff f889 	bl	8002640 <LL_ADC_GetCommonPathInternalCh>
 800352e:	4603      	mov	r3, r0
 8003530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003538:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <ADC_Enable+0xec>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <ADC_Enable+0xf0>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	3301      	adds	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800354a:	e002      	b.n	8003552 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3b01      	subs	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f9      	bne.n	800354c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003558:	f7ff f828 	bl	80025ac <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800355e:	e021      	b.n	80035a4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff f9bf 	bl	80028e8 <LL_ADC_IsEnabled>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff f9a3 	bl	80028c0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800357a:	f7ff f817 	bl	80025ac <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d90d      	bls.n	80035a4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358c:	f043 0210 	orr.w	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e007      	b.n	80035b4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d1d6      	bne.n	8003560 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	8000003f 	.word	0x8000003f
 80035c0:	50040300 	.word	0x50040300
 80035c4:	20000008 	.word	0x20000008
 80035c8:	053e2d63 	.word	0x053e2d63

080035cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d14b      	bne.n	800367e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d021      	beq.n	8003644 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f87e 	bl	8002706 <LL_ADC_REG_IsTriggerSourceSWStart>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d032      	beq.n	8003676 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d12b      	bne.n	8003676 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11f      	bne.n	8003676 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	655a      	str	r2, [r3, #84]	@ 0x54
 8003642:	e018      	b.n	8003676 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d111      	bne.n	8003676 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d105      	bne.n	8003676 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7fd ffda 	bl	8001630 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800367c:	e00e      	b.n	800369c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff fb54 	bl	8002d38 <HAL_ADC_ErrorCallback>
}
 8003690:	e004      	b.n	800369c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff fb36 	bl	8002d24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	f043 0204 	orr.w	r2, r3, #4
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fb26 	bl	8002d38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0b      	blt.n	8003782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4907      	ldr	r1, [pc, #28]	@ (8003790 <__NVIC_EnableIRQ+0x38>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db0c      	blt.n	80037c0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4907      	ldr	r1, [pc, #28]	@ (80037cc <__NVIC_SetPendingIRQ+0x38>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	3340      	adds	r3, #64	@ 0x40
 80037bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0c      	blt.n	80037fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	@ (8003808 <__NVIC_ClearPendingIRQ+0x38>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	3360      	adds	r3, #96	@ 0x60
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	@ (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	@ (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff feed 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003930:	f7ff ff04 	bl	800373c <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff90 	bl	8003860 <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5f 	bl	800380c <__NVIC_SetPriority>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fef7 	bl	8003758 <__NVIC_EnableIRQ>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffa4 	bl	80038c8 <SysTick_Config>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fefb 	bl	8003794 <__NVIC_SetPendingIRQ>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff0b 	bl	80037d0 <__NVIC_ClearPendingIRQ>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08e      	b.n	8003af4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <HAL_DMA_Init+0x138>)
 80039de:	429a      	cmp	r2, r3
 80039e0:	d80f      	bhi.n	8003a02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <HAL_DMA_Init+0x13c>)
 80039ea:	4413      	add	r3, r2
 80039ec:	4a45      	ldr	r2, [pc, #276]	@ (8003b04 <HAL_DMA_Init+0x140>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a42      	ldr	r2, [pc, #264]	@ (8003b08 <HAL_DMA_Init+0x144>)
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a00:	e00e      	b.n	8003a20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <HAL_DMA_Init+0x148>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b04 <HAL_DMA_Init+0x140>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	009a      	lsls	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_DMA_Init+0x14c>)
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa74 	bl	8003f60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a80:	d102      	bne.n	8003a88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a90:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003a94:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a9e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <HAL_DMA_Init+0x106>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d80c      	bhi.n	8003aca <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fa93 	bl	8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	e008      	b.n	8003adc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40020407 	.word	0x40020407
 8003b00:	bffdfff8 	.word	0xbffdfff8
 8003b04:	cccccccd 	.word	0xcccccccd
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	bffdfbf8 	.word	0xbffdfbf8
 8003b10:	40020400 	.word	0x40020400

08003b14 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Start_IT+0x20>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e066      	b.n	8003c02 <HAL_DMA_Start_IT+0xee>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d155      	bne.n	8003bf4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f9b9 	bl	8003ee4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 020e 	orr.w	r2, r2, #14
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e00f      	b.n	8003bac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0204 	bic.w	r2, r2, #4
 8003b9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 020a 	orr.w	r2, r2, #10
 8003baa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e005      	b.n	8003c00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e04f      	b.n	8003cbc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d008      	beq.n	8003c3a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e040      	b.n	8003cbc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 020e 	bic.w	r2, r2, #14
 8003c48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f003 021c 	and.w	r2, r3, #28
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2101      	movs	r1, #1
 8003c78:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ca8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d005      	beq.n	8003cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e047      	b.n	8003d7c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 020e 	bic.w	r2, r2, #14
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	f003 021c 	and.w	r2, r3, #28
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
    }
  }
  return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f003 031c 	and.w	r3, r3, #28
 8003da6:	2204      	movs	r2, #4
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d026      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x7a>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d021      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f003 021c 	and.w	r2, r3, #28
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2104      	movs	r1, #4
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d071      	beq.n	8003eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dfe:	e06c      	b.n	8003eda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e04:	f003 031c 	and.w	r3, r3, #28
 8003e08:	2202      	movs	r2, #2
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d02e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xec>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d029      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10b      	bne.n	8003e44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 020a 	bic.w	r2, r2, #10
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	f003 021c 	and.w	r2, r3, #28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	2102      	movs	r1, #2
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d038      	beq.n	8003eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e70:	e033      	b.n	8003eda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f003 031c 	and.w	r3, r3, #28
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d02a      	beq.n	8003edc <HAL_DMA_IRQHandler+0x156>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d025      	beq.n	8003edc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 020e 	bic.w	r2, r2, #14
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	f003 021c 	and.w	r2, r3, #28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
}
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003efa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	f003 021c 	and.w	r2, r3, #28
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d108      	bne.n	8003f44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f42:	e007      	b.n	8003f54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d80a      	bhi.n	8003f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f80:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f88:	e007      	b.n	8003f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f94:	4413      	add	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3b08      	subs	r3, #8
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fb0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2201      	movs	r2, #1
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40020407 	.word	0x40020407
 8003fd0:	4002081c 	.word	0x4002081c
 8003fd4:	cccccccd 	.word	0xcccccccd
 8003fd8:	40020880 	.word	0x40020880

08003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a09      	ldr	r2, [pc, #36]	@ (8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004000:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b01      	subs	r3, #1
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2201      	movs	r2, #1
 800400c:	409a      	lsls	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	1000823f 	.word	0x1000823f
 8004024:	40020940 	.word	0x40020940

08004028 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004036:	e14c      	b.n	80042d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 813e 	beq.w	80042cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d005      	beq.n	8004068 <HAL_GPIO_Init+0x40>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d130      	bne.n	80040ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800409e:	2201      	movs	r2, #1
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 0201 	and.w	r2, r3, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d017      	beq.n	8004106 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	2203      	movs	r2, #3
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d123      	bne.n	800415a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	08da      	lsrs	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3208      	adds	r2, #8
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	220f      	movs	r2, #15
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	08da      	lsrs	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3208      	adds	r2, #8
 8004154:	6939      	ldr	r1, [r7, #16]
 8004156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8098 	beq.w	80042cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800419c:	4a54      	ldr	r2, [pc, #336]	@ (80042f0 <HAL_GPIO_Init+0x2c8>)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3302      	adds	r3, #2
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	220f      	movs	r2, #15
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041c6:	d019      	beq.n	80041fc <HAL_GPIO_Init+0x1d4>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a4a      	ldr	r2, [pc, #296]	@ (80042f4 <HAL_GPIO_Init+0x2cc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <HAL_GPIO_Init+0x1d0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a49      	ldr	r2, [pc, #292]	@ (80042f8 <HAL_GPIO_Init+0x2d0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00d      	beq.n	80041f4 <HAL_GPIO_Init+0x1cc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a48      	ldr	r2, [pc, #288]	@ (80042fc <HAL_GPIO_Init+0x2d4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d007      	beq.n	80041f0 <HAL_GPIO_Init+0x1c8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a47      	ldr	r2, [pc, #284]	@ (8004300 <HAL_GPIO_Init+0x2d8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_GPIO_Init+0x1c4>
 80041e8:	2304      	movs	r3, #4
 80041ea:	e008      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041ec:	2307      	movs	r3, #7
 80041ee:	e006      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041f0:	2303      	movs	r3, #3
 80041f2:	e004      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e002      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_GPIO_Init+0x1d6>
 80041fc:	2300      	movs	r3, #0
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f002 0203 	and.w	r2, r2, #3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4093      	lsls	r3, r2
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800420e:	4938      	ldr	r1, [pc, #224]	@ (80042f0 <HAL_GPIO_Init+0x2c8>)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	3302      	adds	r3, #2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800421c:	4b39      	ldr	r3, [pc, #228]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004240:	4a30      	ldr	r2, [pc, #192]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004246:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800426a:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004270:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 8004272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004296:	4a1b      	ldr	r2, [pc, #108]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800429e:	4b19      	ldr	r3, [pc, #100]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004304 <HAL_GPIO_Init+0x2dc>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f aeab 	bne.w	8004038 <HAL_GPIO_Init+0x10>
  }
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40010000 	.word	0x40010000
 80042f4:	48000400 	.word	0x48000400
 80042f8:	48000800 	.word	0x48000800
 80042fc:	48000c00 	.word	0x48000c00
 8004300:	48001000 	.word	0x48001000
 8004304:	58000800 	.word	0x58000800

08004308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
 8004314:	4613      	mov	r3, r2
 8004316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004318:	787b      	ldrb	r3, [r7, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004324:	e002      	b.n	800432c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	43d9      	mvns	r1, r3
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	400b      	ands	r3, r1
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	619a      	str	r2, [r3, #24]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004372:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <HAL_HSEM_IRQHandler+0x30>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_HSEM_IRQHandler+0x30>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	43db      	mvns	r3, r3
 8004380:	4906      	ldr	r1, [pc, #24]	@ (800439c <HAL_HSEM_IRQHandler+0x30>)
 8004382:	4013      	ands	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004386:	4a05      	ldr	r2, [pc, #20]	@ (800439c <HAL_HSEM_IRQHandler+0x30>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f807 	bl	80043a0 <HAL_HSEM_FreeCallback>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58001500 	.word	0x58001500

080043a0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01e      	beq.n	8004404 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80043c6:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <HAL_IPCC_Init+0x60>)
 80043c8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fdbe 	bl	8001f58 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	f000 f85b 	bl	8004498 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f82c 	bl	800444c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004402:	e001      	b.n	8004408 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	58000c00 	.word	0x58000c00

08004418 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e00f      	b.n	800447a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	4a0b      	ldr	r2, [pc, #44]	@ (8004490 <IPCC_SetDefaultCallbacks+0x44>)
 8004464:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3306      	adds	r3, #6
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <IPCC_SetDefaultCallbacks+0x48>)
 8004472:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b05      	cmp	r3, #5
 800447e:	d9ec      	bls.n	800445a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	08004419 	.word	0x08004419
 8004494:	08004433 	.word	0x08004433

08004498 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80044ac:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223f      	movs	r2, #63	@ 0x3f
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a04      	ldr	r2, [pc, #16]	@ (80044dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	58000400 	.word	0x58000400

080044e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80044e4:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	58000400 	.word	0x58000400

080044fc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800450e:	d101      	bne.n	8004514 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_RCC_HSE_Enable>:
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_HSE_Disable>:
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800454c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004550:	6013      	str	r3, [r2, #0]
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_RCC_HSE_IsReady>:
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800456e:	d101      	bne.n	8004574 <LL_RCC_HSE_IsReady+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_RCC_HSE_IsReady+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <LL_RCC_HSI_Enable>:
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800458e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_RCC_HSI_Disable>:
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045b0:	6013      	str	r3, [r2, #0]
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <LL_RCC_HSI_IsReady>:
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ce:	d101      	bne.n	80045d4 <LL_RCC_HSI_IsReady+0x18>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <LL_RCC_HSI_IsReady+0x1a>
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_RCC_HSI48_Enable>:
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004622:	bf00      	nop
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <LL_RCC_HSI48_Disable>:
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004634:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_RCC_HSI48_IsReady>:
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d101      	bne.n	8004666 <LL_RCC_HSI48_IsReady+0x18>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <LL_RCC_HSI48_IsReady+0x1a>
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <LL_RCC_LSE_Enable>:
{
 8004672:	b480      	push	{r7}
 8004674:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_RCC_LSE_Disable>:
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_RCC_LSE_EnableBypass>:
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80046ce:	bf00      	nop
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LL_RCC_LSE_DisableBypass>:
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_RCC_LSE_IsReady>:
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d101      	bne.n	8004712 <LL_RCC_LSE_IsReady+0x18>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <LL_RCC_LSE_IsReady+0x1a>
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_RCC_LSI1_Enable>:
{
 800471e:	b480      	push	{r7}
 8004720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_RCC_LSI1_Disable>:
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_RCC_LSI1_IsReady>:
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d101      	bne.n	800477a <LL_RCC_LSI1_IsReady+0x18>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_RCC_LSI1_IsReady+0x1a>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_RCC_LSI2_Enable>:
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_LSI2_Disable>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <LL_RCC_LSI2_IsReady>:
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d101      	bne.n	80047e2 <LL_RCC_LSI2_IsReady+0x18>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <LL_RCC_LSI2_IsReady+0x1a>
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_RCC_LSI2_SetTrimming>:
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_RCC_MSI_Enable>:
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_MSI_Disable>:
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	6013      	str	r3, [r2, #0]
}
 800484e:	bf00      	nop
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_RCC_MSI_IsReady>:
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d101      	bne.n	800486e <LL_RCC_MSI_IsReady+0x16>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <LL_RCC_MSI_IsReady+0x18>
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_RCC_MSI_SetRange>:
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_RCC_MSI_GetRange>:
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2bb0      	cmp	r3, #176	@ 0xb0
 80048b8:	d901      	bls.n	80048be <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80048ba:	23b0      	movs	r3, #176	@ 0xb0
 80048bc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80048be:	687b      	ldr	r3, [r7, #4]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_MSI_SetCalibTrimming>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048e6:	4313      	orrs	r3, r2
 80048e8:	604b      	str	r3, [r1, #4]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_SetSysClkSource>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 0203 	bic.w	r2, r3, #3
 8004908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_RCC_GetSysClkSource>:
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <LL_RCC_SetAHBPrescaler>:
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800493e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_C2_RCC_SetAHBPrescaler>:
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800496a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800496e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004972:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_RCC_SetAHB4Prescaler>:
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004996:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800499a:	f023 020f 	bic.w	r2, r3, #15
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_SetAPB1Prescaler>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_SetAPB2Prescaler>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_RCC_GetAHBPrescaler>:
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_GetAHB4Prescaler>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a28:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <LL_RCC_GetAPB1Prescaler>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_GetAPB2Prescaler>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aba:	d101      	bne.n	8004ac0 <LL_RCC_PLL_IsReady+0x18>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <LL_RCC_PLL_IsReady+0x1a>
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0303 	and.w	r3, r3, #3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b40:	d101      	bne.n	8004b46 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b66:	d101      	bne.n	8004b6c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d101      	bne.n	8004b92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bb0:	d101      	bne.n	8004bb6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bd4:	d101      	bne.n	8004bda <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b08d      	sub	sp, #52	@ 0x34
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e363      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 808d 	beq.w	8004d22 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c08:	f7ff fe89 	bl	800491e <LL_RCC_GetSysClkSource>
 8004c0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0e:	f7ff ff82 	bl	8004b16 <LL_RCC_PLL_GetMainSource>
 8004c12:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x3e>
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	d147      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d144      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e347      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004c36:	f7ff fe34 	bl	80048a2 <LL_RCC_MSI_GetRange>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d914      	bls.n	8004c6a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fd2f 	bl	80056a8 <RCC_SetFlashLatencyFromMSIRange>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e336      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fe0e 	bl	800487a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fe32 	bl	80048cc <LL_RCC_MSI_SetCalibTrimming>
 8004c68:	e013      	b.n	8004c92 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fe03 	bl	800487a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fe27 	bl	80048cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fd10 	bl	80056a8 <RCC_SetFlashLatencyFromMSIRange>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e317      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c92:	f000 fcc9 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4aa4      	ldr	r2, [pc, #656]	@ (8004f2c <HAL_RCC_OscConfig+0x344>)
 8004c9a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c9c:	4ba4      	ldr	r3, [pc, #656]	@ (8004f30 <HAL_RCC_OscConfig+0x348>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fc35 	bl	8002510 <HAL_InitTick>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d039      	beq.n	8004d20 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e308      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01e      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cb8:	f7ff fdb0 	bl	800481c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fc76 	bl	80025ac <HAL_GetTick>
 8004cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc4:	f7fd fc72 	bl	80025ac <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e2f5      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004cd6:	f7ff fdbf 	bl	8004858 <LL_RCC_MSI_IsReady>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f1      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fdc8 	bl	800487a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fdec 	bl	80048cc <LL_RCC_MSI_SetCalibTrimming>
 8004cf4:	e015      	b.n	8004d22 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cf6:	f7ff fda0 	bl	800483a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fc57 	bl	80025ac <HAL_GetTick>
 8004cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d02:	f7fd fc53 	bl	80025ac <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e2d6      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d14:	f7ff fda0 	bl	8004858 <LL_RCC_MSI_IsReady>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f1      	bne.n	8004d02 <HAL_RCC_OscConfig+0x11a>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d20:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d047      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2e:	f7ff fdf6 	bl	800491e <LL_RCC_GetSysClkSource>
 8004d32:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d34:	f7ff feef 	bl	8004b16 <LL_RCC_PLL_GetMainSource>
 8004d38:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_OscConfig+0x164>
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d108      	bne.n	8004d58 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d134      	bne.n	8004dbe <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e2b4      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d60:	d102      	bne.n	8004d68 <HAL_RCC_OscConfig+0x180>
 8004d62:	f7ff fbdd 	bl	8004520 <LL_RCC_HSE_Enable>
 8004d66:	e001      	b.n	8004d6c <HAL_RCC_OscConfig+0x184>
 8004d68:	f7ff fbe9 	bl	800453e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d012      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fd fc1a 	bl	80025ac <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fd fc16 	bl	80025ac <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e299      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d8e:	f7ff fbe5 	bl	800455c <LL_RCC_HSE_IsReady>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f1      	beq.n	8004d7c <HAL_RCC_OscConfig+0x194>
 8004d98:	e011      	b.n	8004dbe <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9a:	f7fd fc07 	bl	80025ac <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da2:	f7fd fc03 	bl	80025ac <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b64      	cmp	r3, #100	@ 0x64
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e286      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004db4:	f7ff fbd2 	bl	800455c <LL_RCC_HSE_IsReady>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f1      	bne.n	8004da2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d04c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dca:	f7ff fda8 	bl	800491e <LL_RCC_GetSysClkSource>
 8004dce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd0:	f7ff fea1 	bl	8004b16 <LL_RCC_PLL_GetMainSource>
 8004dd4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_OscConfig+0x200>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d10e      	bne.n	8004e00 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e266      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fbf1 	bl	80045e0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004dfe:	e031      	b.n	8004e64 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d019      	beq.n	8004e3c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e08:	f7ff fbba 	bl	8004580 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fd fbce 	bl	80025ac <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fd fbca 	bl	80025ac <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e24d      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e26:	f7ff fbc9 	bl	80045bc <LL_RCC_HSI_IsReady>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f1      	beq.n	8004e14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fbd3 	bl	80045e0 <LL_RCC_HSI_SetCalibTrimming>
 8004e3a:	e013      	b.n	8004e64 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3c:	f7ff fbaf 	bl	800459e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fd fbb4 	bl	80025ac <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e48:	f7fd fbb0 	bl	80025ac <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e233      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e5a:	f7ff fbaf 	bl	80045bc <LL_RCC_HSI_IsReady>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f1      	bne.n	8004e48 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80a3 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d076      	beq.n	8004f74 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d046      	beq.n	8004f20 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e92:	f7ff fc66 	bl	8004762 <LL_RCC_LSI1_IsReady>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d113      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e9c:	f7ff fc3f 	bl	800471e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea0:	f7fd fb84 	bl	80025ac <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ea8:	f7fd fb80 	bl	80025ac <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e203      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004eba:	f7ff fc52 	bl	8004762 <LL_RCC_LSI1_IsReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f1      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ec4:	f7ff fc5f 	bl	8004786 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fb70 	bl	80025ac <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ed0:	f7fd fb6c 	bl	80025ac <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1ef      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ee2:	f7ff fc72 	bl	80047ca <LL_RCC_LSI2_IsReady>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f1      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fc7c 	bl	80047ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ef6:	f7ff fc23 	bl	8004740 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fd fb57 	bl	80025ac <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f02:	f7fd fb53 	bl	80025ac <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1d6      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f14:	f7ff fc25 	bl	8004762 <LL_RCC_LSI1_IsReady>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f1      	bne.n	8004f02 <HAL_RCC_OscConfig+0x31a>
 8004f1e:	e051      	b.n	8004fc4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f20:	f7ff fbfd 	bl	800471e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fd fb42 	bl	80025ac <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f2a:	e00c      	b.n	8004f46 <HAL_RCC_OscConfig+0x35e>
 8004f2c:	20000008 	.word	0x20000008
 8004f30:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f34:	f7fd fb3a 	bl	80025ac <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1bd      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f46:	f7ff fc0c 	bl	8004762 <LL_RCC_LSI1_IsReady>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f1      	beq.n	8004f34 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f50:	f7ff fc2a 	bl	80047a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f56:	f7fd fb29 	bl	80025ac <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1ac      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f68:	f7ff fc2f 	bl	80047ca <LL_RCC_LSI2_IsReady>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f1      	bne.n	8004f56 <HAL_RCC_OscConfig+0x36e>
 8004f72:	e027      	b.n	8004fc4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f74:	f7ff fc18 	bl	80047a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fd fb18 	bl	80025ac <HAL_GetTick>
 8004f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f80:	f7fd fb14 	bl	80025ac <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e197      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f92:	f7ff fc1a 	bl	80047ca <LL_RCC_LSI2_IsReady>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f1      	bne.n	8004f80 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f9c:	f7ff fbd0 	bl	8004740 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa0:	f7fd fb04 	bl	80025ac <HAL_GetTick>
 8004fa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fa8:	f7fd fb00 	bl	80025ac <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e183      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fba:	f7ff fbd2 	bl	8004762 <LL_RCC_LSI1_IsReady>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f1      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d05b      	beq.n	8005088 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd0:	4ba7      	ldr	r3, [pc, #668]	@ (8005270 <HAL_RCC_OscConfig+0x688>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d114      	bne.n	8005006 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fdc:	f7ff fa70 	bl	80044c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe0:	f7fd fae4 	bl	80025ac <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe8:	f7fd fae0 	bl	80025ac <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e163      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffa:	4b9d      	ldr	r3, [pc, #628]	@ (8005270 <HAL_RCC_OscConfig+0x688>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d102      	bne.n	8005014 <HAL_RCC_OscConfig+0x42c>
 800500e:	f7ff fb30 	bl	8004672 <LL_RCC_LSE_Enable>
 8005012:	e00c      	b.n	800502e <HAL_RCC_OscConfig+0x446>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b05      	cmp	r3, #5
 800501a:	d104      	bne.n	8005026 <HAL_RCC_OscConfig+0x43e>
 800501c:	f7ff fb4b 	bl	80046b6 <LL_RCC_LSE_EnableBypass>
 8005020:	f7ff fb27 	bl	8004672 <LL_RCC_LSE_Enable>
 8005024:	e003      	b.n	800502e <HAL_RCC_OscConfig+0x446>
 8005026:	f7ff fb35 	bl	8004694 <LL_RCC_LSE_Disable>
 800502a:	f7ff fb55 	bl	80046d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fd fab9 	bl	80025ac <HAL_GetTick>
 800503a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fd fab5 	bl	80025ac <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e136      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005054:	f7ff fb51 	bl	80046fa <LL_RCC_LSE_IsReady>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0ef      	beq.n	800503e <HAL_RCC_OscConfig+0x456>
 800505e:	e013      	b.n	8005088 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fd faa4 	bl	80025ac <HAL_GetTick>
 8005064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fd faa0 	bl	80025ac <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e121      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800507e:	f7ff fb3c 	bl	80046fa <LL_RCC_LSE_IsReady>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ef      	bne.n	8005068 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02c      	beq.n	80050ee <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d014      	beq.n	80050c6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800509c:	f7ff fab5 	bl	800460a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd fa84 	bl	80025ac <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a8:	f7fd fa80 	bl	80025ac <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e103      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050ba:	f7ff fac8 	bl	800464e <LL_RCC_HSI48_IsReady>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f1      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4c0>
 80050c4:	e013      	b.n	80050ee <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050c6:	f7ff fab1 	bl	800462c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fd fa6f 	bl	80025ac <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fd fa6b 	bl	80025ac <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0ee      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050e4:	f7ff fab3 	bl	800464e <LL_RCC_HSI48_IsReady>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f1      	bne.n	80050d2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80e4 	beq.w	80052c0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f8:	f7ff fc11 	bl	800491e <LL_RCC_GetSysClkSource>
 80050fc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80050fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	2b02      	cmp	r3, #2
 800510c:	f040 80b4 	bne.w	8005278 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	429a      	cmp	r2, r3
 800511c:	d123      	bne.n	8005166 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d11c      	bne.n	8005166 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d114      	bne.n	8005166 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d10d      	bne.n	8005166 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d05d      	beq.n	8005222 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d058      	beq.n	800521e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0a1      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800517e:	f7ff fc84 	bl	8004a8a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005182:	f7fd fa13 	bl	80025ac <HAL_GetTick>
 8005186:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518a:	f7fd fa0f 	bl	80025ac <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e092      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1ef      	bne.n	800518a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	4b30      	ldr	r3, [pc, #192]	@ (8005274 <HAL_RCC_OscConfig+0x68c>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051c2:	0212      	lsls	r2, r2, #8
 80051c4:	4311      	orrs	r1, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80051d0:	4311      	orrs	r1, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80051d6:	430a      	orrs	r2, r1
 80051d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051dc:	4313      	orrs	r3, r2
 80051de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051e0:	f7ff fc44 	bl	8004a6c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051f4:	f7fd f9da 	bl	80025ac <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fd f9d6 	bl	80025ac <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e059      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ef      	beq.n	80051fc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800521c:	e050      	b.n	80052c0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e04f      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d147      	bne.n	80052c0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005230:	f7ff fc1c 	bl	8004a6c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005242:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005244:	f7fd f9b2 	bl	80025ac <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fd f9ae 	bl	80025ac <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e031      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ef      	beq.n	800524c <HAL_RCC_OscConfig+0x664>
 800526c:	e028      	b.n	80052c0 <HAL_RCC_OscConfig+0x6d8>
 800526e:	bf00      	nop
 8005270:	58000400 	.word	0x58000400
 8005274:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d01e      	beq.n	80052bc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	f7ff fc04 	bl	8004a8a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005282:	f7fd f993 	bl	80025ac <HAL_GetTick>
 8005286:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528a:	f7fd f98f 	bl	80025ac <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e012      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ef      	bne.n	800528a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <HAL_RCC_OscConfig+0x6e4>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]
 80052ba:	e001      	b.n	80052c0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3734      	adds	r7, #52	@ 0x34
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	eefefffc 	.word	0xeefefffc

080052d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e12d      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e4:	4b98      	ldr	r3, [pc, #608]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d91b      	bls.n	800532a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b95      	ldr	r3, [pc, #596]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 0207 	bic.w	r2, r3, #7
 80052fa:	4993      	ldr	r1, [pc, #588]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005302:	f7fd f953 	bl	80025ac <HAL_GetTick>
 8005306:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005308:	e008      	b.n	800531c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800530a:	f7fd f94f 	bl	80025ac <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e111      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531c:	4b8a      	ldr	r3, [pc, #552]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d1ef      	bne.n	800530a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fafb 	bl	8004936 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005340:	f7fd f934 	bl	80025ac <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005348:	f7fd f930 	bl	80025ac <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0f2      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800535a:	f7ff fbe8 	bl	8004b2e <LL_RCC_IsActiveFlag_HPRE>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f1      	beq.n	8005348 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d016      	beq.n	800539e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff faf2 	bl	800495e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800537a:	f7fd f917 	bl	80025ac <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005382:	f7fd f913 	bl	80025ac <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e0d5      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005394:	f7ff fbdd 	bl	8004b52 <LL_RCC_IsActiveFlag_C2HPRE>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f1      	beq.n	8005382 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d016      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff faeb 	bl	800498a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053b4:	f7fd f8fa 	bl	80025ac <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053bc:	f7fd f8f6 	bl	80025ac <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0b8      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053ce:	f7ff fbd3 	bl	8004b78 <LL_RCC_IsActiveFlag_SHDHPRE>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f1      	beq.n	80053bc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d016      	beq.n	8005412 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fae5 	bl	80049b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053ee:	f7fd f8dd 	bl	80025ac <HAL_GetTick>
 80053f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053f6:	f7fd f8d9 	bl	80025ac <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e09b      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005408:	f7ff fbc9 	bl	8004b9e <LL_RCC_IsActiveFlag_PPRE1>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f1      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d017      	beq.n	800544e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fadb 	bl	80049e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800542a:	f7fd f8bf 	bl	80025ac <HAL_GetTick>
 800542e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005432:	f7fd f8bb 	bl	80025ac <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e07d      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005444:	f7ff fbbd 	bl	8004bc2 <LL_RCC_IsActiveFlag_PPRE2>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f1      	beq.n	8005432 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d043      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d106      	bne.n	8005470 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005462:	f7ff f87b 	bl	800455c <LL_RCC_HSE_IsReady>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11e      	bne.n	80054aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e067      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d106      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005478:	f7ff fb16 	bl	8004aa8 <LL_RCC_PLL_IsReady>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d113      	bne.n	80054aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e05c      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800548e:	f7ff f9e3 	bl	8004858 <LL_RCC_MSI_IsReady>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d108      	bne.n	80054aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e051      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800549c:	f7ff f88e 	bl	80045bc <LL_RCC_HSI_IsReady>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e04a      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fa21 	bl	80048f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b4:	f7fd f87a 	bl	80025ac <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ba:	e00a      	b.n	80054d2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054bc:	f7fd f876 	bl	80025ac <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e036      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d2:	f7ff fa24 	bl	800491e <LL_RCC_GetSysClkSource>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	429a      	cmp	r2, r3
 80054e0:	d1ec      	bne.n	80054bc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e2:	4b19      	ldr	r3, [pc, #100]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d21b      	bcs.n	8005528 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 0207 	bic.w	r2, r3, #7
 80054f8:	4913      	ldr	r1, [pc, #76]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005500:	f7fd f854 	bl	80025ac <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	e008      	b.n	800551a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005508:	f7fd f850 	bl	80025ac <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e012      	b.n	8005540 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_RCC_ClockConfig+0x278>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d1ef      	bne.n	8005508 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005528:	f000 f87e 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 800552c:	4603      	mov	r3, r0
 800552e:	4a07      	ldr	r2, [pc, #28]	@ (800554c <HAL_RCC_ClockConfig+0x27c>)
 8005530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005532:	f7fd f847 	bl	80025c4 <HAL_GetTickPrio>
 8005536:	4603      	mov	r3, r0
 8005538:	4618      	mov	r0, r3
 800553a:	f7fc ffe9 	bl	8002510 <HAL_InitTick>
 800553e:	4603      	mov	r3, r0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	58004000 	.word	0x58004000
 800554c:	20000008 	.word	0x20000008

08005550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005556:	f7ff f9e2 	bl	800491e <LL_RCC_GetSysClkSource>
 800555a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005562:	f7ff f99e 	bl	80048a2 <LL_RCC_MSI_GetRange>
 8005566:	4603      	mov	r3, r0
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	4a2b      	ldr	r2, [pc, #172]	@ (800561c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e04b      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d102      	bne.n	8005584 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800557e:	4b28      	ldr	r3, [pc, #160]	@ (8005620 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e045      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b08      	cmp	r3, #8
 8005588:	d10a      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800558a:	f7fe ffb7 	bl	80044fc <LL_RCC_HSE_IsEnabledDiv2>
 800558e:	4603      	mov	r3, r0
 8005590:	2b01      	cmp	r3, #1
 8005592:	d102      	bne.n	800559a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005594:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e03a      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800559a:	4b22      	ldr	r3, [pc, #136]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xd4>)
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e037      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80055a0:	f7ff fab9 	bl	8004b16 <LL_RCC_PLL_GetMainSource>
 80055a4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d003      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x64>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_GetSysClockFreq+0x6a>
 80055b2:	e00d      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80055b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005620 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055b6:	60bb      	str	r3, [r7, #8]
        break;
 80055b8:	e015      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055ba:	f7fe ff9f 	bl	80044fc <LL_RCC_HSE_IsEnabledDiv2>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80055c4:	4b16      	ldr	r3, [pc, #88]	@ (8005620 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055c6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80055c8:	e00d      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80055ca:	4b16      	ldr	r3, [pc, #88]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055cc:	60bb      	str	r3, [r7, #8]
        break;
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055d0:	f7ff f967 	bl	80048a2 <LL_RCC_MSI_GetRange>
 80055d4:	4603      	mov	r3, r0
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	4a0f      	ldr	r2, [pc, #60]	@ (800561c <HAL_RCC_GetSysClockFreq+0xcc>)
 80055de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e2:	60bb      	str	r3, [r7, #8]
        break;
 80055e4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80055e6:	f7ff fa71 	bl	8004acc <LL_RCC_PLL_GetN>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	fb03 f402 	mul.w	r4, r3, r2
 80055f2:	f7ff fa84 	bl	8004afe <LL_RCC_PLL_GetDivider>
 80055f6:	4603      	mov	r3, r0
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	3301      	adds	r3, #1
 80055fc:	fbb4 f4f3 	udiv	r4, r4, r3
 8005600:	f7ff fa71 	bl	8004ae6 <LL_RCC_PLL_GetR>
 8005604:	4603      	mov	r3, r0
 8005606:	0f5b      	lsrs	r3, r3, #29
 8005608:	3301      	adds	r3, #1
 800560a:	fbb4 f3f3 	udiv	r3, r4, r3
 800560e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bd90      	pop	{r4, r7, pc}
 800561a:	bf00      	nop
 800561c:	0800e700 	.word	0x0800e700
 8005620:	00f42400 	.word	0x00f42400
 8005624:	01e84800 	.word	0x01e84800

08005628 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005628:	b598      	push	{r3, r4, r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800562c:	f7ff ff90 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 8005630:	4604      	mov	r4, r0
 8005632:	f7ff f9e9 	bl	8004a08 <LL_RCC_GetAHBPrescaler>
 8005636:	4603      	mov	r3, r0
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	4a03      	ldr	r2, [pc, #12]	@ (800564c <HAL_RCC_GetHCLKFreq+0x24>)
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd98      	pop	{r3, r4, r7, pc}
 800564c:	0800e6a0 	.word	0x0800e6a0

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b598      	push	{r3, r4, r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005654:	f7ff ffe8 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005658:	4604      	mov	r4, r0
 800565a:	f7ff f9ef 	bl	8004a3c <LL_RCC_GetAPB1Prescaler>
 800565e:	4603      	mov	r3, r0
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	4a04      	ldr	r2, [pc, #16]	@ (8005678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd98      	pop	{r3, r4, r7, pc}
 8005678:	0800e6e0 	.word	0x0800e6e0

0800567c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800567c:	b598      	push	{r3, r4, r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005680:	f7ff ffd2 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005684:	4604      	mov	r4, r0
 8005686:	f7ff f9e5 	bl	8004a54 <LL_RCC_GetAPB2Prescaler>
 800568a:	4603      	mov	r3, r0
 800568c:	0adb      	lsrs	r3, r3, #11
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	4a04      	ldr	r2, [pc, #16]	@ (80056a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd98      	pop	{r3, r4, r7, pc}
 80056a4:	0800e6e0 	.word	0x0800e6e0

080056a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2bb0      	cmp	r3, #176	@ 0xb0
 80056b4:	d903      	bls.n	80056be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80056b6:	4b15      	ldr	r3, [pc, #84]	@ (800570c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e007      	b.n	80056ce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	4a11      	ldr	r2, [pc, #68]	@ (800570c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80056ce:	f7ff f9a7 	bl	8004a20 <LL_RCC_GetAHB4Prescaler>
 80056d2:	4603      	mov	r3, r0
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	0c9c      	lsrs	r4, r3, #18
 80056f2:	f7fe fef5 	bl	80044e0 <HAL_PWREx_GetVoltageRange>
 80056f6:	4603      	mov	r3, r0
 80056f8:	4619      	mov	r1, r3
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 f80c 	bl	8005718 <RCC_SetFlashLatency>
 8005700:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}
 800570a:	bf00      	nop
 800570c:	0800e700 	.word	0x0800e700
 8005710:	0800e6a0 	.word	0x0800e6a0
 8005714:	431bde83 	.word	0x431bde83

08005718 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b093      	sub	sp, #76	@ 0x4c
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005722:	4b37      	ldr	r3, [pc, #220]	@ (8005800 <RCC_SetFlashLatency+0xe8>)
 8005724:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800572a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800572e:	4a35      	ldr	r2, [pc, #212]	@ (8005804 <RCC_SetFlashLatency+0xec>)
 8005730:	f107 031c 	add.w	r3, r7, #28
 8005734:	ca07      	ldmia	r2, {r0, r1, r2}
 8005736:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800573a:	4b33      	ldr	r3, [pc, #204]	@ (8005808 <RCC_SetFlashLatency+0xf0>)
 800573c:	f107 040c 	add.w	r4, r7, #12
 8005740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005746:	2300      	movs	r3, #0
 8005748:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005750:	d11a      	bne.n	8005788 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005752:	2300      	movs	r3, #0
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
 8005756:	e013      	b.n	8005780 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	3348      	adds	r3, #72	@ 0x48
 800575e:	443b      	add	r3, r7
 8005760:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d807      	bhi.n	800577a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800576a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	3348      	adds	r3, #72	@ 0x48
 8005770:	443b      	add	r3, r7
 8005772:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005776:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005778:	e020      	b.n	80057bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800577a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577c:	3301      	adds	r3, #1
 800577e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005782:	2b03      	cmp	r3, #3
 8005784:	d9e8      	bls.n	8005758 <RCC_SetFlashLatency+0x40>
 8005786:	e019      	b.n	80057bc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005788:	2300      	movs	r3, #0
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578c:	e013      	b.n	80057b6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800578e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	3348      	adds	r3, #72	@ 0x48
 8005794:	443b      	add	r3, r7
 8005796:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d807      	bhi.n	80057b0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80057a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	3348      	adds	r3, #72	@ 0x48
 80057a6:	443b      	add	r3, r7
 80057a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057ac:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80057ae:	e005      	b.n	80057bc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b2:	3301      	adds	r3, #1
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d9e8      	bls.n	800578e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80057bc:	4b13      	ldr	r3, [pc, #76]	@ (800580c <RCC_SetFlashLatency+0xf4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 0207 	bic.w	r2, r3, #7
 80057c4:	4911      	ldr	r1, [pc, #68]	@ (800580c <RCC_SetFlashLatency+0xf4>)
 80057c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057cc:	f7fc feee 	bl	80025ac <HAL_GetTick>
 80057d0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057d2:	e008      	b.n	80057e6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057d4:	f7fc feea 	bl	80025ac <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e007      	b.n	80057f6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057e6:	4b09      	ldr	r3, [pc, #36]	@ (800580c <RCC_SetFlashLatency+0xf4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1ef      	bne.n	80057d4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	374c      	adds	r7, #76	@ 0x4c
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd90      	pop	{r4, r7, pc}
 80057fe:	bf00      	nop
 8005800:	0800d52c 	.word	0x0800d52c
 8005804:	0800d53c 	.word	0x0800d53c
 8005808:	0800d548 	.word	0x0800d548
 800580c:	58004000 	.word	0x58004000

08005810 <LL_RCC_LSE_IsEnabled>:
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <LL_RCC_LSE_IsEnabled+0x18>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <LL_RCC_LSE_IsEnabled+0x1a>
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_RCC_LSE_IsReady>:
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d101      	bne.n	800584c <LL_RCC_LSE_IsReady+0x18>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <LL_RCC_LSE_IsReady+0x1a>
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <LL_RCC_SetRFWKPClockSource>:
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005868:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800586c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <LL_RCC_SetSMPSClockSource>:
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4313      	orrs	r3, r2
 800589e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <LL_RCC_SetSMPSPrescaler>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80058b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_RCC_SetUSARTClockSource>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	f023 0203 	bic.w	r2, r3, #3
 80058e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LL_RCC_SetLPUARTClockSource>:
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005910:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005914:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <LL_RCC_SetI2CClockSource>:
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005938:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005944:	43db      	mvns	r3, r3
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <LL_RCC_SetLPTIMClockSource>:
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005972:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	041b      	lsls	r3, r3, #16
 800597c:	43db      	mvns	r3, r3
 800597e:	401a      	ands	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_RCC_SetSAIClockSource>:
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LL_RCC_SetRNGClockSource>:
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80059da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_SetCLK48ClockSource>:
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_RCC_SetUSBClockSource>:
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ffe3 	bl	80059f2 <LL_RCC_SetCLK48ClockSource>
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <LL_RCC_SetADCClockSource>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a44:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_SetRTCClockSource>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_GetRTCClockSource>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <LL_RCC_ForceBackupDomainReset>:
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005abe:	bf00      	nop
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <LL_RCC_PLLSAI1_Enable>:
{
 8005aea:	b480      	push	{r7}
 8005aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005af8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005afc:	6013      	str	r3, [r2, #0]
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_RCC_PLLSAI1_Disable>:
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <LL_RCC_PLLSAI1_IsReady>:
{
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b38:	d101      	bne.n	8005b3e <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b088      	sub	sp, #32
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b52:	2300      	movs	r3, #0
 8005b54:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b56:	2300      	movs	r3, #0
 8005b58:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d034      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b6e:	d021      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b74:	d81b      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b80:	d815      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b8a:	d110      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b9a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b9c:	e00d      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f947 	bl	8005e36 <RCCEx_PLLSAI1_ConfigNP>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bac:	e005      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	77fb      	strb	r3, [r7, #31]
        break;
 8005bb2:	e002      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bba:	7ffb      	ldrb	r3, [r7, #31]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fee8 	bl	800599a <LL_RCC_SetSAIClockSource>
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d046      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005bdc:	f7ff ff56 	bl	8005a8c <LL_RCC_GetRTCClockSource>
 8005be0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d03c      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bec:	f7fe fc68 	bl	80044c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff30 	bl	8005a60 <LL_RCC_SetRTCClockSource>
 8005c00:	e02e      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c0c:	f7ff ff4b 	bl	8005aa6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c10:	f7ff ff5a 	bl	8005ac8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c2c:	f7ff fdf0 	bl	8005810 <LL_RCC_LSE_IsEnabled>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d114      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c36:	f7fc fcb9 	bl	80025ac <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c3c:	e00b      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3e:	f7fc fcb5 	bl	80025ac <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d902      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	77fb      	strb	r3, [r7, #31]
              break;
 8005c54:	e004      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c56:	f7ff fded 	bl	8005834 <LL_RCC_LSE_IsReady>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d1ee      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c60:	7ffb      	ldrb	r3, [r7, #31]
 8005c62:	77bb      	strb	r3, [r7, #30]
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	7ffb      	ldrb	r3, [r7, #31]
 8005c68:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fe2a 	bl	80058d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fe35 	bl	8005900 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fe5d 	bl	8005966 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fe52 	bl	8005966 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d004      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff fe2a 	bl	800592c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fe1f 	bl	800592c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d022      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fe8d 	bl	8005a1e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d1c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d26:	d10b      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f8dd 	bl	8005eec <RCCEx_PLLSAI1_ConfigNQ>
 8005d32:	4603      	mov	r3, r0
 8005d34:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d36:	7ffb      	ldrb	r3, [r7, #31]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005d3c:	7ffb      	ldrb	r3, [r7, #31]
 8005d3e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d02b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d54:	d008      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fe2a 	bl	80059c6 <LL_RCC_SetRNGClockSource>
 8005d72:	e00a      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f7ff fe21 	bl	80059c6 <LL_RCC_SetRNGClockSource>
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f7ff fe34 	bl	80059f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005d92:	d107      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005da2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d022      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fe3d 	bl	8005a34 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ddc:	d10b      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f8dd 	bl	8005fa2 <RCCEx_PLLSAI1_ConfigNR>
 8005de8:	4603      	mov	r3, r0
 8005dea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005dec:	7ffb      	ldrb	r3, [r7, #31]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005df2:	7ffb      	ldrb	r3, [r7, #31]
 8005df4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fd26 	bl	8005858 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fd45 	bl	80058ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd2c 	bl	8005884 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005e2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e42:	f7ff fe61 	bl	8005b08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e46:	f7fc fbb1 	bl	80025ac <HAL_GetTick>
 8005e4a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e4c:	e009      	b.n	8005e62 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e4e:	f7fc fbad 	bl	80025ac <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d902      	bls.n	8005e62 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e004      	b.n	8005e6c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e62:	f7ff fe60 	bl	8005b26 <LL_RCC_PLLSAI1_IsReady>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f0      	bne.n	8005e4e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d137      	bne.n	8005ee2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e86:	4313      	orrs	r3, r2
 8005e88:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ea0:	f7ff fe23 	bl	8005aea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fc fb82 	bl	80025ac <HAL_GetTick>
 8005ea8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eaa:	e009      	b.n	8005ec0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eac:	f7fc fb7e 	bl	80025ac <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d902      	bls.n	8005ec0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ebe:	e004      	b.n	8005eca <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ec0:	f7ff fe31 	bl	8005b26 <LL_RCC_PLLSAI1_IsReady>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d1f0      	bne.n	8005eac <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d108      	bne.n	8005ee2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ef8:	f7ff fe06 	bl	8005b08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005efc:	f7fc fb56 	bl	80025ac <HAL_GetTick>
 8005f00:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f02:	e009      	b.n	8005f18 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f04:	f7fc fb52 	bl	80025ac <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d902      	bls.n	8005f18 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	73fb      	strb	r3, [r7, #15]
      break;
 8005f16:	e004      	b.n	8005f22 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f18:	f7ff fe05 	bl	8005b26 <LL_RCC_PLLSAI1_IsReady>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d137      	bne.n	8005f98 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f52:	4313      	orrs	r3, r2
 8005f54:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f56:	f7ff fdc8 	bl	8005aea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f5a:	f7fc fb27 	bl	80025ac <HAL_GetTick>
 8005f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f60:	e009      	b.n	8005f76 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f62:	f7fc fb23 	bl	80025ac <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d902      	bls.n	8005f76 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	73fb      	strb	r3, [r7, #15]
        break;
 8005f74:	e004      	b.n	8005f80 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f76:	f7ff fdd6 	bl	8005b26 <LL_RCC_PLLSAI1_IsReady>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d1f0      	bne.n	8005f62 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d108      	bne.n	8005f98 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f94:	4313      	orrs	r3, r2
 8005f96:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b084      	sub	sp, #16
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fae:	f7ff fdab 	bl	8005b08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fb2:	f7fc fafb 	bl	80025ac <HAL_GetTick>
 8005fb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fb8:	e009      	b.n	8005fce <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fba:	f7fc faf7 	bl	80025ac <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d902      	bls.n	8005fce <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	73fb      	strb	r3, [r7, #15]
      break;
 8005fcc:	e004      	b.n	8005fd8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fce:	f7ff fdaa 	bl	8005b26 <LL_RCC_PLLSAI1_IsReady>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f0      	bne.n	8005fba <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d137      	bne.n	800604e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006008:	4313      	orrs	r3, r2
 800600a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800600c:	f7ff fd6d 	bl	8005aea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006010:	f7fc facc 	bl	80025ac <HAL_GetTick>
 8006014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006016:	e009      	b.n	800602c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006018:	f7fc fac8 	bl	80025ac <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d902      	bls.n	800602c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	73fb      	strb	r3, [r7, #15]
        break;
 800602a:	e004      	b.n	8006036 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800602c:	f7ff fd7b 	bl	8005b26 <LL_RCC_PLLSAI1_IsReady>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d1f0      	bne.n	8006018 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800603c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800604a:	4313      	orrs	r3, r2
 800604c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e09f      	b.n	80061aa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fb ff8e 	bl	8001fa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800608c:	4b49      	ldr	r3, [pc, #292]	@ (80061b4 <HAL_RTC_Init+0x15c>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d07e      	beq.n	8006196 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	22ca      	movs	r2, #202	@ 0xca
 800609e:	625a      	str	r2, [r3, #36]	@ 0x24
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2253      	movs	r2, #83	@ 0x53
 80060a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8ab 	bl	8006204 <RTC_EnterInitMode>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	22ff      	movs	r2, #255	@ 0xff
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2204      	movs	r2, #4
 80060c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	e067      	b.n	800619a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80060d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060dc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68d2      	ldr	r2, [r2, #12]
 8006104:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6919      	ldr	r1, [r3, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	041a      	lsls	r2, r3, #16
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006128:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0203 	bic.w	r2, r2, #3
 8006138:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69da      	ldr	r2, [r3, #28]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d113      	bne.n	8006188 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f829 	bl	80061b8 <HAL_RTC_WaitForSynchro>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	22ff      	movs	r2, #255	@ 0xff
 8006172:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2204      	movs	r2, #4
 8006178:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e010      	b.n	80061aa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	22ff      	movs	r2, #255	@ 0xff
 800618e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
 8006194:	e001      	b.n	800619a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40002800 	.word	0x40002800

080061b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061d0:	f7fc f9ec 	bl	80025ac <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061d6:	e009      	b.n	80061ec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061d8:	f7fc f9e8 	bl	80025ac <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061e6:	d901      	bls.n	80061ec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e007      	b.n	80061fc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0ee      	beq.n	80061d8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d119      	bne.n	800624e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006222:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006224:	f7fc f9c2 	bl	80025ac <HAL_GetTick>
 8006228:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800622a:	e009      	b.n	8006240 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800622c:	f7fc f9be 	bl	80025ac <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800623a:	d901      	bls.n	8006240 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e007      	b.n	8006250 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ee      	beq.n	800622c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800626e:	2302      	movs	r3, #2
 8006270:	e089      	b.n	8006386 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	22ca      	movs	r2, #202	@ 0xca
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2253      	movs	r2, #83	@ 0x53
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d020      	beq.n	80062e2 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80062a0:	f7fc f984 	bl	80025ac <HAL_GetTick>
 80062a4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062a6:	e015      	b.n	80062d4 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062a8:	f7fc f980 	bl	80025ac <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062b6:	d90d      	bls.n	80062d4 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	22ff      	movs	r2, #255	@ 0xff
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2203      	movs	r2, #3
 80062c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e058      	b.n	8006386 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e2      	bne.n	80062a8 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80062f2:	f7fc f95b 	bl	80025ac <HAL_GetTick>
 80062f6:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062f8:	e015      	b.n	8006326 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062fa:	f7fc f957 	bl	80025ac <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006308:	d90d      	bls.n	8006326 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	22ff      	movs	r2, #255	@ 0xff
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2203      	movs	r2, #3
 8006316:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e02f      	b.n	8006386 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0e2      	beq.n	80062fa <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0207 	bic.w	r2, r2, #7
 8006342:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6899      	ldr	r1, [r3, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800636a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	22ff      	movs	r2, #255	@ 0xff
 8006372:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e049      	b.n	8006434 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fb fe1f 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f000 f9b3 	bl	8006738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e036      	b.n	80064c2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a17      	ldr	r2, [pc, #92]	@ (80064d0 <HAL_TIM_Base_Start_IT+0x94>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x44>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647e:	d115      	bne.n	80064ac <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <HAL_TIM_Base_Start_IT+0x98>)
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b06      	cmp	r3, #6
 8006490:	d015      	beq.n	80064be <HAL_TIM_Base_Start_IT+0x82>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006498:	d011      	beq.n	80064be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064aa:	e008      	b.n	80064be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e000      	b.n	80064c0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	00010007 	.word	0x00010007

080064d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d020      	beq.n	800653c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01b      	beq.n	800653c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0202 	mvn.w	r2, #2
 800650c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8e9 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8db 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f8ec 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d020      	beq.n	8006588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01b      	beq.n	8006588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0204 	mvn.w	r2, #4
 8006558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8c3 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 8006574:	e005      	b.n	8006582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8b5 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f8c6 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d020      	beq.n	80065d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0208 	mvn.w	r2, #8
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f89d 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f88f 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8a0 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d020      	beq.n	8006620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2208      	movs	r2, #8
 80065f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f877 	bl	80066fa <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f869 	bl	80066e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f87a 	bl	800670e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0201 	mvn.w	r2, #1
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb f822 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00c      	beq.n	8006672 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800666a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8dd 	bl	800682c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00c      	beq.n	8006696 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f8d5 	bl	8006840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f834 	bl	8006722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00c      	beq.n	80066de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f06f 0220 	mvn.w	r2, #32
 80066d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f89d 	bl	8006818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a30      	ldr	r2, [pc, #192]	@ (800680c <TIM_Base_SetConfig+0xd4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0x20>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006756:	d108      	bne.n	800676a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800675e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a27      	ldr	r2, [pc, #156]	@ (800680c <TIM_Base_SetConfig+0xd4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0x52>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0x52>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a24      	ldr	r2, [pc, #144]	@ (8006810 <TIM_Base_SetConfig+0xd8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0x52>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a23      	ldr	r2, [pc, #140]	@ (8006814 <TIM_Base_SetConfig+0xdc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a12      	ldr	r2, [pc, #72]	@ (800680c <TIM_Base_SetConfig+0xd4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_Base_SetConfig+0xa0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a11      	ldr	r2, [pc, #68]	@ (8006810 <TIM_Base_SetConfig+0xd8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0xa0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a10      	ldr	r2, [pc, #64]	@ (8006814 <TIM_Base_SetConfig+0xdc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d105      	bne.n	80067fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f023 0201 	bic.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]
  }
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <LL_RCC_GetUSARTClockSource>:
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800685c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006860:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4013      	ands	r3, r2
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <LL_RCC_GetLPUARTClockSource>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006880:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4013      	ands	r3, r2
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e042      	b.n	800692c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fb fbb9 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2224      	movs	r2, #36	@ 0x24
 80068c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fe32 	bl	8007548 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fc07 	bl	80070f8 <UART_SetConfig>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e01b      	b.n	800692c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 feb1 	bl	800768c <UART_CheckIdleState>
 800692a:	4603      	mov	r3, r0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08a      	sub	sp, #40	@ 0x28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006948:	2b20      	cmp	r3, #32
 800694a:	d167      	bne.n	8006a1c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_UART_Transmit_DMA+0x24>
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e060      	b.n	8006a1e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	88fa      	ldrh	r2, [r7, #6]
 8006966:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	88fa      	ldrh	r2, [r7, #6]
 800696e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2221      	movs	r2, #33	@ 0x21
 800697e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d028      	beq.n	80069dc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800698e:	4a26      	ldr	r2, [pc, #152]	@ (8006a28 <HAL_UART_Transmit_DMA+0xf4>)
 8006990:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006996:	4a25      	ldr	r2, [pc, #148]	@ (8006a2c <HAL_UART_Transmit_DMA+0xf8>)
 8006998:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800699e:	4a24      	ldr	r2, [pc, #144]	@ (8006a30 <HAL_UART_Transmit_DMA+0xfc>)
 80069a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069a6:	2200      	movs	r2, #0
 80069a8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b2:	4619      	mov	r1, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3328      	adds	r3, #40	@ 0x28
 80069ba:	461a      	mov	r2, r3
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	f7fd f8a9 	bl	8003b14 <HAL_DMA_Start_IT>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2210      	movs	r2, #16
 80069cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e020      	b.n	8006a1e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2240      	movs	r2, #64	@ 0x40
 80069e2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	613b      	str	r3, [r7, #16]
   return(result);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	623a      	str	r2, [r7, #32]
 8006a06:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	69f9      	ldr	r1, [r7, #28]
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e5      	bne.n	80069e4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e000      	b.n	8006a1e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
  }
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3728      	adds	r7, #40	@ 0x28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	08007a09 	.word	0x08007a09
 8006a2c:	08007aa3 	.word	0x08007aa3
 8006a30:	08007abf 	.word	0x08007abf

08006a34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b0ba      	sub	sp, #232	@ 0xe8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a62:	4013      	ands	r3, r2
 8006a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d11b      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d015      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8300 	beq.w	800709e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
      }
      return;
 8006aa6:	e2fa      	b.n	800709e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8123 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ab2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ab6:	4b8d      	ldr	r3, [pc, #564]	@ (8006cec <HAL_UART_IRQHandler+0x2b8>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ac2:	4b8b      	ldr	r3, [pc, #556]	@ (8006cf0 <HAL_UART_IRQHandler+0x2bc>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8116 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d011      	beq.n	8006afc <HAL_UART_IRQHandler+0xc8>
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	f043 0201 	orr.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d011      	beq.n	8006b2c <HAL_UART_IRQHandler+0xf8>
 8006b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d011      	beq.n	8006b5c <HAL_UART_IRQHandler+0x128>
 8006b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b52:	f043 0202 	orr.w	r2, r3, #2
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d017      	beq.n	8006b98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b78:	4b5c      	ldr	r3, [pc, #368]	@ (8006cec <HAL_UART_IRQHandler+0x2b8>)
 8006b7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2208      	movs	r2, #8
 8006b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8e:	f043 0208 	orr.w	r2, r3, #8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d012      	beq.n	8006bca <HAL_UART_IRQHandler+0x196>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc0:	f043 0220 	orr.w	r2, r3, #32
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8266 	beq.w	80070a2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d105      	bne.n	8006bfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1e:	2b40      	cmp	r3, #64	@ 0x40
 8006c20:	d005      	beq.n	8006c2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d054      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fe84 	bl	800793c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3e:	2b40      	cmp	r3, #64	@ 0x40
 8006c40:	d146      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1d9      	bne.n	8006c42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c9e:	4a15      	ldr	r2, [pc, #84]	@ (8006cf4 <HAL_UART_IRQHandler+0x2c0>)
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fd f80d 	bl	8003cc8 <HAL_DMA_Abort_IT>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d019      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc6:	e00f      	b.n	8006ce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f9ff 	bl	80070cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cce:	e00b      	b.n	8006ce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9fb 	bl	80070cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	e007      	b.n	8006ce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9f7 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006ce6:	e1dc      	b.n	80070a2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce8:	bf00      	nop
    return;
 8006cea:	e1da      	b.n	80070a2 <HAL_UART_IRQHandler+0x66e>
 8006cec:	10000001 	.word	0x10000001
 8006cf0:	04000120 	.word	0x04000120
 8006cf4:	08007b3f 	.word	0x08007b3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	f040 8170 	bne.w	8006fe2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 8169 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8162 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2210      	movs	r2, #16
 8006d24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	f040 80d8 	bne.w	8006ee6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80af 	beq.w	8006eac <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	f080 80a7 	bcs.w	8006eac <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 8087 	bne.w	8006e8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006daa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1da      	bne.n	8006d7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3308      	adds	r3, #8
 8006de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e1      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e3      	bne.n	8006e02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e58:	f023 0310 	bic.w	r3, r3, #16
 8006e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e4      	bne.n	8006e48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fc fec0 	bl	8003c0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f91b 	bl	80070e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006eaa:	e0fc      	b.n	80070a6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	f040 80f5 	bne.w	80070a6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	f040 80eb 	bne.w	80070a6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f8fe 	bl	80070e0 <HAL_UARTEx_RxEventCallback>
      return;
 8006ee4:	e0df      	b.n	80070a6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80d1 	beq.w	80070aa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80cc 	beq.w	80070aa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	623b      	str	r3, [r7, #32]
   return(result);
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f70:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e1      	bne.n	8006f48 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f023 0310 	bic.w	r3, r3, #16
 8006fac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	69b9      	ldr	r1, [r7, #24]
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e4      	bne.n	8006f98 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f880 	bl	80070e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fe0:	e063      	b.n	80070aa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <HAL_UART_IRQHandler+0x5d8>
 8006fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fdd7 	bl	8007bb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800700a:	e051      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007014:	2b00      	cmp	r3, #0
 8007016:	d014      	beq.n	8007042 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007028:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007034:	2b00      	cmp	r3, #0
 8007036:	d03a      	beq.n	80070ae <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
    }
    return;
 8007040:	e035      	b.n	80070ae <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <HAL_UART_IRQHandler+0x62e>
 800704e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fd81 	bl	8007b62 <UART_EndTransmit_IT>
    return;
 8007060:	e026      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <HAL_UART_IRQHandler+0x64e>
 800706e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007072:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fdb0 	bl	8007be0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007080:	e016      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007086:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d010      	beq.n	80070b0 <HAL_UART_IRQHandler+0x67c>
 800708e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007092:	2b00      	cmp	r3, #0
 8007094:	da0c      	bge.n	80070b0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fd98 	bl	8007bcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800709c:	e008      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
      return;
 800709e:	bf00      	nop
 80070a0:	e006      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
    return;
 80070a2:	bf00      	nop
 80070a4:	e004      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
      return;
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
      return;
 80070aa:	bf00      	nop
 80070ac:	e000      	b.n	80070b0 <HAL_UART_IRQHandler+0x67c>
    return;
 80070ae:	bf00      	nop
  }
}
 80070b0:	37e8      	adds	r7, #232	@ 0xe8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop

080070b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070fc:	b08c      	sub	sp, #48	@ 0x30
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	431a      	orrs	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	431a      	orrs	r2, r3
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	4313      	orrs	r3, r2
 800711e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4baf      	ldr	r3, [pc, #700]	@ (80073e4 <UART_SetConfig+0x2ec>)
 8007128:	4013      	ands	r3, r2
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007130:	430b      	orrs	r3, r1
 8007132:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4aa4      	ldr	r2, [pc, #656]	@ (80073e8 <UART_SetConfig+0x2f0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007160:	4313      	orrs	r3, r2
 8007162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800716e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007178:	430b      	orrs	r3, r1
 800717a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	f023 010f 	bic.w	r1, r3, #15
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a95      	ldr	r2, [pc, #596]	@ (80073ec <UART_SetConfig+0x2f4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d125      	bne.n	80071e8 <UART_SetConfig+0xf0>
 800719c:	2003      	movs	r0, #3
 800719e:	f7ff fb59 	bl	8006854 <LL_RCC_GetUSARTClockSource>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d81b      	bhi.n	80071e0 <UART_SetConfig+0xe8>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0xb8>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	080071c9 	.word	0x080071c9
 80071bc:	080071d9 	.word	0x080071d9
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e042      	b.n	800724e <UART_SetConfig+0x156>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e03e      	b.n	800724e <UART_SetConfig+0x156>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e03a      	b.n	800724e <UART_SetConfig+0x156>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e036      	b.n	800724e <UART_SetConfig+0x156>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e032      	b.n	800724e <UART_SetConfig+0x156>
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a7e      	ldr	r2, [pc, #504]	@ (80073e8 <UART_SetConfig+0x2f0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d12a      	bne.n	8007248 <UART_SetConfig+0x150>
 80071f2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80071f6:	f7ff fb3d 	bl	8006874 <LL_RCC_GetLPUARTClockSource>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007200:	d01a      	beq.n	8007238 <UART_SetConfig+0x140>
 8007202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007206:	d81b      	bhi.n	8007240 <UART_SetConfig+0x148>
 8007208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800720c:	d00c      	beq.n	8007228 <UART_SetConfig+0x130>
 800720e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007212:	d815      	bhi.n	8007240 <UART_SetConfig+0x148>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <UART_SetConfig+0x128>
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721c:	d008      	beq.n	8007230 <UART_SetConfig+0x138>
 800721e:	e00f      	b.n	8007240 <UART_SetConfig+0x148>
 8007220:	2300      	movs	r3, #0
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e012      	b.n	800724e <UART_SetConfig+0x156>
 8007228:	2302      	movs	r3, #2
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e00e      	b.n	800724e <UART_SetConfig+0x156>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e00a      	b.n	800724e <UART_SetConfig+0x156>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e006      	b.n	800724e <UART_SetConfig+0x156>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e002      	b.n	800724e <UART_SetConfig+0x156>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a65      	ldr	r2, [pc, #404]	@ (80073e8 <UART_SetConfig+0x2f0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	f040 8097 	bne.w	8007388 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800725a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800725e:	2b08      	cmp	r3, #8
 8007260:	d823      	bhi.n	80072aa <UART_SetConfig+0x1b2>
 8007262:	a201      	add	r2, pc, #4	@ (adr r2, 8007268 <UART_SetConfig+0x170>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	0800728d 	.word	0x0800728d
 800726c:	080072ab 	.word	0x080072ab
 8007270:	08007295 	.word	0x08007295
 8007274:	080072ab 	.word	0x080072ab
 8007278:	0800729b 	.word	0x0800729b
 800727c:	080072ab 	.word	0x080072ab
 8007280:	080072ab 	.word	0x080072ab
 8007284:	080072ab 	.word	0x080072ab
 8007288:	080072a3 	.word	0x080072a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800728c:	f7fe f9e0 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007292:	e010      	b.n	80072b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007294:	4b56      	ldr	r3, [pc, #344]	@ (80073f0 <UART_SetConfig+0x2f8>)
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007298:	e00d      	b.n	80072b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729a:	f7fe f959 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 800729e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a0:	e009      	b.n	80072b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a8:	e005      	b.n	80072b6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 812b 	beq.w	8007514 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	4a4c      	ldr	r2, [pc, #304]	@ (80073f4 <UART_SetConfig+0x2fc>)
 80072c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d305      	bcc.n	80072ee <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d903      	bls.n	80072f6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072f4:	e10e      	b.n	8007514 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	2200      	movs	r2, #0
 80072fa:	60bb      	str	r3, [r7, #8]
 80072fc:	60fa      	str	r2, [r7, #12]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007302:	4a3c      	ldr	r2, [pc, #240]	@ (80073f4 <UART_SetConfig+0x2fc>)
 8007304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007308:	b29b      	uxth	r3, r3
 800730a:	2200      	movs	r2, #0
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007314:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007318:	f7f9 fa70 	bl	80007fc <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	020b      	lsls	r3, r1, #8
 800732e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007332:	0202      	lsls	r2, r0, #8
 8007334:	6979      	ldr	r1, [r7, #20]
 8007336:	6849      	ldr	r1, [r1, #4]
 8007338:	0849      	lsrs	r1, r1, #1
 800733a:	2000      	movs	r0, #0
 800733c:	460c      	mov	r4, r1
 800733e:	4605      	mov	r5, r0
 8007340:	eb12 0804 	adds.w	r8, r2, r4
 8007344:	eb43 0905 	adc.w	r9, r3, r5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	469a      	mov	sl, r3
 8007350:	4693      	mov	fp, r2
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	4640      	mov	r0, r8
 8007358:	4649      	mov	r1, r9
 800735a:	f7f9 fa4f 	bl	80007fc <__aeabi_uldivmod>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4613      	mov	r3, r2
 8007364:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800736c:	d308      	bcc.n	8007380 <UART_SetConfig+0x288>
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007374:	d204      	bcs.n	8007380 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a3a      	ldr	r2, [r7, #32]
 800737c:	60da      	str	r2, [r3, #12]
 800737e:	e0c9      	b.n	8007514 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007386:	e0c5      	b.n	8007514 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007390:	d16d      	bne.n	800746e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007396:	3b01      	subs	r3, #1
 8007398:	2b07      	cmp	r3, #7
 800739a:	d82d      	bhi.n	80073f8 <UART_SetConfig+0x300>
 800739c:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <UART_SetConfig+0x2ac>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073f9 	.word	0x080073f9
 80073b0:	080073d3 	.word	0x080073d3
 80073b4:	080073f9 	.word	0x080073f9
 80073b8:	080073f9 	.word	0x080073f9
 80073bc:	080073f9 	.word	0x080073f9
 80073c0:	080073db 	.word	0x080073db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c4:	f7fe f95a 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ca:	e01b      	b.n	8007404 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073cc:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <UART_SetConfig+0x2f8>)
 80073ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073d0:	e018      	b.n	8007404 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d2:	f7fe f8bd 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80073d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073d8:	e014      	b.n	8007404 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073e0:	e010      	b.n	8007404 <UART_SetConfig+0x30c>
 80073e2:	bf00      	nop
 80073e4:	cfff69f3 	.word	0xcfff69f3
 80073e8:	40008000 	.word	0x40008000
 80073ec:	40013800 	.word	0x40013800
 80073f0:	00f42400 	.word	0x00f42400
 80073f4:	0800e740 	.word	0x0800e740
      default:
        pclk = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8084 	beq.w	8007514 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	4a4b      	ldr	r2, [pc, #300]	@ (8007540 <UART_SetConfig+0x448>)
 8007412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007416:	461a      	mov	r2, r3
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	fbb3 f3f2 	udiv	r3, r3, r2
 800741e:	005a      	lsls	r2, r3, #1
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	085b      	lsrs	r3, r3, #1
 8007426:	441a      	add	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d916      	bls.n	8007466 <UART_SetConfig+0x36e>
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743e:	d212      	bcs.n	8007466 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f023 030f 	bic.w	r3, r3, #15
 8007448:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	b29b      	uxth	r3, r3
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	b29a      	uxth	r2, r3
 8007456:	8bfb      	ldrh	r3, [r7, #30]
 8007458:	4313      	orrs	r3, r2
 800745a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	8bfa      	ldrh	r2, [r7, #30]
 8007462:	60da      	str	r2, [r3, #12]
 8007464:	e056      	b.n	8007514 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800746c:	e052      	b.n	8007514 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800746e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007472:	3b01      	subs	r3, #1
 8007474:	2b07      	cmp	r3, #7
 8007476:	d822      	bhi.n	80074be <UART_SetConfig+0x3c6>
 8007478:	a201      	add	r2, pc, #4	@ (adr r2, 8007480 <UART_SetConfig+0x388>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	080074a1 	.word	0x080074a1
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074bf 	.word	0x080074bf
 800748c:	080074af 	.word	0x080074af
 8007490:	080074bf 	.word	0x080074bf
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074bf 	.word	0x080074bf
 800749c:	080074b7 	.word	0x080074b7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074a0:	f7fe f8ec 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 80074a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074a6:	e010      	b.n	80074ca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a8:	4b26      	ldr	r3, [pc, #152]	@ (8007544 <UART_SetConfig+0x44c>)
 80074aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074ac:	e00d      	b.n	80074ca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ae:	f7fe f84f 	bl	8005550 <HAL_RCC_GetSysClockFreq>
 80074b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b4:	e009      	b.n	80074ca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074bc:	e005      	b.n	80074ca <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074c8:	bf00      	nop
    }

    if (pclk != 0U)
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d021      	beq.n	8007514 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007540 <UART_SetConfig+0x448>)
 80074d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074da:	461a      	mov	r2, r3
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	fbb3 f2f2 	udiv	r2, r3, r2
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	441a      	add	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	2b0f      	cmp	r3, #15
 80074f8:	d909      	bls.n	800750e <UART_SetConfig+0x416>
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007500:	d205      	bcs.n	800750e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	b29a      	uxth	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60da      	str	r2, [r3, #12]
 800750c:	e002      	b.n	8007514 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2201      	movs	r2, #1
 8007518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2201      	movs	r2, #1
 8007520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2200      	movs	r2, #0
 8007528:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007530:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007534:	4618      	mov	r0, r3
 8007536:	3730      	adds	r7, #48	@ 0x30
 8007538:	46bd      	mov	sp, r7
 800753a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800753e:	bf00      	nop
 8007540:	0800e740 	.word	0x0800e740
 8007544:	00f42400 	.word	0x00f42400

08007548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01a      	beq.n	800765e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007646:	d10a      	bne.n	800765e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]
  }
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b098      	sub	sp, #96	@ 0x60
 8007690:	af02      	add	r7, sp, #8
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800769c:	f7fa ff86 	bl	80025ac <HAL_GetTick>
 80076a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d12f      	bne.n	8007710 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b8:	2200      	movs	r2, #0
 80076ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f88e 	bl	80077e0 <UART_WaitOnFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d022      	beq.n	8007710 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076de:	653b      	str	r3, [r7, #80]	@ 0x50
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f0:	e841 2300 	strex	r3, r2, [r1]
 80076f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e6      	bne.n	80076ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e063      	b.n	80077d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d149      	bne.n	80077b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800771e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007726:	2200      	movs	r2, #0
 8007728:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f857 	bl	80077e0 <UART_WaitOnFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d03c      	beq.n	80077b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	623b      	str	r3, [r7, #32]
   return(result);
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800774c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007756:	633b      	str	r3, [r7, #48]	@ 0x30
 8007758:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800775c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e6      	bne.n	8007738 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	60fb      	str	r3, [r7, #12]
   return(result);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800778a:	61fa      	str	r2, [r7, #28]
 800778c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	69b9      	ldr	r1, [r7, #24]
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	617b      	str	r3, [r7, #20]
   return(result);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e5      	bne.n	800776a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e012      	b.n	80077d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3758      	adds	r7, #88	@ 0x58
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f0:	e04f      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077f8:	d04b      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fa:	f7fa fed7 	bl	80025ac <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	429a      	cmp	r2, r3
 8007808:	d302      	bcc.n	8007810 <UART_WaitOnFlagUntilTimeout+0x30>
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e04e      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	d037      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b80      	cmp	r3, #128	@ 0x80
 8007826:	d034      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b40      	cmp	r3, #64	@ 0x40
 800782c:	d031      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b08      	cmp	r3, #8
 800783a:	d110      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2208      	movs	r2, #8
 8007842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f879 	bl	800793c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2208      	movs	r2, #8
 800784e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e029      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800786c:	d111      	bne.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f85f 	bl	800793c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e00f      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d0a0      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b08f      	sub	sp, #60	@ 0x3c
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e6      	bne.n	80078c2 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	60bb      	str	r3, [r7, #8]
   return(result);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800790a:	633b      	str	r3, [r7, #48]	@ 0x30
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007914:	61ba      	str	r2, [r7, #24]
 8007916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6979      	ldr	r1, [r7, #20]
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	613b      	str	r3, [r7, #16]
   return(result);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e5      	bne.n	80078f4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007930:	bf00      	nop
 8007932:	373c      	adds	r7, #60	@ 0x3c
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b095      	sub	sp, #84	@ 0x54
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007962:	643b      	str	r3, [r7, #64]	@ 0x40
 8007964:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007968:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e6      	bne.n	8007944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	61fb      	str	r3, [r7, #28]
   return(result);
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800799a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e3      	bne.n	8007976 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d118      	bne.n	80079e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f023 0310 	bic.w	r3, r3, #16
 80079ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6979      	ldr	r1, [r7, #20]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	613b      	str	r3, [r7, #16]
   return(result);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e6      	bne.n	80079b6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079fc:	bf00      	nop
 80079fe:	3754      	adds	r7, #84	@ 0x54
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b090      	sub	sp, #64	@ 0x40
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d137      	bne.n	8007a94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	69b9      	ldr	r1, [r7, #24]
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e6      	bne.n	8007a60 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a92:	e002      	b.n	8007a9a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007a94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007a96:	f7f9 fd53 	bl	8001540 <HAL_UART_TxCpltCallback>
}
 8007a9a:	bf00      	nop
 8007a9c:	3740      	adds	r7, #64	@ 0x40
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff fb01 	bl	80070b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae6:	2b80      	cmp	r3, #128	@ 0x80
 8007ae8:	d109      	bne.n	8007afe <UART_DMAError+0x40>
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b21      	cmp	r3, #33	@ 0x21
 8007aee:	d106      	bne.n	8007afe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007af8:	6978      	ldr	r0, [r7, #20]
 8007afa:	f7ff fede 	bl	80078ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b08:	2b40      	cmp	r3, #64	@ 0x40
 8007b0a:	d109      	bne.n	8007b20 <UART_DMAError+0x62>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b22      	cmp	r3, #34	@ 0x22
 8007b10:	d106      	bne.n	8007b20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007b1a:	6978      	ldr	r0, [r7, #20]
 8007b1c:	f7ff ff0e 	bl	800793c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b26:	f043 0210 	orr.w	r2, r3, #16
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b30:	6978      	ldr	r0, [r7, #20]
 8007b32:	f7ff facb 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b36:	bf00      	nop
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f7ff fab9 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b088      	sub	sp, #32
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	61bb      	str	r3, [r7, #24]
 8007b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	613b      	str	r3, [r7, #16]
   return(result);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7f9 fcc8 	bl	8001540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb0:	bf00      	nop
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_UARTEx_DisableFifoMode+0x16>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e027      	b.n	8007c5a <HAL_UARTEx_DisableFifoMode+0x66>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2224      	movs	r2, #36	@ 0x24
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e02d      	b.n	8007cda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	@ 0x24
 8007c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f850 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e02d      	b.n	8007d56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2224      	movs	r2, #36	@ 0x24
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0201 	bic.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f812 	bl	8007d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d108      	bne.n	8007d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d80:	e031      	b.n	8007de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d82:	2308      	movs	r3, #8
 8007d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d86:	2308      	movs	r3, #8
 8007d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	0e5b      	lsrs	r3, r3, #25
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	0f5b      	lsrs	r3, r3, #29
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	7b3a      	ldrb	r2, [r7, #12]
 8007dae:	4911      	ldr	r1, [pc, #68]	@ (8007df4 <UARTEx_SetNbDataToProcess+0x94>)
 8007db0:	5c8a      	ldrb	r2, [r1, r2]
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007db6:	7b3a      	ldrb	r2, [r7, #12]
 8007db8:	490f      	ldr	r1, [pc, #60]	@ (8007df8 <UARTEx_SetNbDataToProcess+0x98>)
 8007dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	7b7a      	ldrb	r2, [r7, #13]
 8007dcc:	4909      	ldr	r1, [pc, #36]	@ (8007df4 <UARTEx_SetNbDataToProcess+0x94>)
 8007dce:	5c8a      	ldrb	r2, [r1, r2]
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dd4:	7b7a      	ldrb	r2, [r7, #13]
 8007dd6:	4908      	ldr	r1, [pc, #32]	@ (8007df8 <UARTEx_SetNbDataToProcess+0x98>)
 8007dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	0800e758 	.word	0x0800e758
 8007df8:	0800e760 	.word	0x0800e760

08007dfc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e06:	f107 0308 	add.w	r3, r7, #8
 8007e0a:	2218      	movs	r2, #24
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 f982 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e14:	233f      	movs	r3, #63	@ 0x3f
 8007e16:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007e18:	2381      	movs	r3, #129	@ 0x81
 8007e1a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e1c:	1dfb      	adds	r3, r7, #7
 8007e1e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e20:	2301      	movs	r3, #1
 8007e22:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 fbfe 	bl	800962c <hci_send_req>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da01      	bge.n	8007e3a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e36:	23ff      	movs	r3, #255	@ 0xff
 8007e38:	e000      	b.n	8007e3c <aci_gap_set_non_discoverable+0x40>
  return status;
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8007e44:	b5b0      	push	{r4, r5, r7, lr}
 8007e46:	b0ce      	sub	sp, #312	@ 0x138
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4619      	mov	r1, r3
 8007e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e56:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007e66:	4622      	mov	r2, r4
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e6e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8007e72:	4602      	mov	r2, r0
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e7a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8007e7e:	460a      	mov	r2, r1
 8007e80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007e8a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007e8e:	3308      	adds	r3, #8
 8007e90:	f107 0210 	add.w	r2, r7, #16
 8007e94:	4413      	add	r3, r2
 8007e96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007e9a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007e9e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3309      	adds	r3, #9
 8007ea6:	f107 0210 	add.w	r2, r7, #16
 8007eaa:	4413      	add	r3, r2
 8007eac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007eb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eb4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ec6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007eca:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007ece:	7812      	ldrb	r2, [r2, #0]
 8007ed0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007edc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ee0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007ee4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8007ee8:	8812      	ldrh	r2, [r2, #0]
 8007eea:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ef2:	3302      	adds	r3, #2
 8007ef4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007ef8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007efc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007f00:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8007f04:	8812      	ldrh	r2, [r2, #0]
 8007f06:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f0e:	3302      	adds	r3, #2
 8007f10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007f1c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f28:	3301      	adds	r3, #1
 8007f2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f32:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8007f36:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f46:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007f4a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f50:	3301      	adds	r3, #1
 8007f52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8007f60:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 f8c7 	bl	80090f8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007f6a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8007f6e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007f72:	4413      	add	r3, r2
 8007f74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007f78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f7c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007f80:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007f86:	3301      	adds	r3, #1
 8007f88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007f8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f90:	3301      	adds	r3, #1
 8007f92:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8007f96:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f8ac 	bl	80090f8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007fa0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8007fa4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007fa8:	4413      	add	r3, r2
 8007faa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8007fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007fb2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8007fb6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8007fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007fc6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8007fca:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007fda:	2218      	movs	r2, #24
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 f89a 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fe4:	233f      	movs	r3, #63	@ 0x3f
 8007fe6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8007fea:	2383      	movs	r3, #131	@ 0x83
 8007fec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007ff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ffc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008000:	f107 030f 	add.w	r3, r7, #15
 8008004:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008008:	2301      	movs	r3, #1
 800800a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800800e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fb09 	bl	800962c <hci_send_req>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	da01      	bge.n	8008024 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008020:	23ff      	movs	r3, #255	@ 0xff
 8008022:	e004      	b.n	800802e <aci_gap_set_discoverable+0x1ea>
  return status;
 8008024:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008028:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800802c:	781b      	ldrb	r3, [r3, #0]
}
 800802e:	4618      	mov	r0, r3
 8008030:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008034:	46bd      	mov	sp, r7
 8008036:	bdb0      	pop	{r4, r5, r7, pc}

08008038 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b0cc      	sub	sp, #304	@ 0x130
 800803c:	af00      	add	r7, sp, #0
 800803e:	4602      	mov	r2, r0
 8008040:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008044:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008048:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800804a:	f107 0310 	add.w	r3, r7, #16
 800804e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008056:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8008064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008068:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800806c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008074:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008078:	3301      	adds	r3, #1
 800807a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800807e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008082:	2218      	movs	r2, #24
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f001 f846 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 800808c:	233f      	movs	r3, #63	@ 0x3f
 800808e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8008092:	2385      	movs	r3, #133	@ 0x85
 8008094:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008098:	f107 0310 	add.w	r3, r7, #16
 800809c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80080a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80080a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80080a8:	f107 030f 	add.w	r3, r7, #15
 80080ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80080b0:	2301      	movs	r3, #1
 80080b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f001 fab5 	bl	800962c <hci_send_req>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da01      	bge.n	80080cc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80080c8:	23ff      	movs	r3, #255	@ 0xff
 80080ca:	e004      	b.n	80080d6 <aci_gap_set_io_capability+0x9e>
  return status;
 80080cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80080d4:	781b      	ldrb	r3, [r3, #0]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80080e0:	b5b0      	push	{r4, r5, r7, lr}
 80080e2:	b0cc      	sub	sp, #304	@ 0x130
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4605      	mov	r5, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	4610      	mov	r0, r2
 80080ec:	4619      	mov	r1, r3
 80080ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080f2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80080f6:	462a      	mov	r2, r5
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80080fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008102:	4622      	mov	r2, r4
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800810a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800810e:	4602      	mov	r2, r0
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008116:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800811a:	460a      	mov	r2, r1
 800811c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800811e:	f107 0310 	add.w	r3, r7, #16
 8008122:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008126:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800812a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800812e:	2200      	movs	r2, #0
 8008130:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008138:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800813c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008140:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008144:	7812      	ldrb	r2, [r2, #0]
 8008146:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008148:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800814c:	3301      	adds	r3, #1
 800814e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008156:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800815a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008166:	3301      	adds	r3, #1
 8008168:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800816c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008170:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008174:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800817c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008180:	3301      	adds	r3, #1
 8008182:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008186:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800818a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800818e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008196:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800819a:	3301      	adds	r3, #1
 800819c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80081a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081a4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80081a8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80081aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081ae:	3301      	adds	r3, #1
 80081b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80081b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081b8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80081bc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80081be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081c2:	3301      	adds	r3, #1
 80081c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80081c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081cc:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80081d0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80081d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081d6:	3301      	adds	r3, #1
 80081d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80081dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80081e4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80081e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80081ec:	3304      	adds	r3, #4
 80081ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80081f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80081f6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80081fa:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80081fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008200:	3301      	adds	r3, #1
 8008202:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008206:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800820a:	2218      	movs	r2, #24
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f000 ff82 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008214:	233f      	movs	r3, #63	@ 0x3f
 8008216:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800821a:	2386      	movs	r3, #134	@ 0x86
 800821c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008228:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800822c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008230:	f107 030f 	add.w	r3, r7, #15
 8008234:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008238:	2301      	movs	r3, #1
 800823a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800823e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f001 f9f1 	bl	800962c <hci_send_req>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	da01      	bge.n	8008254 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008250:	23ff      	movs	r3, #255	@ 0xff
 8008252:	e004      	b.n	800825e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008254:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008258:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800825c:	781b      	ldrb	r3, [r3, #0]
}
 800825e:	4618      	mov	r0, r3
 8008260:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008264:	46bd      	mov	sp, r7
 8008266:	bdb0      	pop	{r4, r5, r7, pc}

08008268 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b0cc      	sub	sp, #304	@ 0x130
 800826c:	af00      	add	r7, sp, #0
 800826e:	4602      	mov	r2, r0
 8008270:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008274:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008278:	6019      	str	r1, [r3, #0]
 800827a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800827e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008282:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008284:	f107 0310 	add.w	r3, r7, #16
 8008288:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800828c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008290:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008294:	2200      	movs	r2, #0
 8008296:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800829e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80082a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80082a6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80082aa:	8812      	ldrh	r2, [r2, #0]
 80082ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082b2:	3302      	adds	r3, #2
 80082b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80082b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80082bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80082c0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80082ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082ce:	3304      	adds	r3, #4
 80082d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80082d8:	2218      	movs	r2, #24
 80082da:	2100      	movs	r1, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 ff1b 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082e2:	233f      	movs	r3, #63	@ 0x3f
 80082e4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80082e8:	2388      	movs	r3, #136	@ 0x88
 80082ea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80082ee:	f107 0310 	add.w	r3, r7, #16
 80082f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80082f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80082fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80082fe:	f107 030f 	add.w	r3, r7, #15
 8008302:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800830c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 f98a 	bl	800962c <hci_send_req>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	da01      	bge.n	8008322 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800831e:	23ff      	movs	r3, #255	@ 0xff
 8008320:	e004      	b.n	800832c <aci_gap_pass_key_resp+0xc4>
  return status;
 8008322:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008326:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800832a:	781b      	ldrb	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008336:	b590      	push	{r4, r7, lr}
 8008338:	b0cd      	sub	sp, #308	@ 0x134
 800833a:	af00      	add	r7, sp, #0
 800833c:	4604      	mov	r4, r0
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008346:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008350:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008354:	4622      	mov	r2, r4
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800835c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008360:	4602      	mov	r2, r0
 8008362:	701a      	strb	r2, [r3, #0]
 8008364:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008368:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800836c:	460a      	mov	r2, r1
 800836e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008378:	f107 0308 	add.w	r3, r7, #8
 800837c:	2207      	movs	r2, #7
 800837e:	2100      	movs	r1, #0
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fec9 	bl	8009118 <Osal_MemSet>
  int index_input = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800838c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008390:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008394:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008398:	7812      	ldrb	r2, [r2, #0]
 800839a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800839c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083a0:	3301      	adds	r3, #1
 80083a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80083a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80083ae:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80083b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083ba:	3301      	adds	r3, #1
 80083bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80083c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80083c8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80083d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80083d4:	3301      	adds	r3, #1
 80083d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80083de:	2218      	movs	r2, #24
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fe98 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083e8:	233f      	movs	r3, #63	@ 0x3f
 80083ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80083ee:	238a      	movs	r3, #138	@ 0x8a
 80083f0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80083f4:	f107 0310 	add.w	r3, r7, #16
 80083f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80083fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008400:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008404:	f107 0308 	add.w	r3, r7, #8
 8008408:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800840c:	2307      	movs	r3, #7
 800840e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f001 f907 	bl	800962c <hci_send_req>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	da01      	bge.n	8008428 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008424:	23ff      	movs	r3, #255	@ 0xff
 8008426:	e02e      	b.n	8008486 <aci_gap_init+0x150>
  if ( resp.Status )
 8008428:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800842c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d005      	beq.n	8008442 <aci_gap_init+0x10c>
    return resp.Status;
 8008436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800843a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	e021      	b.n	8008486 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008446:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800844a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800844e:	b29a      	uxth	r2, r3
 8008450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008454:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800845c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008460:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008464:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008468:	b29a      	uxth	r2, r3
 800846a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800846e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008470:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008474:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008478:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800847c:	b29a      	uxth	r2, r3
 800847e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008482:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800848c:	46bd      	mov	sp, r7
 800848e:	bd90      	pop	{r4, r7, pc}

08008490 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b0cc      	sub	sp, #304	@ 0x130
 8008494:	af00      	add	r7, sp, #0
 8008496:	4602      	mov	r2, r0
 8008498:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800849c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80084a0:	6019      	str	r1, [r3, #0]
 80084a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80084aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80084ac:	f107 0310 	add.w	r3, r7, #16
 80084b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80084b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80084c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80084ce:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80084d2:	7812      	ldrb	r2, [r2, #0]
 80084d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80084da:	3301      	adds	r3, #1
 80084dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084e4:	1c58      	adds	r0, r3, #1
 80084e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084ea:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80084f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80084f8:	6819      	ldr	r1, [r3, #0]
 80084fa:	f000 fdfd 	bl	80090f8 <Osal_MemCpy>
  index_input += AdvDataLen;
 80084fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008502:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800850c:	4413      	add	r3, r2
 800850e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008516:	2218      	movs	r2, #24
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fdfc 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008520:	233f      	movs	r3, #63	@ 0x3f
 8008522:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008526:	238e      	movs	r3, #142	@ 0x8e
 8008528:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800852c:	f107 0310 	add.w	r3, r7, #16
 8008530:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008534:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008538:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800853c:	f107 030f 	add.w	r3, r7, #15
 8008540:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008544:	2301      	movs	r3, #1
 8008546:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800854a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800854e:	2100      	movs	r1, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f001 f86b 	bl	800962c <hci_send_req>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	da01      	bge.n	8008560 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800855c:	23ff      	movs	r3, #255	@ 0xff
 800855e:	e004      	b.n	800856a <aci_gap_update_adv_data+0xda>
  return status;
 8008560:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008564:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008568:	781b      	ldrb	r3, [r3, #0]
}
 800856a:	4618      	mov	r0, r3
 800856c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	2218      	movs	r2, #24
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fdc6 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 800858c:	233f      	movs	r3, #63	@ 0x3f
 800858e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008590:	2392      	movs	r3, #146	@ 0x92
 8008592:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008594:	1dfb      	adds	r3, r7, #7
 8008596:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008598:	2301      	movs	r3, #1
 800859a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 f842 	bl	800962c <hci_send_req>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da01      	bge.n	80085b2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085ae:	23ff      	movs	r3, #255	@ 0xff
 80085b0:	e000      	b.n	80085b4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80085b2:	79fb      	ldrb	r3, [r7, #7]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b0cc      	sub	sp, #304	@ 0x130
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4602      	mov	r2, r0
 80085c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80085cc:	801a      	strh	r2, [r3, #0]
 80085ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085d2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80085d6:	460a      	mov	r2, r1
 80085d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80085da:	f107 0310 	add.w	r3, r7, #16
 80085de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80085e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80085e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80085f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80085fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008600:	8812      	ldrh	r2, [r2, #0]
 8008602:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008604:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008608:	3302      	adds	r3, #2
 800860a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800860e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008612:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008616:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800861e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008622:	3301      	adds	r3, #1
 8008624:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008628:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800862c:	2218      	movs	r2, #24
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fd71 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008636:	233f      	movs	r3, #63	@ 0x3f
 8008638:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800863c:	23a5      	movs	r3, #165	@ 0xa5
 800863e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008642:	f107 0310 	add.w	r3, r7, #16
 8008646:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800864a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800864e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008652:	f107 030f 	add.w	r3, r7, #15
 8008656:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800865a:	2301      	movs	r3, #1
 800865c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f000 ffe0 	bl	800962c <hci_send_req>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	da01      	bge.n	8008676 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008672:	23ff      	movs	r3, #255	@ 0xff
 8008674:	e004      	b.n	8008680 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800867a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800867e:	781b      	ldrb	r3, [r3, #0]
}
 8008680:	4618      	mov	r0, r3
 8008682:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b088      	sub	sp, #32
 800868e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	2218      	movs	r2, #24
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fd3b 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086a2:	233f      	movs	r3, #63	@ 0x3f
 80086a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80086a6:	f240 1301 	movw	r3, #257	@ 0x101
 80086aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80086ac:	1dfb      	adds	r3, r7, #7
 80086ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80086b0:	2301      	movs	r3, #1
 80086b2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	2100      	movs	r1, #0
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 ffb6 	bl	800962c <hci_send_req>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	da01      	bge.n	80086ca <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80086c6:	23ff      	movs	r3, #255	@ 0xff
 80086c8:	e000      	b.n	80086cc <aci_gatt_init+0x42>
  return status;
 80086ca:	79fb      	ldrb	r3, [r7, #7]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3720      	adds	r7, #32
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80086d4:	b590      	push	{r4, r7, lr}
 80086d6:	b0cf      	sub	sp, #316	@ 0x13c
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80086e0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80086e4:	6001      	str	r1, [r0, #0]
 80086e6:	4610      	mov	r0, r2
 80086e8:	4619      	mov	r1, r3
 80086ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086ee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80086f2:	4622      	mov	r2, r4
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086fa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80086fe:	4602      	mov	r2, r0
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008706:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800870a:	460a      	mov	r2, r1
 800870c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800870e:	f107 0310 	add.w	r3, r7, #16
 8008712:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800871a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d00a      	beq.n	800873a <aci_gatt_add_service+0x66>
 8008724:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008728:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d101      	bne.n	8008736 <aci_gatt_add_service+0x62>
 8008732:	2311      	movs	r3, #17
 8008734:	e002      	b.n	800873c <aci_gatt_add_service+0x68>
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <aci_gatt_add_service+0x68>
 800873a:	2303      	movs	r3, #3
 800873c:	f107 0210 	add.w	r2, r7, #16
 8008740:	4413      	add	r3, r2
 8008742:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	2203      	movs	r2, #3
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fce2 	bl	8009118 <Osal_MemSet>
  int index_input = 0;
 8008754:	2300      	movs	r3, #0
 8008756:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800875a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800875e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008762:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800876a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800876e:	3301      	adds	r3, #1
 8008770:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008778:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d002      	beq.n	8008788 <aci_gatt_add_service+0xb4>
 8008782:	2b02      	cmp	r3, #2
 8008784:	d004      	beq.n	8008790 <aci_gatt_add_service+0xbc>
 8008786:	e007      	b.n	8008798 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008788:	2302      	movs	r3, #2
 800878a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800878e:	e005      	b.n	800879c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008790:	2310      	movs	r3, #16
 8008792:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8008796:	e001      	b.n	800879c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008798:	2397      	movs	r3, #151	@ 0x97
 800879a:	e06c      	b.n	8008876 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800879c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80087a0:	1c58      	adds	r0, r3, #1
 80087a2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80087a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80087ae:	6819      	ldr	r1, [r3, #0]
 80087b0:	f000 fca2 	bl	80090f8 <Osal_MemCpy>
    index_input += size;
 80087b4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80087b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80087bc:	4413      	add	r3, r2
 80087be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80087c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087c6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80087ca:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80087ce:	7812      	ldrb	r2, [r2, #0]
 80087d0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80087d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087d6:	3301      	adds	r3, #1
 80087d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80087e0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80087e4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80087ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087f0:	3301      	adds	r3, #1
 80087f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80087fa:	2218      	movs	r2, #24
 80087fc:	2100      	movs	r1, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fc8a 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008804:	233f      	movs	r3, #63	@ 0x3f
 8008806:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800880a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800880e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008812:	f107 0310 	add.w	r3, r7, #16
 8008816:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800881a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800881e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008822:	f107 030c 	add.w	r3, r7, #12
 8008826:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800882a:	2303      	movs	r3, #3
 800882c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008830:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fef8 	bl	800962c <hci_send_req>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	da01      	bge.n	8008846 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008842:	23ff      	movs	r3, #255	@ 0xff
 8008844:	e017      	b.n	8008876 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008846:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800884a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008854:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008858:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	e00a      	b.n	8008876 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008860:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008864:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008868:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800886c:	b29a      	uxth	r2, r3
 800886e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008872:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800887c:	46bd      	mov	sp, r7
 800887e:	bd90      	pop	{r4, r7, pc}

08008880 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008880:	b590      	push	{r4, r7, lr}
 8008882:	b0d1      	sub	sp, #324	@ 0x144
 8008884:	af00      	add	r7, sp, #0
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800888e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8008892:	600a      	str	r2, [r1, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800889a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800889e:	4622      	mov	r2, r4
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088a6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80088aa:	4602      	mov	r2, r0
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088b2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80088b6:	460a      	mov	r2, r1
 80088b8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80088ba:	f107 0318 	add.w	r3, r7, #24
 80088be:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80088c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088c6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d00a      	beq.n	80088e6 <aci_gatt_add_char+0x66>
 80088d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80088d4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d101      	bne.n	80088e2 <aci_gatt_add_char+0x62>
 80088de:	2313      	movs	r3, #19
 80088e0:	e002      	b.n	80088e8 <aci_gatt_add_char+0x68>
 80088e2:	2303      	movs	r3, #3
 80088e4:	e000      	b.n	80088e8 <aci_gatt_add_char+0x68>
 80088e6:	2305      	movs	r3, #5
 80088e8:	f107 0218 	add.w	r2, r7, #24
 80088ec:	4413      	add	r3, r2
 80088ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80088f2:	f107 0314 	add.w	r3, r7, #20
 80088f6:	2203      	movs	r2, #3
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fc0c 	bl	8009118 <Osal_MemSet>
  int index_input = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8008906:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800890a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800890e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008912:	8812      	ldrh	r2, [r2, #0]
 8008914:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008916:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800891a:	3302      	adds	r3, #2
 800891c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008920:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008924:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008928:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008930:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008934:	3301      	adds	r3, #1
 8008936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800893a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800893e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d002      	beq.n	800894e <aci_gatt_add_char+0xce>
 8008948:	2b02      	cmp	r3, #2
 800894a:	d004      	beq.n	8008956 <aci_gatt_add_char+0xd6>
 800894c:	e007      	b.n	800895e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800894e:	2302      	movs	r3, #2
 8008950:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8008954:	e005      	b.n	8008962 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008956:	2310      	movs	r3, #16
 8008958:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800895c:	e001      	b.n	8008962 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800895e:	2397      	movs	r3, #151	@ 0x97
 8008960:	e091      	b.n	8008a86 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008962:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008966:	1cd8      	adds	r0, r3, #3
 8008968:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800896c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008970:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008974:	6819      	ldr	r1, [r3, #0]
 8008976:	f000 fbbf 	bl	80090f8 <Osal_MemCpy>
    index_input += size;
 800897a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800897e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008982:	4413      	add	r3, r2
 8008984:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008988:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800898c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8008990:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8008994:	8812      	ldrh	r2, [r2, #0]
 8008996:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008998:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800899c:	3302      	adds	r3, #2
 800899e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80089a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089a6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80089aa:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80089ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089b0:	3301      	adds	r3, #1
 80089b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80089b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089ba:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80089be:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80089c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089c4:	3301      	adds	r3, #1
 80089c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80089ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089ce:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80089d2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80089d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089d8:	3301      	adds	r3, #1
 80089da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80089de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089e2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80089e6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80089e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089ec:	3301      	adds	r3, #1
 80089ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80089f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089f6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80089fa:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80089fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008a00:	3301      	adds	r3, #1
 8008a02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008a0a:	2218      	movs	r2, #24
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fb82 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a14:	233f      	movs	r3, #63	@ 0x3f
 8008a16:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8008a1a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008a1e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8008a22:	f107 0318 	add.w	r3, r7, #24
 8008a26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8008a2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008a2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fdf0 	bl	800962c <hci_send_req>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da01      	bge.n	8008a56 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008a52:	23ff      	movs	r3, #255	@ 0xff
 8008a54:	e017      	b.n	8008a86 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008a56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008a64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	e00a      	b.n	8008a86 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008a70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008a82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}

08008a90 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008a90:	b5b0      	push	{r4, r5, r7, lr}
 8008a92:	b0cc      	sub	sp, #304	@ 0x130
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4605      	mov	r5, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008aa2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008aae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008aba:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8008abe:	4602      	mov	r2, r0
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ac6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008aca:	460a      	mov	r2, r1
 8008acc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008ace:	f107 0310 	add.w	r3, r7, #16
 8008ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008ad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ada:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8008ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008aec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008af0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008af4:	8812      	ldrh	r2, [r2, #0]
 8008af6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008afc:	3302      	adds	r3, #2
 8008afe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8008b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b0a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008b0e:	8812      	ldrh	r2, [r2, #0]
 8008b10:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b16:	3302      	adds	r3, #2
 8008b18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8008b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b24:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8008b28:	7812      	ldrb	r2, [r2, #0]
 8008b2a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b30:	3301      	adds	r3, #1
 8008b32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b3e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8008b42:	7812      	ldrb	r2, [r2, #0]
 8008b44:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b54:	1d98      	adds	r0, r3, #6
 8008b56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b5a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8008b66:	f000 fac7 	bl	80090f8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008b6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b6e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008b78:	4413      	add	r3, r2
 8008b7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b82:	2218      	movs	r2, #24
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fac6 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b8c:	233f      	movs	r3, #63	@ 0x3f
 8008b8e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8008b92:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008b96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b9a:	f107 0310 	add.w	r3, r7, #16
 8008b9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ba6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008baa:	f107 030f 	add.w	r3, r7, #15
 8008bae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fd34 	bl	800962c <hci_send_req>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	da01      	bge.n	8008bce <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008bca:	23ff      	movs	r3, #255	@ 0xff
 8008bcc:	e004      	b.n	8008bd8 <aci_gatt_update_char_value+0x148>
  return status;
 8008bce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bd2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008bd6:	781b      	ldrb	r3, [r3, #0]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bdb0      	pop	{r4, r5, r7, pc}

08008be2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b0cc      	sub	sp, #304	@ 0x130
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	4602      	mov	r2, r0
 8008bea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008bf2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008bfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c00:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c16:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008c1a:	8812      	ldrh	r2, [r2, #0]
 8008c1c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c22:	3302      	adds	r3, #2
 8008c24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c2c:	2218      	movs	r2, #24
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fa71 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c36:	233f      	movs	r3, #63	@ 0x3f
 8008c38:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8008c3c:	f240 1325 	movw	r3, #293	@ 0x125
 8008c40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008c44:	f107 0310 	add.w	r3, r7, #16
 8008c48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008c54:	f107 030f 	add.w	r3, r7, #15
 8008c58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fcdf 	bl	800962c <hci_send_req>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da01      	bge.n	8008c78 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8008c74:	23ff      	movs	r3, #255	@ 0xff
 8008c76:	e004      	b.n	8008c82 <aci_gatt_confirm_indication+0xa0>
  return status;
 8008c78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008c80:	781b      	ldrb	r3, [r3, #0]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b0cc      	sub	sp, #304	@ 0x130
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4602      	mov	r2, r0
 8008c94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008c98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008c9c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8008c9e:	f107 0310 	add.w	r3, r7, #16
 8008ca2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008ca6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008caa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008cbc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008cc0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008cc4:	8812      	ldrh	r2, [r2, #0]
 8008cc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ccc:	3302      	adds	r3, #2
 8008cce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008cd6:	2218      	movs	r2, #24
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fa1c 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ce0:	233f      	movs	r3, #63	@ 0x3f
 8008ce2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8008ce6:	f240 1327 	movw	r3, #295	@ 0x127
 8008cea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008cee:	f107 0310 	add.w	r3, r7, #16
 8008cf2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008cf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008cfa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008cfe:	f107 030f 	add.w	r3, r7, #15
 8008d02:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d10:	2100      	movs	r1, #0
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fc8a 	bl	800962c <hci_send_req>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da01      	bge.n	8008d22 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8008d1e:	23ff      	movs	r3, #255	@ 0xff
 8008d20:	e004      	b.n	8008d2c <aci_gatt_allow_read+0xa0>
  return status;
 8008d22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d26:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008d2a:	781b      	ldrb	r3, [r3, #0]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b0cc      	sub	sp, #304	@ 0x130
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d40:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d4a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d4e:	4602      	mov	r2, r0
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d56:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008d5e:	f107 0310 	add.w	r3, r7, #16
 8008d62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008d66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8008d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d80:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008d84:	7812      	ldrb	r2, [r2, #0]
 8008d86:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8008d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d9a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008da6:	3301      	adds	r3, #1
 8008da8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008db0:	1c98      	adds	r0, r3, #2
 8008db2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008db6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008dc4:	6819      	ldr	r1, [r3, #0]
 8008dc6:	f000 f997 	bl	80090f8 <Osal_MemCpy>
  index_input += Length;
 8008dca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008dd8:	4413      	add	r3, r2
 8008dda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008de2:	2218      	movs	r2, #24
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 f996 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dec:	233f      	movs	r3, #63	@ 0x3f
 8008dee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8008df2:	230c      	movs	r3, #12
 8008df4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008df8:	f107 0310 	add.w	r3, r7, #16
 8008dfc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008e00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008e08:	f107 030f 	add.w	r3, r7, #15
 8008e0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fc05 	bl	800962c <hci_send_req>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	da01      	bge.n	8008e2c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008e28:	23ff      	movs	r3, #255	@ 0xff
 8008e2a:	e004      	b.n	8008e36 <aci_hal_write_config_data+0x100>
  return status;
 8008e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e34:	781b      	ldrb	r3, [r3, #0]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b0cc      	sub	sp, #304	@ 0x130
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4602      	mov	r2, r0
 8008e48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e4c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e56:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008e66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8008e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e80:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008e84:	7812      	ldrb	r2, [r2, #0]
 8008e86:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8008e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e9a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008e9e:	7812      	ldrb	r2, [r2, #0]
 8008ea0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eb0:	2218      	movs	r2, #24
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f92f 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eba:	233f      	movs	r3, #63	@ 0x3f
 8008ebc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8008ec0:	230f      	movs	r3, #15
 8008ec2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008ec6:	f107 0310 	add.w	r3, r7, #16
 8008eca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ed2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008ed6:	f107 030f 	add.w	r3, r7, #15
 8008eda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ee4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fb9e 	bl	800962c <hci_send_req>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	da01      	bge.n	8008efa <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ef6:	23ff      	movs	r3, #255	@ 0xff
 8008ef8:	e004      	b.n	8008f04 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008efa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008efe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f02:	781b      	ldrb	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b0cc      	sub	sp, #304	@ 0x130
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	4602      	mov	r2, r0
 8008f16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f1a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008f1e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008f20:	f107 0310 	add.w	r3, r7, #16
 8008f24:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008f28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008f2c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008f3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008f42:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008f46:	8812      	ldrh	r2, [r2, #0]
 8008f48:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f4e:	3302      	adds	r3, #2
 8008f50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f58:	2218      	movs	r2, #24
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 f8db 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f62:	233f      	movs	r3, #63	@ 0x3f
 8008f64:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8008f68:	2318      	movs	r3, #24
 8008f6a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008f6e:	f107 0310 	add.w	r3, r7, #16
 8008f72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008f7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008f7e:	f107 030f 	add.w	r3, r7, #15
 8008f82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 fb4a 	bl	800962c <hci_send_req>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	da01      	bge.n	8008fa2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008f9e:	23ff      	movs	r3, #255	@ 0xff
 8008fa0:	e004      	b.n	8008fac <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008fa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008fa6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008faa:	781b      	ldrb	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b088      	sub	sp, #32
 8008fba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fc0:	f107 0308 	add.w	r3, r7, #8
 8008fc4:	2218      	movs	r2, #24
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f8a5 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x03;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008fd6:	1dfb      	adds	r3, r7, #7
 8008fd8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fde:	f107 0308 	add.w	r3, r7, #8
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fb21 	bl	800962c <hci_send_req>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da01      	bge.n	8008ff4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008ff0:	23ff      	movs	r3, #255	@ 0xff
 8008ff2:	e000      	b.n	8008ff6 <hci_reset+0x40>
  return status;
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3720      	adds	r7, #32
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008ffe:	b590      	push	{r4, r7, lr}
 8009000:	b0cd      	sub	sp, #308	@ 0x134
 8009002:	af00      	add	r7, sp, #0
 8009004:	4604      	mov	r4, r0
 8009006:	4608      	mov	r0, r1
 8009008:	4611      	mov	r1, r2
 800900a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800900e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009012:	4622      	mov	r2, r4
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800901a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800901e:	4602      	mov	r2, r0
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009026:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800902a:	460a      	mov	r2, r1
 800902c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800902e:	f107 0310 	add.w	r3, r7, #16
 8009032:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009036:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800903a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800903e:	2200      	movs	r2, #0
 8009040:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009048:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800904c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009050:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009058:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800905c:	3301      	adds	r3, #1
 800905e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009062:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009066:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800906a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009072:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009076:	3301      	adds	r3, #1
 8009078:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009080:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009084:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009088:	7812      	ldrb	r2, [r2, #0]
 800908a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800908c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009090:	3301      	adds	r3, #1
 8009092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800909a:	2218      	movs	r2, #24
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 f83a 	bl	8009118 <Osal_MemSet>
  rq.ogf = 0x08;
 80090a4:	2308      	movs	r3, #8
 80090a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80090aa:	2331      	movs	r3, #49	@ 0x31
 80090ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80090b0:	f107 0310 	add.w	r3, r7, #16
 80090b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80090b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80090bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80090c0:	f107 030f 	add.w	r3, r7, #15
 80090c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 faa9 	bl	800962c <hci_send_req>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da01      	bge.n	80090e4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80090e0:	23ff      	movs	r3, #255	@ 0xff
 80090e2:	e004      	b.n	80090ee <hci_le_set_default_phy+0xf0>
  return status;
 80090e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80090e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80090ec:	781b      	ldrb	r3, [r3, #0]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd90      	pop	{r4, r7, pc}

080090f8 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f003 fb0a 	bl	800c722 <memcpy>
 800910e:	4603      	mov	r3, r0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f003 fa7f 	bl	800c62c <memset>
 800912e:	4603      	mov	r3, r0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  return;
 800913c:	bf00      	nop
}
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009146:	b480      	push	{r7}
 8009148:	af00      	add	r7, sp, #0
  return;
 800914a:	bf00      	nop
}
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  return;
 8009158:	bf00      	nop
}
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009162:	b480      	push	{r7}
 8009164:	af00      	add	r7, sp, #0
  return;
 8009166:	bf00      	nop
}
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return;
 8009174:	bf00      	nop
}
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800917e:	b480      	push	{r7}
 8009180:	af00      	add	r7, sp, #0
  return;
 8009182:	bf00      	nop
}
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
  return;
 8009190:	bf00      	nop
}
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800919a:	b480      	push	{r7}
 800919c:	af00      	add	r7, sp, #0
  return;
 800919e:	bf00      	nop
}
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  return;
 80091ac:	bf00      	nop
}
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80091b6:	b480      	push	{r7}
 80091b8:	af00      	add	r7, sp, #0
  return;
 80091ba:	bf00      	nop
}
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  return;
 80091c8:	bf00      	nop
}
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80091d2:	b480      	push	{r7}
 80091d4:	af00      	add	r7, sp, #0
  return;
 80091d6:	bf00      	nop
}
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
  return;
 80091e4:	bf00      	nop
}
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80091ee:	b480      	push	{r7}
 80091f0:	af00      	add	r7, sp, #0
  return;
 80091f2:	bf00      	nop
}
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  return;
 8009200:	bf00      	nop
}
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800920a:	b480      	push	{r7}
 800920c:	af00      	add	r7, sp, #0
  return;
 800920e:	bf00      	nop
}
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
  return;
 800921c:	bf00      	nop
}
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800922c:	4b04      	ldr	r3, [pc, #16]	@ (8009240 <SVCCTL_Init+0x18>)
 800922e:	2200      	movs	r2, #0
 8009230:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009232:	4b04      	ldr	r3, [pc, #16]	@ (8009244 <SVCCTL_Init+0x1c>)
 8009234:	2200      	movs	r2, #0
 8009236:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009238:	f000 f806 	bl	8009248 <SVCCTL_SvcInit>

  return;
 800923c:	bf00      	nop
}
 800923e:	bd80      	pop	{r7, pc}
 8009240:	20000094 	.word	0x20000094
 8009244:	200000b4 	.word	0x200000b4

08009248 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
  BAS_Init();
 800924c:	f7ff ff74 	bl	8009138 <BAS_Init>

  BLS_Init();
 8009250:	f7ff ff79 	bl	8009146 <BLS_Init>

  CRS_STM_Init();
 8009254:	f7ff ff7e 	bl	8009154 <CRS_STM_Init>

  DIS_Init();
 8009258:	f7ff ff83 	bl	8009162 <DIS_Init>

  EDS_STM_Init();
 800925c:	f7ff ff88 	bl	8009170 <EDS_STM_Init>

  HIDS_Init();
 8009260:	f7ff ff8d 	bl	800917e <HIDS_Init>

  HRS_Init();
 8009264:	f7ff ff92 	bl	800918c <HRS_Init>

  HTS_Init();
 8009268:	f7ff ff97 	bl	800919a <HTS_Init>

  IAS_Init();
 800926c:	f7ff ff9c 	bl	80091a8 <IAS_Init>

  LLS_Init();
 8009270:	f7ff ffa1 	bl	80091b6 <LLS_Init>

  TPS_Init();
 8009274:	f7ff ffa6 	bl	80091c4 <TPS_Init>

  MOTENV_STM_Init();
 8009278:	f7ff ffab 	bl	80091d2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800927c:	f7ff ffb0 	bl	80091e0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009280:	f7ff ffb5 	bl	80091ee <ZDD_STM_Init>

  OTAS_STM_Init();
 8009284:	f7ff ffba 	bl	80091fc <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009288:	f7ff ffc6 	bl	8009218 <BVOPUS_STM_Init>

  MESH_Init();
 800928c:	f7ff ffbd 	bl	800920a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009290:	f002 fa4a 	bl	800b728 <SVCCTL_InitCustomSvc>
  
  return;
 8009294:	bf00      	nop
}
 8009296:	bd80      	pop	{r7, pc}

08009298 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80092a0:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80092a2:	7f1b      	ldrb	r3, [r3, #28]
 80092a4:	4619      	mov	r1, r3
 80092a6:	4a08      	ldr	r2, [pc, #32]	@ (80092c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80092ae:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80092b0:	7f1b      	ldrb	r3, [r3, #28]
 80092b2:	3301      	adds	r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4b04      	ldr	r3, [pc, #16]	@ (80092c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80092b8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80092ba:	bf00      	nop
}
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20000094 	.word	0x20000094

080092cc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3301      	adds	r3, #1
 80092d8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2bff      	cmp	r3, #255	@ 0xff
 80092e4:	d125      	bne.n	8009332 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	3302      	adds	r3, #2
 80092ea:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80092f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092fa:	d118      	bne.n	800932e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80092fc:	2300      	movs	r3, #0
 80092fe:	757b      	strb	r3, [r7, #21]
 8009300:	e00d      	b.n	800931e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009302:	7d7b      	ldrb	r3, [r7, #21]
 8009304:	4a1a      	ldr	r2, [pc, #104]	@ (8009370 <SVCCTL_UserEvtRx+0xa4>)
 8009306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
 800930e:	4603      	mov	r3, r0
 8009310:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d108      	bne.n	800932a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009318:	7d7b      	ldrb	r3, [r7, #21]
 800931a:	3301      	adds	r3, #1
 800931c:	757b      	strb	r3, [r7, #21]
 800931e:	4b14      	ldr	r3, [pc, #80]	@ (8009370 <SVCCTL_UserEvtRx+0xa4>)
 8009320:	7f1b      	ldrb	r3, [r3, #28]
 8009322:	7d7a      	ldrb	r2, [r7, #21]
 8009324:	429a      	cmp	r2, r3
 8009326:	d3ec      	bcc.n	8009302 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009328:	e002      	b.n	8009330 <SVCCTL_UserEvtRx+0x64>
              break;
 800932a:	bf00      	nop
          break;
 800932c:	e000      	b.n	8009330 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800932e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009330:	e000      	b.n	8009334 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009332:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d00f      	beq.n	800935a <SVCCTL_UserEvtRx+0x8e>
 800933a:	2b02      	cmp	r3, #2
 800933c:	dc10      	bgt.n	8009360 <SVCCTL_UserEvtRx+0x94>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <SVCCTL_UserEvtRx+0x7c>
 8009342:	2b01      	cmp	r3, #1
 8009344:	d006      	beq.n	8009354 <SVCCTL_UserEvtRx+0x88>
 8009346:	e00b      	b.n	8009360 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 fc57 	bl	800abfc <SVCCTL_App_Notification>
 800934e:	4603      	mov	r3, r0
 8009350:	75bb      	strb	r3, [r7, #22]
      break;
 8009352:	e008      	b.n	8009366 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009354:	2301      	movs	r3, #1
 8009356:	75bb      	strb	r3, [r7, #22]
      break;
 8009358:	e005      	b.n	8009366 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800935a:	2300      	movs	r3, #0
 800935c:	75bb      	strb	r3, [r7, #22]
      break;
 800935e:	e002      	b.n	8009366 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009360:	2301      	movs	r3, #1
 8009362:	75bb      	strb	r3, [r7, #22]
      break;
 8009364:	bf00      	nop
  }

  return (return_status);
 8009366:	7dbb      	ldrb	r3, [r7, #22]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000094 	.word	0x20000094

08009374 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800937c:	f107 030c 	add.w	r3, r7, #12
 8009380:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	212e      	movs	r1, #46	@ 0x2e
 800938c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8009390:	f000 fae8 	bl	8009964 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	330b      	adds	r3, #11
 8009398:	78db      	ldrb	r3, [r3, #3]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3720      	adds	r7, #32
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b088      	sub	sp, #32
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80093aa:	f107 030c 	add.w	r3, r7, #12
 80093ae:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	210f      	movs	r1, #15
 80093ba:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80093be:	f000 fad1 	bl	8009964 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	330b      	adds	r3, #11
 80093c6:	78db      	ldrb	r3, [r3, #3]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3720      	adds	r7, #32
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80093d8:	f107 030c 	add.w	r3, r7, #12
 80093dc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	2110      	movs	r1, #16
 80093e4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80093e8:	f000 fabc 	bl	8009964 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	330b      	adds	r3, #11
 80093f0:	78db      	ldrb	r3, [r3, #3]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
	...

080093fc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b08b      	sub	sp, #44	@ 0x2c
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009418:	2300      	movs	r3, #0
 800941a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009424:	4b4a      	ldr	r3, [pc, #296]	@ (8009550 <SHCI_GetWirelessFwInfo+0x154>)
 8009426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009428:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800942c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009436:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a44      	ldr	r2, [pc, #272]	@ (8009554 <SHCI_GetWirelessFwInfo+0x158>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10f      	bne.n	8009468 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	695b      	ldr	r3, [r3, #20]
 800944c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	e01a      	b.n	800949e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009470:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009474:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	0e1b      	lsrs	r3, r3, #24
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	0c1b      	lsrs	r3, r3, #16
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	0a1b      	lsrs	r3, r3, #8
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	091b      	lsrs	r3, r3, #4
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	0e1b      	lsrs	r3, r3, #24
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	b2da      	uxtb	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	0e1b      	lsrs	r3, r3, #24
 800950c:	b2da      	uxtb	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	0c1b      	lsrs	r3, r3, #16
 8009516:	b2da      	uxtb	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	0a1b      	lsrs	r3, r3, #8
 8009520:	b2da      	uxtb	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	0e1b      	lsrs	r3, r3, #24
 800952a:	b2da      	uxtb	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	0c1b      	lsrs	r3, r3, #16
 8009534:	b2da      	uxtb	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	372c      	adds	r7, #44	@ 0x2c
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	58004000 	.word	0x58004000
 8009554:	a94656b9 	.word	0xa94656b9

08009558 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	4a08      	ldr	r2, [pc, #32]	@ (8009588 <hci_init+0x30>)
 8009568:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800956a:	4a08      	ldr	r2, [pc, #32]	@ (800958c <hci_init+0x34>)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009570:	4806      	ldr	r0, [pc, #24]	@ (800958c <hci_init+0x34>)
 8009572:	f000 f979 	bl	8009868 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f8da 	bl	8009734 <TlInit>

  return;
 8009580:	bf00      	nop
}
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	200004c4 	.word	0x200004c4
 800958c:	2000049c 	.word	0x2000049c

08009590 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009596:	4822      	ldr	r0, [pc, #136]	@ (8009620 <hci_user_evt_proc+0x90>)
 8009598:	f000 fde8 	bl	800a16c <LST_is_empty>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d12b      	bne.n	80095fa <hci_user_evt_proc+0x6a>
 80095a2:	4b20      	ldr	r3, [pc, #128]	@ (8009624 <hci_user_evt_proc+0x94>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d027      	beq.n	80095fa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80095aa:	f107 030c 	add.w	r3, r7, #12
 80095ae:	4619      	mov	r1, r3
 80095b0:	481b      	ldr	r0, [pc, #108]	@ (8009620 <hci_user_evt_proc+0x90>)
 80095b2:	f000 fe6a 	bl	800a28a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80095b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009628 <hci_user_evt_proc+0x98>)
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00c      	beq.n	80095d8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80095c2:	2301      	movs	r3, #1
 80095c4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80095c6:	4b18      	ldr	r3, [pc, #96]	@ (8009628 <hci_user_evt_proc+0x98>)
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	1d3a      	adds	r2, r7, #4
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80095d0:	793a      	ldrb	r2, [r7, #4]
 80095d2:	4b14      	ldr	r3, [pc, #80]	@ (8009624 <hci_user_evt_proc+0x94>)
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	e002      	b.n	80095de <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80095d8:	4b12      	ldr	r3, [pc, #72]	@ (8009624 <hci_user_evt_proc+0x94>)
 80095da:	2201      	movs	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80095de:	4b11      	ldr	r3, [pc, #68]	@ (8009624 <hci_user_evt_proc+0x94>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fc0d 	bl	8009e08 <TL_MM_EvtDone>
 80095ee:	e004      	b.n	80095fa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4619      	mov	r1, r3
 80095f4:	480a      	ldr	r0, [pc, #40]	@ (8009620 <hci_user_evt_proc+0x90>)
 80095f6:	f000 fddb 	bl	800a1b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80095fa:	4809      	ldr	r0, [pc, #36]	@ (8009620 <hci_user_evt_proc+0x90>)
 80095fc:	f000 fdb6 	bl	800a16c <LST_is_empty>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d107      	bne.n	8009616 <hci_user_evt_proc+0x86>
 8009606:	4b07      	ldr	r3, [pc, #28]	@ (8009624 <hci_user_evt_proc+0x94>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800960e:	4804      	ldr	r0, [pc, #16]	@ (8009620 <hci_user_evt_proc+0x90>)
 8009610:	f001 ff5a 	bl	800b4c8 <hci_notify_asynch_evt>
  }


  return;
 8009614:	bf00      	nop
 8009616:	bf00      	nop
}
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	200000bc 	.word	0x200000bc
 8009624:	200000c8 	.word	0x200000c8
 8009628:	2000049c 	.word	0x2000049c

0800962c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009638:	2000      	movs	r0, #0
 800963a:	f000 f8d1 	bl	80097e0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800963e:	2300      	movs	r3, #0
 8009640:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	885b      	ldrh	r3, [r3, #2]
 8009646:	b21b      	sxth	r3, r3
 8009648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800964c:	b21a      	sxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	b21b      	sxth	r3, r3
 8009656:	4313      	orrs	r3, r2
 8009658:	b21b      	sxth	r3, r3
 800965a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800965c:	4b33      	ldr	r3, [pc, #204]	@ (800972c <hci_send_req+0x100>)
 800965e:	2201      	movs	r2, #1
 8009660:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	b2d9      	uxtb	r1, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	8bbb      	ldrh	r3, [r7, #28]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f890 	bl	8009794 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009674:	e04e      	b.n	8009714 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009676:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800967a:	f001 ff3c 	bl	800b4f6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800967e:	e043      	b.n	8009708 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009680:	f107 030c 	add.w	r3, r7, #12
 8009684:	4619      	mov	r1, r3
 8009686:	482a      	ldr	r0, [pc, #168]	@ (8009730 <hci_send_req+0x104>)
 8009688:	f000 fdff 	bl	800a28a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	7a5b      	ldrb	r3, [r3, #9]
 8009690:	2b0f      	cmp	r3, #15
 8009692:	d114      	bne.n	80096be <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	330b      	adds	r3, #11
 8009698:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	8bba      	ldrh	r2, [r7, #28]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d104      	bne.n	80096b0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	7812      	ldrb	r2, [r2, #0]
 80096ae:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d027      	beq.n	8009708 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80096b8:	2301      	movs	r3, #1
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e024      	b.n	8009708 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	330b      	adds	r3, #11
 80096c2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	8bba      	ldrh	r2, [r7, #28]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d114      	bne.n	80096fc <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	7a9b      	ldrb	r3, [r3, #10]
 80096d6:	3b03      	subs	r3, #3
 80096d8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695a      	ldr	r2, [r3, #20]
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	bfa8      	it	ge
 80096e4:	461a      	movge	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6918      	ldr	r0, [r3, #16]
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	1cd9      	adds	r1, r3, #3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f003 f813 	bl	800c722 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009704:	2301      	movs	r3, #1
 8009706:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009708:	4809      	ldr	r0, [pc, #36]	@ (8009730 <hci_send_req+0x104>)
 800970a:	f000 fd2f 	bl	800a16c <LST_is_empty>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0b5      	beq.n	8009680 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009714:	7ffb      	ldrb	r3, [r7, #31]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0ad      	beq.n	8009676 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800971a:	2001      	movs	r0, #1
 800971c:	f000 f860 	bl	80097e0 <NotifyCmdStatus>

  return 0;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200004c8 	.word	0x200004c8
 8009730:	200004bc 	.word	0x200004bc

08009734 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800973c:	480f      	ldr	r0, [pc, #60]	@ (800977c <TlInit+0x48>)
 800973e:	f000 fd05 	bl	800a14c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009742:	4a0f      	ldr	r2, [pc, #60]	@ (8009780 <TlInit+0x4c>)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009748:	480e      	ldr	r0, [pc, #56]	@ (8009784 <TlInit+0x50>)
 800974a:	f000 fcff 	bl	800a14c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800974e:	4b0e      	ldr	r3, [pc, #56]	@ (8009788 <TlInit+0x54>)
 8009750:	2201      	movs	r2, #1
 8009752:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009754:	4b0d      	ldr	r3, [pc, #52]	@ (800978c <TlInit+0x58>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00a      	beq.n	8009772 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009760:	4b0b      	ldr	r3, [pc, #44]	@ (8009790 <TlInit+0x5c>)
 8009762:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009764:	4b09      	ldr	r3, [pc, #36]	@ (800978c <TlInit+0x58>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f107 0208 	add.w	r2, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
  }

  return;
 8009770:	bf00      	nop
 8009772:	bf00      	nop
}
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200004bc 	.word	0x200004bc
 8009780:	200000c4 	.word	0x200000c4
 8009784:	200000bc 	.word	0x200000bc
 8009788:	200000c8 	.word	0x200000c8
 800978c:	2000049c 	.word	0x2000049c
 8009790:	08009821 	.word	0x08009821

08009794 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	603a      	str	r2, [r7, #0]
 800979e:	80fb      	strh	r3, [r7, #6]
 80097a0:	460b      	mov	r3, r1
 80097a2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80097a4:	4b0c      	ldr	r3, [pc, #48]	@ (80097d8 <SendCmd+0x44>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80097ae:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <SendCmd+0x44>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	797a      	ldrb	r2, [r7, #5]
 80097b4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80097b6:	4b08      	ldr	r3, [pc, #32]	@ (80097d8 <SendCmd+0x44>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	797a      	ldrb	r2, [r7, #5]
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f002 ffae 	bl	800c722 <memcpy>

  hciContext.io.Send(0,0);
 80097c6:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <SendCmd+0x48>)
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2100      	movs	r1, #0
 80097cc:	2000      	movs	r0, #0
 80097ce:	4798      	blx	r3

  return;
 80097d0:	bf00      	nop
}
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200000c4 	.word	0x200000c4
 80097dc:	2000049c 	.word	0x2000049c

080097e0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d108      	bne.n	8009802 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80097f0:	4b0a      	ldr	r3, [pc, #40]	@ (800981c <NotifyCmdStatus+0x3c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00d      	beq.n	8009814 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80097f8:	4b08      	ldr	r3, [pc, #32]	@ (800981c <NotifyCmdStatus+0x3c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2000      	movs	r0, #0
 80097fe:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009800:	e008      	b.n	8009814 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009802:	4b06      	ldr	r3, [pc, #24]	@ (800981c <NotifyCmdStatus+0x3c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800980a:	4b04      	ldr	r3, [pc, #16]	@ (800981c <NotifyCmdStatus+0x3c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2001      	movs	r0, #1
 8009810:	4798      	blx	r3
  return;
 8009812:	bf00      	nop
 8009814:	bf00      	nop
}
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	200004c4 	.word	0x200004c4

08009820 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7a5b      	ldrb	r3, [r3, #9]
 800982c:	2b0f      	cmp	r3, #15
 800982e:	d003      	beq.n	8009838 <TlEvtReceived+0x18>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7a5b      	ldrb	r3, [r3, #9]
 8009834:	2b0e      	cmp	r3, #14
 8009836:	d107      	bne.n	8009848 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4809      	ldr	r0, [pc, #36]	@ (8009860 <TlEvtReceived+0x40>)
 800983c:	f000 fcde 	bl	800a1fc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009840:	2000      	movs	r0, #0
 8009842:	f001 fe4d 	bl	800b4e0 <hci_cmd_resp_release>
 8009846:	e006      	b.n	8009856 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4806      	ldr	r0, [pc, #24]	@ (8009864 <TlEvtReceived+0x44>)
 800984c:	f000 fcd6 	bl	800a1fc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009850:	4804      	ldr	r0, [pc, #16]	@ (8009864 <TlEvtReceived+0x44>)
 8009852:	f001 fe39 	bl	800b4c8 <hci_notify_asynch_evt>
  }

  return;
 8009856:	bf00      	nop
}
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	200004bc 	.word	0x200004bc
 8009864:	200000bc 	.word	0x200000bc

08009868 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a05      	ldr	r2, [pc, #20]	@ (8009888 <hci_register_io_bus+0x20>)
 8009874:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a04      	ldr	r2, [pc, #16]	@ (800988c <hci_register_io_bus+0x24>)
 800987a:	611a      	str	r2, [r3, #16]

  return;
 800987c:	bf00      	nop
}
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	08009b81 	.word	0x08009b81
 800988c:	08009be9 	.word	0x08009be9

08009890 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4a08      	ldr	r2, [pc, #32]	@ (80098c0 <shci_init+0x30>)
 80098a0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80098a2:	4a08      	ldr	r2, [pc, #32]	@ (80098c4 <shci_init+0x34>)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80098a8:	4806      	ldr	r0, [pc, #24]	@ (80098c4 <shci_init+0x34>)
 80098aa:	f000 f915 	bl	8009ad8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f898 	bl	80099e8 <TlInit>

  return;
 80098b8:	bf00      	nop
}
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	200004ec 	.word	0x200004ec
 80098c4:	200004cc 	.word	0x200004cc

080098c8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80098ce:	4822      	ldr	r0, [pc, #136]	@ (8009958 <shci_user_evt_proc+0x90>)
 80098d0:	f000 fc4c 	bl	800a16c <LST_is_empty>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d12b      	bne.n	8009932 <shci_user_evt_proc+0x6a>
 80098da:	4b20      	ldr	r3, [pc, #128]	@ (800995c <shci_user_evt_proc+0x94>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d027      	beq.n	8009932 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80098e2:	f107 030c 	add.w	r3, r7, #12
 80098e6:	4619      	mov	r1, r3
 80098e8:	481b      	ldr	r0, [pc, #108]	@ (8009958 <shci_user_evt_proc+0x90>)
 80098ea:	f000 fcce 	bl	800a28a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80098ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009960 <shci_user_evt_proc+0x98>)
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00c      	beq.n	8009910 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80098fa:	2301      	movs	r3, #1
 80098fc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80098fe:	4b18      	ldr	r3, [pc, #96]	@ (8009960 <shci_user_evt_proc+0x98>)
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	1d3a      	adds	r2, r7, #4
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009908:	793a      	ldrb	r2, [r7, #4]
 800990a:	4b14      	ldr	r3, [pc, #80]	@ (800995c <shci_user_evt_proc+0x94>)
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e002      	b.n	8009916 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009910:	4b12      	ldr	r3, [pc, #72]	@ (800995c <shci_user_evt_proc+0x94>)
 8009912:	2201      	movs	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009916:	4b11      	ldr	r3, [pc, #68]	@ (800995c <shci_user_evt_proc+0x94>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d004      	beq.n	8009928 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fa71 	bl	8009e08 <TL_MM_EvtDone>
 8009926:	e004      	b.n	8009932 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4619      	mov	r1, r3
 800992c:	480a      	ldr	r0, [pc, #40]	@ (8009958 <shci_user_evt_proc+0x90>)
 800992e:	f000 fc3f 	bl	800a1b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009932:	4809      	ldr	r0, [pc, #36]	@ (8009958 <shci_user_evt_proc+0x90>)
 8009934:	f000 fc1a 	bl	800a16c <LST_is_empty>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d107      	bne.n	800994e <shci_user_evt_proc+0x86>
 800993e:	4b07      	ldr	r3, [pc, #28]	@ (800995c <shci_user_evt_proc+0x94>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009946:	4804      	ldr	r0, [pc, #16]	@ (8009958 <shci_user_evt_proc+0x90>)
 8009948:	f7f7 fc92 	bl	8001270 <shci_notify_asynch_evt>
  }


  return;
 800994c:	bf00      	nop
 800994e:	bf00      	nop
}
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	200000cc 	.word	0x200000cc
 800995c:	200000dc 	.word	0x200000dc
 8009960:	200004cc 	.word	0x200004cc

08009964 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60ba      	str	r2, [r7, #8]
 800996c:	607b      	str	r3, [r7, #4]
 800996e:	4603      	mov	r3, r0
 8009970:	81fb      	strh	r3, [r7, #14]
 8009972:	460b      	mov	r3, r1
 8009974:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009976:	2000      	movs	r0, #0
 8009978:	f000 f868 	bl	8009a4c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800997c:	4b17      	ldr	r3, [pc, #92]	@ (80099dc <shci_send+0x78>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	89fa      	ldrh	r2, [r7, #14]
 8009982:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009986:	4b15      	ldr	r3, [pc, #84]	@ (80099dc <shci_send+0x78>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	7b7a      	ldrb	r2, [r7, #13]
 800998c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800998e:	4b13      	ldr	r3, [pc, #76]	@ (80099dc <shci_send+0x78>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	7b7a      	ldrb	r2, [r7, #13]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	4618      	mov	r0, r3
 800999a:	f002 fec2 	bl	800c722 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800999e:	4b10      	ldr	r3, [pc, #64]	@ (80099e0 <shci_send+0x7c>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80099a4:	4b0f      	ldr	r3, [pc, #60]	@ (80099e4 <shci_send+0x80>)
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2100      	movs	r1, #0
 80099aa:	2000      	movs	r0, #0
 80099ac:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80099ae:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80099b2:	f7f7 fc74 	bl	800129e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f103 0008 	add.w	r0, r3, #8
 80099bc:	4b07      	ldr	r3, [pc, #28]	@ (80099dc <shci_send+0x78>)
 80099be:	6819      	ldr	r1, [r3, #0]
 80099c0:	4b06      	ldr	r3, [pc, #24]	@ (80099dc <shci_send+0x78>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	789b      	ldrb	r3, [r3, #2]
 80099c6:	3303      	adds	r3, #3
 80099c8:	461a      	mov	r2, r3
 80099ca:	f002 feaa 	bl	800c722 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80099ce:	2001      	movs	r0, #1
 80099d0:	f000 f83c 	bl	8009a4c <Cmd_SetStatus>

  return;
 80099d4:	bf00      	nop
}
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	200000d8 	.word	0x200000d8
 80099e0:	200004f0 	.word	0x200004f0
 80099e4:	200004cc 	.word	0x200004cc

080099e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80099f0:	4a10      	ldr	r2, [pc, #64]	@ (8009a34 <TlInit+0x4c>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80099f6:	4810      	ldr	r0, [pc, #64]	@ (8009a38 <TlInit+0x50>)
 80099f8:	f000 fba8 	bl	800a14c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80099fc:	2001      	movs	r0, #1
 80099fe:	f000 f825 	bl	8009a4c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a02:	4b0e      	ldr	r3, [pc, #56]	@ (8009a3c <TlInit+0x54>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009a08:	4b0d      	ldr	r3, [pc, #52]	@ (8009a40 <TlInit+0x58>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00c      	beq.n	8009a2a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009a14:	4b0b      	ldr	r3, [pc, #44]	@ (8009a44 <TlInit+0x5c>)
 8009a16:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009a18:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <TlInit+0x60>)
 8009a1a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009a1c:	4b08      	ldr	r3, [pc, #32]	@ (8009a40 <TlInit+0x58>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f107 020c 	add.w	r2, r7, #12
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
  }

  return;
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
}
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200000d8 	.word	0x200000d8
 8009a38:	200000cc 	.word	0x200000cc
 8009a3c:	200000dc 	.word	0x200000dc
 8009a40:	200004cc 	.word	0x200004cc
 8009a44:	08009a9d 	.word	0x08009a9d
 8009a48:	08009ab5 	.word	0x08009ab5

08009a4c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10b      	bne.n	8009a74 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a94 <Cmd_SetStatus+0x48>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009a64:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <Cmd_SetStatus+0x48>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2000      	movs	r0, #0
 8009a6a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <Cmd_SetStatus+0x4c>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009a72:	e00b      	b.n	8009a8c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009a74:	4b08      	ldr	r3, [pc, #32]	@ (8009a98 <Cmd_SetStatus+0x4c>)
 8009a76:	2201      	movs	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009a7a:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <Cmd_SetStatus+0x48>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d004      	beq.n	8009a8c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009a82:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <Cmd_SetStatus+0x48>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2001      	movs	r0, #1
 8009a88:	4798      	blx	r3
  return;
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
}
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	200004ec 	.word	0x200004ec
 8009a98:	200000d4 	.word	0x200000d4

08009a9c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f7f7 fbef 	bl	8001288 <shci_cmd_resp_release>

  return;
 8009aaa:	bf00      	nop
}
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	4805      	ldr	r0, [pc, #20]	@ (8009ad4 <TlUserEvtReceived+0x20>)
 8009ac0:	f000 fb9c 	bl	800a1fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009ac4:	4803      	ldr	r0, [pc, #12]	@ (8009ad4 <TlUserEvtReceived+0x20>)
 8009ac6:	f7f7 fbd3 	bl	8001270 <shci_notify_asynch_evt>

  return;
 8009aca:	bf00      	nop
}
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200000cc 	.word	0x200000cc

08009ad8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a05      	ldr	r2, [pc, #20]	@ (8009af8 <shci_register_io_bus+0x20>)
 8009ae4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a04      	ldr	r2, [pc, #16]	@ (8009afc <shci_register_io_bus+0x24>)
 8009aea:	611a      	str	r2, [r3, #16]

  return;
 8009aec:	bf00      	nop
}
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	08009c95 	.word	0x08009c95
 8009afc:	08009ce9 	.word	0x08009ce9

08009b00 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009b04:	f002 f852 	bl	800bbac <HW_IPCC_Enable>

  return;
 8009b08:	bf00      	nop
}
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <TL_Init>:


void TL_Init( void )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009b10:	4b10      	ldr	r3, [pc, #64]	@ (8009b54 <TL_Init+0x48>)
 8009b12:	4a11      	ldr	r2, [pc, #68]	@ (8009b58 <TL_Init+0x4c>)
 8009b14:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009b16:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <TL_Init+0x48>)
 8009b18:	4a10      	ldr	r2, [pc, #64]	@ (8009b5c <TL_Init+0x50>)
 8009b1a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <TL_Init+0x48>)
 8009b1e:	4a10      	ldr	r2, [pc, #64]	@ (8009b60 <TL_Init+0x54>)
 8009b20:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <TL_Init+0x48>)
 8009b24:	4a0f      	ldr	r2, [pc, #60]	@ (8009b64 <TL_Init+0x58>)
 8009b26:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009b28:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <TL_Init+0x48>)
 8009b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b68 <TL_Init+0x5c>)
 8009b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009b2e:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <TL_Init+0x48>)
 8009b30:	4a0e      	ldr	r2, [pc, #56]	@ (8009b6c <TL_Init+0x60>)
 8009b32:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009b34:	4b07      	ldr	r3, [pc, #28]	@ (8009b54 <TL_Init+0x48>)
 8009b36:	4a0e      	ldr	r2, [pc, #56]	@ (8009b70 <TL_Init+0x64>)
 8009b38:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009b3a:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <TL_Init+0x48>)
 8009b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8009b74 <TL_Init+0x68>)
 8009b3e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009b40:	4b04      	ldr	r3, [pc, #16]	@ (8009b54 <TL_Init+0x48>)
 8009b42:	4a0d      	ldr	r2, [pc, #52]	@ (8009b78 <TL_Init+0x6c>)
 8009b44:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009b46:	4b03      	ldr	r3, [pc, #12]	@ (8009b54 <TL_Init+0x48>)
 8009b48:	4a0c      	ldr	r2, [pc, #48]	@ (8009b7c <TL_Init+0x70>)
 8009b4a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009b4c:	f002 f842 	bl	800bbd4 <HW_IPCC_Init>

  return;
 8009b50:	bf00      	nop
}
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20030000 	.word	0x20030000
 8009b58:	20030028 	.word	0x20030028
 8009b5c:	20030048 	.word	0x20030048
 8009b60:	20030058 	.word	0x20030058
 8009b64:	20030068 	.word	0x20030068
 8009b68:	20030070 	.word	0x20030070
 8009b6c:	20030078 	.word	0x20030078
 8009b70:	20030080 	.word	0x20030080
 8009b74:	2003009c 	.word	0x2003009c
 8009b78:	200300a0 	.word	0x200300a0
 8009b7c:	200300ac 	.word	0x200300ac

08009b80 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009b8c:	4811      	ldr	r0, [pc, #68]	@ (8009bd4 <TL_BLE_Init+0x54>)
 8009b8e:	f000 fadd 	bl	800a14c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009b92:	4b11      	ldr	r3, [pc, #68]	@ (8009bd8 <TL_BLE_Init+0x58>)
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4a0c      	ldr	r2, [pc, #48]	@ (8009bdc <TL_BLE_Init+0x5c>)
 8009bac:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	4a08      	ldr	r2, [pc, #32]	@ (8009bd4 <TL_BLE_Init+0x54>)
 8009bb2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009bb4:	f002 f824 	bl	800bc00 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a08      	ldr	r2, [pc, #32]	@ (8009be0 <TL_BLE_Init+0x60>)
 8009bbe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a07      	ldr	r2, [pc, #28]	@ (8009be4 <TL_BLE_Init+0x64>)
 8009bc6:	6013      	str	r3, [r2, #0]

  return 0;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200300c8 	.word	0x200300c8
 8009bd8:	20030000 	.word	0x20030000
 8009bdc:	20030a58 	.word	0x20030a58
 8009be0:	200004fc 	.word	0x200004fc
 8009be4:	20000500 	.word	0x20000500

08009be8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009bf4:	4b09      	ldr	r3, [pc, #36]	@ (8009c1c <TL_BLE_SendCmd+0x34>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009bfe:	4b07      	ldr	r3, [pc, #28]	@ (8009c1c <TL_BLE_SendCmd+0x34>)
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4619      	mov	r1, r3
 8009c06:	2001      	movs	r0, #1
 8009c08:	f000 f96c 	bl	8009ee4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009c0c:	f002 f802 	bl	800bc14 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20030000 	.word	0x20030000

08009c20 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c26:	e01c      	b.n	8009c62 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009c28:	1d3b      	adds	r3, r7, #4
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4812      	ldr	r0, [pc, #72]	@ (8009c78 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009c2e:	f000 fb2c 	bl	800a28a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7a5b      	ldrb	r3, [r3, #9]
 8009c36:	2b0f      	cmp	r3, #15
 8009c38:	d003      	beq.n	8009c42 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7a5b      	ldrb	r3, [r3, #9]
 8009c3e:	2b0e      	cmp	r3, #14
 8009c40:	d105      	bne.n	8009c4e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4619      	mov	r1, r3
 8009c46:	2002      	movs	r0, #2
 8009c48:	f000 f94c 	bl	8009ee4 <OutputDbgTrace>
 8009c4c:	e004      	b.n	8009c58 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4619      	mov	r1, r3
 8009c52:	2003      	movs	r0, #3
 8009c54:	f000 f946 	bl	8009ee4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009c58:	4b08      	ldr	r3, [pc, #32]	@ (8009c7c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c62:	4805      	ldr	r0, [pc, #20]	@ (8009c78 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009c64:	f000 fa82 	bl	800a16c <LST_is_empty>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0dc      	beq.n	8009c28 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009c6e:	bf00      	nop
}
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	200300c8 	.word	0x200300c8
 8009c7c:	200004fc 	.word	0x200004fc

08009c80 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009c84:	4b02      	ldr	r3, [pc, #8]	@ (8009c90 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4798      	blx	r3

  return;
 8009c8a:	bf00      	nop
}
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000500 	.word	0x20000500

08009c94 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009ca0:	480d      	ldr	r0, [pc, #52]	@ (8009cd8 <TL_SYS_Init+0x44>)
 8009ca2:	f000 fa53 	bl	800a14c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <TL_SYS_Init+0x48>)
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4a08      	ldr	r2, [pc, #32]	@ (8009cd8 <TL_SYS_Init+0x44>)
 8009cb8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009cba:	f001 ffcd 	bl	800bc58 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a07      	ldr	r2, [pc, #28]	@ (8009ce0 <TL_SYS_Init+0x4c>)
 8009cc4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	4a06      	ldr	r2, [pc, #24]	@ (8009ce4 <TL_SYS_Init+0x50>)
 8009ccc:	6013      	str	r3, [r2, #0]

  return 0;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	200300d0 	.word	0x200300d0
 8009cdc:	20030000 	.word	0x20030000
 8009ce0:	20000504 	.word	0x20000504
 8009ce4:	20000508 	.word	0x20000508

08009ce8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009cf4:	4b09      	ldr	r3, [pc, #36]	@ (8009d1c <TL_SYS_SendCmd+0x34>)
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009cfe:	4b07      	ldr	r3, [pc, #28]	@ (8009d1c <TL_SYS_SendCmd+0x34>)
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4619      	mov	r1, r3
 8009d06:	2004      	movs	r0, #4
 8009d08:	f000 f8ec 	bl	8009ee4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009d0c:	f001 ffae 	bl	800bc6c <HW_IPCC_SYS_SendCmd>

  return 0;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20030000 	.word	0x20030000

08009d20 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d24:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	2005      	movs	r0, #5
 8009d2e:	f000 f8d9 	bl	8009ee4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d32:	4b05      	ldr	r3, [pc, #20]	@ (8009d48 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a03      	ldr	r2, [pc, #12]	@ (8009d44 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d38:	68d2      	ldr	r2, [r2, #12]
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3

  return;
 8009d40:	bf00      	nop
}
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	20030000 	.word	0x20030000
 8009d48:	20000504 	.word	0x20000504

08009d4c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009d52:	e00e      	b.n	8009d72 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009d54:	1d3b      	adds	r3, r7, #4
 8009d56:	4619      	mov	r1, r3
 8009d58:	480b      	ldr	r0, [pc, #44]	@ (8009d88 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009d5a:	f000 fa96 	bl	800a28a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4619      	mov	r1, r3
 8009d62:	2006      	movs	r0, #6
 8009d64:	f000 f8be 	bl	8009ee4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009d68:	4b08      	ldr	r3, [pc, #32]	@ (8009d8c <HW_IPCC_SYS_EvtNot+0x40>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	4610      	mov	r0, r2
 8009d70:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009d72:	4805      	ldr	r0, [pc, #20]	@ (8009d88 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009d74:	f000 f9fa 	bl	800a16c <LST_is_empty>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0ea      	beq.n	8009d54 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009d7e:	bf00      	nop
}
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	200300d0 	.word	0x200300d0
 8009d8c:	20000508 	.word	0x20000508

08009d90 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009d98:	4817      	ldr	r0, [pc, #92]	@ (8009df8 <TL_MM_Init+0x68>)
 8009d9a:	f000 f9d7 	bl	800a14c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009d9e:	4817      	ldr	r0, [pc, #92]	@ (8009dfc <TL_MM_Init+0x6c>)
 8009da0:	f000 f9d4 	bl	800a14c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009da4:	4b16      	ldr	r3, [pc, #88]	@ (8009e00 <TL_MM_Init+0x70>)
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	4a16      	ldr	r2, [pc, #88]	@ (8009e04 <TL_MM_Init+0x74>)
 8009daa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009dac:	4b15      	ldr	r3, [pc, #84]	@ (8009e04 <TL_MM_Init+0x74>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6892      	ldr	r2, [r2, #8]
 8009db4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009db6:	4b13      	ldr	r3, [pc, #76]	@ (8009e04 <TL_MM_Init+0x74>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	68d2      	ldr	r2, [r2, #12]
 8009dbe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009dc0:	4b10      	ldr	r3, [pc, #64]	@ (8009e04 <TL_MM_Init+0x74>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8009df8 <TL_MM_Init+0x68>)
 8009dc6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e04 <TL_MM_Init+0x74>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6812      	ldr	r2, [r2, #0]
 8009dd0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e04 <TL_MM_Init+0x74>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	6852      	ldr	r2, [r2, #4]
 8009dda:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009ddc:	4b09      	ldr	r3, [pc, #36]	@ (8009e04 <TL_MM_Init+0x74>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6912      	ldr	r2, [r2, #16]
 8009de4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009de6:	4b07      	ldr	r3, [pc, #28]	@ (8009e04 <TL_MM_Init+0x74>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6952      	ldr	r2, [r2, #20]
 8009dee:	619a      	str	r2, [r3, #24]

  return;
 8009df0:	bf00      	nop
}
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	200300b8 	.word	0x200300b8
 8009dfc:	200004f4 	.word	0x200004f4
 8009e00:	20030000 	.word	0x20030000
 8009e04:	2000050c 	.word	0x2000050c

08009e08 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	4807      	ldr	r0, [pc, #28]	@ (8009e30 <TL_MM_EvtDone+0x28>)
 8009e14:	f000 f9f2 	bl	800a1fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	f000 f862 	bl	8009ee4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009e20:	4804      	ldr	r0, [pc, #16]	@ (8009e34 <TL_MM_EvtDone+0x2c>)
 8009e22:	f001 ff49 	bl	800bcb8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009e26:	bf00      	nop
}
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	200004f4 	.word	0x200004f4
 8009e34:	08009e39 	.word	0x08009e39

08009e38 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e3e:	e00c      	b.n	8009e5a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009e40:	1d3b      	adds	r3, r7, #4
 8009e42:	4619      	mov	r1, r3
 8009e44:	480a      	ldr	r0, [pc, #40]	@ (8009e70 <SendFreeBuf+0x38>)
 8009e46:	f000 fa20 	bl	800a28a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e74 <SendFreeBuf+0x3c>)
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f9d1 	bl	800a1fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009e5a:	4805      	ldr	r0, [pc, #20]	@ (8009e70 <SendFreeBuf+0x38>)
 8009e5c:	f000 f986 	bl	800a16c <LST_is_empty>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0ec      	beq.n	8009e40 <SendFreeBuf+0x8>
  }

  return;
 8009e66:	bf00      	nop
}
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200004f4 	.word	0x200004f4
 8009e74:	20030000 	.word	0x20030000

08009e78 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009e7c:	4805      	ldr	r0, [pc, #20]	@ (8009e94 <TL_TRACES_Init+0x1c>)
 8009e7e:	f000 f965 	bl	800a14c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009e82:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <TL_TRACES_Init+0x20>)
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	4a03      	ldr	r2, [pc, #12]	@ (8009e94 <TL_TRACES_Init+0x1c>)
 8009e88:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009e8a:	f001 ff4b 	bl	800bd24 <HW_IPCC_TRACES_Init>

  return;
 8009e8e:	bf00      	nop
}
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	200300c0 	.word	0x200300c0
 8009e98:	20030000 	.word	0x20030000

08009e9c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009ea2:	e008      	b.n	8009eb6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009ea4:	1d3b      	adds	r3, r7, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4808      	ldr	r0, [pc, #32]	@ (8009ecc <HW_IPCC_TRACES_EvtNot+0x30>)
 8009eaa:	f000 f9ee 	bl	800a28a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 f80d 	bl	8009ed0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009eb6:	4805      	ldr	r0, [pc, #20]	@ (8009ecc <HW_IPCC_TRACES_EvtNot+0x30>)
 8009eb8:	f000 f958 	bl	800a16c <LST_is_empty>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009ec2:	bf00      	nop
}
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	200300c0 	.word	0x200300c0

08009ed0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	2b06      	cmp	r3, #6
 8009ef4:	d845      	bhi.n	8009f82 <OutputDbgTrace+0x9e>
 8009ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8009efc <OutputDbgTrace+0x18>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f3d 	.word	0x08009f3d
 8009f04:	08009f43 	.word	0x08009f43
 8009f08:	08009f57 	.word	0x08009f57
 8009f0c:	08009f63 	.word	0x08009f63
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f77 	.word	0x08009f77
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	7a5b      	ldrb	r3, [r3, #9]
 8009f20:	2bff      	cmp	r3, #255	@ 0xff
 8009f22:	d005      	beq.n	8009f30 <OutputDbgTrace+0x4c>
 8009f24:	2bff      	cmp	r3, #255	@ 0xff
 8009f26:	dc05      	bgt.n	8009f34 <OutputDbgTrace+0x50>
 8009f28:	2b0e      	cmp	r3, #14
 8009f2a:	d005      	beq.n	8009f38 <OutputDbgTrace+0x54>
 8009f2c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009f2e:	e001      	b.n	8009f34 <OutputDbgTrace+0x50>
          break;
 8009f30:	bf00      	nop
 8009f32:	e027      	b.n	8009f84 <OutputDbgTrace+0xa0>
          break;
 8009f34:	bf00      	nop
 8009f36:	e025      	b.n	8009f84 <OutputDbgTrace+0xa0>
          break;
 8009f38:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009f3a:	e023      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009f40:	e020      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	7a5b      	ldrb	r3, [r3, #9]
 8009f4a:	2b0e      	cmp	r3, #14
 8009f4c:	d001      	beq.n	8009f52 <OutputDbgTrace+0x6e>
 8009f4e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009f50:	e000      	b.n	8009f54 <OutputDbgTrace+0x70>
          break;
 8009f52:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f54:	e016      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	7a5b      	ldrb	r3, [r3, #9]
 8009f5e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f60:	e010      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009f66:	e00d      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8009f72:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f74:	e006      	b.n	8009f84 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	7a5b      	ldrb	r3, [r3, #9]
 8009f7e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009f80:	e000      	b.n	8009f84 <OutputDbgTrace+0xa0>

    default:
      break;
 8009f82:	bf00      	nop
  }

  return;
 8009f84:	bf00      	nop
}
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f96:	f3ef 8310 	mrs	r3, PRIMASK
 8009f9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009f9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fa0:	b672      	cpsid	i
}
 8009fa2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009fa4:	1cbb      	adds	r3, r7, #2
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4812      	ldr	r0, [pc, #72]	@ (8009ff4 <DbgTrace_TxCpltCallback+0x64>)
 8009faa:	f000 fbe5 	bl	800a778 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009fae:	1cbb      	adds	r3, r7, #2
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4810      	ldr	r0, [pc, #64]	@ (8009ff4 <DbgTrace_TxCpltCallback+0x64>)
 8009fb4:	f000 fccf 	bl	800a956 <CircularQueue_Sense>
 8009fb8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00c      	beq.n	8009fda <DbgTrace_TxCpltCallback+0x4a>
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f383 8810 	msr	PRIMASK, r3
}
 8009fca:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009fcc:	887b      	ldrh	r3, [r7, #2]
 8009fce:	4a0a      	ldr	r2, [pc, #40]	@ (8009ff8 <DbgTrace_TxCpltCallback+0x68>)
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6938      	ldr	r0, [r7, #16]
 8009fd4:	f7f6 feb1 	bl	8000d3a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009fd8:	e008      	b.n	8009fec <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009fda:	4b08      	ldr	r3, [pc, #32]	@ (8009ffc <DbgTrace_TxCpltCallback+0x6c>)
 8009fdc:	2201      	movs	r2, #1
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f383 8810 	msr	PRIMASK, r3
}
 8009fea:	bf00      	nop
}
 8009fec:	bf00      	nop
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000510 	.word	0x20000510
 8009ff8:	08009f91 	.word	0x08009f91
 8009ffc:	20000011 	.word	0x20000011

0800a000 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a006:	f7f6 fe92 	bl	8000d2e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a00a:	2302      	movs	r3, #2
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	2300      	movs	r3, #0
 800a010:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a014:	4903      	ldr	r1, [pc, #12]	@ (800a024 <DbgTraceInit+0x24>)
 800a016:	4804      	ldr	r0, [pc, #16]	@ (800a028 <DbgTraceInit+0x28>)
 800a018:	f000 f956 	bl	800a2c8 <CircularQueue_Init>
#endif 
#endif
  return;
 800a01c:	bf00      	nop
}
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20000530 	.word	0x20000530
 800a028:	20000510 	.word	0x20000510

0800a02c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 f805 	bl	800a04c <DbgTraceWrite>
 800a042:	4603      	mov	r3, r0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08a      	sub	sp, #40	@ 0x28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a05c:	f3ef 8310 	mrs	r3, PRIMASK
 800a060:	61bb      	str	r3, [r7, #24]
  return(result);
 800a062:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a064:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a06c:	d102      	bne.n	800a074 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	627b      	str	r3, [r7, #36]	@ 0x24
 800a072:	e037      	b.n	800a0e4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d006      	beq.n	800a088 <DbgTraceWrite+0x3c>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d003      	beq.n	800a088 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
 800a086:	e02d      	b.n	800a0e4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d02a      	beq.n	800a0e4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a092:	b672      	cpsid	i
}
 800a094:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	b29a      	uxth	r2, r3
 800a09a:	2301      	movs	r3, #1
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	4814      	ldr	r0, [pc, #80]	@ (800a0f0 <DbgTraceWrite+0xa4>)
 800a0a0:	f000 f944 	bl	800a32c <CircularQueue_Add>
 800a0a4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d015      	beq.n	800a0d8 <DbgTraceWrite+0x8c>
 800a0ac:	4b11      	ldr	r3, [pc, #68]	@ (800a0f4 <DbgTraceWrite+0xa8>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d010      	beq.n	800a0d8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f4 <DbgTraceWrite+0xa8>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f383 8810 	msr	PRIMASK, r3
}
 800a0c6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a0f8 <DbgTraceWrite+0xac>)
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	69f8      	ldr	r0, [r7, #28]
 800a0d2:	f7f6 fe32 	bl	8000d3a <DbgOutputTraces>
 800a0d6:	e005      	b.n	800a0e4 <DbgTraceWrite+0x98>
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f383 8810 	msr	PRIMASK, r3
}
 800a0e2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3728      	adds	r7, #40	@ 0x28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000510 	.word	0x20000510
 800a0f4:	20000011 	.word	0x20000011
 800a0f8:	08009f91 	.word	0x08009f91

0800a0fc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	4603      	mov	r3, r0
 800a104:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a106:	4b0f      	ldr	r3, [pc, #60]	@ (800a144 <OTP_Read+0x48>)
 800a108:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a10a:	e002      	b.n	800a112 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3b08      	subs	r3, #8
 800a110:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3307      	adds	r3, #7
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	79fa      	ldrb	r2, [r7, #7]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d003      	beq.n	800a126 <OTP_Read+0x2a>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	4a09      	ldr	r2, [pc, #36]	@ (800a148 <OTP_Read+0x4c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d1f2      	bne.n	800a10c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3307      	adds	r3, #7
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	79fa      	ldrb	r2, [r7, #7]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d001      	beq.n	800a136 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a136:	68fb      	ldr	r3, [r7, #12]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	1fff73f8 	.word	0x1fff73f8
 800a148:	1fff7000 	.word	0x1fff7000

0800a14c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a174:	f3ef 8310 	mrs	r3, PRIMASK
 800a178:	60fb      	str	r3, [r7, #12]
  return(result);
 800a17a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a17c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a17e:	b672      	cpsid	i
}
 800a180:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d102      	bne.n	800a192 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
 800a190:	e001      	b.n	800a196 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f383 8810 	msr	PRIMASK, r3
}
 800a1a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	371c      	adds	r7, #28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a1be:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1c4:	b672      	cpsid	i
}
 800a1c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	605a      	str	r2, [r3, #4]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f383 8810 	msr	PRIMASK, r3
}
 800a1ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a1f0:	bf00      	nop
 800a1f2:	371c      	adds	r7, #28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a206:	f3ef 8310 	mrs	r3, PRIMASK
 800a20a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a20c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a20e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a210:	b672      	cpsid	i
}
 800a212:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	601a      	str	r2, [r3, #0]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f383 8810 	msr	PRIMASK, r3
}
 800a23a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a23c:	bf00      	nop
 800a23e:	371c      	adds	r7, #28
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a250:	f3ef 8310 	mrs	r3, PRIMASK
 800a254:	60fb      	str	r3, [r7, #12]
  return(result);
 800a256:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a25a:	b672      	cpsid	i
}
 800a25c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	6812      	ldr	r2, [r2, #0]
 800a266:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	6852      	ldr	r2, [r2, #4]
 800a270:	605a      	str	r2, [r3, #4]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f383 8810 	msr	PRIMASK, r3
}
 800a27c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a27e:	bf00      	nop
 800a280:	371c      	adds	r7, #28
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a294:	f3ef 8310 	mrs	r3, PRIMASK
 800a298:	60fb      	str	r3, [r7, #12]
  return(result);
 800a29a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a29c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a29e:	b672      	cpsid	i
}
 800a2a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff ffca 	bl	800a248 <LST_remove_node>
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f383 8810 	msr	PRIMASK, r3
}
 800a2be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2c0:	bf00      	nop
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	887a      	ldrh	r2, [r7, #2]
 800a2fe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	7e3a      	ldrb	r2, [r7, #24]
 800a304:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a306:	7e3b      	ldrb	r3, [r7, #24]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d006      	beq.n	800a31e <CircularQueue_Init+0x56>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	891b      	ldrh	r3, [r3, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a31c:	e000      	b.n	800a320 <CircularQueue_Init+0x58>
  }
  return 0;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	@ 0x38
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	4613      	mov	r3, r2
 800a33a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a33c:	2300      	movs	r3, #0
 800a33e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a340:	2300      	movs	r3, #0
 800a342:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a344:	2300      	movs	r3, #0
 800a346:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a348:	2300      	movs	r3, #0
 800a34a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a34c:	2300      	movs	r3, #0
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a350:	2300      	movs	r3, #0
 800a352:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a354:	2300      	movs	r3, #0
 800a356:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <CircularQueue_Add+0x38>
 800a360:	2302      	movs	r3, #2
 800a362:	e000      	b.n	800a366 <CircularQueue_Add+0x3a>
 800a364:	2300      	movs	r3, #0
 800a366:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d029      	beq.n	800a3c4 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	891b      	ldrh	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d122      	bne.n	800a3be <CircularQueue_Add+0x92>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	4413      	add	r3, r2
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	4618      	mov	r0, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	1c59      	adds	r1, r3, #1
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	4299      	cmp	r1, r3
 800a396:	d306      	bcc.n	800a3a6 <CircularQueue_Add+0x7a>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6919      	ldr	r1, [r3, #16]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	1acb      	subs	r3, r1, r3
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	e002      	b.n	800a3ac <CircularQueue_Add+0x80>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4413      	add	r3, r2
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	021b      	lsls	r3, r3, #8
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	4403      	add	r3, r0
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3302      	adds	r3, #2
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	e001      	b.n	800a3c2 <CircularQueue_Add+0x96>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	891b      	ldrh	r3, [r3, #8]
 800a3c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	891b      	ldrh	r3, [r3, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	891b      	ldrh	r3, [r3, #8]
 800a3d0:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d307      	bcc.n	800a3ee <CircularQueue_Add+0xc2>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6919      	ldr	r1, [r3, #16]
 800a3e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a3e8:	440b      	add	r3, r1
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	e000      	b.n	800a3f0 <CircularQueue_Add+0xc4>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a3f2:	88fa      	ldrh	r2, [r7, #6]
 800a3f4:	7ffb      	ldrb	r3, [r7, #31]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	fb02 f303 	mul.w	r3, r2, r3
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	429a      	cmp	r2, r3
 800a404:	d80b      	bhi.n	800a41e <CircularQueue_Add+0xf2>
 800a406:	88fa      	ldrh	r2, [r7, #6]
 800a408:	7ffb      	ldrb	r3, [r7, #31]
 800a40a:	4413      	add	r3, r2
 800a40c:	461a      	mov	r2, r3
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	fbb3 f1f2 	udiv	r1, r3, r2
 800a414:	fb01 f202 	mul.w	r2, r1, r2
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	e000      	b.n	800a420 <CircularQueue_Add+0xf4>
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a422:	7dfa      	ldrb	r2, [r7, #23]
 800a424:	7ffb      	ldrb	r3, [r7, #31]
 800a426:	429a      	cmp	r2, r3
 800a428:	bf8c      	ite	hi
 800a42a:	2301      	movhi	r3, #1
 800a42c:	2300      	movls	r3, #0
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a432:	7fbb      	ldrb	r3, [r7, #30]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <CircularQueue_Add+0x11e>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	7f1b      	ldrb	r3, [r3, #28]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <CircularQueue_Add+0x11e>
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	b29b      	uxth	r3, r3
 800a448:	e000      	b.n	800a44c <CircularQueue_Add+0x120>
 800a44a:	8bbb      	ldrh	r3, [r7, #28]
 800a44c:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a44e:	7fbb      	ldrb	r3, [r7, #30]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d008      	beq.n	800a466 <CircularQueue_Add+0x13a>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	7f1b      	ldrb	r3, [r3, #28]
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <CircularQueue_Add+0x13a>
 800a460:	7ffb      	ldrb	r3, [r7, #31]
 800a462:	b29b      	uxth	r3, r3
 800a464:	e000      	b.n	800a468 <CircularQueue_Add+0x13c>
 800a466:	8bbb      	ldrh	r3, [r7, #28]
 800a468:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a46a:	88fb      	ldrh	r3, [r7, #6]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 817e 	beq.w	800a76e <CircularQueue_Add+0x442>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	695a      	ldr	r2, [r3, #20]
 800a476:	88f9      	ldrh	r1, [r7, #6]
 800a478:	7ffb      	ldrb	r3, [r7, #31]
 800a47a:	440b      	add	r3, r1
 800a47c:	4619      	mov	r1, r3
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	fb01 f303 	mul.w	r3, r1, r3
 800a484:	441a      	add	r2, r3
 800a486:	8bbb      	ldrh	r3, [r7, #28]
 800a488:	441a      	add	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	429a      	cmp	r2, r3
 800a490:	f200 816d 	bhi.w	800a76e <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a494:	2300      	movs	r3, #0
 800a496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a498:	e14a      	b.n	800a730 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	691a      	ldr	r2, [r3, #16]
 800a49e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4a0:	441a      	add	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d307      	bcc.n	800a4ba <CircularQueue_Add+0x18e>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	691a      	ldr	r2, [r3, #16]
 800a4ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4b0:	441a      	add	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	e003      	b.n	800a4c2 <CircularQueue_Add+0x196>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691a      	ldr	r2, [r3, #16]
 800a4be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4c0:	4413      	add	r3, r2
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	891b      	ldrh	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d130      	bne.n	800a536 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4da:	1c59      	adds	r1, r3, #1
 800a4dc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a4de:	4413      	add	r3, r2
 800a4e0:	88fa      	ldrh	r2, [r7, #6]
 800a4e2:	b2d2      	uxtb	r2, r2
 800a4e4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d304      	bcc.n	800a4fa <CircularQueue_Add+0x1ce>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	e000      	b.n	800a4fc <CircularQueue_Add+0x1d0>
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a4fe:	88fb      	ldrh	r3, [r7, #6]
 800a500:	0a1b      	lsrs	r3, r3, #8
 800a502:	b298      	uxth	r0, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50a:	1c59      	adds	r1, r3, #1
 800a50c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a50e:	4413      	add	r3, r2
 800a510:	b2c2      	uxtb	r2, r0
 800a512:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d304      	bcc.n	800a528 <CircularQueue_Add+0x1fc>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	e000      	b.n	800a52a <CircularQueue_Add+0x1fe>
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	1c9a      	adds	r2, r3, #2
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6859      	ldr	r1, [r3, #4]
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	1acb      	subs	r3, r1, r3
 800a540:	4293      	cmp	r3, r2
 800a542:	bf28      	it	cs
 800a544:	4613      	movcs	r3, r2
 800a546:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d007      	beq.n	800a560 <CircularQueue_Add+0x234>
 800a550:	88fb      	ldrh	r3, [r7, #6]
 800a552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a554:	429a      	cmp	r2, r3
 800a556:	d225      	bcs.n	800a5a4 <CircularQueue_Add+0x278>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	7f1b      	ldrb	r3, [r3, #28]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d121      	bne.n	800a5a4 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	18d0      	adds	r0, r2, r3
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	4413      	add	r3, r2
 800a574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a576:	4619      	mov	r1, r3
 800a578:	f002 f8d3 	bl	800c722 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	695a      	ldr	r2, [r3, #20]
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	441a      	add	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a588:	2300      	movs	r3, #0
 800a58a:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a590:	88fa      	ldrh	r2, [r7, #6]
 800a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a598:	7ffb      	ldrb	r3, [r7, #31]
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	88fb      	ldrh	r3, [r7, #6]
 800a59e:	4413      	add	r3, r2
 800a5a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a5a2:	e0a4      	b.n	800a6ee <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 80a1 	beq.w	800a6ee <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	7f1b      	ldrb	r3, [r3, #28]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d03a      	beq.n	800a62e <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	891b      	ldrh	r3, [r3, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10d      	bne.n	800a5dc <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c6:	3b02      	subs	r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	22ff      	movs	r2, #255	@ 0xff
 800a5cc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	4413      	add	r3, r2
 800a5d8:	22ff      	movs	r2, #255	@ 0xff
 800a5da:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	695a      	ldr	r2, [r3, #20]
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	441a      	add	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a5ec:	88fb      	ldrh	r3, [r7, #6]
 800a5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	891b      	ldrh	r3, [r3, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d16f      	bne.n	800a6dc <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a602:	1c59      	adds	r1, r3, #1
 800a604:	6339      	str	r1, [r7, #48]	@ 0x30
 800a606:	4413      	add	r3, r2
 800a608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a610:	0a18      	lsrs	r0, r3, #8
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	1c59      	adds	r1, r3, #1
 800a61a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a61c:	4413      	add	r3, r2
 800a61e:	b2c2      	uxtb	r2, r0
 800a620:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	1c9a      	adds	r2, r3, #2
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	615a      	str	r2, [r3, #20]
 800a62c:	e056      	b.n	800a6dc <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	7f1b      	ldrb	r3, [r3, #28]
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d050      	beq.n	800a6dc <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	891b      	ldrh	r3, [r3, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d14a      	bne.n	800a6d8 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	3b02      	subs	r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a64e:	b2d2      	uxtb	r2, r2
 800a650:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a654:	0a19      	lsrs	r1, r3, #8
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	3b01      	subs	r3, #1
 800a65e:	4413      	add	r3, r2
 800a660:	b2ca      	uxtb	r2, r1
 800a662:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	18d0      	adds	r0, r2, r3
 800a66c:	88fb      	ldrh	r3, [r7, #6]
 800a66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a670:	fb02 f303 	mul.w	r3, r2, r3
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4413      	add	r3, r2
 800a678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a67a:	4619      	mov	r1, r3
 800a67c:	f002 f851 	bl	800c722 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	695a      	ldr	r2, [r3, #20]
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	441a      	add	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68e:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a690:	88fa      	ldrh	r2, [r7, #6]
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	1c59      	adds	r1, r3, #1
 800a6ae:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6b0:	4413      	add	r3, r2
 800a6b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ba:	0a18      	lsrs	r0, r3, #8
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	1c59      	adds	r1, r3, #1
 800a6c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6c6:	4413      	add	r3, r2
 800a6c8:	b2c2      	uxtb	r2, r0
 800a6ca:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	1c9a      	adds	r2, r3, #2
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	615a      	str	r2, [r3, #20]
 800a6d6:	e001      	b.n	800a6dc <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e049      	b.n	800a770 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a6dc:	7ffb      	ldrb	r3, [r7, #31]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d015      	beq.n	800a720 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	18d0      	adds	r0, r2, r3
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a700:	fb03 f202 	mul.w	r2, r3, r2
 800a704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a706:	4413      	add	r3, r2
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	4413      	add	r3, r2
 800a70c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a70e:	4619      	mov	r1, r3
 800a710:	f002 f807 	bl	800c722 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	695a      	ldr	r2, [r3, #20]
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	441a      	add	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72c:	3301      	adds	r3, #1
 800a72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	f4ff aeb0 	bcc.w	800a49a <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6919      	ldr	r1, [r3, #16]
 800a742:	7ffb      	ldrb	r3, [r7, #31]
 800a744:	4419      	add	r1, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	4299      	cmp	r1, r3
 800a74c:	d307      	bcc.n	800a75e <CircularQueue_Add+0x432>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6919      	ldr	r1, [r3, #16]
 800a752:	7ffb      	ldrb	r3, [r7, #31]
 800a754:	4419      	add	r1, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	1acb      	subs	r3, r1, r3
 800a75c:	e003      	b.n	800a766 <CircularQueue_Add+0x43a>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6919      	ldr	r1, [r3, #16]
 800a762:	7ffb      	ldrb	r3, [r7, #31]
 800a764:	440b      	add	r3, r1
 800a766:	4413      	add	r3, r2
 800a768:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	e000      	b.n	800a770 <CircularQueue_Add+0x444>
    return NULL;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3738      	adds	r7, #56	@ 0x38
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	891b      	ldrh	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <CircularQueue_Remove+0x1e>
 800a792:	2302      	movs	r3, #2
 800a794:	e000      	b.n	800a798 <CircularQueue_Remove+0x20>
 800a796:	2300      	movs	r3, #0
 800a798:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 80ca 	beq.w	800a93c <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	891b      	ldrh	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d120      	bne.n	800a7f2 <CircularQueue_Remove+0x7a>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	1c59      	adds	r1, r3, #1
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	4299      	cmp	r1, r3
 800a7ce:	d306      	bcc.n	800a7de <CircularQueue_Remove+0x66>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68d9      	ldr	r1, [r3, #12]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	1acb      	subs	r3, r1, r3
 800a7da:	3301      	adds	r3, #1
 800a7dc:	e002      	b.n	800a7e4 <CircularQueue_Remove+0x6c>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	4413      	add	r3, r2
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	4403      	add	r3, r0
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	e001      	b.n	800a7f6 <CircularQueue_Remove+0x7e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	891b      	ldrh	r3, [r3, #8]
 800a7f6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7f1b      	ldrb	r3, [r3, #28]
 800a7fc:	f003 0301 	and.w	r3, r3, #1
 800a800:	2b00      	cmp	r3, #0
 800a802:	d056      	beq.n	800a8b2 <CircularQueue_Remove+0x13a>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7f1b      	ldrb	r3, [r3, #28]
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d150      	bne.n	800a8b2 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a810:	897b      	ldrh	r3, [r7, #10]
 800a812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a816:	4293      	cmp	r3, r2
 800a818:	d103      	bne.n	800a822 <CircularQueue_Remove+0xaa>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	891b      	ldrh	r3, [r3, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d012      	beq.n	800a848 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d941      	bls.n	800a8b2 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	891b      	ldrh	r3, [r3, #8]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d03d      	beq.n	800a8b2 <CircularQueue_Remove+0x13a>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	8912      	ldrh	r2, [r2, #8]
 800a844:	4293      	cmp	r3, r2
 800a846:	d234      	bcs.n	800a8b2 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68d9      	ldr	r1, [r3, #12]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	1acb      	subs	r3, r1, r3
 800a856:	441a      	add	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	891b      	ldrh	r3, [r3, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d120      	bne.n	800a8ac <CircularQueue_Remove+0x134>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	4413      	add	r3, r2
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	4618      	mov	r0, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	1c59      	adds	r1, r3, #1
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	4299      	cmp	r1, r3
 800a888:	d306      	bcc.n	800a898 <CircularQueue_Remove+0x120>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68d9      	ldr	r1, [r3, #12]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	1acb      	subs	r3, r1, r3
 800a894:	3301      	adds	r3, #1
 800a896:	e002      	b.n	800a89e <CircularQueue_Remove+0x126>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4403      	add	r3, r0
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	e001      	b.n	800a8b0 <CircularQueue_Remove+0x138>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	891b      	ldrh	r3, [r3, #8]
 800a8b0:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68d9      	ldr	r1, [r3, #12]
 800a8ba:	7a7b      	ldrb	r3, [r7, #9]
 800a8bc:	4419      	add	r1, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	d307      	bcc.n	800a8d6 <CircularQueue_Remove+0x15e>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68d9      	ldr	r1, [r3, #12]
 800a8ca:	7a7b      	ldrb	r3, [r7, #9]
 800a8cc:	4419      	add	r1, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	1acb      	subs	r3, r1, r3
 800a8d4:	e003      	b.n	800a8de <CircularQueue_Remove+0x166>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68d9      	ldr	r1, [r3, #12]
 800a8da:	7a7b      	ldrb	r3, [r7, #9]
 800a8dc:	440b      	add	r3, r1
 800a8de:	4413      	add	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	8979      	ldrh	r1, [r7, #10]
 800a8e8:	7a7a      	ldrb	r2, [r7, #9]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	1a9a      	subs	r2, r3, r2
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01b      	beq.n	800a932 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	897b      	ldrh	r3, [r7, #10]
 800a900:	441a      	add	r2, r3
 800a902:	7a7b      	ldrb	r3, [r7, #9]
 800a904:	441a      	add	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d309      	bcc.n	800a922 <CircularQueue_Remove+0x1aa>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	897b      	ldrh	r3, [r7, #10]
 800a914:	441a      	add	r2, r3
 800a916:	7a7b      	ldrb	r3, [r7, #9]
 800a918:	441a      	add	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	e005      	b.n	800a92e <CircularQueue_Remove+0x1b6>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	897b      	ldrh	r3, [r7, #10]
 800a928:	441a      	add	r2, r3
 800a92a:	7a7b      	ldrb	r3, [r7, #9]
 800a92c:	4413      	add	r3, r2
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	1e5a      	subs	r2, r3, #1
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d002      	beq.n	800a948 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	897a      	ldrh	r2, [r7, #10]
 800a946:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a948:	68fb      	ldr	r3, [r7, #12]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a956:	b480      	push	{r7}
 800a958:	b087      	sub	sp, #28
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	891b      	ldrh	r3, [r3, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <CircularQueue_Sense+0x1e>
 800a970:	2302      	movs	r3, #2
 800a972:	e000      	b.n	800a976 <CircularQueue_Sense+0x20>
 800a974:	2300      	movs	r3, #0
 800a976:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 808e 	beq.w	800aaa6 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	891b      	ldrh	r3, [r3, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d120      	bne.n	800a9da <CircularQueue_Sense+0x84>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	1c59      	adds	r1, r3, #1
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	4299      	cmp	r1, r3
 800a9b6:	d306      	bcc.n	800a9c6 <CircularQueue_Sense+0x70>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68d9      	ldr	r1, [r3, #12]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	1acb      	subs	r3, r1, r3
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	e002      	b.n	800a9cc <CircularQueue_Sense+0x76>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	4413      	add	r3, r2
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	4403      	add	r3, r0
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	e001      	b.n	800a9de <CircularQueue_Sense+0x88>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	891b      	ldrh	r3, [r3, #8]
 800a9de:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7f1b      	ldrb	r3, [r3, #28]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d047      	beq.n	800aa7c <CircularQueue_Sense+0x126>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	7f1b      	ldrb	r3, [r3, #28]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d141      	bne.n	800aa7c <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a9f8:	8a7b      	ldrh	r3, [r7, #18]
 800a9fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d103      	bne.n	800aa0a <CircularQueue_Sense+0xb4>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	891b      	ldrh	r3, [r3, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d012      	beq.n	800aa30 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d932      	bls.n	800aa7c <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	891b      	ldrh	r3, [r3, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d02e      	beq.n	800aa7c <CircularQueue_Sense+0x126>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	8912      	ldrh	r2, [r2, #8]
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d225      	bcs.n	800aa7c <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	891b      	ldrh	r3, [r3, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d11c      	bne.n	800aa76 <CircularQueue_Sense+0x120>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	1c59      	adds	r1, r3, #1
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4299      	cmp	r1, r3
 800aa56:	d305      	bcc.n	800aa64 <CircularQueue_Sense+0x10e>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	68f9      	ldr	r1, [r7, #12]
 800aa5e:	1acb      	subs	r3, r1, r3
 800aa60:	3301      	adds	r3, #1
 800aa62:	e001      	b.n	800aa68 <CircularQueue_Sense+0x112>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3301      	adds	r3, #1
 800aa68:	4413      	add	r3, r2
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	021b      	lsls	r3, r3, #8
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	4403      	add	r3, r0
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	e001      	b.n	800aa7a <CircularQueue_Sense+0x124>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	891b      	ldrh	r3, [r3, #8]
 800aa7a:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	7af9      	ldrb	r1, [r7, #11]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4419      	add	r1, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	4299      	cmp	r1, r3
 800aa8c:	d306      	bcc.n	800aa9c <CircularQueue_Sense+0x146>
 800aa8e:	7af9      	ldrb	r1, [r7, #11]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4419      	add	r1, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	1acb      	subs	r3, r1, r3
 800aa9a:	e002      	b.n	800aaa2 <CircularQueue_Sense+0x14c>
 800aa9c:	7af9      	ldrb	r1, [r7, #11]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	440b      	add	r3, r1
 800aaa2:	4413      	add	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	8a7a      	ldrh	r2, [r7, #18]
 800aab0:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800aab2:	697b      	ldr	r3, [r7, #20]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800aac4:	4b03      	ldr	r3, [pc, #12]	@ (800aad4 <LL_FLASH_GetUDN+0x14>)
 800aac6:	681b      	ldr	r3, [r3, #0]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	1fff7580 	.word	0x1fff7580

0800aad8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800aad8:	b480      	push	{r7}
 800aada:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800aadc:	4b03      	ldr	r3, [pc, #12]	@ (800aaec <LL_FLASH_GetDeviceID+0x14>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	b2db      	uxtb	r3, r3
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	1fff7584 	.word	0x1fff7584

0800aaf0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800aaf4:	4b03      	ldr	r3, [pc, #12]	@ (800ab04 <LL_FLASH_GetSTCompanyID+0x14>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	1fff7584 	.word	0x1fff7584

0800ab08 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ab08:	b5b0      	push	{r4, r5, r7, lr}
 800ab0a:	b090      	sub	sp, #64	@ 0x40
 800ab0c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ab0e:	2392      	movs	r3, #146	@ 0x92
 800ab10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ab14:	4b31      	ldr	r3, [pc, #196]	@ (800abdc <APP_BLE_Init+0xd4>)
 800ab16:	1d3c      	adds	r4, r7, #4
 800ab18:	461d      	mov	r5, r3
 800ab1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab2a:	c403      	stmia	r4!, {r0, r1}
 800ab2c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ab2e:	f000 fa67 	bl	800b000 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ab32:	2101      	movs	r1, #1
 800ab34:	2002      	movs	r0, #2
 800ab36:	f001 f91d 	bl	800bd74 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ab3a:	4a29      	ldr	r2, [pc, #164]	@ (800abe0 <APP_BLE_Init+0xd8>)
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	2002      	movs	r0, #2
 800ab40:	f001 fa44 	bl	800bfcc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ab44:	1d3b      	adds	r3, r7, #4
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fc14 	bl	8009374 <SHCI_C2_BLE_Init>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ab52:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d008      	beq.n	800ab6c <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800ab5a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ab5e:	4619      	mov	r1, r3
 800ab60:	4820      	ldr	r0, [pc, #128]	@ (800abe4 <APP_BLE_Init+0xdc>)
 800ab62:	f001 fc13 	bl	800c38c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ab66:	f7f7 f8d9 	bl	8001d1c <Error_Handler>
 800ab6a:	e002      	b.n	800ab72 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800ab6c:	481e      	ldr	r0, [pc, #120]	@ (800abe8 <APP_BLE_Init+0xe0>)
 800ab6e:	f001 fc0d 	bl	800c38c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ab72:	f000 fa5b 	bl	800b02c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ab76:	f7fe fb57 	bl	8009228 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ab7a:	4b1c      	ldr	r3, [pc, #112]	@ (800abec <APP_BLE_Init+0xe4>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ab82:	4b1a      	ldr	r3, [pc, #104]	@ (800abec <APP_BLE_Init+0xe4>)
 800ab84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab88:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ab8a:	4a19      	ldr	r2, [pc, #100]	@ (800abf0 <APP_BLE_Init+0xe8>)
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2001      	movs	r0, #1
 800ab90:	f001 fa1c 	bl	800bfcc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ab94:	2006      	movs	r0, #6
 800ab96:	f7fe f9ba 	bl	8008f0e <aci_hal_set_radio_activity_mask>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800aba0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d006      	beq.n	800abb6 <APP_BLE_Init+0xae>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800aba8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800abac:	4619      	mov	r1, r3
 800abae:	4811      	ldr	r0, [pc, #68]	@ (800abf4 <APP_BLE_Init+0xec>)
 800abb0:	f001 fbec 	bl	800c38c <iprintf>
 800abb4:	e002      	b.n	800abbc <APP_BLE_Init+0xb4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800abb6:	4810      	ldr	r0, [pc, #64]	@ (800abf8 <APP_BLE_Init+0xf0>)
 800abb8:	f001 fbe8 	bl	800c38c <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800abbc:	f000 fd0e 	bl	800b5dc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800abc0:	4b0a      	ldr	r3, [pc, #40]	@ (800abec <APP_BLE_Init+0xe4>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800abc6:	4b09      	ldr	r3, [pc, #36]	@ (800abec <APP_BLE_Init+0xe4>)
 800abc8:	2200      	movs	r2, #0
 800abca:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800abcc:	2001      	movs	r0, #1
 800abce:	f000 fbbb 	bl	800b348 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800abd2:	bf00      	nop
}
 800abd4:	3740      	adds	r7, #64	@ 0x40
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bdb0      	pop	{r4, r5, r7, pc}
 800abda:	bf00      	nop
 800abdc:	0800d634 	.word	0x0800d634
 800abe0:	08009591 	.word	0x08009591
 800abe4:	0800d558 	.word	0x0800d558
 800abe8:	0800d590 	.word	0x0800d590
 800abec:	20001538 	.word	0x20001538
 800abf0:	0800b471 	.word	0x0800b471
 800abf4:	0800d5b8 	.word	0x0800d5b8
 800abf8:	0800d5fc 	.word	0x0800d5fc

0800abfc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800abfc:	b5b0      	push	{r4, r5, r7, lr}
 800abfe:	b090      	sub	sp, #64	@ 0x40
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ac04:	2392      	movs	r3, #146	@ 0x92
 800ac06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800ac10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	2bff      	cmp	r3, #255	@ 0xff
 800ac16:	f000 80e9 	beq.w	800adec <SVCCTL_App_Notification+0x1f0>
 800ac1a:	2bff      	cmp	r3, #255	@ 0xff
 800ac1c:	f300 81d9 	bgt.w	800afd2 <SVCCTL_App_Notification+0x3d6>
 800ac20:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac22:	d042      	beq.n	800acaa <SVCCTL_App_Notification+0xae>
 800ac24:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac26:	f300 81d4 	bgt.w	800afd2 <SVCCTL_App_Notification+0x3d6>
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d002      	beq.n	800ac34 <SVCCTL_App_Notification+0x38>
 800ac2e:	2b10      	cmp	r3, #16
 800ac30:	d02e      	beq.n	800ac90 <SVCCTL_App_Notification+0x94>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ac32:	e1ce      	b.n	800afd2 <SVCCTL_App_Notification+0x3d6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac36:	3302      	adds	r3, #2
 800ac38:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	4bb3      	ldr	r3, [pc, #716]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800ac44:	8adb      	ldrh	r3, [r3, #22]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d114      	bne.n	800ac74 <SVCCTL_App_Notification+0x78>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ac4a:	4bb1      	ldr	r3, [pc, #708]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ac50:	4baf      	ldr	r3, [pc, #700]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ac58:	48ae      	ldr	r0, [pc, #696]	@ (800af14 <SVCCTL_App_Notification+0x318>)
 800ac5a:	f001 fc07 	bl	800c46c <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac64:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ac66:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	48aa      	ldr	r0, [pc, #680]	@ (800af18 <SVCCTL_App_Notification+0x31c>)
 800ac70:	f001 fb8c 	bl	800c38c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ac74:	2001      	movs	r0, #1
 800ac76:	f000 fb67 	bl	800b348 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800ac7a:	4ba8      	ldr	r3, [pc, #672]	@ (800af1c <SVCCTL_App_Notification+0x320>)
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ac80:	4ba3      	ldr	r3, [pc, #652]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800ac82:	8ada      	ldrh	r2, [r3, #22]
 800ac84:	4ba5      	ldr	r3, [pc, #660]	@ (800af1c <SVCCTL_App_Notification+0x320>)
 800ac86:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800ac88:	48a4      	ldr	r0, [pc, #656]	@ (800af1c <SVCCTL_App_Notification+0x320>)
 800ac8a:	f000 fc92 	bl	800b5b2 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ac8e:	e1a3      	b.n	800afd8 <SVCCTL_App_Notification+0x3dc>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800ac90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac92:	3302      	adds	r3, #2
 800ac94:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800ac96:	48a2      	ldr	r0, [pc, #648]	@ (800af20 <SVCCTL_App_Notification+0x324>)
 800ac98:	f001 fbe8 	bl	800c46c <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	4619      	mov	r1, r3
 800aca2:	48a0      	ldr	r0, [pc, #640]	@ (800af24 <SVCCTL_App_Notification+0x328>)
 800aca4:	f001 fb72 	bl	800c38c <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800aca8:	e196      	b.n	800afd8 <SVCCTL_App_Notification+0x3dc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800acaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acac:	3302      	adds	r3, #2
 800acae:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d02e      	beq.n	800ad16 <SVCCTL_App_Notification+0x11a>
 800acb8:	2b03      	cmp	r3, #3
 800acba:	f040 8095 	bne.w	800ade8 <SVCCTL_App_Notification+0x1ec>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	3301      	adds	r3, #1
 800acc2:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800acc4:	4898      	ldr	r0, [pc, #608]	@ (800af28 <SVCCTL_App_Notification+0x32c>)
 800acc6:	f001 fbd1 	bl	800c46c <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800acd0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7f5 fd28 	bl	8000728 <__aeabi_i2d>
 800acd8:	f04f 0200 	mov.w	r2, #0
 800acdc:	4b93      	ldr	r3, [pc, #588]	@ (800af2c <SVCCTL_App_Notification+0x330>)
 800acde:	f7f5 faa7 	bl	8000230 <__aeabi_dmul>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4610      	mov	r0, r2
 800ace8:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800acf0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800acf2:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	9400      	str	r4, [sp, #0]
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4888      	ldr	r0, [pc, #544]	@ (800af30 <SVCCTL_App_Notification+0x334>)
 800ad10:	f001 fb3c 	bl	800c38c <iprintf>
          break;
 800ad14:	e069      	b.n	800adea <SVCCTL_App_Notification+0x1ee>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	4619      	mov	r1, r3
 800ad26:	4883      	ldr	r0, [pc, #524]	@ (800af34 <SVCCTL_App_Notification+0x338>)
 800ad28:	f001 fb30 	bl	800c38c <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ad30:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ad36:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ad3c:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ad42:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ad48:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ad4e:	9302      	str	r3, [sp, #8]
 800ad50:	9101      	str	r1, [sp, #4]
 800ad52:	9200      	str	r2, [sp, #0]
 800ad54:	462b      	mov	r3, r5
 800ad56:	4622      	mov	r2, r4
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4877      	ldr	r0, [pc, #476]	@ (800af38 <SVCCTL_App_Notification+0x33c>)
 800ad5c:	f001 fb16 	bl	800c38c <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800ad66:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f5 fcdd 	bl	8000728 <__aeabi_i2d>
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	4b6e      	ldr	r3, [pc, #440]	@ (800af2c <SVCCTL_App_Notification+0x330>)
 800ad74:	f7f5 fa5c 	bl	8000230 <__aeabi_dmul>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800ad86:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ad88:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	9400      	str	r4, [sp, #0]
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4862      	ldr	r0, [pc, #392]	@ (800af30 <SVCCTL_App_Notification+0x334>)
 800ada6:	f001 faf1 	bl	800c38c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800adaa:	4b59      	ldr	r3, [pc, #356]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800adac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d104      	bne.n	800adbe <SVCCTL_App_Notification+0x1c2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800adb4:	4b56      	ldr	r3, [pc, #344]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800adb6:	2206      	movs	r2, #6
 800adb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800adbc:	e003      	b.n	800adc6 <SVCCTL_App_Notification+0x1ca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800adbe:	4b54      	ldr	r3, [pc, #336]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800adc0:	2205      	movs	r2, #5
 800adc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800adcc:	b29a      	uxth	r2, r3
 800adce:	4b50      	ldr	r3, [pc, #320]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800add0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800add2:	4b52      	ldr	r3, [pc, #328]	@ (800af1c <SVCCTL_App_Notification+0x320>)
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800add8:	4b4d      	ldr	r3, [pc, #308]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800adda:	8ada      	ldrh	r2, [r3, #22]
 800addc:	4b4f      	ldr	r3, [pc, #316]	@ (800af1c <SVCCTL_App_Notification+0x320>)
 800adde:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800ade0:	484e      	ldr	r0, [pc, #312]	@ (800af1c <SVCCTL_App_Notification+0x320>)
 800ade2:	f000 fbe6 	bl	800b5b2 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ade6:	e000      	b.n	800adea <SVCCTL_App_Notification+0x1ee>
          break;
 800ade8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800adea:	e0f5      	b.n	800afd8 <SVCCTL_App_Notification+0x3dc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adee:	3302      	adds	r3, #2
 800adf0:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800adf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf4:	881b      	ldrh	r3, [r3, #0]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800adfc:	4293      	cmp	r3, r2
 800adfe:	f000 80ce 	beq.w	800af9e <SVCCTL_App_Notification+0x3a2>
 800ae02:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ae06:	4293      	cmp	r3, r2
 800ae08:	f300 80e5 	bgt.w	800afd6 <SVCCTL_App_Notification+0x3da>
 800ae0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae10:	f000 80db 	beq.w	800afca <SVCCTL_App_Notification+0x3ce>
 800ae14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae18:	f300 80dd 	bgt.w	800afd6 <SVCCTL_App_Notification+0x3da>
 800ae1c:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ae20:	4293      	cmp	r3, r2
 800ae22:	f300 80d8 	bgt.w	800afd6 <SVCCTL_App_Notification+0x3da>
 800ae26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae2a:	dc06      	bgt.n	800ae3a <SVCCTL_App_Notification+0x23e>
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	f000 80ce 	beq.w	800afce <SVCCTL_App_Notification+0x3d2>
 800ae32:	2b06      	cmp	r3, #6
 800ae34:	f000 80bc 	beq.w	800afb0 <SVCCTL_App_Notification+0x3b4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ae38:	e0cd      	b.n	800afd6 <SVCCTL_App_Notification+0x3da>
 800ae3a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800ae3e:	2b09      	cmp	r3, #9
 800ae40:	f200 80c9 	bhi.w	800afd6 <SVCCTL_App_Notification+0x3da>
 800ae44:	a201      	add	r2, pc, #4	@ (adr r2, 800ae4c <SVCCTL_App_Notification+0x250>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800af69 	.word	0x0800af69
 800ae50:	0800ae85 	.word	0x0800ae85
 800ae54:	0800afd7 	.word	0x0800afd7
 800ae58:	0800afd7 	.word	0x0800afd7
 800ae5c:	0800afd7 	.word	0x0800afd7
 800ae60:	0800afd7 	.word	0x0800afd7
 800ae64:	0800ae75 	.word	0x0800ae75
 800ae68:	0800afd7 	.word	0x0800afd7
 800ae6c:	0800aebb 	.word	0x0800aebb
 800ae70:	0800ae7d 	.word	0x0800ae7d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ae74:	4831      	ldr	r0, [pc, #196]	@ (800af3c <SVCCTL_App_Notification+0x340>)
 800ae76:	f001 fa89 	bl	800c38c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ae7a:	e0a9      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ae7c:	4830      	ldr	r0, [pc, #192]	@ (800af40 <SVCCTL_App_Notification+0x344>)
 800ae7e:	f001 faf5 	bl	800c46c <puts>
          break;
 800ae82:	e0a5      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800ae84:	482f      	ldr	r0, [pc, #188]	@ (800af44 <SVCCTL_App_Notification+0x348>)
 800ae86:	f001 faf1 	bl	800c46c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ae8a:	4b21      	ldr	r3, [pc, #132]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800ae8c:	8adb      	ldrh	r3, [r3, #22]
 800ae8e:	492e      	ldr	r1, [pc, #184]	@ (800af48 <SVCCTL_App_Notification+0x34c>)
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fd f9e9 	bl	8008268 <aci_gap_pass_key_resp>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800ae9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d006      	beq.n	800aeb2 <SVCCTL_App_Notification+0x2b6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800aea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aea8:	4619      	mov	r1, r3
 800aeaa:	4828      	ldr	r0, [pc, #160]	@ (800af4c <SVCCTL_App_Notification+0x350>)
 800aeac:	f001 fa6e 	bl	800c38c <iprintf>
          break;
 800aeb0:	e08e      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800aeb2:	4827      	ldr	r0, [pc, #156]	@ (800af50 <SVCCTL_App_Notification+0x354>)
 800aeb4:	f001 fada 	bl	800c46c <puts>
          break;
 800aeb8:	e08a      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800aeba:	4826      	ldr	r0, [pc, #152]	@ (800af54 <SVCCTL_App_Notification+0x358>)
 800aebc:	f001 fad6 	bl	800c46c <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800aec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800aec4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aec8:	4619      	mov	r1, r3
 800aeca:	4823      	ldr	r0, [pc, #140]	@ (800af58 <SVCCTL_App_Notification+0x35c>)
 800aecc:	f001 fa5e 	bl	800c38c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800aed4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aed8:	4619      	mov	r1, r3
 800aeda:	4820      	ldr	r0, [pc, #128]	@ (800af5c <SVCCTL_App_Notification+0x360>)
 800aedc:	f001 fa56 	bl	800c38c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800aee0:	4b0b      	ldr	r3, [pc, #44]	@ (800af10 <SVCCTL_App_Notification+0x314>)
 800aee2:	8adb      	ldrh	r3, [r3, #22]
 800aee4:	2101      	movs	r1, #1
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fd fb68 	bl	80085bc <aci_gap_numeric_comparison_value_confirm_yesno>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800aef2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d006      	beq.n	800af08 <SVCCTL_App_Notification+0x30c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800aefa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aefe:	4619      	mov	r1, r3
 800af00:	4817      	ldr	r0, [pc, #92]	@ (800af60 <SVCCTL_App_Notification+0x364>)
 800af02:	f001 fa43 	bl	800c38c <iprintf>
          break;
 800af06:	e063      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800af08:	4816      	ldr	r0, [pc, #88]	@ (800af64 <SVCCTL_App_Notification+0x368>)
 800af0a:	f001 faaf 	bl	800c46c <puts>
          break;
 800af0e:	e05f      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
 800af10:	20001538 	.word	0x20001538
 800af14:	0800d670 	.word	0x0800d670
 800af18:	0800d69c 	.word	0x0800d69c
 800af1c:	200015bc 	.word	0x200015bc
 800af20:	0800d6d8 	.word	0x0800d6d8
 800af24:	0800d6fc 	.word	0x0800d6fc
 800af28:	0800d714 	.word	0x0800d714
 800af2c:	3ff40000 	.word	0x3ff40000
 800af30:	0800d748 	.word	0x0800d748
 800af34:	0800d7b4 	.word	0x0800d7b4
 800af38:	0800d7fc 	.word	0x0800d7fc
 800af3c:	0800d84c 	.word	0x0800d84c
 800af40:	0800d874 	.word	0x0800d874
 800af44:	0800d8a4 	.word	0x0800d8a4
 800af48:	0001b207 	.word	0x0001b207
 800af4c:	0800d8cc 	.word	0x0800d8cc
 800af50:	0800d900 	.word	0x0800d900
 800af54:	0800d928 	.word	0x0800d928
 800af58:	0800d95c 	.word	0x0800d95c
 800af5c:	0800d978 	.word	0x0800d978
 800af60:	0800d990 	.word	0x0800d990
 800af64:	0800d9e0 	.word	0x0800d9e0
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	3302      	adds	r3, #2
 800af6c:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800af6e:	481d      	ldr	r0, [pc, #116]	@ (800afe4 <SVCCTL_App_Notification+0x3e8>)
 800af70:	f001 fa7c 	bl	800c46c <puts>
          if (p_pairing_complete->Status != 0)
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	789b      	ldrb	r3, [r3, #2]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d009      	beq.n	800af90 <SVCCTL_App_Notification+0x394>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	789b      	ldrb	r3, [r3, #2]
 800af80:	4619      	mov	r1, r3
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	78db      	ldrb	r3, [r3, #3]
 800af86:	461a      	mov	r2, r3
 800af88:	4817      	ldr	r0, [pc, #92]	@ (800afe8 <SVCCTL_App_Notification+0x3ec>)
 800af8a:	f001 f9ff 	bl	800c38c <iprintf>
 800af8e:	e002      	b.n	800af96 <SVCCTL_App_Notification+0x39a>
            APP_DBG_MSG("     - Pairing Success\n");
 800af90:	4816      	ldr	r0, [pc, #88]	@ (800afec <SVCCTL_App_Notification+0x3f0>)
 800af92:	f001 fa6b 	bl	800c46c <puts>
          APP_DBG_MSG("\n");
 800af96:	200a      	movs	r0, #10
 800af98:	f001 fa0a 	bl	800c3b0 <putchar>
          break;
 800af9c:	e018      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800af9e:	4814      	ldr	r0, [pc, #80]	@ (800aff0 <SVCCTL_App_Notification+0x3f4>)
 800afa0:	f001 f9f4 	bl	800c38c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800afa4:	4b13      	ldr	r3, [pc, #76]	@ (800aff4 <SVCCTL_App_Notification+0x3f8>)
 800afa6:	8adb      	ldrh	r3, [r3, #22]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fd fe1a 	bl	8008be2 <aci_gatt_confirm_indication>
        break;
 800afae:	e00f      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb2:	3302      	adds	r3, #2
 800afb4:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 800afb6:	4810      	ldr	r0, [pc, #64]	@ (800aff8 <SVCCTL_App_Notification+0x3fc>)
 800afb8:	f001 fa58 	bl	800c46c <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	4619      	mov	r1, r3
 800afc2:	480e      	ldr	r0, [pc, #56]	@ (800affc <SVCCTL_App_Notification+0x400>)
 800afc4:	f001 f9e2 	bl	800c38c <iprintf>
          break;
 800afc8:	e002      	b.n	800afd0 <SVCCTL_App_Notification+0x3d4>
          break;
 800afca:	bf00      	nop
 800afcc:	e003      	b.n	800afd6 <SVCCTL_App_Notification+0x3da>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800afce:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800afd0:	e001      	b.n	800afd6 <SVCCTL_App_Notification+0x3da>
      break;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <SVCCTL_App_Notification+0x3dc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800afd6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800afd8:	2301      	movs	r3, #1
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3730      	adds	r7, #48	@ 0x30
 800afde:	46bd      	mov	sp, r7
 800afe0:	bdb0      	pop	{r4, r5, r7, pc}
 800afe2:	bf00      	nop
 800afe4:	0800da28 	.word	0x0800da28
 800afe8:	0800da54 	.word	0x0800da54
 800afec:	0800da90 	.word	0x0800da90
 800aff0:	0800daa8 	.word	0x0800daa8
 800aff4:	20001538 	.word	0x20001538
 800aff8:	0800dad0 	.word	0x0800dad0
 800affc:	0800daf4 	.word	0x0800daf4

0800b000 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b006:	4b06      	ldr	r3, [pc, #24]	@ (800b020 <Ble_Tl_Init+0x20>)
 800b008:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b00a:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <Ble_Tl_Init+0x24>)
 800b00c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b00e:	463b      	mov	r3, r7
 800b010:	4619      	mov	r1, r3
 800b012:	4805      	ldr	r0, [pc, #20]	@ (800b028 <Ble_Tl_Init+0x28>)
 800b014:	f7fe faa0 	bl	8009558 <hci_init>

  return;
 800b018:	bf00      	nop
}
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	200300d8 	.word	0x200300d8
 800b024:	0800b545 	.word	0x0800b545
 800b028:	0800b50d 	.word	0x0800b50d

0800b02c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b02e:	b08d      	sub	sp, #52	@ 0x34
 800b030:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b032:	2300      	movs	r3, #0
 800b034:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b036:	2392      	movs	r3, #146	@ 0x92
 800b038:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800b03a:	48a5      	ldr	r0, [pc, #660]	@ (800b2d0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b03c:	f001 fa16 	bl	800c46c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b040:	f7fd ffb9 	bl	8008fb6 <hci_reset>
 800b044:	4603      	mov	r3, r0
 800b046:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b048:	7dfb      	ldrb	r3, [r7, #23]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
 800b050:	4619      	mov	r1, r3
 800b052:	48a0      	ldr	r0, [pc, #640]	@ (800b2d4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800b054:	f001 f99a 	bl	800c38c <iprintf>
 800b058:	e002      	b.n	800b060 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800b05a:	489f      	ldr	r0, [pc, #636]	@ (800b2d8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800b05c:	f001 fa06 	bl	800c46c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b060:	f000 f9c2 	bl	800b3e8 <BleGetBdAddress>
 800b064:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	2106      	movs	r1, #6
 800b06a:	2000      	movs	r0, #0
 800b06c:	f7fd fe63 	bl	8008d36 <aci_hal_write_config_data>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d005      	beq.n	800b086 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	4619      	mov	r1, r3
 800b07e:	4897      	ldr	r0, [pc, #604]	@ (800b2dc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b080:	f001 f984 	bl	800c38c <iprintf>
 800b084:	e021      	b.n	800b0ca <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b086:	4896      	ldr	r0, [pc, #600]	@ (800b2e0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b088:	f001 f9f0 	bl	800c46c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	3305      	adds	r3, #5
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	3304      	adds	r3, #4
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	461c      	mov	r4, r3
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	3303      	adds	r3, #3
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	461d      	mov	r5, r3
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	3302      	adds	r3, #2
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	9101      	str	r1, [sp, #4]
 800b0bc:	9200      	str	r2, [sp, #0]
 800b0be:	462b      	mov	r3, r5
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	4887      	ldr	r0, [pc, #540]	@ (800b2e4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b0c6:	f001 f961 	bl	800c38c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b0ca:	4a87      	ldr	r2, [pc, #540]	@ (800b2e8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b0cc:	2110      	movs	r1, #16
 800b0ce:	2018      	movs	r0, #24
 800b0d0:	f7fd fe31 	bl	8008d36 <aci_hal_write_config_data>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4882      	ldr	r0, [pc, #520]	@ (800b2ec <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b0e4:	f001 f952 	bl	800c38c <iprintf>
 800b0e8:	e002      	b.n	800b0f0 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b0ea:	4881      	ldr	r0, [pc, #516]	@ (800b2f0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b0ec:	f001 f9be 	bl	800c46c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b0f0:	4a80      	ldr	r2, [pc, #512]	@ (800b2f4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b0f2:	2110      	movs	r1, #16
 800b0f4:	2008      	movs	r0, #8
 800b0f6:	f7fd fe1e 	bl	8008d36 <aci_hal_write_config_data>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d005      	beq.n	800b110 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	4619      	mov	r1, r3
 800b108:	487b      	ldr	r0, [pc, #492]	@ (800b2f8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b10a:	f001 f93f 	bl	800c38c <iprintf>
 800b10e:	e002      	b.n	800b116 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b110:	487a      	ldr	r0, [pc, #488]	@ (800b2fc <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b112:	f001 f9ab 	bl	800c46c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b116:	2118      	movs	r1, #24
 800b118:	2001      	movs	r0, #1
 800b11a:	f7fd fe91 	bl	8008e40 <aci_hal_set_tx_power_level>
 800b11e:	4603      	mov	r3, r0
 800b120:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d005      	beq.n	800b134 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	4619      	mov	r1, r3
 800b12c:	4874      	ldr	r0, [pc, #464]	@ (800b300 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b12e:	f001 f92d 	bl	800c38c <iprintf>
 800b132:	e002      	b.n	800b13a <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b134:	4873      	ldr	r0, [pc, #460]	@ (800b304 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b136:	f001 f999 	bl	800c46c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b13a:	f7fd faa6 	bl	800868a <aci_gatt_init>
 800b13e:	4603      	mov	r3, r0
 800b140:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d005      	beq.n	800b154 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	4619      	mov	r1, r3
 800b14c:	486e      	ldr	r0, [pc, #440]	@ (800b308 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b14e:	f001 f91d 	bl	800c38c <iprintf>
 800b152:	e002      	b.n	800b15a <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b154:	486d      	ldr	r0, [pc, #436]	@ (800b30c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b156:	f001 f989 	bl	800c46c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	f043 0301 	orr.w	r3, r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d02b      	beq.n	800b1c4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b16c:	4b68      	ldr	r3, [pc, #416]	@ (800b310 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b16e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b170:	1dba      	adds	r2, r7, #6
 800b172:	7bf8      	ldrb	r0, [r7, #15]
 800b174:	1cbb      	adds	r3, r7, #2
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	1d3b      	adds	r3, r7, #4
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	4613      	mov	r3, r2
 800b17e:	2208      	movs	r2, #8
 800b180:	2100      	movs	r1, #0
 800b182:	f7fd f8d8 	bl	8008336 <aci_gap_init>
 800b186:	4603      	mov	r3, r0
 800b188:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	4619      	mov	r1, r3
 800b194:	485f      	ldr	r0, [pc, #380]	@ (800b314 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b196:	f001 f8f9 	bl	800c38c <iprintf>
 800b19a:	e002      	b.n	800b1a2 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b19c:	485e      	ldr	r0, [pc, #376]	@ (800b318 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b19e:	f001 f965 	bl	800c46c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b1a2:	88fc      	ldrh	r4, [r7, #6]
 800b1a4:	88bd      	ldrh	r5, [r7, #4]
 800b1a6:	68b8      	ldr	r0, [r7, #8]
 800b1a8:	f7f4 ffea 	bl	8000180 <strlen>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7fd fc68 	bl	8008a90 <aci_gatt_update_char_value>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b1c4:	88f8      	ldrh	r0, [r7, #6]
 800b1c6:	8879      	ldrh	r1, [r7, #2]
 800b1c8:	463b      	mov	r3, r7
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7fd fc5e 	bl	8008a90 <aci_gatt_update_char_value>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b1d8:	2202      	movs	r2, #2
 800b1da:	2102      	movs	r1, #2
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f7fd ff0e 	bl	8008ffe <hci_le_set_default_phy>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	484a      	ldr	r0, [pc, #296]	@ (800b31c <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800b1f2:	f001 f8cb 	bl	800c38c <iprintf>
 800b1f6:	e002      	b.n	800b1fe <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800b1f8:	4849      	ldr	r0, [pc, #292]	@ (800b320 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800b1fa:	f001 f937 	bl	800c46c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b1fe:	4b49      	ldr	r3, [pc, #292]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b200:	2201      	movs	r2, #1
 800b202:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b204:	4b47      	ldr	r3, [pc, #284]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fc ff15 	bl	8008038 <aci_gap_set_io_capability>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	4619      	mov	r1, r3
 800b21c:	4842      	ldr	r0, [pc, #264]	@ (800b328 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800b21e:	f001 f8b5 	bl	800c38c <iprintf>
 800b222:	e002      	b.n	800b22a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b224:	4841      	ldr	r0, [pc, #260]	@ (800b32c <Ble_Hci_Gap_Gatt_Init+0x300>)
 800b226:	f001 f921 	bl	800c46c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b22a:	4b3e      	ldr	r3, [pc, #248]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b230:	4b3c      	ldr	r3, [pc, #240]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b232:	2208      	movs	r2, #8
 800b234:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b236:	4b3b      	ldr	r3, [pc, #236]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b238:	2210      	movs	r2, #16
 800b23a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b23c:	4b39      	ldr	r3, [pc, #228]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b23e:	2200      	movs	r2, #0
 800b240:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b242:	4b38      	ldr	r3, [pc, #224]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b244:	4a3a      	ldr	r2, [pc, #232]	@ (800b330 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800b246:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b248:	4b36      	ldr	r3, [pc, #216]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b24e:	4b35      	ldr	r3, [pc, #212]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b250:	789c      	ldrb	r4, [r3, #2]
 800b252:	4b34      	ldr	r3, [pc, #208]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b254:	785d      	ldrb	r5, [r3, #1]
 800b256:	4b33      	ldr	r3, [pc, #204]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b258:	791b      	ldrb	r3, [r3, #4]
 800b25a:	4a32      	ldr	r2, [pc, #200]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b25c:	7952      	ldrb	r2, [r2, #5]
 800b25e:	4931      	ldr	r1, [pc, #196]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b260:	78c9      	ldrb	r1, [r1, #3]
 800b262:	4830      	ldr	r0, [pc, #192]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b264:	6880      	ldr	r0, [r0, #8]
 800b266:	2600      	movs	r6, #0
 800b268:	9604      	str	r6, [sp, #16]
 800b26a:	9003      	str	r0, [sp, #12]
 800b26c:	9102      	str	r1, [sp, #8]
 800b26e:	9201      	str	r2, [sp, #4]
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	2300      	movs	r3, #0
 800b274:	2201      	movs	r2, #1
 800b276:	4629      	mov	r1, r5
 800b278:	4620      	mov	r0, r4
 800b27a:	f7fc ff31 	bl	80080e0 <aci_gap_set_authentication_requirement>
 800b27e:	4603      	mov	r3, r0
 800b280:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	4619      	mov	r1, r3
 800b28c:	4829      	ldr	r0, [pc, #164]	@ (800b334 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800b28e:	f001 f87d 	bl	800c38c <iprintf>
 800b292:	e002      	b.n	800b29a <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b294:	4828      	ldr	r0, [pc, #160]	@ (800b338 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800b296:	f001 f8e9 	bl	800c46c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b29a:	4b22      	ldr	r3, [pc, #136]	@ (800b324 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800b29c:	789b      	ldrb	r3, [r3, #2]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00f      	beq.n	800b2c2 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800b2a2:	f7fd f967 	bl	8008574 <aci_gap_configure_filter_accept_list>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4821      	ldr	r0, [pc, #132]	@ (800b33c <Ble_Hci_Gap_Gatt_Init+0x310>)
 800b2b6:	f001 f869 	bl	800c38c <iprintf>
 800b2ba:	e002      	b.n	800b2c2 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b2bc:	4820      	ldr	r0, [pc, #128]	@ (800b340 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800b2be:	f001 f8d5 	bl	800c46c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b2c2:	4820      	ldr	r0, [pc, #128]	@ (800b344 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800b2c4:	f001 f862 	bl	800c38c <iprintf>
}
 800b2c8:	bf00      	nop
 800b2ca:	371c      	adds	r7, #28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d0:	0800db0c 	.word	0x0800db0c
 800b2d4:	0800db38 	.word	0x0800db38
 800b2d8:	0800db68 	.word	0x0800db68
 800b2dc:	0800db88 	.word	0x0800db88
 800b2e0:	0800dbe4 	.word	0x0800dbe4
 800b2e4:	0800dc30 	.word	0x0800dc30
 800b2e8:	0800e770 	.word	0x0800e770
 800b2ec:	0800dc6c 	.word	0x0800dc6c
 800b2f0:	0800dcc4 	.word	0x0800dcc4
 800b2f4:	0800e780 	.word	0x0800e780
 800b2f8:	0800dd0c 	.word	0x0800dd0c
 800b2fc:	0800dd64 	.word	0x0800dd64
 800b300:	0800ddac 	.word	0x0800ddac
 800b304:	0800ddec 	.word	0x0800ddec
 800b308:	0800de1c 	.word	0x0800de1c
 800b30c:	0800de50 	.word	0x0800de50
 800b310:	0800de74 	.word	0x0800de74
 800b314:	0800de80 	.word	0x0800de80
 800b318:	0800deb0 	.word	0x0800deb0
 800b31c:	0800ded0 	.word	0x0800ded0
 800b320:	0800df0c 	.word	0x0800df0c
 800b324:	20001538 	.word	0x20001538
 800b328:	0800df38 	.word	0x0800df38
 800b32c:	0800df78 	.word	0x0800df78
 800b330:	0001b207 	.word	0x0001b207
 800b334:	0800dfa8 	.word	0x0800dfa8
 800b338:	0800dff4 	.word	0x0800dff4
 800b33c:	0800e030 	.word	0x0800e030
 800b340:	0800e070 	.word	0x0800e070
 800b344:	0800e0a0 	.word	0x0800e0a0

0800b348 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08c      	sub	sp, #48	@ 0x30
 800b34c:	af08      	add	r7, sp, #32
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b352:	2392      	movs	r3, #146	@ 0x92
 800b354:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b356:	4a1e      	ldr	r2, [pc, #120]	@ (800b3d0 <Adv_Request+0x88>)
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b35e:	2300      	movs	r3, #0
 800b360:	9306      	str	r3, [sp, #24]
 800b362:	2300      	movs	r3, #0
 800b364:	9305      	str	r3, [sp, #20]
 800b366:	2300      	movs	r3, #0
 800b368:	9304      	str	r3, [sp, #16]
 800b36a:	2300      	movs	r3, #0
 800b36c:	9303      	str	r3, [sp, #12]
 800b36e:	2300      	movs	r3, #0
 800b370:	9302      	str	r3, [sp, #8]
 800b372:	2300      	movs	r3, #0
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	2300      	movs	r3, #0
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	22a0      	movs	r2, #160	@ 0xa0
 800b37e:	2180      	movs	r1, #128	@ 0x80
 800b380:	2000      	movs	r0, #0
 800b382:	f7fc fd5f 	bl	8007e44 <aci_gap_set_discoverable>
 800b386:	4603      	mov	r3, r0
 800b388:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	4619      	mov	r1, r3
 800b394:	480f      	ldr	r0, [pc, #60]	@ (800b3d4 <Adv_Request+0x8c>)
 800b396:	f000 fff9 	bl	800c38c <iprintf>
 800b39a:	e002      	b.n	800b3a2 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b39c:	480e      	ldr	r0, [pc, #56]	@ (800b3d8 <Adv_Request+0x90>)
 800b39e:	f001 f865 	bl	800c46c <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b3a2:	490e      	ldr	r1, [pc, #56]	@ (800b3dc <Adv_Request+0x94>)
 800b3a4:	200c      	movs	r0, #12
 800b3a6:	f7fd f873 	bl	8008490 <aci_gap_update_adv_data>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4809      	ldr	r0, [pc, #36]	@ (800b3e0 <Adv_Request+0x98>)
 800b3ba:	f000 ffe7 	bl	800c38c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b3be:	e003      	b.n	800b3c8 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b3c0:	4808      	ldr	r0, [pc, #32]	@ (800b3e4 <Adv_Request+0x9c>)
 800b3c2:	f000 ffe3 	bl	800c38c <iprintf>
  return;
 800b3c6:	bf00      	nop
}
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20001538 	.word	0x20001538
 800b3d4:	0800e0cc 	.word	0x0800e0cc
 800b3d8:	0800e104 	.word	0x0800e104
 800b3dc:	20000014 	.word	0x20000014
 800b3e0:	0800e12c 	.word	0x0800e12c
 800b3e4:	0800e160 	.word	0x0800e160

0800b3e8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b3ee:	f7ff fb67 	bl	800aac0 <LL_FLASH_GetUDN>
 800b3f2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3fa:	d023      	beq.n	800b444 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b3fc:	f7ff fb78 	bl	800aaf0 <LL_FLASH_GetSTCompanyID>
 800b400:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b402:	f7ff fb69 	bl	800aad8 <LL_FLASH_GetDeviceID>
 800b406:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	4b16      	ldr	r3, [pc, #88]	@ (800b468 <BleGetBdAddress+0x80>)
 800b40e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	b2da      	uxtb	r2, r3
 800b416:	4b14      	ldr	r3, [pc, #80]	@ (800b468 <BleGetBdAddress+0x80>)
 800b418:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	4b12      	ldr	r3, [pc, #72]	@ (800b468 <BleGetBdAddress+0x80>)
 800b420:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	b2da      	uxtb	r2, r3
 800b426:	4b10      	ldr	r3, [pc, #64]	@ (800b468 <BleGetBdAddress+0x80>)
 800b428:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	0a1b      	lsrs	r3, r3, #8
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <BleGetBdAddress+0x80>)
 800b432:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	0c1b      	lsrs	r3, r3, #16
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	4b0b      	ldr	r3, [pc, #44]	@ (800b468 <BleGetBdAddress+0x80>)
 800b43c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b43e:	4b0a      	ldr	r3, [pc, #40]	@ (800b468 <BleGetBdAddress+0x80>)
 800b440:	617b      	str	r3, [r7, #20]
 800b442:	e00b      	b.n	800b45c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b444:	2000      	movs	r0, #0
 800b446:	f7fe fe59 	bl	800a0fc <OTP_Read>
 800b44a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	e001      	b.n	800b45c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b458:	4b04      	ldr	r3, [pc, #16]	@ (800b46c <BleGetBdAddress+0x84>)
 800b45a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b45c:	697b      	ldr	r3, [r7, #20]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20001530 	.word	0x20001530
 800b46c:	0800e768 	.word	0x0800e768

0800b470 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b476:	4b10      	ldr	r3, [pc, #64]	@ (800b4b8 <Adv_Cancel+0x48>)
 800b478:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	d017      	beq.n	800b4b0 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b480:	2392      	movs	r3, #146	@ 0x92
 800b482:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b484:	f7fc fcba 	bl	8007dfc <aci_gap_set_non_discoverable>
 800b488:	4603      	mov	r3, r0
 800b48a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b8 <Adv_Cancel+0x48>)
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b49a:	4808      	ldr	r0, [pc, #32]	@ (800b4bc <Adv_Cancel+0x4c>)
 800b49c:	f000 ff76 	bl	800c38c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b4a0:	e006      	b.n	800b4b0 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800b4a2:	4807      	ldr	r0, [pc, #28]	@ (800b4c0 <Adv_Cancel+0x50>)
 800b4a4:	f000 ff72 	bl	800c38c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b4a8:	4806      	ldr	r0, [pc, #24]	@ (800b4c4 <Adv_Cancel+0x54>)
 800b4aa:	f000 ff6f 	bl	800c38c <iprintf>
  return;
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
}
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20001538 	.word	0x20001538
 800b4bc:	0800e188 	.word	0x0800e188
 800b4c0:	0800e1ac 	.word	0x0800e1ac
 800b4c4:	0800e1b4 	.word	0x0800e1b4

0800b4c8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	2002      	movs	r0, #2
 800b4d4:	f000 fd9c 	bl	800c010 <UTIL_SEQ_SetTask>

  return;
 800b4d8:	bf00      	nop
}
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	f000 fdfd 	bl	800c0e8 <UTIL_SEQ_SetEvt>

  return;
 800b4ee:	bf00      	nop
}
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b4fe:	2001      	movs	r0, #1
 800b500:	f000 fe12 	bl	800c128 <UTIL_SEQ_WaitEvt>

  return;
 800b504:	bf00      	nop
}
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	3308      	adds	r3, #8
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fd fed4 	bl	80092cc <SVCCTL_UserEvtRx>
 800b524:	4603      	mov	r3, r0
 800b526:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b528:	7afb      	ldrb	r3, [r7, #11]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b534:	e003      	b.n	800b53e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
  return;
 800b53c:	bf00      	nop
}
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <BLE_StatusNot+0x16>
 800b554:	2b01      	cmp	r3, #1
 800b556:	d006      	beq.n	800b566 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b558:	e00b      	b.n	800b572 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b55a:	2303      	movs	r3, #3
 800b55c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 fd82 	bl	800c068 <UTIL_SEQ_PauseTask>
      break;
 800b564:	e005      	b.n	800b572 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b566:	2303      	movs	r3, #3
 800b568:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 fd9c 	bl	800c0a8 <UTIL_SEQ_ResumeTask>
      break;
 800b570:	bf00      	nop
  }

  return;
 800b572:	bf00      	nop
}
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b083      	sub	sp, #12
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b02      	cmp	r3, #2
 800b588:	d006      	beq.n	800b598 <Custom_STM_App_Notification+0x1e>
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	dc06      	bgt.n	800b59c <Custom_STM_App_Notification+0x22>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <Custom_STM_App_Notification+0x26>
 800b592:	2b01      	cmp	r3, #1
 800b594:	d006      	beq.n	800b5a4 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b596:	e001      	b.n	800b59c <Custom_STM_App_Notification+0x22>
      break;
 800b598:	bf00      	nop
 800b59a:	e004      	b.n	800b5a6 <Custom_STM_App_Notification+0x2c>
      break;
 800b59c:	bf00      	nop
 800b59e:	e002      	b.n	800b5a6 <Custom_STM_App_Notification+0x2c>
      break;
 800b5a0:	bf00      	nop
 800b5a2:	e000      	b.n	800b5a6 <Custom_STM_App_Notification+0x2c>
      break;
 800b5a4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b5a6:	bf00      	nop
}
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <Custom_APP_Notification+0x16>
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d002      	beq.n	800b5cc <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b5c6:	e002      	b.n	800b5ce <Custom_APP_Notification+0x1c>
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e000      	b.n	800b5ce <Custom_APP_Notification+0x1c>
      break;
 800b5cc:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b5ce:	bf00      	nop
}
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
	...

0800b5dc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	 Custom_STM_App_Update_Char(CUSTOM_STM_PILL_1, (uint8_t*)&pill_1);
 800b5e0:	4902      	ldr	r1, [pc, #8]	@ (800b5ec <Custom_APP_Init+0x10>)
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	f000 f936 	bl	800b854 <Custom_STM_App_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b5e8:	bf00      	nop
}
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20000020 	.word	0x20000020

0800b5f0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08e      	sub	sp, #56	@ 0x38
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3301      	adds	r3, #1
 800b602:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2bff      	cmp	r3, #255	@ 0xff
 800b60a:	f040 8082 	bne.w	800b712 <Custom_STM_Event_Handler+0x122>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	3302      	adds	r3, #2
 800b612:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800b61e:	2b1a      	cmp	r3, #26
 800b620:	d871      	bhi.n	800b706 <Custom_STM_Event_Handler+0x116>
 800b622:	a201      	add	r2, pc, #4	@ (adr r2, 800b628 <Custom_STM_Event_Handler+0x38>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b695 	.word	0x0800b695
 800b62c:	0800b707 	.word	0x0800b707
 800b630:	0800b707 	.word	0x0800b707
 800b634:	0800b707 	.word	0x0800b707
 800b638:	0800b707 	.word	0x0800b707
 800b63c:	0800b707 	.word	0x0800b707
 800b640:	0800b707 	.word	0x0800b707
 800b644:	0800b707 	.word	0x0800b707
 800b648:	0800b707 	.word	0x0800b707
 800b64c:	0800b707 	.word	0x0800b707
 800b650:	0800b707 	.word	0x0800b707
 800b654:	0800b707 	.word	0x0800b707
 800b658:	0800b707 	.word	0x0800b707
 800b65c:	0800b707 	.word	0x0800b707
 800b660:	0800b707 	.word	0x0800b707
 800b664:	0800b707 	.word	0x0800b707
 800b668:	0800b707 	.word	0x0800b707
 800b66c:	0800b707 	.word	0x0800b707
 800b670:	0800b707 	.word	0x0800b707
 800b674:	0800b6b5 	.word	0x0800b6b5
 800b678:	0800b707 	.word	0x0800b707
 800b67c:	0800b707 	.word	0x0800b707
 800b680:	0800b707 	.word	0x0800b707
 800b684:	0800b707 	.word	0x0800b707
 800b688:	0800b707 	.word	0x0800b707
 800b68c:	0800b707 	.word	0x0800b707
 800b690:	0800b6e9 	.word	0x0800b6e9
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b696:	3302      	adds	r3, #2
 800b698:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	885b      	ldrh	r3, [r3, #2]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4b1f      	ldr	r3, [pc, #124]	@ (800b720 <Custom_STM_Event_Handler+0x130>)
 800b6a4:	885b      	ldrh	r3, [r3, #2]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d12e      	bne.n	800b70a <Custom_STM_Event_Handler+0x11a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800b6b2:	e02a      	b.n	800b70a <Custom_STM_Event_Handler+0x11a>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b6:	3302      	adds	r3, #2
 800b6b8:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6bc:	885b      	ldrh	r3, [r3, #2]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4b17      	ldr	r3, [pc, #92]	@ (800b720 <Custom_STM_Event_Handler+0x130>)
 800b6c4:	885b      	ldrh	r3, [r3, #2]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d120      	bne.n	800b70e <Custom_STM_Event_Handler+0x11e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fd fad7 	bl	8008c8c <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */

//            Custom_STM_App_Update_Char(CUSTOM_STM_PILL_1, raw);
            Custom_STM_App_Update_Char(CUSTOM_STM_PILL_1, (uint8_t*)&raw);
 800b6de:	4911      	ldr	r1, [pc, #68]	@ (800b724 <Custom_STM_Event_Handler+0x134>)
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	f000 f8b7 	bl	800b854 <Custom_STM_App_Update_Char>
            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomPill_1Hdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800b6e6:	e012      	b.n	800b70e <Custom_STM_Event_Handler+0x11e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800b6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ea:	3302      	adds	r3, #2
 800b6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800b6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800b6fa:	f107 030c 	add.w	r3, r7, #12
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff ff3b 	bl	800b57a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800b704:	e004      	b.n	800b710 <Custom_STM_Event_Handler+0x120>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b706:	bf00      	nop
 800b708:	e004      	b.n	800b714 <Custom_STM_Event_Handler+0x124>
          break;
 800b70a:	bf00      	nop
 800b70c:	e002      	b.n	800b714 <Custom_STM_Event_Handler+0x124>
          break;
 800b70e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b710:	e000      	b.n	800b714 <Custom_STM_Event_Handler+0x124>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b712:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800b718:	4618      	mov	r0, r3
 800b71a:	3738      	adds	r7, #56	@ 0x38
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	200015c0 	.word	0x200015c0
 800b724:	20000464 	.word	0x20000464

0800b728 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08c      	sub	sp, #48	@ 0x30
 800b72c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b72e:	2392      	movs	r3, #146	@ 0x92
 800b730:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b732:	4840      	ldr	r0, [pc, #256]	@ (800b834 <SVCCTL_InitCustomSvc+0x10c>)
 800b734:	f7fd fdb0 	bl	8009298 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800b738:	2303      	movs	r3, #3
 800b73a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PILL_STATUS_UUID(uuid.Char_UUID_128);
 800b73c:	238f      	movs	r3, #143	@ 0x8f
 800b73e:	713b      	strb	r3, [r7, #4]
 800b740:	23e5      	movs	r3, #229	@ 0xe5
 800b742:	717b      	strb	r3, [r7, #5]
 800b744:	23b3      	movs	r3, #179	@ 0xb3
 800b746:	71bb      	strb	r3, [r7, #6]
 800b748:	23d5      	movs	r3, #213	@ 0xd5
 800b74a:	71fb      	strb	r3, [r7, #7]
 800b74c:	232e      	movs	r3, #46	@ 0x2e
 800b74e:	723b      	strb	r3, [r7, #8]
 800b750:	237f      	movs	r3, #127	@ 0x7f
 800b752:	727b      	strb	r3, [r7, #9]
 800b754:	234a      	movs	r3, #74	@ 0x4a
 800b756:	72bb      	strb	r3, [r7, #10]
 800b758:	2398      	movs	r3, #152	@ 0x98
 800b75a:	72fb      	strb	r3, [r7, #11]
 800b75c:	232a      	movs	r3, #42	@ 0x2a
 800b75e:	733b      	strb	r3, [r7, #12]
 800b760:	2348      	movs	r3, #72	@ 0x48
 800b762:	737b      	strb	r3, [r7, #13]
 800b764:	237a      	movs	r3, #122	@ 0x7a
 800b766:	73bb      	strb	r3, [r7, #14]
 800b768:	23cc      	movs	r3, #204	@ 0xcc
 800b76a:	73fb      	strb	r3, [r7, #15]
 800b76c:	2302      	movs	r3, #2
 800b76e:	743b      	strb	r3, [r7, #16]
 800b770:	2300      	movs	r3, #0
 800b772:	747b      	strb	r3, [r7, #17]
 800b774:	2300      	movs	r3, #0
 800b776:	74bb      	strb	r3, [r7, #18]
 800b778:	2300      	movs	r3, #0
 800b77a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b77c:	7dbb      	ldrb	r3, [r7, #22]
 800b77e:	1d39      	adds	r1, r7, #4
 800b780:	4a2d      	ldr	r2, [pc, #180]	@ (800b838 <SVCCTL_InitCustomSvc+0x110>)
 800b782:	9200      	str	r2, [sp, #0]
 800b784:	2201      	movs	r2, #1
 800b786:	2002      	movs	r0, #2
 800b788:	f7fc ffa4 	bl	80086d4 <aci_gatt_add_service>
 800b78c:	4603      	mov	r3, r0
 800b78e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomPill_StatusHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <SVCCTL_InitCustomSvc+0x7a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: PILL_STATUS, error code: 0x%x \n\r", ret);
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	4619      	mov	r1, r3
 800b79a:	4828      	ldr	r0, [pc, #160]	@ (800b83c <SVCCTL_InitCustomSvc+0x114>)
 800b79c:	f000 fdf6 	bl	800c38c <iprintf>
 800b7a0:	e002      	b.n	800b7a8 <SVCCTL_InitCustomSvc+0x80>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: PILL_STATUS \n\r");
 800b7a2:	4827      	ldr	r0, [pc, #156]	@ (800b840 <SVCCTL_InitCustomSvc+0x118>)
 800b7a4:	f000 fdf2 	bl	800c38c <iprintf>
  }

  /**
   *  PILL_1
   */
  COPY_PILL_1_UUID(uuid.Char_UUID_128);
 800b7a8:	2319      	movs	r3, #25
 800b7aa:	713b      	strb	r3, [r7, #4]
 800b7ac:	23ed      	movs	r3, #237	@ 0xed
 800b7ae:	717b      	strb	r3, [r7, #5]
 800b7b0:	2382      	movs	r3, #130	@ 0x82
 800b7b2:	71bb      	strb	r3, [r7, #6]
 800b7b4:	23ae      	movs	r3, #174	@ 0xae
 800b7b6:	71fb      	strb	r3, [r7, #7]
 800b7b8:	23ed      	movs	r3, #237	@ 0xed
 800b7ba:	723b      	strb	r3, [r7, #8]
 800b7bc:	2321      	movs	r3, #33	@ 0x21
 800b7be:	727b      	strb	r3, [r7, #9]
 800b7c0:	234c      	movs	r3, #76	@ 0x4c
 800b7c2:	72bb      	strb	r3, [r7, #10]
 800b7c4:	239d      	movs	r3, #157	@ 0x9d
 800b7c6:	72fb      	strb	r3, [r7, #11]
 800b7c8:	2341      	movs	r3, #65	@ 0x41
 800b7ca:	733b      	strb	r3, [r7, #12]
 800b7cc:	2345      	movs	r3, #69	@ 0x45
 800b7ce:	737b      	strb	r3, [r7, #13]
 800b7d0:	2322      	movs	r3, #34	@ 0x22
 800b7d2:	73bb      	strb	r3, [r7, #14]
 800b7d4:	238e      	movs	r3, #142	@ 0x8e
 800b7d6:	73fb      	strb	r3, [r7, #15]
 800b7d8:	2306      	movs	r3, #6
 800b7da:	743b      	strb	r3, [r7, #16]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	747b      	strb	r3, [r7, #17]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	74bb      	strb	r3, [r7, #18]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPill_StatusHdle,
 800b7e8:	4b13      	ldr	r3, [pc, #76]	@ (800b838 <SVCCTL_InitCustomSvc+0x110>)
 800b7ea:	8818      	ldrh	r0, [r3, #0]
 800b7ec:	4b15      	ldr	r3, [pc, #84]	@ (800b844 <SVCCTL_InitCustomSvc+0x11c>)
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	1d3a      	adds	r2, r7, #4
 800b7f2:	4915      	ldr	r1, [pc, #84]	@ (800b848 <SVCCTL_InitCustomSvc+0x120>)
 800b7f4:	9105      	str	r1, [sp, #20]
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	9104      	str	r1, [sp, #16]
 800b7fa:	2110      	movs	r1, #16
 800b7fc:	9103      	str	r1, [sp, #12]
 800b7fe:	2105      	movs	r1, #5
 800b800:	9102      	str	r1, [sp, #8]
 800b802:	2100      	movs	r1, #0
 800b804:	9101      	str	r1, [sp, #4]
 800b806:	210a      	movs	r1, #10
 800b808:	9100      	str	r1, [sp, #0]
 800b80a:	2102      	movs	r1, #2
 800b80c:	f7fd f838 	bl	8008880 <aci_gatt_add_char>
 800b810:	4603      	mov	r3, r0
 800b812:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomPill_1Hdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <SVCCTL_InitCustomSvc+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : PILL_1, error code: 0x%x \n\r", ret);
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	4619      	mov	r1, r3
 800b81e:	480b      	ldr	r0, [pc, #44]	@ (800b84c <SVCCTL_InitCustomSvc+0x124>)
 800b820:	f000 fdb4 	bl	800c38c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b824:	e003      	b.n	800b82e <SVCCTL_InitCustomSvc+0x106>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : PILL_1 \n\r");
 800b826:	480a      	ldr	r0, [pc, #40]	@ (800b850 <SVCCTL_InitCustomSvc+0x128>)
 800b828:	f000 fdb0 	bl	800c38c <iprintf>
  return;
 800b82c:	bf00      	nop
}
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	0800b5f1 	.word	0x0800b5f1
 800b838:	200015c0 	.word	0x200015c0
 800b83c:	0800e1d0 	.word	0x0800e1d0
 800b840:	0800e21c 	.word	0x0800e21c
 800b844:	2000002e 	.word	0x2000002e
 800b848:	200015c2 	.word	0x200015c2
 800b84c:	0800e254 	.word	0x0800e254
 800b850:	0800e29c 	.word	0x0800e29c

0800b854 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af02      	add	r7, sp, #8
 800b85a:	4603      	mov	r3, r0
 800b85c:	6039      	str	r1, [r7, #0]
 800b85e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b860:	2392      	movs	r3, #146	@ 0x92
 800b862:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d11b      	bne.n	800b8a2 <Custom_STM_App_Update_Char+0x4e>
  {

    case CUSTOM_STM_PILL_1:
      ret = aci_gatt_update_char_value(CustomContext.CustomPill_StatusHdle,
 800b86a:	4b11      	ldr	r3, [pc, #68]	@ (800b8b0 <Custom_STM_App_Update_Char+0x5c>)
 800b86c:	8818      	ldrh	r0, [r3, #0]
 800b86e:	4b10      	ldr	r3, [pc, #64]	@ (800b8b0 <Custom_STM_App_Update_Char+0x5c>)
 800b870:	8859      	ldrh	r1, [r3, #2]
 800b872:	4b10      	ldr	r3, [pc, #64]	@ (800b8b4 <Custom_STM_App_Update_Char+0x60>)
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	b2da      	uxtb	r2, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	2200      	movs	r2, #0
 800b880:	f7fd f906 	bl	8008a90 <aci_gatt_update_char_value>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomPill_1Hdle,
                                       0, /* charValOffset */
                                       SizePill_1, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d005      	beq.n	800b89a <Custom_STM_App_Update_Char+0x46>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value PILL_1 command, result : 0x%x \n\r", ret);
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	4619      	mov	r1, r3
 800b892:	4809      	ldr	r0, [pc, #36]	@ (800b8b8 <Custom_STM_App_Update_Char+0x64>)
 800b894:	f000 fd7a 	bl	800c38c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PILL_1 command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800b898:	e004      	b.n	800b8a4 <Custom_STM_App_Update_Char+0x50>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value PILL_1 command\n\r");
 800b89a:	4808      	ldr	r0, [pc, #32]	@ (800b8bc <Custom_STM_App_Update_Char+0x68>)
 800b89c:	f000 fd76 	bl	800c38c <iprintf>
      break;
 800b8a0:	e000      	b.n	800b8a4 <Custom_STM_App_Update_Char+0x50>

    default:
      break;
 800b8a2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	200015c0 	.word	0x200015c0
 800b8b4:	2000002e 	.word	0x2000002e
 800b8b8:	0800e2d0 	.word	0x0800e2d0
 800b8bc:	0800e318 	.word	0x0800e318

0800b8c0 <LL_PWR_EnableBootC2>:
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b8c4:	4b05      	ldr	r3, [pc, #20]	@ (800b8dc <LL_PWR_EnableBootC2+0x1c>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a04      	ldr	r2, [pc, #16]	@ (800b8dc <LL_PWR_EnableBootC2+0x1c>)
 800b8ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8ce:	60d3      	str	r3, [r2, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	58000400 	.word	0x58000400

0800b8e0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b8e8:	4b06      	ldr	r3, [pc, #24]	@ (800b904 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b8ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b8ee:	4905      	ldr	r1, [pc, #20]	@ (800b904 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b8f8:	bf00      	nop
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	58000800 	.word	0x58000800

0800b908 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b910:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b912:	6a1a      	ldr	r2, [r3, #32]
 800b914:	4904      	ldr	r1, [pc, #16]	@ (800b928 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4313      	orrs	r3, r2
 800b91a:	620b      	str	r3, [r1, #32]
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	58000800 	.word	0x58000800

0800b92c <LL_AHB3_GRP1_EnableClock>:
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b93a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4313      	orrs	r3, r2
 800b942:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4013      	ands	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b950:	68fb      	ldr	r3, [r7, #12]
}
 800b952:	bf00      	nop
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b95e:	b480      	push	{r7}
 800b960:	b085      	sub	sp, #20
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b96a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b96e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4313      	orrs	r3, r2
 800b976:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b97a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b97e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4013      	ands	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b988:	68fb      	ldr	r3, [r7, #12]
}
 800b98a:	bf00      	nop
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	601a      	str	r2, [r3, #0]
}
 800b9aa:	bf00      	nop
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f043 0201 	orr.w	r2, r3, #1
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	601a      	str	r2, [r3, #0]
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b083      	sub	sp, #12
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	43db      	mvns	r3, r3
 800b9ea:	401a      	ands	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	605a      	str	r2, [r3, #4]
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	431a      	orrs	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	605a      	str	r2, [r3, #4]
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	43db      	mvns	r3, r3
 800ba32:	401a      	ands	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	605a      	str	r2, [r3, #4]
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	609a      	str	r2, [r3, #8]
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	041a      	lsls	r2, r3, #16
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	609a      	str	r2, [r3, #8]
}
 800ba72:	bf00      	nop
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d101      	bne.n	800ba9a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	69da      	ldr	r2, [r3, #28]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	4013      	ands	r3, r2
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	429a      	cmp	r2, r3
 800babe:	d101      	bne.n	800bac4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bac0:	2301      	movs	r3, #1
 800bac2:	e000      	b.n	800bac6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
	...

0800bad4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bad8:	2102      	movs	r1, #2
 800bada:	4818      	ldr	r0, [pc, #96]	@ (800bb3c <HW_IPCC_Rx_Handler+0x68>)
 800badc:	f7ff ffe4 	bl	800baa8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d008      	beq.n	800baf8 <HW_IPCC_Rx_Handler+0x24>
 800bae6:	4b15      	ldr	r3, [pc, #84]	@ (800bb3c <HW_IPCC_Rx_Handler+0x68>)
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d102      	bne.n	800baf8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800baf2:	f000 f8d5 	bl	800bca0 <HW_IPCC_SYS_EvtHandler>
 800baf6:	e01e      	b.n	800bb36 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800baf8:	2101      	movs	r1, #1
 800bafa:	4810      	ldr	r0, [pc, #64]	@ (800bb3c <HW_IPCC_Rx_Handler+0x68>)
 800bafc:	f7ff ffd4 	bl	800baa8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <HW_IPCC_Rx_Handler+0x44>
 800bb06:	4b0d      	ldr	r3, [pc, #52]	@ (800bb3c <HW_IPCC_Rx_Handler+0x68>)
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d102      	bne.n	800bb18 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800bb12:	f000 f889 	bl	800bc28 <HW_IPCC_BLE_EvtHandler>
 800bb16:	e00e      	b.n	800bb36 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bb18:	2108      	movs	r1, #8
 800bb1a:	4808      	ldr	r0, [pc, #32]	@ (800bb3c <HW_IPCC_Rx_Handler+0x68>)
 800bb1c:	f7ff ffc4 	bl	800baa8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d008      	beq.n	800bb38 <HW_IPCC_Rx_Handler+0x64>
 800bb26:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <HW_IPCC_Rx_Handler+0x68>)
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	f003 0308 	and.w	r3, r3, #8
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800bb32:	f000 f901 	bl	800bd38 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bb36:	bf00      	nop
 800bb38:	bf00      	nop
}
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	58000c00 	.word	0x58000c00

0800bb40 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bb44:	2102      	movs	r1, #2
 800bb46:	4818      	ldr	r0, [pc, #96]	@ (800bba8 <HW_IPCC_Tx_Handler+0x68>)
 800bb48:	f7ff ff99 	bl	800ba7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d108      	bne.n	800bb64 <HW_IPCC_Tx_Handler+0x24>
 800bb52:	4b15      	ldr	r3, [pc, #84]	@ (800bba8 <HW_IPCC_Tx_Handler+0x68>)
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d102      	bne.n	800bb64 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800bb5e:	f000 f893 	bl	800bc88 <HW_IPCC_SYS_CmdEvtHandler>
 800bb62:	e01e      	b.n	800bba2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800bb64:	2108      	movs	r1, #8
 800bb66:	4810      	ldr	r0, [pc, #64]	@ (800bba8 <HW_IPCC_Tx_Handler+0x68>)
 800bb68:	f7ff ff89 	bl	800ba7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d108      	bne.n	800bb84 <HW_IPCC_Tx_Handler+0x44>
 800bb72:	4b0d      	ldr	r3, [pc, #52]	@ (800bba8 <HW_IPCC_Tx_Handler+0x68>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d102      	bne.n	800bb84 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800bb7e:	f000 f8bd 	bl	800bcfc <HW_IPCC_MM_FreeBufHandler>
 800bb82:	e00e      	b.n	800bba2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bb84:	2120      	movs	r1, #32
 800bb86:	4808      	ldr	r0, [pc, #32]	@ (800bba8 <HW_IPCC_Tx_Handler+0x68>)
 800bb88:	f7ff ff79 	bl	800ba7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d108      	bne.n	800bba4 <HW_IPCC_Tx_Handler+0x64>
 800bb92:	4b05      	ldr	r3, [pc, #20]	@ (800bba8 <HW_IPCC_Tx_Handler+0x68>)
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800bb9e:	f000 f84f 	bl	800bc40 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
}
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	58000c00 	.word	0x58000c00

0800bbac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bbb0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bbb4:	f7ff fed3 	bl	800b95e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bbb8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bbbc:	f7ff fea4 	bl	800b908 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bbc0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bbc4:	f7ff fe8c 	bl	800b8e0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bbc8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bbca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bbcc:	f7ff fe78 	bl	800b8c0 <LL_PWR_EnableBootC2>

  return;
 800bbd0:	bf00      	nop
}
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bbd8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bbdc:	f7ff fea6 	bl	800b92c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bbe0:	4806      	ldr	r0, [pc, #24]	@ (800bbfc <HW_IPCC_Init+0x28>)
 800bbe2:	f7ff fee8 	bl	800b9b6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bbe6:	4805      	ldr	r0, [pc, #20]	@ (800bbfc <HW_IPCC_Init+0x28>)
 800bbe8:	f7ff fed5 	bl	800b996 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bbec:	202c      	movs	r0, #44	@ 0x2c
 800bbee:	f7f7 feb2 	bl	8003956 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bbf2:	202d      	movs	r0, #45	@ 0x2d
 800bbf4:	f7f7 feaf 	bl	8003956 <HAL_NVIC_EnableIRQ>

  return;
 800bbf8:	bf00      	nop
}
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	58000c00 	.word	0x58000c00

0800bc00 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bc04:	2101      	movs	r1, #1
 800bc06:	4802      	ldr	r0, [pc, #8]	@ (800bc10 <HW_IPCC_BLE_Init+0x10>)
 800bc08:	f7ff ff0a 	bl	800ba20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bc0c:	bf00      	nop
}
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	58000c00 	.word	0x58000c00

0800bc14 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800bc18:	2101      	movs	r1, #1
 800bc1a:	4802      	ldr	r0, [pc, #8]	@ (800bc24 <HW_IPCC_BLE_SendCmd+0x10>)
 800bc1c:	f7ff ff20 	bl	800ba60 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bc20:	bf00      	nop
}
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	58000c00 	.word	0x58000c00

0800bc28 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bc2c:	f7fd fff8 	bl	8009c20 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bc30:	2101      	movs	r1, #1
 800bc32:	4802      	ldr	r0, [pc, #8]	@ (800bc3c <HW_IPCC_BLE_EvtHandler+0x14>)
 800bc34:	f7ff ff06 	bl	800ba44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bc38:	bf00      	nop
}
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	58000c00 	.word	0x58000c00

0800bc40 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bc44:	2120      	movs	r1, #32
 800bc46:	4803      	ldr	r0, [pc, #12]	@ (800bc54 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bc48:	f7ff fed8 	bl	800b9fc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bc4c:	f7fe f818 	bl	8009c80 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800bc50:	bf00      	nop
}
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	58000c00 	.word	0x58000c00

0800bc58 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bc5c:	2102      	movs	r1, #2
 800bc5e:	4802      	ldr	r0, [pc, #8]	@ (800bc68 <HW_IPCC_SYS_Init+0x10>)
 800bc60:	f7ff fede 	bl	800ba20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bc64:	bf00      	nop
}
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	58000c00 	.word	0x58000c00

0800bc6c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bc70:	2102      	movs	r1, #2
 800bc72:	4804      	ldr	r0, [pc, #16]	@ (800bc84 <HW_IPCC_SYS_SendCmd+0x18>)
 800bc74:	f7ff fef4 	bl	800ba60 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bc78:	2102      	movs	r1, #2
 800bc7a:	4802      	ldr	r0, [pc, #8]	@ (800bc84 <HW_IPCC_SYS_SendCmd+0x18>)
 800bc7c:	f7ff feab 	bl	800b9d6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bc80:	bf00      	nop
}
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	58000c00 	.word	0x58000c00

0800bc88 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bc8c:	2102      	movs	r1, #2
 800bc8e:	4803      	ldr	r0, [pc, #12]	@ (800bc9c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bc90:	f7ff feb4 	bl	800b9fc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bc94:	f7fe f844 	bl	8009d20 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bc98:	bf00      	nop
}
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	58000c00 	.word	0x58000c00

0800bca0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bca4:	f7fe f852 	bl	8009d4c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bca8:	2102      	movs	r1, #2
 800bcaa:	4802      	ldr	r0, [pc, #8]	@ (800bcb4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bcac:	f7ff feca 	bl	800ba44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bcb0:	bf00      	nop
}
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	58000c00 	.word	0x58000c00

0800bcb8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bcc0:	2108      	movs	r1, #8
 800bcc2:	480c      	ldr	r0, [pc, #48]	@ (800bcf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bcc4:	f7ff fedb 	bl	800ba7e <LL_C1_IPCC_IsActiveFlag_CHx>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d007      	beq.n	800bcde <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bcce:	4a0a      	ldr	r2, [pc, #40]	@ (800bcf8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bcd4:	2108      	movs	r1, #8
 800bcd6:	4807      	ldr	r0, [pc, #28]	@ (800bcf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bcd8:	f7ff fe7d 	bl	800b9d6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bcdc:	e006      	b.n	800bcec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bce2:	2108      	movs	r1, #8
 800bce4:	4803      	ldr	r0, [pc, #12]	@ (800bcf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bce6:	f7ff febb 	bl	800ba60 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800bcea:	bf00      	nop
}
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	58000c00 	.word	0x58000c00
 800bcf8:	200015c4 	.word	0x200015c4

0800bcfc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bd00:	2108      	movs	r1, #8
 800bd02:	4806      	ldr	r0, [pc, #24]	@ (800bd1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bd04:	f7ff fe7a 	bl	800b9fc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bd08:	4b05      	ldr	r3, [pc, #20]	@ (800bd20 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bd0e:	2108      	movs	r1, #8
 800bd10:	4802      	ldr	r0, [pc, #8]	@ (800bd1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bd12:	f7ff fea5 	bl	800ba60 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bd16:	bf00      	nop
}
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	58000c00 	.word	0x58000c00
 800bd20:	200015c4 	.word	0x200015c4

0800bd24 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bd28:	2108      	movs	r1, #8
 800bd2a:	4802      	ldr	r0, [pc, #8]	@ (800bd34 <HW_IPCC_TRACES_Init+0x10>)
 800bd2c:	f7ff fe78 	bl	800ba20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bd30:	bf00      	nop
}
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	58000c00 	.word	0x58000c00

0800bd38 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800bd3c:	f7fe f8ae 	bl	8009e9c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bd40:	2108      	movs	r1, #8
 800bd42:	4802      	ldr	r0, [pc, #8]	@ (800bd4c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800bd44:	f7ff fe7e 	bl	800ba44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bd48:	bf00      	nop
}
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	58000c00 	.word	0x58000c00

0800bd50 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bd54:	4b05      	ldr	r3, [pc, #20]	@ (800bd6c <UTIL_LPM_Init+0x1c>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bd5a:	4b05      	ldr	r3, [pc, #20]	@ (800bd70 <UTIL_LPM_Init+0x20>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bd60:	bf00      	nop
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	200015c8 	.word	0x200015c8
 800bd70:	200015cc 	.word	0x200015cc

0800bd74 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd80:	f3ef 8310 	mrs	r3, PRIMASK
 800bd84:	613b      	str	r3, [r7, #16]
  return(result);
 800bd86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bd88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd8a:	b672      	cpsid	i
}
 800bd8c:	bf00      	nop
  
  switch(state)
 800bd8e:	78fb      	ldrb	r3, [r7, #3]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d008      	beq.n	800bda6 <UTIL_LPM_SetOffMode+0x32>
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d10e      	bne.n	800bdb6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bd98:	4b0d      	ldr	r3, [pc, #52]	@ (800bdd0 <UTIL_LPM_SetOffMode+0x5c>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	4a0b      	ldr	r2, [pc, #44]	@ (800bdd0 <UTIL_LPM_SetOffMode+0x5c>)
 800bda2:	6013      	str	r3, [r2, #0]
      break;
 800bda4:	e008      	b.n	800bdb8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	43da      	mvns	r2, r3
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <UTIL_LPM_SetOffMode+0x5c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4013      	ands	r3, r2
 800bdb0:	4a07      	ldr	r2, [pc, #28]	@ (800bdd0 <UTIL_LPM_SetOffMode+0x5c>)
 800bdb2:	6013      	str	r3, [r2, #0]
      break;
 800bdb4:	e000      	b.n	800bdb8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bdb6:	bf00      	nop
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f383 8810 	msr	PRIMASK, r3
}
 800bdc2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bdc4:	bf00      	nop
 800bdc6:	371c      	adds	r7, #28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	200015cc 	.word	0x200015cc

0800bdd4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b090      	sub	sp, #64	@ 0x40
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bddc:	4b73      	ldr	r3, [pc, #460]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800bde2:	4b72      	ldr	r3, [pc, #456]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4013      	ands	r3, r2
 800bdea:	4a70      	ldr	r2, [pc, #448]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800bdec:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bdee:	4b70      	ldr	r3, [pc, #448]	@ (800bfb0 <UTIL_SEQ_Run+0x1dc>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bdf4:	4b6f      	ldr	r3, [pc, #444]	@ (800bfb4 <UTIL_SEQ_Run+0x1e0>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bdfa:	4b6f      	ldr	r3, [pc, #444]	@ (800bfb8 <UTIL_SEQ_Run+0x1e4>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800be00:	4b6e      	ldr	r3, [pc, #440]	@ (800bfbc <UTIL_SEQ_Run+0x1e8>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800be06:	e08d      	b.n	800bf24 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800be0c:	e002      	b.n	800be14 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800be0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be10:	3301      	adds	r3, #1
 800be12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800be14:	4a6a      	ldr	r2, [pc, #424]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be18:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	401a      	ands	r2, r3
 800be20:	4b62      	ldr	r3, [pc, #392]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4013      	ands	r3, r2
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0f1      	beq.n	800be0e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800be2a:	4a65      	ldr	r2, [pc, #404]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800be32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be34:	401a      	ands	r2, r3
 800be36:	4b5d      	ldr	r3, [pc, #372]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4013      	ands	r3, r2
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800be3e:	4a60      	ldr	r2, [pc, #384]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	4413      	add	r3, r2
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	4013      	ands	r3, r2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d106      	bne.n	800be5e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800be50:	4a5b      	ldr	r2, [pc, #364]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be54:	00db      	lsls	r3, r3, #3
 800be56:	4413      	add	r3, r2
 800be58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be5c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800be5e:	4a58      	ldr	r2, [pc, #352]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	4413      	add	r3, r2
 800be66:	685a      	ldr	r2, [r3, #4]
 800be68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6a:	4013      	ands	r3, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 f9b3 	bl	800c1d8 <SEQ_BitPosition>
 800be72:	4603      	mov	r3, r0
 800be74:	461a      	mov	r2, r3
 800be76:	4b53      	ldr	r3, [pc, #332]	@ (800bfc4 <UTIL_SEQ_Run+0x1f0>)
 800be78:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800be7a:	4a51      	ldr	r2, [pc, #324]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	4413      	add	r3, r2
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	4b4f      	ldr	r3, [pc, #316]	@ (800bfc4 <UTIL_SEQ_Run+0x1f0>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2101      	movs	r1, #1
 800be8a:	fa01 f303 	lsl.w	r3, r1, r3
 800be8e:	43db      	mvns	r3, r3
 800be90:	401a      	ands	r2, r3
 800be92:	494b      	ldr	r1, [pc, #300]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800be94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	440b      	add	r3, r1
 800be9a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be9c:	f3ef 8310 	mrs	r3, PRIMASK
 800bea0:	61bb      	str	r3, [r7, #24]
  return(result);
 800bea2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bea4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bea6:	b672      	cpsid	i
}
 800bea8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800beaa:	4b46      	ldr	r3, [pc, #280]	@ (800bfc4 <UTIL_SEQ_Run+0x1f0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2201      	movs	r2, #1
 800beb0:	fa02 f303 	lsl.w	r3, r2, r3
 800beb4:	43da      	mvns	r2, r3
 800beb6:	4b3e      	ldr	r3, [pc, #248]	@ (800bfb0 <UTIL_SEQ_Run+0x1dc>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4013      	ands	r3, r2
 800bebc:	4a3c      	ldr	r2, [pc, #240]	@ (800bfb0 <UTIL_SEQ_Run+0x1dc>)
 800bebe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bec0:	2301      	movs	r3, #1
 800bec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bec4:	e013      	b.n	800beee <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec8:	3b01      	subs	r3, #1
 800beca:	4a3d      	ldr	r2, [pc, #244]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800becc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bed0:	4b3c      	ldr	r3, [pc, #240]	@ (800bfc4 <UTIL_SEQ_Run+0x1f0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2201      	movs	r2, #1
 800bed6:	fa02 f303 	lsl.w	r3, r2, r3
 800beda:	43da      	mvns	r2, r3
 800bedc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bede:	3b01      	subs	r3, #1
 800bee0:	400a      	ands	r2, r1
 800bee2:	4937      	ldr	r1, [pc, #220]	@ (800bfc0 <UTIL_SEQ_Run+0x1ec>)
 800bee4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beea:	3b01      	subs	r3, #1
 800beec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800beee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e8      	bne.n	800bec6 <UTIL_SEQ_Run+0xf2>
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f383 8810 	msr	PRIMASK, r3
}
 800befe:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bf00:	4b30      	ldr	r3, [pc, #192]	@ (800bfc4 <UTIL_SEQ_Run+0x1f0>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a30      	ldr	r2, [pc, #192]	@ (800bfc8 <UTIL_SEQ_Run+0x1f4>)
 800bf06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf0a:	4798      	blx	r3

    local_taskset = TaskSet;
 800bf0c:	4b28      	ldr	r3, [pc, #160]	@ (800bfb0 <UTIL_SEQ_Run+0x1dc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800bf12:	4b28      	ldr	r3, [pc, #160]	@ (800bfb4 <UTIL_SEQ_Run+0x1e0>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800bf18:	4b27      	ldr	r3, [pc, #156]	@ (800bfb8 <UTIL_SEQ_Run+0x1e4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800bf1e:	4b27      	ldr	r3, [pc, #156]	@ (800bfbc <UTIL_SEQ_Run+0x1e8>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bf24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf28:	401a      	ands	r2, r3
 800bf2a:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4013      	ands	r3, r2
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d005      	beq.n	800bf40 <UTIL_SEQ_Run+0x16c>
 800bf34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf38:	4013      	ands	r3, r2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f43f af64 	beq.w	800be08 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bf40:	4b20      	ldr	r3, [pc, #128]	@ (800bfc4 <UTIL_SEQ_Run+0x1f0>)
 800bf42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf46:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bf48:	f000 f938 	bl	800c1bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf4c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf50:	613b      	str	r3, [r7, #16]
  return(result);
 800bf52:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bf54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf56:	b672      	cpsid	i
}
 800bf58:	bf00      	nop
  local_taskset = TaskSet;
 800bf5a:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <UTIL_SEQ_Run+0x1dc>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bf60:	4b14      	ldr	r3, [pc, #80]	@ (800bfb4 <UTIL_SEQ_Run+0x1e0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bf66:	4b14      	ldr	r3, [pc, #80]	@ (800bfb8 <UTIL_SEQ_Run+0x1e4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bf6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	401a      	ands	r2, r3
 800bf72:	4b0e      	ldr	r3, [pc, #56]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4013      	ands	r3, r2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d107      	bne.n	800bf8c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bf7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bfbc <UTIL_SEQ_Run+0x1e8>)
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf82:	4013      	ands	r3, r2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bf88:	f7f5 f95e 	bl	8001248 <UTIL_SEQ_Idle>
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f383 8810 	msr	PRIMASK, r3
}
 800bf96:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800bf98:	f000 f917 	bl	800c1ca <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bf9c:	4a03      	ldr	r2, [pc, #12]	@ (800bfac <UTIL_SEQ_Run+0x1d8>)
 800bf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa0:	6013      	str	r3, [r2, #0]

  return;
 800bfa2:	bf00      	nop
}
 800bfa4:	3740      	adds	r7, #64	@ 0x40
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20000034 	.word	0x20000034
 800bfb0:	200015d0 	.word	0x200015d0
 800bfb4:	200015d4 	.word	0x200015d4
 800bfb8:	20000030 	.word	0x20000030
 800bfbc:	200015d8 	.word	0x200015d8
 800bfc0:	20001660 	.word	0x20001660
 800bfc4:	200015dc 	.word	0x200015dc
 800bfc8:	200015e0 	.word	0x200015e0

0800bfcc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bfdc:	617b      	str	r3, [r7, #20]
  return(result);
 800bfde:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bfe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfe2:	b672      	cpsid	i
}
 800bfe4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 f8f6 	bl	800c1d8 <SEQ_BitPosition>
 800bfec:	4603      	mov	r3, r0
 800bfee:	4619      	mov	r1, r3
 800bff0:	4a06      	ldr	r2, [pc, #24]	@ (800c00c <UTIL_SEQ_RegTask+0x40>)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	f383 8810 	msr	PRIMASK, r3
}
 800c002:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c004:	bf00      	nop
}
 800c006:	3720      	adds	r7, #32
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	200015e0 	.word	0x200015e0

0800c010 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c010:	b480      	push	{r7}
 800c012:	b087      	sub	sp, #28
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c01a:	f3ef 8310 	mrs	r3, PRIMASK
 800c01e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c020:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c024:	b672      	cpsid	i
}
 800c026:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c028:	4b0d      	ldr	r3, [pc, #52]	@ (800c060 <UTIL_SEQ_SetTask+0x50>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4313      	orrs	r3, r2
 800c030:	4a0b      	ldr	r2, [pc, #44]	@ (800c060 <UTIL_SEQ_SetTask+0x50>)
 800c032:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c034:	4a0b      	ldr	r2, [pc, #44]	@ (800c064 <UTIL_SEQ_SetTask+0x54>)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	431a      	orrs	r2, r3
 800c040:	4908      	ldr	r1, [pc, #32]	@ (800c064 <UTIL_SEQ_SetTask+0x54>)
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	f383 8810 	msr	PRIMASK, r3
}
 800c052:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c054:	bf00      	nop
}
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	200015d0 	.word	0x200015d0
 800c064:	20001660 	.word	0x20001660

0800c068 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c068:	b480      	push	{r7}
 800c06a:	b087      	sub	sp, #28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c070:	f3ef 8310 	mrs	r3, PRIMASK
 800c074:	60fb      	str	r3, [r7, #12]
  return(result);
 800c076:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c078:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c07a:	b672      	cpsid	i
}
 800c07c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	43da      	mvns	r2, r3
 800c082:	4b08      	ldr	r3, [pc, #32]	@ (800c0a4 <UTIL_SEQ_PauseTask+0x3c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4013      	ands	r3, r2
 800c088:	4a06      	ldr	r2, [pc, #24]	@ (800c0a4 <UTIL_SEQ_PauseTask+0x3c>)
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f383 8810 	msr	PRIMASK, r3
}
 800c096:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c098:	bf00      	nop
}
 800c09a:	371c      	adds	r7, #28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	20000030 	.word	0x20000030

0800c0a8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c0b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c0b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0ba:	b672      	cpsid	i
}
 800c0bc:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c0be:	4b09      	ldr	r3, [pc, #36]	@ (800c0e4 <UTIL_SEQ_ResumeTask+0x3c>)
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	4a07      	ldr	r2, [pc, #28]	@ (800c0e4 <UTIL_SEQ_ResumeTask+0x3c>)
 800c0c8:	6013      	str	r3, [r2, #0]
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f383 8810 	msr	PRIMASK, r3
}
 800c0d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c0d6:	bf00      	nop
}
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20000030 	.word	0x20000030

0800c0e8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0fa:	b672      	cpsid	i
}
 800c0fc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c0fe:	4b09      	ldr	r3, [pc, #36]	@ (800c124 <UTIL_SEQ_SetEvt+0x3c>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4313      	orrs	r3, r2
 800c106:	4a07      	ldr	r2, [pc, #28]	@ (800c124 <UTIL_SEQ_SetEvt+0x3c>)
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	f383 8810 	msr	PRIMASK, r3
}
 800c114:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c116:	bf00      	nop
}
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	200015d4 	.word	0x200015d4

0800c128 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b088      	sub	sp, #32
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c130:	4b1f      	ldr	r3, [pc, #124]	@ (800c1b0 <UTIL_SEQ_WaitEvt+0x88>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c136:	4b1e      	ldr	r3, [pc, #120]	@ (800c1b0 <UTIL_SEQ_WaitEvt+0x88>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c13e:	d102      	bne.n	800c146 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c140:	2300      	movs	r3, #0
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	e005      	b.n	800c152 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c146:	4b1a      	ldr	r3, [pc, #104]	@ (800c1b0 <UTIL_SEQ_WaitEvt+0x88>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2201      	movs	r2, #1
 800c14c:	fa02 f303 	lsl.w	r3, r2, r3
 800c150:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c152:	4b18      	ldr	r3, [pc, #96]	@ (800c1b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c158:	4a16      	ldr	r2, [pc, #88]	@ (800c1b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c15e:	e003      	b.n	800c168 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	69f8      	ldr	r0, [r7, #28]
 800c164:	f7f5 f877 	bl	8001256 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c168:	4b13      	ldr	r3, [pc, #76]	@ (800c1b8 <UTIL_SEQ_WaitEvt+0x90>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4013      	ands	r3, r2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0f5      	beq.n	800c160 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c174:	4a0e      	ldr	r2, [pc, #56]	@ (800c1b0 <UTIL_SEQ_WaitEvt+0x88>)
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c17a:	f3ef 8310 	mrs	r3, PRIMASK
 800c17e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c180:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c184:	b672      	cpsid	i
}
 800c186:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	43da      	mvns	r2, r3
 800c18c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b8 <UTIL_SEQ_WaitEvt+0x90>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4013      	ands	r3, r2
 800c192:	4a09      	ldr	r2, [pc, #36]	@ (800c1b8 <UTIL_SEQ_WaitEvt+0x90>)
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f383 8810 	msr	PRIMASK, r3
}
 800c1a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c1a2:	4a04      	ldr	r2, [pc, #16]	@ (800c1b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	6013      	str	r3, [r2, #0]
  return;
 800c1a8:	bf00      	nop
}
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	200015dc 	.word	0x200015dc
 800c1b4:	200015d8 	.word	0x200015d8
 800c1b8:	200015d4 	.word	0x200015d4

0800c1bc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c1c0:	bf00      	nop
}
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c1ce:	bf00      	nop
}
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <SEQ_BitPosition+0x16>
    return 32U;
 800c1ea:	2320      	movs	r3, #32
 800c1ec:	e003      	b.n	800c1f6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	fab3 f383 	clz	r3, r3
 800c1f4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800c1f6:	f1c3 031f 	rsb	r3, r3, #31
 800c1fa:	b2db      	uxtb	r3, r3
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <std>:
 800c208:	2300      	movs	r3, #0
 800c20a:	b510      	push	{r4, lr}
 800c20c:	4604      	mov	r4, r0
 800c20e:	e9c0 3300 	strd	r3, r3, [r0]
 800c212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c216:	6083      	str	r3, [r0, #8]
 800c218:	8181      	strh	r1, [r0, #12]
 800c21a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c21c:	81c2      	strh	r2, [r0, #14]
 800c21e:	6183      	str	r3, [r0, #24]
 800c220:	4619      	mov	r1, r3
 800c222:	2208      	movs	r2, #8
 800c224:	305c      	adds	r0, #92	@ 0x5c
 800c226:	f000 fa01 	bl	800c62c <memset>
 800c22a:	4b0d      	ldr	r3, [pc, #52]	@ (800c260 <std+0x58>)
 800c22c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c22e:	4b0d      	ldr	r3, [pc, #52]	@ (800c264 <std+0x5c>)
 800c230:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c232:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <std+0x60>)
 800c234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c236:	4b0d      	ldr	r3, [pc, #52]	@ (800c26c <std+0x64>)
 800c238:	6323      	str	r3, [r4, #48]	@ 0x30
 800c23a:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <std+0x68>)
 800c23c:	6224      	str	r4, [r4, #32]
 800c23e:	429c      	cmp	r4, r3
 800c240:	d006      	beq.n	800c250 <std+0x48>
 800c242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c246:	4294      	cmp	r4, r2
 800c248:	d002      	beq.n	800c250 <std+0x48>
 800c24a:	33d0      	adds	r3, #208	@ 0xd0
 800c24c:	429c      	cmp	r4, r3
 800c24e:	d105      	bne.n	800c25c <std+0x54>
 800c250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c258:	f000 ba60 	b.w	800c71c <__retarget_lock_init_recursive>
 800c25c:	bd10      	pop	{r4, pc}
 800c25e:	bf00      	nop
 800c260:	0800c47d 	.word	0x0800c47d
 800c264:	0800c49f 	.word	0x0800c49f
 800c268:	0800c4d7 	.word	0x0800c4d7
 800c26c:	0800c4fb 	.word	0x0800c4fb
 800c270:	20001668 	.word	0x20001668

0800c274 <stdio_exit_handler>:
 800c274:	4a02      	ldr	r2, [pc, #8]	@ (800c280 <stdio_exit_handler+0xc>)
 800c276:	4903      	ldr	r1, [pc, #12]	@ (800c284 <stdio_exit_handler+0x10>)
 800c278:	4803      	ldr	r0, [pc, #12]	@ (800c288 <stdio_exit_handler+0x14>)
 800c27a:	f000 b869 	b.w	800c350 <_fwalk_sglue>
 800c27e:	bf00      	nop
 800c280:	20000038 	.word	0x20000038
 800c284:	0800cfd9 	.word	0x0800cfd9
 800c288:	20000048 	.word	0x20000048

0800c28c <cleanup_stdio>:
 800c28c:	6841      	ldr	r1, [r0, #4]
 800c28e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c0 <cleanup_stdio+0x34>)
 800c290:	4299      	cmp	r1, r3
 800c292:	b510      	push	{r4, lr}
 800c294:	4604      	mov	r4, r0
 800c296:	d001      	beq.n	800c29c <cleanup_stdio+0x10>
 800c298:	f000 fe9e 	bl	800cfd8 <_fflush_r>
 800c29c:	68a1      	ldr	r1, [r4, #8]
 800c29e:	4b09      	ldr	r3, [pc, #36]	@ (800c2c4 <cleanup_stdio+0x38>)
 800c2a0:	4299      	cmp	r1, r3
 800c2a2:	d002      	beq.n	800c2aa <cleanup_stdio+0x1e>
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 fe97 	bl	800cfd8 <_fflush_r>
 800c2aa:	68e1      	ldr	r1, [r4, #12]
 800c2ac:	4b06      	ldr	r3, [pc, #24]	@ (800c2c8 <cleanup_stdio+0x3c>)
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	d004      	beq.n	800c2bc <cleanup_stdio+0x30>
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b8:	f000 be8e 	b.w	800cfd8 <_fflush_r>
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	bf00      	nop
 800c2c0:	20001668 	.word	0x20001668
 800c2c4:	200016d0 	.word	0x200016d0
 800c2c8:	20001738 	.word	0x20001738

0800c2cc <global_stdio_init.part.0>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800c2fc <global_stdio_init.part.0+0x30>)
 800c2d0:	4c0b      	ldr	r4, [pc, #44]	@ (800c300 <global_stdio_init.part.0+0x34>)
 800c2d2:	4a0c      	ldr	r2, [pc, #48]	@ (800c304 <global_stdio_init.part.0+0x38>)
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2104      	movs	r1, #4
 800c2dc:	f7ff ff94 	bl	800c208 <std>
 800c2e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	2109      	movs	r1, #9
 800c2e8:	f7ff ff8e 	bl	800c208 <std>
 800c2ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2f6:	2112      	movs	r1, #18
 800c2f8:	f7ff bf86 	b.w	800c208 <std>
 800c2fc:	200017a0 	.word	0x200017a0
 800c300:	20001668 	.word	0x20001668
 800c304:	0800c275 	.word	0x0800c275

0800c308 <__sfp_lock_acquire>:
 800c308:	4801      	ldr	r0, [pc, #4]	@ (800c310 <__sfp_lock_acquire+0x8>)
 800c30a:	f000 ba08 	b.w	800c71e <__retarget_lock_acquire_recursive>
 800c30e:	bf00      	nop
 800c310:	200017a9 	.word	0x200017a9

0800c314 <__sfp_lock_release>:
 800c314:	4801      	ldr	r0, [pc, #4]	@ (800c31c <__sfp_lock_release+0x8>)
 800c316:	f000 ba03 	b.w	800c720 <__retarget_lock_release_recursive>
 800c31a:	bf00      	nop
 800c31c:	200017a9 	.word	0x200017a9

0800c320 <__sinit>:
 800c320:	b510      	push	{r4, lr}
 800c322:	4604      	mov	r4, r0
 800c324:	f7ff fff0 	bl	800c308 <__sfp_lock_acquire>
 800c328:	6a23      	ldr	r3, [r4, #32]
 800c32a:	b11b      	cbz	r3, 800c334 <__sinit+0x14>
 800c32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c330:	f7ff bff0 	b.w	800c314 <__sfp_lock_release>
 800c334:	4b04      	ldr	r3, [pc, #16]	@ (800c348 <__sinit+0x28>)
 800c336:	6223      	str	r3, [r4, #32]
 800c338:	4b04      	ldr	r3, [pc, #16]	@ (800c34c <__sinit+0x2c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1f5      	bne.n	800c32c <__sinit+0xc>
 800c340:	f7ff ffc4 	bl	800c2cc <global_stdio_init.part.0>
 800c344:	e7f2      	b.n	800c32c <__sinit+0xc>
 800c346:	bf00      	nop
 800c348:	0800c28d 	.word	0x0800c28d
 800c34c:	200017a0 	.word	0x200017a0

0800c350 <_fwalk_sglue>:
 800c350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c354:	4607      	mov	r7, r0
 800c356:	4688      	mov	r8, r1
 800c358:	4614      	mov	r4, r2
 800c35a:	2600      	movs	r6, #0
 800c35c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c360:	f1b9 0901 	subs.w	r9, r9, #1
 800c364:	d505      	bpl.n	800c372 <_fwalk_sglue+0x22>
 800c366:	6824      	ldr	r4, [r4, #0]
 800c368:	2c00      	cmp	r4, #0
 800c36a:	d1f7      	bne.n	800c35c <_fwalk_sglue+0xc>
 800c36c:	4630      	mov	r0, r6
 800c36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c372:	89ab      	ldrh	r3, [r5, #12]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d907      	bls.n	800c388 <_fwalk_sglue+0x38>
 800c378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c37c:	3301      	adds	r3, #1
 800c37e:	d003      	beq.n	800c388 <_fwalk_sglue+0x38>
 800c380:	4629      	mov	r1, r5
 800c382:	4638      	mov	r0, r7
 800c384:	47c0      	blx	r8
 800c386:	4306      	orrs	r6, r0
 800c388:	3568      	adds	r5, #104	@ 0x68
 800c38a:	e7e9      	b.n	800c360 <_fwalk_sglue+0x10>

0800c38c <iprintf>:
 800c38c:	b40f      	push	{r0, r1, r2, r3}
 800c38e:	b507      	push	{r0, r1, r2, lr}
 800c390:	4906      	ldr	r1, [pc, #24]	@ (800c3ac <iprintf+0x20>)
 800c392:	ab04      	add	r3, sp, #16
 800c394:	6808      	ldr	r0, [r1, #0]
 800c396:	f853 2b04 	ldr.w	r2, [r3], #4
 800c39a:	6881      	ldr	r1, [r0, #8]
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	f000 faf1 	bl	800c984 <_vfiprintf_r>
 800c3a2:	b003      	add	sp, #12
 800c3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a8:	b004      	add	sp, #16
 800c3aa:	4770      	bx	lr
 800c3ac:	20000044 	.word	0x20000044

0800c3b0 <putchar>:
 800c3b0:	4b02      	ldr	r3, [pc, #8]	@ (800c3bc <putchar+0xc>)
 800c3b2:	4601      	mov	r1, r0
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	6882      	ldr	r2, [r0, #8]
 800c3b8:	f000 be98 	b.w	800d0ec <_putc_r>
 800c3bc:	20000044 	.word	0x20000044

0800c3c0 <_puts_r>:
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	b570      	push	{r4, r5, r6, lr}
 800c3c4:	6884      	ldr	r4, [r0, #8]
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	460e      	mov	r6, r1
 800c3ca:	b90b      	cbnz	r3, 800c3d0 <_puts_r+0x10>
 800c3cc:	f7ff ffa8 	bl	800c320 <__sinit>
 800c3d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3d2:	07db      	lsls	r3, r3, #31
 800c3d4:	d405      	bmi.n	800c3e2 <_puts_r+0x22>
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	0598      	lsls	r0, r3, #22
 800c3da:	d402      	bmi.n	800c3e2 <_puts_r+0x22>
 800c3dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3de:	f000 f99e 	bl	800c71e <__retarget_lock_acquire_recursive>
 800c3e2:	89a3      	ldrh	r3, [r4, #12]
 800c3e4:	0719      	lsls	r1, r3, #28
 800c3e6:	d502      	bpl.n	800c3ee <_puts_r+0x2e>
 800c3e8:	6923      	ldr	r3, [r4, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d135      	bne.n	800c45a <_puts_r+0x9a>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f000 f8c5 	bl	800c580 <__swsetup_r>
 800c3f6:	b380      	cbz	r0, 800c45a <_puts_r+0x9a>
 800c3f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c3fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3fe:	07da      	lsls	r2, r3, #31
 800c400:	d405      	bmi.n	800c40e <_puts_r+0x4e>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d402      	bmi.n	800c40e <_puts_r+0x4e>
 800c408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c40a:	f000 f989 	bl	800c720 <__retarget_lock_release_recursive>
 800c40e:	4628      	mov	r0, r5
 800c410:	bd70      	pop	{r4, r5, r6, pc}
 800c412:	2b00      	cmp	r3, #0
 800c414:	da04      	bge.n	800c420 <_puts_r+0x60>
 800c416:	69a2      	ldr	r2, [r4, #24]
 800c418:	429a      	cmp	r2, r3
 800c41a:	dc17      	bgt.n	800c44c <_puts_r+0x8c>
 800c41c:	290a      	cmp	r1, #10
 800c41e:	d015      	beq.n	800c44c <_puts_r+0x8c>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	6022      	str	r2, [r4, #0]
 800c426:	7019      	strb	r1, [r3, #0]
 800c428:	68a3      	ldr	r3, [r4, #8]
 800c42a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c42e:	3b01      	subs	r3, #1
 800c430:	60a3      	str	r3, [r4, #8]
 800c432:	2900      	cmp	r1, #0
 800c434:	d1ed      	bne.n	800c412 <_puts_r+0x52>
 800c436:	2b00      	cmp	r3, #0
 800c438:	da11      	bge.n	800c45e <_puts_r+0x9e>
 800c43a:	4622      	mov	r2, r4
 800c43c:	210a      	movs	r1, #10
 800c43e:	4628      	mov	r0, r5
 800c440:	f000 f85f 	bl	800c502 <__swbuf_r>
 800c444:	3001      	adds	r0, #1
 800c446:	d0d7      	beq.n	800c3f8 <_puts_r+0x38>
 800c448:	250a      	movs	r5, #10
 800c44a:	e7d7      	b.n	800c3fc <_puts_r+0x3c>
 800c44c:	4622      	mov	r2, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f857 	bl	800c502 <__swbuf_r>
 800c454:	3001      	adds	r0, #1
 800c456:	d1e7      	bne.n	800c428 <_puts_r+0x68>
 800c458:	e7ce      	b.n	800c3f8 <_puts_r+0x38>
 800c45a:	3e01      	subs	r6, #1
 800c45c:	e7e4      	b.n	800c428 <_puts_r+0x68>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	6022      	str	r2, [r4, #0]
 800c464:	220a      	movs	r2, #10
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	e7ee      	b.n	800c448 <_puts_r+0x88>
	...

0800c46c <puts>:
 800c46c:	4b02      	ldr	r3, [pc, #8]	@ (800c478 <puts+0xc>)
 800c46e:	4601      	mov	r1, r0
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	f7ff bfa5 	b.w	800c3c0 <_puts_r>
 800c476:	bf00      	nop
 800c478:	20000044 	.word	0x20000044

0800c47c <__sread>:
 800c47c:	b510      	push	{r4, lr}
 800c47e:	460c      	mov	r4, r1
 800c480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c484:	f000 f8fc 	bl	800c680 <_read_r>
 800c488:	2800      	cmp	r0, #0
 800c48a:	bfab      	itete	ge
 800c48c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c48e:	89a3      	ldrhlt	r3, [r4, #12]
 800c490:	181b      	addge	r3, r3, r0
 800c492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c496:	bfac      	ite	ge
 800c498:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c49a:	81a3      	strhlt	r3, [r4, #12]
 800c49c:	bd10      	pop	{r4, pc}

0800c49e <__swrite>:
 800c49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a2:	461f      	mov	r7, r3
 800c4a4:	898b      	ldrh	r3, [r1, #12]
 800c4a6:	05db      	lsls	r3, r3, #23
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	4616      	mov	r6, r2
 800c4ae:	d505      	bpl.n	800c4bc <__swrite+0x1e>
 800c4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f000 f8d0 	bl	800c65c <_lseek_r>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4c6:	81a3      	strh	r3, [r4, #12]
 800c4c8:	4632      	mov	r2, r6
 800c4ca:	463b      	mov	r3, r7
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d2:	f000 b8e7 	b.w	800c6a4 <_write_r>

0800c4d6 <__sseek>:
 800c4d6:	b510      	push	{r4, lr}
 800c4d8:	460c      	mov	r4, r1
 800c4da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4de:	f000 f8bd 	bl	800c65c <_lseek_r>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	bf15      	itete	ne
 800c4e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c4ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c4ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c4f2:	81a3      	strheq	r3, [r4, #12]
 800c4f4:	bf18      	it	ne
 800c4f6:	81a3      	strhne	r3, [r4, #12]
 800c4f8:	bd10      	pop	{r4, pc}

0800c4fa <__sclose>:
 800c4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4fe:	f000 b89d 	b.w	800c63c <_close_r>

0800c502 <__swbuf_r>:
 800c502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c504:	460e      	mov	r6, r1
 800c506:	4614      	mov	r4, r2
 800c508:	4605      	mov	r5, r0
 800c50a:	b118      	cbz	r0, 800c514 <__swbuf_r+0x12>
 800c50c:	6a03      	ldr	r3, [r0, #32]
 800c50e:	b90b      	cbnz	r3, 800c514 <__swbuf_r+0x12>
 800c510:	f7ff ff06 	bl	800c320 <__sinit>
 800c514:	69a3      	ldr	r3, [r4, #24]
 800c516:	60a3      	str	r3, [r4, #8]
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	071a      	lsls	r2, r3, #28
 800c51c:	d501      	bpl.n	800c522 <__swbuf_r+0x20>
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	b943      	cbnz	r3, 800c534 <__swbuf_r+0x32>
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f000 f82b 	bl	800c580 <__swsetup_r>
 800c52a:	b118      	cbz	r0, 800c534 <__swbuf_r+0x32>
 800c52c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c530:	4638      	mov	r0, r7
 800c532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	6922      	ldr	r2, [r4, #16]
 800c538:	1a98      	subs	r0, r3, r2
 800c53a:	6963      	ldr	r3, [r4, #20]
 800c53c:	b2f6      	uxtb	r6, r6
 800c53e:	4283      	cmp	r3, r0
 800c540:	4637      	mov	r7, r6
 800c542:	dc05      	bgt.n	800c550 <__swbuf_r+0x4e>
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 fd46 	bl	800cfd8 <_fflush_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d1ed      	bne.n	800c52c <__swbuf_r+0x2a>
 800c550:	68a3      	ldr	r3, [r4, #8]
 800c552:	3b01      	subs	r3, #1
 800c554:	60a3      	str	r3, [r4, #8]
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	1c5a      	adds	r2, r3, #1
 800c55a:	6022      	str	r2, [r4, #0]
 800c55c:	701e      	strb	r6, [r3, #0]
 800c55e:	6962      	ldr	r2, [r4, #20]
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	429a      	cmp	r2, r3
 800c564:	d004      	beq.n	800c570 <__swbuf_r+0x6e>
 800c566:	89a3      	ldrh	r3, [r4, #12]
 800c568:	07db      	lsls	r3, r3, #31
 800c56a:	d5e1      	bpl.n	800c530 <__swbuf_r+0x2e>
 800c56c:	2e0a      	cmp	r6, #10
 800c56e:	d1df      	bne.n	800c530 <__swbuf_r+0x2e>
 800c570:	4621      	mov	r1, r4
 800c572:	4628      	mov	r0, r5
 800c574:	f000 fd30 	bl	800cfd8 <_fflush_r>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d0d9      	beq.n	800c530 <__swbuf_r+0x2e>
 800c57c:	e7d6      	b.n	800c52c <__swbuf_r+0x2a>
	...

0800c580 <__swsetup_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4b29      	ldr	r3, [pc, #164]	@ (800c628 <__swsetup_r+0xa8>)
 800c584:	4605      	mov	r5, r0
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	460c      	mov	r4, r1
 800c58a:	b118      	cbz	r0, 800c594 <__swsetup_r+0x14>
 800c58c:	6a03      	ldr	r3, [r0, #32]
 800c58e:	b90b      	cbnz	r3, 800c594 <__swsetup_r+0x14>
 800c590:	f7ff fec6 	bl	800c320 <__sinit>
 800c594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c598:	0719      	lsls	r1, r3, #28
 800c59a:	d422      	bmi.n	800c5e2 <__swsetup_r+0x62>
 800c59c:	06da      	lsls	r2, r3, #27
 800c59e:	d407      	bmi.n	800c5b0 <__swsetup_r+0x30>
 800c5a0:	2209      	movs	r2, #9
 800c5a2:	602a      	str	r2, [r5, #0]
 800c5a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5ae:	e033      	b.n	800c618 <__swsetup_r+0x98>
 800c5b0:	0758      	lsls	r0, r3, #29
 800c5b2:	d512      	bpl.n	800c5da <__swsetup_r+0x5a>
 800c5b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5b6:	b141      	cbz	r1, 800c5ca <__swsetup_r+0x4a>
 800c5b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5bc:	4299      	cmp	r1, r3
 800c5be:	d002      	beq.n	800c5c6 <__swsetup_r+0x46>
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 f8bd 	bl	800c740 <_free_r>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c5d0:	81a3      	strh	r3, [r4, #12]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	6063      	str	r3, [r4, #4]
 800c5d6:	6923      	ldr	r3, [r4, #16]
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	f043 0308 	orr.w	r3, r3, #8
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	6923      	ldr	r3, [r4, #16]
 800c5e4:	b94b      	cbnz	r3, 800c5fa <__swsetup_r+0x7a>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5f0:	d003      	beq.n	800c5fa <__swsetup_r+0x7a>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f000 fd3d 	bl	800d074 <__smakebuf_r>
 800c5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5fe:	f013 0201 	ands.w	r2, r3, #1
 800c602:	d00a      	beq.n	800c61a <__swsetup_r+0x9a>
 800c604:	2200      	movs	r2, #0
 800c606:	60a2      	str	r2, [r4, #8]
 800c608:	6962      	ldr	r2, [r4, #20]
 800c60a:	4252      	negs	r2, r2
 800c60c:	61a2      	str	r2, [r4, #24]
 800c60e:	6922      	ldr	r2, [r4, #16]
 800c610:	b942      	cbnz	r2, 800c624 <__swsetup_r+0xa4>
 800c612:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c616:	d1c5      	bne.n	800c5a4 <__swsetup_r+0x24>
 800c618:	bd38      	pop	{r3, r4, r5, pc}
 800c61a:	0799      	lsls	r1, r3, #30
 800c61c:	bf58      	it	pl
 800c61e:	6962      	ldrpl	r2, [r4, #20]
 800c620:	60a2      	str	r2, [r4, #8]
 800c622:	e7f4      	b.n	800c60e <__swsetup_r+0x8e>
 800c624:	2000      	movs	r0, #0
 800c626:	e7f7      	b.n	800c618 <__swsetup_r+0x98>
 800c628:	20000044 	.word	0x20000044

0800c62c <memset>:
 800c62c:	4402      	add	r2, r0
 800c62e:	4603      	mov	r3, r0
 800c630:	4293      	cmp	r3, r2
 800c632:	d100      	bne.n	800c636 <memset+0xa>
 800c634:	4770      	bx	lr
 800c636:	f803 1b01 	strb.w	r1, [r3], #1
 800c63a:	e7f9      	b.n	800c630 <memset+0x4>

0800c63c <_close_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	4d06      	ldr	r5, [pc, #24]	@ (800c658 <_close_r+0x1c>)
 800c640:	2300      	movs	r3, #0
 800c642:	4604      	mov	r4, r0
 800c644:	4608      	mov	r0, r1
 800c646:	602b      	str	r3, [r5, #0]
 800c648:	f7f5 fe2b 	bl	80022a2 <_close>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_close_r+0x1a>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_close_r+0x1a>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	200017a4 	.word	0x200017a4

0800c65c <_lseek_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d07      	ldr	r5, [pc, #28]	@ (800c67c <_lseek_r+0x20>)
 800c660:	4604      	mov	r4, r0
 800c662:	4608      	mov	r0, r1
 800c664:	4611      	mov	r1, r2
 800c666:	2200      	movs	r2, #0
 800c668:	602a      	str	r2, [r5, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	f7f5 fe40 	bl	80022f0 <_lseek>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d102      	bne.n	800c67a <_lseek_r+0x1e>
 800c674:	682b      	ldr	r3, [r5, #0]
 800c676:	b103      	cbz	r3, 800c67a <_lseek_r+0x1e>
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
 800c67c:	200017a4 	.word	0x200017a4

0800c680 <_read_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d07      	ldr	r5, [pc, #28]	@ (800c6a0 <_read_r+0x20>)
 800c684:	4604      	mov	r4, r0
 800c686:	4608      	mov	r0, r1
 800c688:	4611      	mov	r1, r2
 800c68a:	2200      	movs	r2, #0
 800c68c:	602a      	str	r2, [r5, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f7f5 fdea 	bl	8002268 <_read>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_read_r+0x1e>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_read_r+0x1e>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	200017a4 	.word	0x200017a4

0800c6a4 <_write_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4d07      	ldr	r5, [pc, #28]	@ (800c6c4 <_write_r+0x20>)
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	4608      	mov	r0, r1
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f7fd fcba 	bl	800a02c <_write>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_write_r+0x1e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_write_r+0x1e>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	200017a4 	.word	0x200017a4

0800c6c8 <__errno>:
 800c6c8:	4b01      	ldr	r3, [pc, #4]	@ (800c6d0 <__errno+0x8>)
 800c6ca:	6818      	ldr	r0, [r3, #0]
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	20000044 	.word	0x20000044

0800c6d4 <__libc_init_array>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4d0d      	ldr	r5, [pc, #52]	@ (800c70c <__libc_init_array+0x38>)
 800c6d8:	4c0d      	ldr	r4, [pc, #52]	@ (800c710 <__libc_init_array+0x3c>)
 800c6da:	1b64      	subs	r4, r4, r5
 800c6dc:	10a4      	asrs	r4, r4, #2
 800c6de:	2600      	movs	r6, #0
 800c6e0:	42a6      	cmp	r6, r4
 800c6e2:	d109      	bne.n	800c6f8 <__libc_init_array+0x24>
 800c6e4:	4d0b      	ldr	r5, [pc, #44]	@ (800c714 <__libc_init_array+0x40>)
 800c6e6:	4c0c      	ldr	r4, [pc, #48]	@ (800c718 <__libc_init_array+0x44>)
 800c6e8:	f000 fd66 	bl	800d1b8 <_init>
 800c6ec:	1b64      	subs	r4, r4, r5
 800c6ee:	10a4      	asrs	r4, r4, #2
 800c6f0:	2600      	movs	r6, #0
 800c6f2:	42a6      	cmp	r6, r4
 800c6f4:	d105      	bne.n	800c702 <__libc_init_array+0x2e>
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6fc:	4798      	blx	r3
 800c6fe:	3601      	adds	r6, #1
 800c700:	e7ee      	b.n	800c6e0 <__libc_init_array+0xc>
 800c702:	f855 3b04 	ldr.w	r3, [r5], #4
 800c706:	4798      	blx	r3
 800c708:	3601      	adds	r6, #1
 800c70a:	e7f2      	b.n	800c6f2 <__libc_init_array+0x1e>
 800c70c:	0800e7cc 	.word	0x0800e7cc
 800c710:	0800e7cc 	.word	0x0800e7cc
 800c714:	0800e7cc 	.word	0x0800e7cc
 800c718:	0800e7d0 	.word	0x0800e7d0

0800c71c <__retarget_lock_init_recursive>:
 800c71c:	4770      	bx	lr

0800c71e <__retarget_lock_acquire_recursive>:
 800c71e:	4770      	bx	lr

0800c720 <__retarget_lock_release_recursive>:
 800c720:	4770      	bx	lr

0800c722 <memcpy>:
 800c722:	440a      	add	r2, r1
 800c724:	4291      	cmp	r1, r2
 800c726:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c72a:	d100      	bne.n	800c72e <memcpy+0xc>
 800c72c:	4770      	bx	lr
 800c72e:	b510      	push	{r4, lr}
 800c730:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c734:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c738:	4291      	cmp	r1, r2
 800c73a:	d1f9      	bne.n	800c730 <memcpy+0xe>
 800c73c:	bd10      	pop	{r4, pc}
	...

0800c740 <_free_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4605      	mov	r5, r0
 800c744:	2900      	cmp	r1, #0
 800c746:	d041      	beq.n	800c7cc <_free_r+0x8c>
 800c748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74c:	1f0c      	subs	r4, r1, #4
 800c74e:	2b00      	cmp	r3, #0
 800c750:	bfb8      	it	lt
 800c752:	18e4      	addlt	r4, r4, r3
 800c754:	f000 f8e0 	bl	800c918 <__malloc_lock>
 800c758:	4a1d      	ldr	r2, [pc, #116]	@ (800c7d0 <_free_r+0x90>)
 800c75a:	6813      	ldr	r3, [r2, #0]
 800c75c:	b933      	cbnz	r3, 800c76c <_free_r+0x2c>
 800c75e:	6063      	str	r3, [r4, #4]
 800c760:	6014      	str	r4, [r2, #0]
 800c762:	4628      	mov	r0, r5
 800c764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c768:	f000 b8dc 	b.w	800c924 <__malloc_unlock>
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d908      	bls.n	800c782 <_free_r+0x42>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	1821      	adds	r1, r4, r0
 800c774:	428b      	cmp	r3, r1
 800c776:	bf01      	itttt	eq
 800c778:	6819      	ldreq	r1, [r3, #0]
 800c77a:	685b      	ldreq	r3, [r3, #4]
 800c77c:	1809      	addeq	r1, r1, r0
 800c77e:	6021      	streq	r1, [r4, #0]
 800c780:	e7ed      	b.n	800c75e <_free_r+0x1e>
 800c782:	461a      	mov	r2, r3
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	b10b      	cbz	r3, 800c78c <_free_r+0x4c>
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d9fa      	bls.n	800c782 <_free_r+0x42>
 800c78c:	6811      	ldr	r1, [r2, #0]
 800c78e:	1850      	adds	r0, r2, r1
 800c790:	42a0      	cmp	r0, r4
 800c792:	d10b      	bne.n	800c7ac <_free_r+0x6c>
 800c794:	6820      	ldr	r0, [r4, #0]
 800c796:	4401      	add	r1, r0
 800c798:	1850      	adds	r0, r2, r1
 800c79a:	4283      	cmp	r3, r0
 800c79c:	6011      	str	r1, [r2, #0]
 800c79e:	d1e0      	bne.n	800c762 <_free_r+0x22>
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	6053      	str	r3, [r2, #4]
 800c7a6:	4408      	add	r0, r1
 800c7a8:	6010      	str	r0, [r2, #0]
 800c7aa:	e7da      	b.n	800c762 <_free_r+0x22>
 800c7ac:	d902      	bls.n	800c7b4 <_free_r+0x74>
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	e7d6      	b.n	800c762 <_free_r+0x22>
 800c7b4:	6820      	ldr	r0, [r4, #0]
 800c7b6:	1821      	adds	r1, r4, r0
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	bf04      	itt	eq
 800c7bc:	6819      	ldreq	r1, [r3, #0]
 800c7be:	685b      	ldreq	r3, [r3, #4]
 800c7c0:	6063      	str	r3, [r4, #4]
 800c7c2:	bf04      	itt	eq
 800c7c4:	1809      	addeq	r1, r1, r0
 800c7c6:	6021      	streq	r1, [r4, #0]
 800c7c8:	6054      	str	r4, [r2, #4]
 800c7ca:	e7ca      	b.n	800c762 <_free_r+0x22>
 800c7cc:	bd38      	pop	{r3, r4, r5, pc}
 800c7ce:	bf00      	nop
 800c7d0:	200017b0 	.word	0x200017b0

0800c7d4 <sbrk_aligned>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	4e0f      	ldr	r6, [pc, #60]	@ (800c814 <sbrk_aligned+0x40>)
 800c7d8:	460c      	mov	r4, r1
 800c7da:	6831      	ldr	r1, [r6, #0]
 800c7dc:	4605      	mov	r5, r0
 800c7de:	b911      	cbnz	r1, 800c7e6 <sbrk_aligned+0x12>
 800c7e0:	f000 fcda 	bl	800d198 <_sbrk_r>
 800c7e4:	6030      	str	r0, [r6, #0]
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f000 fcd5 	bl	800d198 <_sbrk_r>
 800c7ee:	1c43      	adds	r3, r0, #1
 800c7f0:	d103      	bne.n	800c7fa <sbrk_aligned+0x26>
 800c7f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	bd70      	pop	{r4, r5, r6, pc}
 800c7fa:	1cc4      	adds	r4, r0, #3
 800c7fc:	f024 0403 	bic.w	r4, r4, #3
 800c800:	42a0      	cmp	r0, r4
 800c802:	d0f8      	beq.n	800c7f6 <sbrk_aligned+0x22>
 800c804:	1a21      	subs	r1, r4, r0
 800c806:	4628      	mov	r0, r5
 800c808:	f000 fcc6 	bl	800d198 <_sbrk_r>
 800c80c:	3001      	adds	r0, #1
 800c80e:	d1f2      	bne.n	800c7f6 <sbrk_aligned+0x22>
 800c810:	e7ef      	b.n	800c7f2 <sbrk_aligned+0x1e>
 800c812:	bf00      	nop
 800c814:	200017ac 	.word	0x200017ac

0800c818 <_malloc_r>:
 800c818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c81c:	1ccd      	adds	r5, r1, #3
 800c81e:	f025 0503 	bic.w	r5, r5, #3
 800c822:	3508      	adds	r5, #8
 800c824:	2d0c      	cmp	r5, #12
 800c826:	bf38      	it	cc
 800c828:	250c      	movcc	r5, #12
 800c82a:	2d00      	cmp	r5, #0
 800c82c:	4606      	mov	r6, r0
 800c82e:	db01      	blt.n	800c834 <_malloc_r+0x1c>
 800c830:	42a9      	cmp	r1, r5
 800c832:	d904      	bls.n	800c83e <_malloc_r+0x26>
 800c834:	230c      	movs	r3, #12
 800c836:	6033      	str	r3, [r6, #0]
 800c838:	2000      	movs	r0, #0
 800c83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c83e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c914 <_malloc_r+0xfc>
 800c842:	f000 f869 	bl	800c918 <__malloc_lock>
 800c846:	f8d8 3000 	ldr.w	r3, [r8]
 800c84a:	461c      	mov	r4, r3
 800c84c:	bb44      	cbnz	r4, 800c8a0 <_malloc_r+0x88>
 800c84e:	4629      	mov	r1, r5
 800c850:	4630      	mov	r0, r6
 800c852:	f7ff ffbf 	bl	800c7d4 <sbrk_aligned>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	4604      	mov	r4, r0
 800c85a:	d158      	bne.n	800c90e <_malloc_r+0xf6>
 800c85c:	f8d8 4000 	ldr.w	r4, [r8]
 800c860:	4627      	mov	r7, r4
 800c862:	2f00      	cmp	r7, #0
 800c864:	d143      	bne.n	800c8ee <_malloc_r+0xd6>
 800c866:	2c00      	cmp	r4, #0
 800c868:	d04b      	beq.n	800c902 <_malloc_r+0xea>
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	4639      	mov	r1, r7
 800c86e:	4630      	mov	r0, r6
 800c870:	eb04 0903 	add.w	r9, r4, r3
 800c874:	f000 fc90 	bl	800d198 <_sbrk_r>
 800c878:	4581      	cmp	r9, r0
 800c87a:	d142      	bne.n	800c902 <_malloc_r+0xea>
 800c87c:	6821      	ldr	r1, [r4, #0]
 800c87e:	1a6d      	subs	r5, r5, r1
 800c880:	4629      	mov	r1, r5
 800c882:	4630      	mov	r0, r6
 800c884:	f7ff ffa6 	bl	800c7d4 <sbrk_aligned>
 800c888:	3001      	adds	r0, #1
 800c88a:	d03a      	beq.n	800c902 <_malloc_r+0xea>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	442b      	add	r3, r5
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	f8d8 3000 	ldr.w	r3, [r8]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	bb62      	cbnz	r2, 800c8f4 <_malloc_r+0xdc>
 800c89a:	f8c8 7000 	str.w	r7, [r8]
 800c89e:	e00f      	b.n	800c8c0 <_malloc_r+0xa8>
 800c8a0:	6822      	ldr	r2, [r4, #0]
 800c8a2:	1b52      	subs	r2, r2, r5
 800c8a4:	d420      	bmi.n	800c8e8 <_malloc_r+0xd0>
 800c8a6:	2a0b      	cmp	r2, #11
 800c8a8:	d917      	bls.n	800c8da <_malloc_r+0xc2>
 800c8aa:	1961      	adds	r1, r4, r5
 800c8ac:	42a3      	cmp	r3, r4
 800c8ae:	6025      	str	r5, [r4, #0]
 800c8b0:	bf18      	it	ne
 800c8b2:	6059      	strne	r1, [r3, #4]
 800c8b4:	6863      	ldr	r3, [r4, #4]
 800c8b6:	bf08      	it	eq
 800c8b8:	f8c8 1000 	streq.w	r1, [r8]
 800c8bc:	5162      	str	r2, [r4, r5]
 800c8be:	604b      	str	r3, [r1, #4]
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f000 f82f 	bl	800c924 <__malloc_unlock>
 800c8c6:	f104 000b 	add.w	r0, r4, #11
 800c8ca:	1d23      	adds	r3, r4, #4
 800c8cc:	f020 0007 	bic.w	r0, r0, #7
 800c8d0:	1ac2      	subs	r2, r0, r3
 800c8d2:	bf1c      	itt	ne
 800c8d4:	1a1b      	subne	r3, r3, r0
 800c8d6:	50a3      	strne	r3, [r4, r2]
 800c8d8:	e7af      	b.n	800c83a <_malloc_r+0x22>
 800c8da:	6862      	ldr	r2, [r4, #4]
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	bf0c      	ite	eq
 800c8e0:	f8c8 2000 	streq.w	r2, [r8]
 800c8e4:	605a      	strne	r2, [r3, #4]
 800c8e6:	e7eb      	b.n	800c8c0 <_malloc_r+0xa8>
 800c8e8:	4623      	mov	r3, r4
 800c8ea:	6864      	ldr	r4, [r4, #4]
 800c8ec:	e7ae      	b.n	800c84c <_malloc_r+0x34>
 800c8ee:	463c      	mov	r4, r7
 800c8f0:	687f      	ldr	r7, [r7, #4]
 800c8f2:	e7b6      	b.n	800c862 <_malloc_r+0x4a>
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d1fb      	bne.n	800c8f4 <_malloc_r+0xdc>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	6053      	str	r3, [r2, #4]
 800c900:	e7de      	b.n	800c8c0 <_malloc_r+0xa8>
 800c902:	230c      	movs	r3, #12
 800c904:	6033      	str	r3, [r6, #0]
 800c906:	4630      	mov	r0, r6
 800c908:	f000 f80c 	bl	800c924 <__malloc_unlock>
 800c90c:	e794      	b.n	800c838 <_malloc_r+0x20>
 800c90e:	6005      	str	r5, [r0, #0]
 800c910:	e7d6      	b.n	800c8c0 <_malloc_r+0xa8>
 800c912:	bf00      	nop
 800c914:	200017b0 	.word	0x200017b0

0800c918 <__malloc_lock>:
 800c918:	4801      	ldr	r0, [pc, #4]	@ (800c920 <__malloc_lock+0x8>)
 800c91a:	f7ff bf00 	b.w	800c71e <__retarget_lock_acquire_recursive>
 800c91e:	bf00      	nop
 800c920:	200017a8 	.word	0x200017a8

0800c924 <__malloc_unlock>:
 800c924:	4801      	ldr	r0, [pc, #4]	@ (800c92c <__malloc_unlock+0x8>)
 800c926:	f7ff befb 	b.w	800c720 <__retarget_lock_release_recursive>
 800c92a:	bf00      	nop
 800c92c:	200017a8 	.word	0x200017a8

0800c930 <__sfputc_r>:
 800c930:	6893      	ldr	r3, [r2, #8]
 800c932:	3b01      	subs	r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	b410      	push	{r4}
 800c938:	6093      	str	r3, [r2, #8]
 800c93a:	da08      	bge.n	800c94e <__sfputc_r+0x1e>
 800c93c:	6994      	ldr	r4, [r2, #24]
 800c93e:	42a3      	cmp	r3, r4
 800c940:	db01      	blt.n	800c946 <__sfputc_r+0x16>
 800c942:	290a      	cmp	r1, #10
 800c944:	d103      	bne.n	800c94e <__sfputc_r+0x1e>
 800c946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c94a:	f7ff bdda 	b.w	800c502 <__swbuf_r>
 800c94e:	6813      	ldr	r3, [r2, #0]
 800c950:	1c58      	adds	r0, r3, #1
 800c952:	6010      	str	r0, [r2, #0]
 800c954:	7019      	strb	r1, [r3, #0]
 800c956:	4608      	mov	r0, r1
 800c958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <__sfputs_r>:
 800c95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c960:	4606      	mov	r6, r0
 800c962:	460f      	mov	r7, r1
 800c964:	4614      	mov	r4, r2
 800c966:	18d5      	adds	r5, r2, r3
 800c968:	42ac      	cmp	r4, r5
 800c96a:	d101      	bne.n	800c970 <__sfputs_r+0x12>
 800c96c:	2000      	movs	r0, #0
 800c96e:	e007      	b.n	800c980 <__sfputs_r+0x22>
 800c970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c974:	463a      	mov	r2, r7
 800c976:	4630      	mov	r0, r6
 800c978:	f7ff ffda 	bl	800c930 <__sfputc_r>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d1f3      	bne.n	800c968 <__sfputs_r+0xa>
 800c980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c984 <_vfiprintf_r>:
 800c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c988:	460d      	mov	r5, r1
 800c98a:	b09d      	sub	sp, #116	@ 0x74
 800c98c:	4614      	mov	r4, r2
 800c98e:	4698      	mov	r8, r3
 800c990:	4606      	mov	r6, r0
 800c992:	b118      	cbz	r0, 800c99c <_vfiprintf_r+0x18>
 800c994:	6a03      	ldr	r3, [r0, #32]
 800c996:	b90b      	cbnz	r3, 800c99c <_vfiprintf_r+0x18>
 800c998:	f7ff fcc2 	bl	800c320 <__sinit>
 800c99c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c99e:	07d9      	lsls	r1, r3, #31
 800c9a0:	d405      	bmi.n	800c9ae <_vfiprintf_r+0x2a>
 800c9a2:	89ab      	ldrh	r3, [r5, #12]
 800c9a4:	059a      	lsls	r2, r3, #22
 800c9a6:	d402      	bmi.n	800c9ae <_vfiprintf_r+0x2a>
 800c9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9aa:	f7ff feb8 	bl	800c71e <__retarget_lock_acquire_recursive>
 800c9ae:	89ab      	ldrh	r3, [r5, #12]
 800c9b0:	071b      	lsls	r3, r3, #28
 800c9b2:	d501      	bpl.n	800c9b8 <_vfiprintf_r+0x34>
 800c9b4:	692b      	ldr	r3, [r5, #16]
 800c9b6:	b99b      	cbnz	r3, 800c9e0 <_vfiprintf_r+0x5c>
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff fde0 	bl	800c580 <__swsetup_r>
 800c9c0:	b170      	cbz	r0, 800c9e0 <_vfiprintf_r+0x5c>
 800c9c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9c4:	07dc      	lsls	r4, r3, #31
 800c9c6:	d504      	bpl.n	800c9d2 <_vfiprintf_r+0x4e>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9cc:	b01d      	add	sp, #116	@ 0x74
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	89ab      	ldrh	r3, [r5, #12]
 800c9d4:	0598      	lsls	r0, r3, #22
 800c9d6:	d4f7      	bmi.n	800c9c8 <_vfiprintf_r+0x44>
 800c9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9da:	f7ff fea1 	bl	800c720 <__retarget_lock_release_recursive>
 800c9de:	e7f3      	b.n	800c9c8 <_vfiprintf_r+0x44>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9e4:	2320      	movs	r3, #32
 800c9e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ee:	2330      	movs	r3, #48	@ 0x30
 800c9f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cba0 <_vfiprintf_r+0x21c>
 800c9f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9f8:	f04f 0901 	mov.w	r9, #1
 800c9fc:	4623      	mov	r3, r4
 800c9fe:	469a      	mov	sl, r3
 800ca00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca04:	b10a      	cbz	r2, 800ca0a <_vfiprintf_r+0x86>
 800ca06:	2a25      	cmp	r2, #37	@ 0x25
 800ca08:	d1f9      	bne.n	800c9fe <_vfiprintf_r+0x7a>
 800ca0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca0e:	d00b      	beq.n	800ca28 <_vfiprintf_r+0xa4>
 800ca10:	465b      	mov	r3, fp
 800ca12:	4622      	mov	r2, r4
 800ca14:	4629      	mov	r1, r5
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7ff ffa1 	bl	800c95e <__sfputs_r>
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	f000 80a7 	beq.w	800cb70 <_vfiprintf_r+0x1ec>
 800ca22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca24:	445a      	add	r2, fp
 800ca26:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca28:	f89a 3000 	ldrb.w	r3, [sl]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 809f 	beq.w	800cb70 <_vfiprintf_r+0x1ec>
 800ca32:	2300      	movs	r3, #0
 800ca34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca3c:	f10a 0a01 	add.w	sl, sl, #1
 800ca40:	9304      	str	r3, [sp, #16]
 800ca42:	9307      	str	r3, [sp, #28]
 800ca44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca48:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca4a:	4654      	mov	r4, sl
 800ca4c:	2205      	movs	r2, #5
 800ca4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca52:	4853      	ldr	r0, [pc, #332]	@ (800cba0 <_vfiprintf_r+0x21c>)
 800ca54:	f7f3 fb9c 	bl	8000190 <memchr>
 800ca58:	9a04      	ldr	r2, [sp, #16]
 800ca5a:	b9d8      	cbnz	r0, 800ca94 <_vfiprintf_r+0x110>
 800ca5c:	06d1      	lsls	r1, r2, #27
 800ca5e:	bf44      	itt	mi
 800ca60:	2320      	movmi	r3, #32
 800ca62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca66:	0713      	lsls	r3, r2, #28
 800ca68:	bf44      	itt	mi
 800ca6a:	232b      	movmi	r3, #43	@ 0x2b
 800ca6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca70:	f89a 3000 	ldrb.w	r3, [sl]
 800ca74:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca76:	d015      	beq.n	800caa4 <_vfiprintf_r+0x120>
 800ca78:	9a07      	ldr	r2, [sp, #28]
 800ca7a:	4654      	mov	r4, sl
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	f04f 0c0a 	mov.w	ip, #10
 800ca82:	4621      	mov	r1, r4
 800ca84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca88:	3b30      	subs	r3, #48	@ 0x30
 800ca8a:	2b09      	cmp	r3, #9
 800ca8c:	d94b      	bls.n	800cb26 <_vfiprintf_r+0x1a2>
 800ca8e:	b1b0      	cbz	r0, 800cabe <_vfiprintf_r+0x13a>
 800ca90:	9207      	str	r2, [sp, #28]
 800ca92:	e014      	b.n	800cabe <_vfiprintf_r+0x13a>
 800ca94:	eba0 0308 	sub.w	r3, r0, r8
 800ca98:	fa09 f303 	lsl.w	r3, r9, r3
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	9304      	str	r3, [sp, #16]
 800caa0:	46a2      	mov	sl, r4
 800caa2:	e7d2      	b.n	800ca4a <_vfiprintf_r+0xc6>
 800caa4:	9b03      	ldr	r3, [sp, #12]
 800caa6:	1d19      	adds	r1, r3, #4
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	9103      	str	r1, [sp, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	bfbb      	ittet	lt
 800cab0:	425b      	neglt	r3, r3
 800cab2:	f042 0202 	orrlt.w	r2, r2, #2
 800cab6:	9307      	strge	r3, [sp, #28]
 800cab8:	9307      	strlt	r3, [sp, #28]
 800caba:	bfb8      	it	lt
 800cabc:	9204      	strlt	r2, [sp, #16]
 800cabe:	7823      	ldrb	r3, [r4, #0]
 800cac0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cac2:	d10a      	bne.n	800cada <_vfiprintf_r+0x156>
 800cac4:	7863      	ldrb	r3, [r4, #1]
 800cac6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cac8:	d132      	bne.n	800cb30 <_vfiprintf_r+0x1ac>
 800caca:	9b03      	ldr	r3, [sp, #12]
 800cacc:	1d1a      	adds	r2, r3, #4
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	9203      	str	r2, [sp, #12]
 800cad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cad6:	3402      	adds	r4, #2
 800cad8:	9305      	str	r3, [sp, #20]
 800cada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbb0 <_vfiprintf_r+0x22c>
 800cade:	7821      	ldrb	r1, [r4, #0]
 800cae0:	2203      	movs	r2, #3
 800cae2:	4650      	mov	r0, sl
 800cae4:	f7f3 fb54 	bl	8000190 <memchr>
 800cae8:	b138      	cbz	r0, 800cafa <_vfiprintf_r+0x176>
 800caea:	9b04      	ldr	r3, [sp, #16]
 800caec:	eba0 000a 	sub.w	r0, r0, sl
 800caf0:	2240      	movs	r2, #64	@ 0x40
 800caf2:	4082      	lsls	r2, r0
 800caf4:	4313      	orrs	r3, r2
 800caf6:	3401      	adds	r4, #1
 800caf8:	9304      	str	r3, [sp, #16]
 800cafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cafe:	4829      	ldr	r0, [pc, #164]	@ (800cba4 <_vfiprintf_r+0x220>)
 800cb00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb04:	2206      	movs	r2, #6
 800cb06:	f7f3 fb43 	bl	8000190 <memchr>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d03f      	beq.n	800cb8e <_vfiprintf_r+0x20a>
 800cb0e:	4b26      	ldr	r3, [pc, #152]	@ (800cba8 <_vfiprintf_r+0x224>)
 800cb10:	bb1b      	cbnz	r3, 800cb5a <_vfiprintf_r+0x1d6>
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	3307      	adds	r3, #7
 800cb16:	f023 0307 	bic.w	r3, r3, #7
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	9303      	str	r3, [sp, #12]
 800cb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb20:	443b      	add	r3, r7
 800cb22:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb24:	e76a      	b.n	800c9fc <_vfiprintf_r+0x78>
 800cb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	e7a8      	b.n	800ca82 <_vfiprintf_r+0xfe>
 800cb30:	2300      	movs	r3, #0
 800cb32:	3401      	adds	r4, #1
 800cb34:	9305      	str	r3, [sp, #20]
 800cb36:	4619      	mov	r1, r3
 800cb38:	f04f 0c0a 	mov.w	ip, #10
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb42:	3a30      	subs	r2, #48	@ 0x30
 800cb44:	2a09      	cmp	r2, #9
 800cb46:	d903      	bls.n	800cb50 <_vfiprintf_r+0x1cc>
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0c6      	beq.n	800cada <_vfiprintf_r+0x156>
 800cb4c:	9105      	str	r1, [sp, #20]
 800cb4e:	e7c4      	b.n	800cada <_vfiprintf_r+0x156>
 800cb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb54:	4604      	mov	r4, r0
 800cb56:	2301      	movs	r3, #1
 800cb58:	e7f0      	b.n	800cb3c <_vfiprintf_r+0x1b8>
 800cb5a:	ab03      	add	r3, sp, #12
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4b12      	ldr	r3, [pc, #72]	@ (800cbac <_vfiprintf_r+0x228>)
 800cb62:	a904      	add	r1, sp, #16
 800cb64:	4630      	mov	r0, r6
 800cb66:	f3af 8000 	nop.w
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	1c78      	adds	r0, r7, #1
 800cb6e:	d1d6      	bne.n	800cb1e <_vfiprintf_r+0x19a>
 800cb70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb72:	07d9      	lsls	r1, r3, #31
 800cb74:	d405      	bmi.n	800cb82 <_vfiprintf_r+0x1fe>
 800cb76:	89ab      	ldrh	r3, [r5, #12]
 800cb78:	059a      	lsls	r2, r3, #22
 800cb7a:	d402      	bmi.n	800cb82 <_vfiprintf_r+0x1fe>
 800cb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb7e:	f7ff fdcf 	bl	800c720 <__retarget_lock_release_recursive>
 800cb82:	89ab      	ldrh	r3, [r5, #12]
 800cb84:	065b      	lsls	r3, r3, #25
 800cb86:	f53f af1f 	bmi.w	800c9c8 <_vfiprintf_r+0x44>
 800cb8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb8c:	e71e      	b.n	800c9cc <_vfiprintf_r+0x48>
 800cb8e:	ab03      	add	r3, sp, #12
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	462a      	mov	r2, r5
 800cb94:	4b05      	ldr	r3, [pc, #20]	@ (800cbac <_vfiprintf_r+0x228>)
 800cb96:	a904      	add	r1, sp, #16
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f000 f879 	bl	800cc90 <_printf_i>
 800cb9e:	e7e4      	b.n	800cb6a <_vfiprintf_r+0x1e6>
 800cba0:	0800e790 	.word	0x0800e790
 800cba4:	0800e79a 	.word	0x0800e79a
 800cba8:	00000000 	.word	0x00000000
 800cbac:	0800c95f 	.word	0x0800c95f
 800cbb0:	0800e796 	.word	0x0800e796

0800cbb4 <_printf_common>:
 800cbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb8:	4616      	mov	r6, r2
 800cbba:	4698      	mov	r8, r3
 800cbbc:	688a      	ldr	r2, [r1, #8]
 800cbbe:	690b      	ldr	r3, [r1, #16]
 800cbc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	bfb8      	it	lt
 800cbc8:	4613      	movlt	r3, r2
 800cbca:	6033      	str	r3, [r6, #0]
 800cbcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	b10a      	cbz	r2, 800cbda <_printf_common+0x26>
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	6033      	str	r3, [r6, #0]
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	0699      	lsls	r1, r3, #26
 800cbde:	bf42      	ittt	mi
 800cbe0:	6833      	ldrmi	r3, [r6, #0]
 800cbe2:	3302      	addmi	r3, #2
 800cbe4:	6033      	strmi	r3, [r6, #0]
 800cbe6:	6825      	ldr	r5, [r4, #0]
 800cbe8:	f015 0506 	ands.w	r5, r5, #6
 800cbec:	d106      	bne.n	800cbfc <_printf_common+0x48>
 800cbee:	f104 0a19 	add.w	sl, r4, #25
 800cbf2:	68e3      	ldr	r3, [r4, #12]
 800cbf4:	6832      	ldr	r2, [r6, #0]
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	42ab      	cmp	r3, r5
 800cbfa:	dc26      	bgt.n	800cc4a <_printf_common+0x96>
 800cbfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cc00:	6822      	ldr	r2, [r4, #0]
 800cc02:	3b00      	subs	r3, #0
 800cc04:	bf18      	it	ne
 800cc06:	2301      	movne	r3, #1
 800cc08:	0692      	lsls	r2, r2, #26
 800cc0a:	d42b      	bmi.n	800cc64 <_printf_common+0xb0>
 800cc0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc10:	4641      	mov	r1, r8
 800cc12:	4638      	mov	r0, r7
 800cc14:	47c8      	blx	r9
 800cc16:	3001      	adds	r0, #1
 800cc18:	d01e      	beq.n	800cc58 <_printf_common+0xa4>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	6922      	ldr	r2, [r4, #16]
 800cc1e:	f003 0306 	and.w	r3, r3, #6
 800cc22:	2b04      	cmp	r3, #4
 800cc24:	bf02      	ittt	eq
 800cc26:	68e5      	ldreq	r5, [r4, #12]
 800cc28:	6833      	ldreq	r3, [r6, #0]
 800cc2a:	1aed      	subeq	r5, r5, r3
 800cc2c:	68a3      	ldr	r3, [r4, #8]
 800cc2e:	bf0c      	ite	eq
 800cc30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc34:	2500      	movne	r5, #0
 800cc36:	4293      	cmp	r3, r2
 800cc38:	bfc4      	itt	gt
 800cc3a:	1a9b      	subgt	r3, r3, r2
 800cc3c:	18ed      	addgt	r5, r5, r3
 800cc3e:	2600      	movs	r6, #0
 800cc40:	341a      	adds	r4, #26
 800cc42:	42b5      	cmp	r5, r6
 800cc44:	d11a      	bne.n	800cc7c <_printf_common+0xc8>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e008      	b.n	800cc5c <_printf_common+0xa8>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	4652      	mov	r2, sl
 800cc4e:	4641      	mov	r1, r8
 800cc50:	4638      	mov	r0, r7
 800cc52:	47c8      	blx	r9
 800cc54:	3001      	adds	r0, #1
 800cc56:	d103      	bne.n	800cc60 <_printf_common+0xac>
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc60:	3501      	adds	r5, #1
 800cc62:	e7c6      	b.n	800cbf2 <_printf_common+0x3e>
 800cc64:	18e1      	adds	r1, r4, r3
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	2030      	movs	r0, #48	@ 0x30
 800cc6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc6e:	4422      	add	r2, r4
 800cc70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc78:	3302      	adds	r3, #2
 800cc7a:	e7c7      	b.n	800cc0c <_printf_common+0x58>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4641      	mov	r1, r8
 800cc82:	4638      	mov	r0, r7
 800cc84:	47c8      	blx	r9
 800cc86:	3001      	adds	r0, #1
 800cc88:	d0e6      	beq.n	800cc58 <_printf_common+0xa4>
 800cc8a:	3601      	adds	r6, #1
 800cc8c:	e7d9      	b.n	800cc42 <_printf_common+0x8e>
	...

0800cc90 <_printf_i>:
 800cc90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc94:	7e0f      	ldrb	r7, [r1, #24]
 800cc96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc98:	2f78      	cmp	r7, #120	@ 0x78
 800cc9a:	4691      	mov	r9, r2
 800cc9c:	4680      	mov	r8, r0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	469a      	mov	sl, r3
 800cca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cca6:	d807      	bhi.n	800ccb8 <_printf_i+0x28>
 800cca8:	2f62      	cmp	r7, #98	@ 0x62
 800ccaa:	d80a      	bhi.n	800ccc2 <_printf_i+0x32>
 800ccac:	2f00      	cmp	r7, #0
 800ccae:	f000 80d2 	beq.w	800ce56 <_printf_i+0x1c6>
 800ccb2:	2f58      	cmp	r7, #88	@ 0x58
 800ccb4:	f000 80b9 	beq.w	800ce2a <_printf_i+0x19a>
 800ccb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ccc0:	e03a      	b.n	800cd38 <_printf_i+0xa8>
 800ccc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccc6:	2b15      	cmp	r3, #21
 800ccc8:	d8f6      	bhi.n	800ccb8 <_printf_i+0x28>
 800ccca:	a101      	add	r1, pc, #4	@ (adr r1, 800ccd0 <_printf_i+0x40>)
 800cccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ccd0:	0800cd29 	.word	0x0800cd29
 800ccd4:	0800cd3d 	.word	0x0800cd3d
 800ccd8:	0800ccb9 	.word	0x0800ccb9
 800ccdc:	0800ccb9 	.word	0x0800ccb9
 800cce0:	0800ccb9 	.word	0x0800ccb9
 800cce4:	0800ccb9 	.word	0x0800ccb9
 800cce8:	0800cd3d 	.word	0x0800cd3d
 800ccec:	0800ccb9 	.word	0x0800ccb9
 800ccf0:	0800ccb9 	.word	0x0800ccb9
 800ccf4:	0800ccb9 	.word	0x0800ccb9
 800ccf8:	0800ccb9 	.word	0x0800ccb9
 800ccfc:	0800ce3d 	.word	0x0800ce3d
 800cd00:	0800cd67 	.word	0x0800cd67
 800cd04:	0800cdf7 	.word	0x0800cdf7
 800cd08:	0800ccb9 	.word	0x0800ccb9
 800cd0c:	0800ccb9 	.word	0x0800ccb9
 800cd10:	0800ce5f 	.word	0x0800ce5f
 800cd14:	0800ccb9 	.word	0x0800ccb9
 800cd18:	0800cd67 	.word	0x0800cd67
 800cd1c:	0800ccb9 	.word	0x0800ccb9
 800cd20:	0800ccb9 	.word	0x0800ccb9
 800cd24:	0800cdff 	.word	0x0800cdff
 800cd28:	6833      	ldr	r3, [r6, #0]
 800cd2a:	1d1a      	adds	r2, r3, #4
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6032      	str	r2, [r6, #0]
 800cd30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e09d      	b.n	800ce78 <_printf_i+0x1e8>
 800cd3c:	6833      	ldr	r3, [r6, #0]
 800cd3e:	6820      	ldr	r0, [r4, #0]
 800cd40:	1d19      	adds	r1, r3, #4
 800cd42:	6031      	str	r1, [r6, #0]
 800cd44:	0606      	lsls	r6, r0, #24
 800cd46:	d501      	bpl.n	800cd4c <_printf_i+0xbc>
 800cd48:	681d      	ldr	r5, [r3, #0]
 800cd4a:	e003      	b.n	800cd54 <_printf_i+0xc4>
 800cd4c:	0645      	lsls	r5, r0, #25
 800cd4e:	d5fb      	bpl.n	800cd48 <_printf_i+0xb8>
 800cd50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd54:	2d00      	cmp	r5, #0
 800cd56:	da03      	bge.n	800cd60 <_printf_i+0xd0>
 800cd58:	232d      	movs	r3, #45	@ 0x2d
 800cd5a:	426d      	negs	r5, r5
 800cd5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd60:	4859      	ldr	r0, [pc, #356]	@ (800cec8 <_printf_i+0x238>)
 800cd62:	230a      	movs	r3, #10
 800cd64:	e011      	b.n	800cd8a <_printf_i+0xfa>
 800cd66:	6821      	ldr	r1, [r4, #0]
 800cd68:	6833      	ldr	r3, [r6, #0]
 800cd6a:	0608      	lsls	r0, r1, #24
 800cd6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd70:	d402      	bmi.n	800cd78 <_printf_i+0xe8>
 800cd72:	0649      	lsls	r1, r1, #25
 800cd74:	bf48      	it	mi
 800cd76:	b2ad      	uxthmi	r5, r5
 800cd78:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd7a:	4853      	ldr	r0, [pc, #332]	@ (800cec8 <_printf_i+0x238>)
 800cd7c:	6033      	str	r3, [r6, #0]
 800cd7e:	bf14      	ite	ne
 800cd80:	230a      	movne	r3, #10
 800cd82:	2308      	moveq	r3, #8
 800cd84:	2100      	movs	r1, #0
 800cd86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd8a:	6866      	ldr	r6, [r4, #4]
 800cd8c:	60a6      	str	r6, [r4, #8]
 800cd8e:	2e00      	cmp	r6, #0
 800cd90:	bfa2      	ittt	ge
 800cd92:	6821      	ldrge	r1, [r4, #0]
 800cd94:	f021 0104 	bicge.w	r1, r1, #4
 800cd98:	6021      	strge	r1, [r4, #0]
 800cd9a:	b90d      	cbnz	r5, 800cda0 <_printf_i+0x110>
 800cd9c:	2e00      	cmp	r6, #0
 800cd9e:	d04b      	beq.n	800ce38 <_printf_i+0x1a8>
 800cda0:	4616      	mov	r6, r2
 800cda2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cda6:	fb03 5711 	mls	r7, r3, r1, r5
 800cdaa:	5dc7      	ldrb	r7, [r0, r7]
 800cdac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdb0:	462f      	mov	r7, r5
 800cdb2:	42bb      	cmp	r3, r7
 800cdb4:	460d      	mov	r5, r1
 800cdb6:	d9f4      	bls.n	800cda2 <_printf_i+0x112>
 800cdb8:	2b08      	cmp	r3, #8
 800cdba:	d10b      	bne.n	800cdd4 <_printf_i+0x144>
 800cdbc:	6823      	ldr	r3, [r4, #0]
 800cdbe:	07df      	lsls	r7, r3, #31
 800cdc0:	d508      	bpl.n	800cdd4 <_printf_i+0x144>
 800cdc2:	6923      	ldr	r3, [r4, #16]
 800cdc4:	6861      	ldr	r1, [r4, #4]
 800cdc6:	4299      	cmp	r1, r3
 800cdc8:	bfde      	ittt	le
 800cdca:	2330      	movle	r3, #48	@ 0x30
 800cdcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cdd4:	1b92      	subs	r2, r2, r6
 800cdd6:	6122      	str	r2, [r4, #16]
 800cdd8:	f8cd a000 	str.w	sl, [sp]
 800cddc:	464b      	mov	r3, r9
 800cdde:	aa03      	add	r2, sp, #12
 800cde0:	4621      	mov	r1, r4
 800cde2:	4640      	mov	r0, r8
 800cde4:	f7ff fee6 	bl	800cbb4 <_printf_common>
 800cde8:	3001      	adds	r0, #1
 800cdea:	d14a      	bne.n	800ce82 <_printf_i+0x1f2>
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdf0:	b004      	add	sp, #16
 800cdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	f043 0320 	orr.w	r3, r3, #32
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	4833      	ldr	r0, [pc, #204]	@ (800cecc <_printf_i+0x23c>)
 800ce00:	2778      	movs	r7, #120	@ 0x78
 800ce02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	6831      	ldr	r1, [r6, #0]
 800ce0a:	061f      	lsls	r7, r3, #24
 800ce0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce10:	d402      	bmi.n	800ce18 <_printf_i+0x188>
 800ce12:	065f      	lsls	r7, r3, #25
 800ce14:	bf48      	it	mi
 800ce16:	b2ad      	uxthmi	r5, r5
 800ce18:	6031      	str	r1, [r6, #0]
 800ce1a:	07d9      	lsls	r1, r3, #31
 800ce1c:	bf44      	itt	mi
 800ce1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ce22:	6023      	strmi	r3, [r4, #0]
 800ce24:	b11d      	cbz	r5, 800ce2e <_printf_i+0x19e>
 800ce26:	2310      	movs	r3, #16
 800ce28:	e7ac      	b.n	800cd84 <_printf_i+0xf4>
 800ce2a:	4827      	ldr	r0, [pc, #156]	@ (800cec8 <_printf_i+0x238>)
 800ce2c:	e7e9      	b.n	800ce02 <_printf_i+0x172>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	f023 0320 	bic.w	r3, r3, #32
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	e7f6      	b.n	800ce26 <_printf_i+0x196>
 800ce38:	4616      	mov	r6, r2
 800ce3a:	e7bd      	b.n	800cdb8 <_printf_i+0x128>
 800ce3c:	6833      	ldr	r3, [r6, #0]
 800ce3e:	6825      	ldr	r5, [r4, #0]
 800ce40:	6961      	ldr	r1, [r4, #20]
 800ce42:	1d18      	adds	r0, r3, #4
 800ce44:	6030      	str	r0, [r6, #0]
 800ce46:	062e      	lsls	r6, r5, #24
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	d501      	bpl.n	800ce50 <_printf_i+0x1c0>
 800ce4c:	6019      	str	r1, [r3, #0]
 800ce4e:	e002      	b.n	800ce56 <_printf_i+0x1c6>
 800ce50:	0668      	lsls	r0, r5, #25
 800ce52:	d5fb      	bpl.n	800ce4c <_printf_i+0x1bc>
 800ce54:	8019      	strh	r1, [r3, #0]
 800ce56:	2300      	movs	r3, #0
 800ce58:	6123      	str	r3, [r4, #16]
 800ce5a:	4616      	mov	r6, r2
 800ce5c:	e7bc      	b.n	800cdd8 <_printf_i+0x148>
 800ce5e:	6833      	ldr	r3, [r6, #0]
 800ce60:	1d1a      	adds	r2, r3, #4
 800ce62:	6032      	str	r2, [r6, #0]
 800ce64:	681e      	ldr	r6, [r3, #0]
 800ce66:	6862      	ldr	r2, [r4, #4]
 800ce68:	2100      	movs	r1, #0
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f7f3 f990 	bl	8000190 <memchr>
 800ce70:	b108      	cbz	r0, 800ce76 <_printf_i+0x1e6>
 800ce72:	1b80      	subs	r0, r0, r6
 800ce74:	6060      	str	r0, [r4, #4]
 800ce76:	6863      	ldr	r3, [r4, #4]
 800ce78:	6123      	str	r3, [r4, #16]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce80:	e7aa      	b.n	800cdd8 <_printf_i+0x148>
 800ce82:	6923      	ldr	r3, [r4, #16]
 800ce84:	4632      	mov	r2, r6
 800ce86:	4649      	mov	r1, r9
 800ce88:	4640      	mov	r0, r8
 800ce8a:	47d0      	blx	sl
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d0ad      	beq.n	800cdec <_printf_i+0x15c>
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	079b      	lsls	r3, r3, #30
 800ce94:	d413      	bmi.n	800cebe <_printf_i+0x22e>
 800ce96:	68e0      	ldr	r0, [r4, #12]
 800ce98:	9b03      	ldr	r3, [sp, #12]
 800ce9a:	4298      	cmp	r0, r3
 800ce9c:	bfb8      	it	lt
 800ce9e:	4618      	movlt	r0, r3
 800cea0:	e7a6      	b.n	800cdf0 <_printf_i+0x160>
 800cea2:	2301      	movs	r3, #1
 800cea4:	4632      	mov	r2, r6
 800cea6:	4649      	mov	r1, r9
 800cea8:	4640      	mov	r0, r8
 800ceaa:	47d0      	blx	sl
 800ceac:	3001      	adds	r0, #1
 800ceae:	d09d      	beq.n	800cdec <_printf_i+0x15c>
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	68e3      	ldr	r3, [r4, #12]
 800ceb4:	9903      	ldr	r1, [sp, #12]
 800ceb6:	1a5b      	subs	r3, r3, r1
 800ceb8:	42ab      	cmp	r3, r5
 800ceba:	dcf2      	bgt.n	800cea2 <_printf_i+0x212>
 800cebc:	e7eb      	b.n	800ce96 <_printf_i+0x206>
 800cebe:	2500      	movs	r5, #0
 800cec0:	f104 0619 	add.w	r6, r4, #25
 800cec4:	e7f5      	b.n	800ceb2 <_printf_i+0x222>
 800cec6:	bf00      	nop
 800cec8:	0800e7a1 	.word	0x0800e7a1
 800cecc:	0800e7b2 	.word	0x0800e7b2

0800ced0 <__sflush_r>:
 800ced0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ced4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced8:	0716      	lsls	r6, r2, #28
 800ceda:	4605      	mov	r5, r0
 800cedc:	460c      	mov	r4, r1
 800cede:	d454      	bmi.n	800cf8a <__sflush_r+0xba>
 800cee0:	684b      	ldr	r3, [r1, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	dc02      	bgt.n	800ceec <__sflush_r+0x1c>
 800cee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	dd48      	ble.n	800cf7e <__sflush_r+0xae>
 800ceec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ceee:	2e00      	cmp	r6, #0
 800cef0:	d045      	beq.n	800cf7e <__sflush_r+0xae>
 800cef2:	2300      	movs	r3, #0
 800cef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cef8:	682f      	ldr	r7, [r5, #0]
 800cefa:	6a21      	ldr	r1, [r4, #32]
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	d030      	beq.n	800cf62 <__sflush_r+0x92>
 800cf00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	0759      	lsls	r1, r3, #29
 800cf06:	d505      	bpl.n	800cf14 <__sflush_r+0x44>
 800cf08:	6863      	ldr	r3, [r4, #4]
 800cf0a:	1ad2      	subs	r2, r2, r3
 800cf0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf0e:	b10b      	cbz	r3, 800cf14 <__sflush_r+0x44>
 800cf10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf12:	1ad2      	subs	r2, r2, r3
 800cf14:	2300      	movs	r3, #0
 800cf16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf18:	6a21      	ldr	r1, [r4, #32]
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b0      	blx	r6
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	d106      	bne.n	800cf32 <__sflush_r+0x62>
 800cf24:	6829      	ldr	r1, [r5, #0]
 800cf26:	291d      	cmp	r1, #29
 800cf28:	d82b      	bhi.n	800cf82 <__sflush_r+0xb2>
 800cf2a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfd4 <__sflush_r+0x104>)
 800cf2c:	410a      	asrs	r2, r1
 800cf2e:	07d6      	lsls	r6, r2, #31
 800cf30:	d427      	bmi.n	800cf82 <__sflush_r+0xb2>
 800cf32:	2200      	movs	r2, #0
 800cf34:	6062      	str	r2, [r4, #4]
 800cf36:	04d9      	lsls	r1, r3, #19
 800cf38:	6922      	ldr	r2, [r4, #16]
 800cf3a:	6022      	str	r2, [r4, #0]
 800cf3c:	d504      	bpl.n	800cf48 <__sflush_r+0x78>
 800cf3e:	1c42      	adds	r2, r0, #1
 800cf40:	d101      	bne.n	800cf46 <__sflush_r+0x76>
 800cf42:	682b      	ldr	r3, [r5, #0]
 800cf44:	b903      	cbnz	r3, 800cf48 <__sflush_r+0x78>
 800cf46:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf4a:	602f      	str	r7, [r5, #0]
 800cf4c:	b1b9      	cbz	r1, 800cf7e <__sflush_r+0xae>
 800cf4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf52:	4299      	cmp	r1, r3
 800cf54:	d002      	beq.n	800cf5c <__sflush_r+0x8c>
 800cf56:	4628      	mov	r0, r5
 800cf58:	f7ff fbf2 	bl	800c740 <_free_r>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf60:	e00d      	b.n	800cf7e <__sflush_r+0xae>
 800cf62:	2301      	movs	r3, #1
 800cf64:	4628      	mov	r0, r5
 800cf66:	47b0      	blx	r6
 800cf68:	4602      	mov	r2, r0
 800cf6a:	1c50      	adds	r0, r2, #1
 800cf6c:	d1c9      	bne.n	800cf02 <__sflush_r+0x32>
 800cf6e:	682b      	ldr	r3, [r5, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0c6      	beq.n	800cf02 <__sflush_r+0x32>
 800cf74:	2b1d      	cmp	r3, #29
 800cf76:	d001      	beq.n	800cf7c <__sflush_r+0xac>
 800cf78:	2b16      	cmp	r3, #22
 800cf7a:	d11e      	bne.n	800cfba <__sflush_r+0xea>
 800cf7c:	602f      	str	r7, [r5, #0]
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e022      	b.n	800cfc8 <__sflush_r+0xf8>
 800cf82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf86:	b21b      	sxth	r3, r3
 800cf88:	e01b      	b.n	800cfc2 <__sflush_r+0xf2>
 800cf8a:	690f      	ldr	r7, [r1, #16]
 800cf8c:	2f00      	cmp	r7, #0
 800cf8e:	d0f6      	beq.n	800cf7e <__sflush_r+0xae>
 800cf90:	0793      	lsls	r3, r2, #30
 800cf92:	680e      	ldr	r6, [r1, #0]
 800cf94:	bf08      	it	eq
 800cf96:	694b      	ldreq	r3, [r1, #20]
 800cf98:	600f      	str	r7, [r1, #0]
 800cf9a:	bf18      	it	ne
 800cf9c:	2300      	movne	r3, #0
 800cf9e:	eba6 0807 	sub.w	r8, r6, r7
 800cfa2:	608b      	str	r3, [r1, #8]
 800cfa4:	f1b8 0f00 	cmp.w	r8, #0
 800cfa8:	dde9      	ble.n	800cf7e <__sflush_r+0xae>
 800cfaa:	6a21      	ldr	r1, [r4, #32]
 800cfac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cfae:	4643      	mov	r3, r8
 800cfb0:	463a      	mov	r2, r7
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	47b0      	blx	r6
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	dc08      	bgt.n	800cfcc <__sflush_r+0xfc>
 800cfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfcc:	4407      	add	r7, r0
 800cfce:	eba8 0800 	sub.w	r8, r8, r0
 800cfd2:	e7e7      	b.n	800cfa4 <__sflush_r+0xd4>
 800cfd4:	dfbffffe 	.word	0xdfbffffe

0800cfd8 <_fflush_r>:
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	690b      	ldr	r3, [r1, #16]
 800cfdc:	4605      	mov	r5, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	b913      	cbnz	r3, 800cfe8 <_fflush_r+0x10>
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	b118      	cbz	r0, 800cff2 <_fflush_r+0x1a>
 800cfea:	6a03      	ldr	r3, [r0, #32]
 800cfec:	b90b      	cbnz	r3, 800cff2 <_fflush_r+0x1a>
 800cfee:	f7ff f997 	bl	800c320 <__sinit>
 800cff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0f3      	beq.n	800cfe2 <_fflush_r+0xa>
 800cffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cffc:	07d0      	lsls	r0, r2, #31
 800cffe:	d404      	bmi.n	800d00a <_fflush_r+0x32>
 800d000:	0599      	lsls	r1, r3, #22
 800d002:	d402      	bmi.n	800d00a <_fflush_r+0x32>
 800d004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d006:	f7ff fb8a 	bl	800c71e <__retarget_lock_acquire_recursive>
 800d00a:	4628      	mov	r0, r5
 800d00c:	4621      	mov	r1, r4
 800d00e:	f7ff ff5f 	bl	800ced0 <__sflush_r>
 800d012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d014:	07da      	lsls	r2, r3, #31
 800d016:	4605      	mov	r5, r0
 800d018:	d4e4      	bmi.n	800cfe4 <_fflush_r+0xc>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	059b      	lsls	r3, r3, #22
 800d01e:	d4e1      	bmi.n	800cfe4 <_fflush_r+0xc>
 800d020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d022:	f7ff fb7d 	bl	800c720 <__retarget_lock_release_recursive>
 800d026:	e7dd      	b.n	800cfe4 <_fflush_r+0xc>

0800d028 <__swhatbuf_r>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d030:	2900      	cmp	r1, #0
 800d032:	b096      	sub	sp, #88	@ 0x58
 800d034:	4615      	mov	r5, r2
 800d036:	461e      	mov	r6, r3
 800d038:	da0d      	bge.n	800d056 <__swhatbuf_r+0x2e>
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d040:	f04f 0100 	mov.w	r1, #0
 800d044:	bf14      	ite	ne
 800d046:	2340      	movne	r3, #64	@ 0x40
 800d048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d04c:	2000      	movs	r0, #0
 800d04e:	6031      	str	r1, [r6, #0]
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	b016      	add	sp, #88	@ 0x58
 800d054:	bd70      	pop	{r4, r5, r6, pc}
 800d056:	466a      	mov	r2, sp
 800d058:	f000 f87c 	bl	800d154 <_fstat_r>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	dbec      	blt.n	800d03a <__swhatbuf_r+0x12>
 800d060:	9901      	ldr	r1, [sp, #4]
 800d062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d06a:	4259      	negs	r1, r3
 800d06c:	4159      	adcs	r1, r3
 800d06e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d072:	e7eb      	b.n	800d04c <__swhatbuf_r+0x24>

0800d074 <__smakebuf_r>:
 800d074:	898b      	ldrh	r3, [r1, #12]
 800d076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d078:	079d      	lsls	r5, r3, #30
 800d07a:	4606      	mov	r6, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	d507      	bpl.n	800d090 <__smakebuf_r+0x1c>
 800d080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	6123      	str	r3, [r4, #16]
 800d088:	2301      	movs	r3, #1
 800d08a:	6163      	str	r3, [r4, #20]
 800d08c:	b003      	add	sp, #12
 800d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d090:	ab01      	add	r3, sp, #4
 800d092:	466a      	mov	r2, sp
 800d094:	f7ff ffc8 	bl	800d028 <__swhatbuf_r>
 800d098:	9f00      	ldr	r7, [sp, #0]
 800d09a:	4605      	mov	r5, r0
 800d09c:	4639      	mov	r1, r7
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7ff fbba 	bl	800c818 <_malloc_r>
 800d0a4:	b948      	cbnz	r0, 800d0ba <__smakebuf_r+0x46>
 800d0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0aa:	059a      	lsls	r2, r3, #22
 800d0ac:	d4ee      	bmi.n	800d08c <__smakebuf_r+0x18>
 800d0ae:	f023 0303 	bic.w	r3, r3, #3
 800d0b2:	f043 0302 	orr.w	r3, r3, #2
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	e7e2      	b.n	800d080 <__smakebuf_r+0xc>
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	6020      	str	r0, [r4, #0]
 800d0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	9b01      	ldr	r3, [sp, #4]
 800d0c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0ca:	b15b      	cbz	r3, 800d0e4 <__smakebuf_r+0x70>
 800d0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f000 f851 	bl	800d178 <_isatty_r>
 800d0d6:	b128      	cbz	r0, 800d0e4 <__smakebuf_r+0x70>
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	f023 0303 	bic.w	r3, r3, #3
 800d0de:	f043 0301 	orr.w	r3, r3, #1
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	431d      	orrs	r5, r3
 800d0e8:	81a5      	strh	r5, [r4, #12]
 800d0ea:	e7cf      	b.n	800d08c <__smakebuf_r+0x18>

0800d0ec <_putc_r>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	b118      	cbz	r0, 800d0fe <_putc_r+0x12>
 800d0f6:	6a03      	ldr	r3, [r0, #32]
 800d0f8:	b90b      	cbnz	r3, 800d0fe <_putc_r+0x12>
 800d0fa:	f7ff f911 	bl	800c320 <__sinit>
 800d0fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d100:	07d8      	lsls	r0, r3, #31
 800d102:	d405      	bmi.n	800d110 <_putc_r+0x24>
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	0599      	lsls	r1, r3, #22
 800d108:	d402      	bmi.n	800d110 <_putc_r+0x24>
 800d10a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d10c:	f7ff fb07 	bl	800c71e <__retarget_lock_acquire_recursive>
 800d110:	68a3      	ldr	r3, [r4, #8]
 800d112:	3b01      	subs	r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	60a3      	str	r3, [r4, #8]
 800d118:	da05      	bge.n	800d126 <_putc_r+0x3a>
 800d11a:	69a2      	ldr	r2, [r4, #24]
 800d11c:	4293      	cmp	r3, r2
 800d11e:	db12      	blt.n	800d146 <_putc_r+0x5a>
 800d120:	b2eb      	uxtb	r3, r5
 800d122:	2b0a      	cmp	r3, #10
 800d124:	d00f      	beq.n	800d146 <_putc_r+0x5a>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	6022      	str	r2, [r4, #0]
 800d12c:	701d      	strb	r5, [r3, #0]
 800d12e:	b2ed      	uxtb	r5, r5
 800d130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d132:	07da      	lsls	r2, r3, #31
 800d134:	d405      	bmi.n	800d142 <_putc_r+0x56>
 800d136:	89a3      	ldrh	r3, [r4, #12]
 800d138:	059b      	lsls	r3, r3, #22
 800d13a:	d402      	bmi.n	800d142 <_putc_r+0x56>
 800d13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d13e:	f7ff faef 	bl	800c720 <__retarget_lock_release_recursive>
 800d142:	4628      	mov	r0, r5
 800d144:	bd70      	pop	{r4, r5, r6, pc}
 800d146:	4629      	mov	r1, r5
 800d148:	4622      	mov	r2, r4
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7ff f9d9 	bl	800c502 <__swbuf_r>
 800d150:	4605      	mov	r5, r0
 800d152:	e7ed      	b.n	800d130 <_putc_r+0x44>

0800d154 <_fstat_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d07      	ldr	r5, [pc, #28]	@ (800d174 <_fstat_r+0x20>)
 800d158:	2300      	movs	r3, #0
 800d15a:	4604      	mov	r4, r0
 800d15c:	4608      	mov	r0, r1
 800d15e:	4611      	mov	r1, r2
 800d160:	602b      	str	r3, [r5, #0]
 800d162:	f7f5 f8aa 	bl	80022ba <_fstat>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	d102      	bne.n	800d170 <_fstat_r+0x1c>
 800d16a:	682b      	ldr	r3, [r5, #0]
 800d16c:	b103      	cbz	r3, 800d170 <_fstat_r+0x1c>
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	bd38      	pop	{r3, r4, r5, pc}
 800d172:	bf00      	nop
 800d174:	200017a4 	.word	0x200017a4

0800d178 <_isatty_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d06      	ldr	r5, [pc, #24]	@ (800d194 <_isatty_r+0x1c>)
 800d17c:	2300      	movs	r3, #0
 800d17e:	4604      	mov	r4, r0
 800d180:	4608      	mov	r0, r1
 800d182:	602b      	str	r3, [r5, #0]
 800d184:	f7f5 f8a9 	bl	80022da <_isatty>
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	d102      	bne.n	800d192 <_isatty_r+0x1a>
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	b103      	cbz	r3, 800d192 <_isatty_r+0x1a>
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	200017a4 	.word	0x200017a4

0800d198 <_sbrk_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4d06      	ldr	r5, [pc, #24]	@ (800d1b4 <_sbrk_r+0x1c>)
 800d19c:	2300      	movs	r3, #0
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	602b      	str	r3, [r5, #0]
 800d1a4:	f7f5 f8b2 	bl	800230c <_sbrk>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_sbrk_r+0x1a>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_sbrk_r+0x1a>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	200017a4 	.word	0x200017a4

0800d1b8 <_init>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	bf00      	nop
 800d1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1be:	bc08      	pop	{r3}
 800d1c0:	469e      	mov	lr, r3
 800d1c2:	4770      	bx	lr

0800d1c4 <_fini>:
 800d1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c6:	bf00      	nop
 800d1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ca:	bc08      	pop	{r3}
 800d1cc:	469e      	mov	lr, r3
 800d1ce:	4770      	bx	lr
