
Pill_Adherence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017b4  0800b61c  0800b61c  0000c61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cdd0  0800cdd0  0000ddd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cdd8  0800cdd8  0000ddd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cddc  0800cddc  0000dddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  0800cde0  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000088  0800ce60  0000e088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c0  0800ce95  0000e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001598  200000d4  0800cea6  0000e0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800cea6  0000e66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ea67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000f000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000f000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800cea6  0000e1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002cf04  00000000  00000000  0000ea97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006419  00000000  00000000  0003b99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002848  00000000  00000000  00041db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ec8  00000000  00000000  00044600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cff1  00000000  00000000  000464c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002c40a  00000000  00000000  000734b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9b38  00000000  00000000  0009f8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001993fb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b048  00000000  00000000  00199440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001a4488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d4 	.word	0x200000d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b604 	.word	0x0800b604

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d8 	.word	0x200000d8
 800017c:	0800b604 	.word	0x0800b604

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000af6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000afa:	4905      	ldr	r1, [pc, #20]	@ (8000b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	58000800 	.word	0x58000800

08000b14 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b52:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b70:	68fb      	ldr	r3, [r7, #12]
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b82:	f001 fa8f 	bl	80020a4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b86:	f001 fa93 	bl	80020b0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000b8e:	f7ff ffad 	bl	8000aec <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b92:	f007 fc47 	bl	8008424 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000b96:	f000 f821 	bl	8000bdc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000b9a:	f000 f8c1 	bl	8000d20 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000b9e:	bf00      	nop
}
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <APPD_EnableCPU2+0x34>)
 8000bac:	1d3c      	adds	r4, r7, #4
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	c403      	stmia	r4!, {r0, r1}
 8000bba:	8022      	strh	r2, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c13      	lsrs	r3, r2, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bc2:	f007 fb6b 	bl	800829c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fdfc 	bl	80077c6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bce:	bf00      	nop
}
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	0800b61c 	.word	0x0800b61c

08000bdc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	77fb      	strb	r3, [r7, #31]
 8000c00:	e036      	b.n	8000c70 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	4a43      	ldr	r2, [pc, #268]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	799b      	ldrb	r3, [r3, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d02c      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	4a40      	ldr	r2, [pc, #256]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c18:	4a3f      	ldr	r2, [pc, #252]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01b      	beq.n	8000c56 <APPD_SetCPU2GpioConfig+0x7a>
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d821      	bhi.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
 8000c24:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c28:	d003      	beq.n	8000c32 <APPD_SetCPU2GpioConfig+0x56>
 8000c2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d009      	beq.n	8000c44 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c30:	e01a      	b.n	8000c68 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	4a37      	ldr	r2, [pc, #220]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	889a      	ldrh	r2, [r3, #4]
 8000c3c:	8bbb      	ldrh	r3, [r7, #28]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	83bb      	strh	r3, [r7, #28]
          break;
 8000c42:	e012      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	889a      	ldrh	r2, [r3, #4]
 8000c4e:	8b7b      	ldrh	r3, [r7, #26]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	837b      	strh	r3, [r7, #26]
          break;
 8000c54:	e009      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	4a2e      	ldr	r2, [pc, #184]	@ (8000d14 <APPD_SetCPU2GpioConfig+0x138>)
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	889a      	ldrh	r2, [r3, #4]
 8000c60:	8b3b      	ldrh	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	833b      	strh	r3, [r7, #24]
          break;
 8000c66:	e000      	b.n	8000c6a <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c68:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	77fb      	strb	r3, [r7, #31]
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	2b25      	cmp	r3, #37	@ 0x25
 8000c74:	d9c5      	bls.n	8000c02 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c82:	8bbb      	ldrh	r3, [r7, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d014      	beq.n	8000cb2 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c88:	8bbb      	ldrh	r3, [r7, #28]
 8000c8a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff41 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff57 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f001 fea6 	bl	80029f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ca4:	8bbb      	ldrh	r3, [r7, #28]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f002 f80f 	bl	8002cd0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cb2:	8b7b      	ldrh	r3, [r7, #26]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d012      	beq.n	8000cde <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cb8:	8b7b      	ldrh	r3, [r7, #26]
 8000cba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f7ff ff29 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff ff3f 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cce:	f001 fe8f 	bl	80029f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cd2:	8b7b      	ldrh	r3, [r7, #26]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f001 fff9 	bl	8002cd0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cde:	8b3b      	ldrh	r3, [r7, #24]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000ce4:	8b3b      	ldrh	r3, [r7, #24]
 8000ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff ff13 	bl	8000b14 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cee:	2004      	movs	r0, #4
 8000cf0:	f7ff ff29 	bl	8000b46 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000cfa:	f001 fe79 	bl	80029f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000cfe:	8b3b      	ldrh	r3, [r7, #24]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f001 ffe3 	bl	8002cd0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
}
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800cb7c 	.word	0x0800cb7c
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	48000400 	.word	0x48000400

08000d20 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d24:	bf00      	nop
}
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d32:	f000 fd57 	bl	80017e4 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d36:	bf00      	nop
}
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	460b      	mov	r3, r1
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d48:	897a      	ldrh	r2, [r7, #10]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 fbb0 	bl	80014b4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d54:	bf00      	nop
}
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	f023 0207 	bic.w	r2, r3, #7
 8000d6e:	4905      	ldr	r1, [pc, #20]	@ (8000d84 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58000400 	.word	0x58000400

08000d88 <LL_EXTI_EnableIT_32_63>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000d96:	4905      	ldr	r1, [pc, #20]	@ (8000dac <LL_EXTI_EnableIT_32_63+0x24>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	58000800 	.word	0x58000800

08000db0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dca:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	cafecafe 	.word	0xcafecafe

08000dec <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <LL_DBGMCU_GetDeviceID+0x18>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e0042000 	.word	0xe0042000

08000e30 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	b29b      	uxth	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e0042000 	.word	0xe0042000

08000e4c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	22ff      	movs	r2, #255	@ 0xff
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	22ca      	movs	r2, #202	@ 0xca
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2253      	movs	r2, #83	@ 0x53
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f023 0207 	bic.w	r2, r3, #7
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <MX_APPE_Config+0x18>)
 8000eb2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000eb6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000eb8:	f000 f826 	bl	8000f08 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ebc:	f000 f82b 	bl	8000f16 <Config_HSE>

  return;
 8000ec0:	bf00      	nop
}
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	58004000 	.word	0x58004000

08000ec8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ecc:	f000 f837 	bl	8000f3e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ed0:	f000 f850 	bl	8000f74 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ed4:	4904      	ldr	r1, [pc, #16]	@ (8000ee8 <MX_APPE_Init+0x20>)
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 fa12 	bl	8001300 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000edc:	f7ff fe4f 	bl	8000b7e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ee0:	f000 f856 	bl	8000f90 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ee4:	bf00      	nop
}
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001d0 	.word	0x200001d0

08000eec <Init_Smps>:

void Init_Smps(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ef0:	bf00      	nop
}
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <Init_Exti>:

void Init_Exti(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000efe:	2050      	movs	r0, #80	@ 0x50
 8000f00:	f7ff ff42 	bl	8000d88 <LL_EXTI_EnableIT_32_63>

  return;
 8000f04:	bf00      	nop
}
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f0c:	bf00      	nop
}
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f007 faff 	bl	8008520 <OTP_Read>
 8000f22:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	799b      	ldrb	r3, [r3, #6]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff3e 	bl	8000db0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
}
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <System_Init>:

static void System_Init(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f42:	f7ff ffd3 	bl	8000eec <Init_Smps>

  Init_Exti();
 8000f46:	f7ff ffd8 	bl	8000efa <Init_Exti>

  Init_Rtc();
 8000f4a:	f000 f803 	bl	8000f54 <Init_Rtc>

  return;
 8000f4e:	bf00      	nop
}
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f5a:	f7ff ff84 	bl	8000e66 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f62:	f7ff ff90 	bl	8000e86 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f66:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <Init_Rtc+0x1c>)
 8000f68:	f7ff ff70 	bl	8000e4c <LL_RTC_EnableWriteProtection>

  return;
 8000f6c:	bf00      	nop
}
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40002800 	.word	0x40002800

08000f74 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f7c:	f7ff ff36 	bl	8000dec <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f80:	f009 f90c 	bl	800a19c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f84:	2004      	movs	r0, #4
 8000f86:	f7ff fee9 	bl	8000d5c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f8a:	bf00      	nop
}
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000f96:	f006 ffcb 	bl	8007f30 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <appe_Tl_Init+0x50>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2004      	movs	r0, #4
 8000fa0:	f009 fa3a 	bl	800a418 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <appe_Tl_Init+0x54>)
 8000fa6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <appe_Tl_Init+0x58>)
 8000faa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480e      	ldr	r0, [pc, #56]	@ (8000fec <appe_Tl_Init+0x5c>)
 8000fb2:	f006 fe7f 	bl	8007cb4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <appe_Tl_Init+0x60>)
 8000fb8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <appe_Tl_Init+0x64>)
 8000fbc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <appe_Tl_Init+0x68>)
 8000fc0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000fc2:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000fc6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 f8f1 	bl	80081b4 <TL_MM_Init>

  TL_Enable();
 8000fd2:	f006 ffa7 	bl	8007f24 <TL_Enable>

  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08007ced 	.word	0x08007ced
 8000fe4:	20030734 	.word	0x20030734
 8000fe8:	08000ffd 	.word	0x08000ffd
 8000fec:	08001015 	.word	0x08001015
 8000ff0:	2003094c 	.word	0x2003094c
 8000ff4:	20030840 	.word	0x20030840
 8000ff8:	200301f8 	.word	0x200301f8

08000ffc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001006:	bf00      	nop
}
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	330b      	adds	r3, #11
 8001022:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800102e:	2b07      	cmp	r3, #7
 8001030:	d860      	bhi.n	80010f4 <APPE_SysUserEvtRx+0xe0>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <APPE_SysUserEvtRx+0x24>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001059 	.word	0x08001059
 800103c:	0800109b 	.word	0x0800109b
 8001040:	080010a9 	.word	0x080010a9
 8001044:	080010f5 	.word	0x080010f5
 8001048:	080010c5 	.word	0x080010c5
 800104c:	080010d5 	.word	0x080010d5
 8001050:	080010dd 	.word	0x080010dd
 8001054:	080010ed 	.word	0x080010ed
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fbdf 	bl	8007820 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	4619      	mov	r1, r3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	461a      	mov	r2, r3
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	4824      	ldr	r0, [pc, #144]	@ (8001100 <APPE_SysUserEvtRx+0xec>)
 800106e:	f009 fbb3 	bl	800a7d8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	4619      	mov	r1, r3
 8001076:	4823      	ldr	r0, [pc, #140]	@ (8001104 <APPE_SysUserEvtRx+0xf0>)
 8001078:	f009 fbae 	bl	800a7d8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	4619      	mov	r1, r3
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	461a      	mov	r2, r3
 8001084:	7e3b      	ldrb	r3, [r7, #24]
 8001086:	4820      	ldr	r0, [pc, #128]	@ (8001108 <APPE_SysUserEvtRx+0xf4>)
 8001088:	f009 fba6 	bl	800a7d8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800108c:	481f      	ldr	r0, [pc, #124]	@ (800110c <APPE_SysUserEvtRx+0xf8>)
 800108e:	f009 fba3 	bl	800a7d8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f870 	bl	8001178 <APPE_SysEvtReadyProcessing>
    break;
 8001098:	e02d      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800109a:	481d      	ldr	r0, [pc, #116]	@ (8001110 <APPE_SysUserEvtRx+0xfc>)
 800109c:	f009 fb9c 	bl	800a7d8 <iprintf>
    APPE_SysEvtError(pPayload);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f843 	bl	800112c <APPE_SysEvtError>
    break;
 80010a6:	e026      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <APPE_SysUserEvtRx+0x100>)
 80010aa:	f009 fc05 	bl	800a8b8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010b2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4816      	ldr	r0, [pc, #88]	@ (8001118 <APPE_SysUserEvtRx+0x104>)
 80010be:	f009 fb8b 	bl	800a7d8 <iprintf>
    break;
 80010c2:	e018      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <APPE_SysUserEvtRx+0x108>)
 80010ce:	f009 fb83 	bl	800a7d8 <iprintf>
    break;
 80010d2:	e010      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80010d4:	4812      	ldr	r0, [pc, #72]	@ (8001120 <APPE_SysUserEvtRx+0x10c>)
 80010d6:	f009 fb7f 	bl	800a7d8 <iprintf>
    break;
 80010da:	e00c      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	480f      	ldr	r0, [pc, #60]	@ (8001124 <APPE_SysUserEvtRx+0x110>)
 80010e6:	f009 fb77 	bl	800a7d8 <iprintf>
    break;
 80010ea:	e004      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80010ec:	480e      	ldr	r0, [pc, #56]	@ (8001128 <APPE_SysUserEvtRx+0x114>)
 80010ee:	f009 fb73 	bl	800a7d8 <iprintf>
    break;
 80010f2:	e000      	b.n	80010f6 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80010f4:	bf00      	nop
  }

  return;
 80010f6:	bf00      	nop
}
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800b638 	.word	0x0800b638
 8001104:	0800b65c 	.word	0x0800b65c
 8001108:	0800b678 	.word	0x0800b678
 800110c:	0800b690 	.word	0x0800b690
 8001110:	0800b6b0 	.word	0x0800b6b0
 8001114:	0800b6d4 	.word	0x0800b6d4
 8001118:	0800b724 	.word	0x0800b724
 800111c:	0800b74c 	.word	0x0800b74c
 8001120:	0800b788 	.word	0x0800b788
 8001124:	0800b7ac 	.word	0x0800b7ac
 8001128:	0800b7e8 	.word	0x0800b7e8

0800112c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	330b      	adds	r3, #11
 800113a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3302      	adds	r3, #2
 8001140:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <APPE_SysEvtError+0x40>)
 800114a:	f009 fb45 	bl	800a7d8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <APPE_SysEvtError+0x44>)
 8001158:	f009 fbae 	bl	800a8b8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800115c:	e003      	b.n	8001166 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800115e:	4805      	ldr	r0, [pc, #20]	@ (8001174 <APPE_SysEvtError+0x48>)
 8001160:	f009 fbaa 	bl	800a8b8 <puts>
  return;
 8001164:	bf00      	nop
}
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800b80c 	.word	0x0800b80c
 8001170:	0800b83c 	.word	0x0800b83c
 8001174:	0800b878 	.word	0x0800b878

08001178 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	330b      	adds	r3, #11
 800119c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3302      	adds	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d128      	bne.n	80011fe <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80011ac:	481d      	ldr	r0, [pc, #116]	@ (8001224 <APPE_SysEvtReadyProcessing+0xac>)
 80011ae:	f009 fb83 	bl	800a8b8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80011b2:	f7ff fcf7 	bl	8000ba4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80011b6:	230f      	movs	r3, #15
 80011b8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80011ba:	237f      	movs	r3, #127	@ 0x7f
 80011bc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80011be:	f7ff fe37 	bl	8000e30 <LL_DBGMCU_GetRevisionID>
 80011c2:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80011c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011c6:	4818      	ldr	r0, [pc, #96]	@ (8001228 <APPE_SysEvtReadyProcessing+0xb0>)
 80011c8:	f009 fb06 	bl	800a7d8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80011d2:	f7ff fe1f 	bl	8000e14 <LL_DBGMCU_GetDeviceID>
 80011d6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	4814      	ldr	r0, [pc, #80]	@ (800122c <APPE_SysEvtReadyProcessing+0xb4>)
 80011dc:	f009 fafc 	bl	800a7d8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 fb02 	bl	80077f4 <SHCI_C2_Config>

    APP_BLE_Init();
 80011f0:	f007 fe9c 	bl	8008f2c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2001      	movs	r0, #1
 80011f8:	f008 ffe2 	bl	800a1c0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80011fc:	e00e      	b.n	800121c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001206:	480a      	ldr	r0, [pc, #40]	@ (8001230 <APPE_SysEvtReadyProcessing+0xb8>)
 8001208:	f009 fae6 	bl	800a7d8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  return;
 8001212:	e003      	b.n	800121c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <APPE_SysEvtReadyProcessing+0xbc>)
 8001216:	f009 fadf 	bl	800a7d8 <iprintf>
  return;
 800121a:	bf00      	nop
}
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	0800b8b0 	.word	0x0800b8b0
 8001228:	0800b8cc 	.word	0x0800b8cc
 800122c:	0800b8f0 	.word	0x0800b8f0
 8001230:	0800b910 	.word	0x0800b910
 8001234:	0800b944 	.word	0x0800b944

08001238 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001240:	f008 ffee 	bl	800a220 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800124c:	bf00      	nop
}
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001264:	f008 ffdc 	bl	800a220 <UTIL_SEQ_Run>
  return;
 8001268:	bf00      	nop
}
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001278:	2100      	movs	r1, #0
 800127a:	2004      	movs	r0, #4
 800127c:	f009 f8ee 	bl	800a45c <UTIL_SEQ_SetTask>
  return;
 8001280:	bf00      	nop
}
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001290:	2002      	movs	r0, #2
 8001292:	f009 f94f 	bl	800a534 <UTIL_SEQ_SetEvt>
  return;
 8001296:	bf00      	nop
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f009 f964 	bl	800a574 <UTIL_SEQ_WaitEvt>
  return;
 80012ac:	bf00      	nop
}
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LL_EXTI_EnableIT_0_31>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80012c2:	4905      	ldr	r1, [pc, #20]	@ (80012d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58000800 	.word	0x58000800

080012dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4904      	ldr	r1, [pc, #16]	@ (80012fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]

}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	58000800 	.word	0x58000800

08001300 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800130c:	4b5e      	ldr	r3, [pc, #376]	@ (8001488 <HW_TS_Init+0x188>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	22ca      	movs	r2, #202	@ 0xca
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
 8001314:	4b5c      	ldr	r3, [pc, #368]	@ (8001488 <HW_TS_Init+0x188>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2253      	movs	r2, #83	@ 0x53
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HW_TS_Init+0x18c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <HW_TS_Init+0x18c>)
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001328:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HW_TS_Init+0x18c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f1c3 0304 	rsb	r3, r3, #4
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HW_TS_Init+0x190>)
 800133c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800133e:	4b53      	ldr	r3, [pc, #332]	@ (800148c <HW_TS_Init+0x18c>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001346:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800134a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	fa92 f2a2 	rbit	r2, r2
 8001352:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	2a00      	cmp	r2, #0
 800135c:	d101      	bne.n	8001362 <HW_TS_Init+0x62>
  {
    return 32U;
 800135e:	2220      	movs	r2, #32
 8001360:	e003      	b.n	800136a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	fab2 f282 	clz	r2, r2
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	40d3      	lsrs	r3, r2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <HW_TS_Init+0x194>)
 8001374:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001376:	4b45      	ldr	r3, [pc, #276]	@ (800148c <HW_TS_Init+0x18c>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	b29b      	uxth	r3, r3
 800137c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001380:	b29b      	uxth	r3, r3
 8001382:	3301      	adds	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b44      	ldr	r3, [pc, #272]	@ (8001498 <HW_TS_Init+0x198>)
 8001388:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800138a:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <HW_TS_Init+0x198>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a40      	ldr	r2, [pc, #256]	@ (8001494 <HW_TS_Init+0x194>)
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800139c:	4a3c      	ldr	r2, [pc, #240]	@ (8001490 <HW_TS_Init+0x190>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	40d3      	lsrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d904      	bls.n	80013b8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <HW_TS_Init+0x19c>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	e003      	b.n	80013c0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HW_TS_Init+0x19c>)
 80013be:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013c4:	f7ff ff8a 	bl	80012dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013cc:	f7ff ff72 	bl	80012b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d13d      	bne.n	8001452 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013d6:	4b32      	ldr	r3, [pc, #200]	@ (80014a0 <HW_TS_Init+0x1a0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013dc:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <HW_TS_Init+0x1a4>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	77fb      	strb	r3, [r7, #31]
 80013e8:	e00c      	b.n	8001404 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80013ea:	7ffa      	ldrb	r2, [r7, #31]
 80013ec:	492e      	ldr	r1, [pc, #184]	@ (80014a8 <HW_TS_Init+0x1a8>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	330c      	adds	r3, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	3301      	adds	r3, #1
 8001402:	77fb      	strb	r3, [r7, #31]
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d9ef      	bls.n	80013ea <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <HW_TS_Init+0x1ac>)
 800140c:	2206      	movs	r2, #6
 800140e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001410:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HW_TS_Init+0x188>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HW_TS_Init+0x188>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800141e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HW_TS_Init+0x188>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HW_TS_Init+0x188>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001430:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <HW_TS_Init+0x1b0>)
 8001434:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001438:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800143a:	2003      	movs	r0, #3
 800143c:	f000 ff97 	bl	800236e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HW_TS_Init+0x188>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HW_TS_Init+0x188>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e009      	b.n	8001466 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HW_TS_Init+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 ff76 	bl	8002352 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HW_TS_Init+0x188>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	22ff      	movs	r2, #255	@ 0xff
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800146e:	2200      	movs	r2, #0
 8001470:	2103      	movs	r1, #3
 8001472:	2003      	movs	r0, #3
 8001474:	f000 ff39 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001478:	2003      	movs	r0, #3
 800147a:	f000 ff50 	bl	800231e <HAL_NVIC_EnableIRQ>

  return;
 800147e:	bf00      	nop
}
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001d0 	.word	0x200001d0
 800148c:	40002800 	.word	0x40002800
 8001490:	20000189 	.word	0x20000189
 8001494:	2000018a 	.word	0x2000018a
 8001498:	2000018c 	.word	0x2000018c
 800149c:	2000018e 	.word	0x2000018e
 80014a0:	20000188 	.word	0x20000188
 80014a4:	20000184 	.word	0x20000184
 80014a8:	200000f0 	.word	0x200000f0
 80014ac:	20000180 	.word	0x20000180
 80014b0:	58000800 	.word	0x58000800

080014b4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	4613      	mov	r3, r2
 80014c4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10e      	bne.n	80014f2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80014d4:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HW_UART_Transmit_DMA+0x80>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HW_UART_Transmit_DMA+0x84>)
 80014dc:	4a17      	ldr	r2, [pc, #92]	@ (800153c <HW_UART_Transmit_DMA+0x88>)
 80014de:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4814      	ldr	r0, [pc, #80]	@ (8001538 <HW_UART_Transmit_DMA+0x84>)
 80014e8:	f003 fc8c 	bl	8004e04 <HAL_UART_Transmit_DMA>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
            break;
 80014f0:	e000      	b.n	80014f4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80014f2:	bf00      	nop
    }

    switch (hal_status)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d816      	bhi.n	8001528 <HW_UART_Transmit_DMA+0x74>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <HW_UART_Transmit_DMA+0x4c>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001517 	.word	0x08001517
 8001508:	0800151d 	.word	0x0800151d
 800150c:	08001523 	.word	0x08001523
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001510:	2300      	movs	r3, #0
 8001512:	75bb      	strb	r3, [r7, #22]
            break;
 8001514:	e009      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001516:	2301      	movs	r3, #1
 8001518:	75bb      	strb	r3, [r7, #22]
            break;
 800151a:	e006      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800151c:	2302      	movs	r3, #2
 800151e:	75bb      	strb	r3, [r7, #22]
            break;
 8001520:	e003      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001522:	2303      	movs	r3, #3
 8001524:	75bb      	strb	r3, [r7, #22]
            break;
 8001526:	e000      	b.n	800152a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001528:	bf00      	nop
    }

    return hw_status;
 800152a:	7dbb      	ldrb	r3, [r7, #22]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000190 	.word	0x20000190
 8001538:	200001f4 	.word	0x200001f4
 800153c:	40013800 	.word	0x40013800

08001540 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_UART_TxCpltCallback+0x34>)
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_UART_TxCpltCallback+0x38>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_UART_TxCpltCallback+0x38>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4798      	blx	r3
            }
            break;
 8001562:	e001      	b.n	8001568 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001564:	bf00      	nop
 8001566:	e000      	b.n	800156a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001568:	bf00      	nop
    }

    return;
 800156a:	bf00      	nop
}
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40013800 	.word	0x40013800
 8001578:	20000190 	.word	0x20000190

0800157c <LL_RCC_LSE_SetDriveCapability>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158c:	f023 0218 	bic.w	r2, r3, #24
 8001590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_AHB1_GRP1_EnableClock>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_AHB2_GRP1_EnableClock>:
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001610:	f000 fcc2 	bl	8001f98 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001614:	f7ff fc4a 	bl	8000eac <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f812 	bl	8001640 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800161c:	f000 f872 	bl	8001704 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001620:	f000 f890 	bl	8001744 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001624:	f000 f8a2 	bl	800176c <MX_RF_Init>
  MX_GPIO_Init();
 8001628:	f000 f944 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800162c:	f000 f928 	bl	8001880 <MX_DMA_Init>
  MX_RTC_Init();
 8001630:	f000 f8a4 	bl	800177c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001634:	f7ff fc48 	bl	8000ec8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001638:	f7ff fdfe 	bl	8001238 <MX_APPE_Process>
 800163c:	e7fc      	b.n	8001638 <main+0x2c>
	...

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b09a      	sub	sp, #104	@ 0x68
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0320 	add.w	r3, r7, #32
 800164a:	2248      	movs	r2, #72	@ 0x48
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f009 fa12 	bl	800aa78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001666:	f001 fbf5 	bl	8002e54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800166a:	2010      	movs	r0, #16
 800166c:	f7ff ff86 	bl	800157c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <SystemClock_Config+0xc0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <SystemClock_Config+0xc0>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <SystemClock_Config+0xc0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800168c:	2327      	movs	r3, #39	@ 0x27
 800168e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a4:	2340      	movs	r3, #64	@ 0x40
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80016ac:	23a0      	movs	r3, #160	@ 0xa0
 80016ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 ff5f 	bl	800357c <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80016c4:	f000 f950 	bl	8001968 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016c8:	236f      	movs	r3, #111	@ 0x6f
 80016ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fabb 	bl	8003c64 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80016f4:	f000 f938 	bl	8001968 <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3768      	adds	r7, #104	@ 0x68
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58000400 	.word	0x58000400

08001704 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	@ 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2250      	movs	r2, #80	@ 0x50
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f009 f9b1 	bl	800aa78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001716:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800171a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800171c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001720:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001722:	2300      	movs	r3, #0
 8001724:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001726:	2300      	movs	r3, #0
 8001728:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fed6 	bl	80044de <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001738:	f000 f916 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800173c:	bf00      	nop
 800173e:	3750      	adds	r7, #80	@ 0x50
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_IPCC_Init+0x20>)
 800174a:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <MX_IPCC_Init+0x24>)
 800174c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_IPCC_Init+0x20>)
 8001750:	f001 fafa 	bl	8002d48 <HAL_IPCC_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800175a:	f000 f905 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000194 	.word	0x20000194
 8001768:	58000c00 	.word	0x58000c00

0800176c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_RTC_Init+0x60>)
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <MX_RTC_Init+0x64>)
 8001784:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MX_RTC_Init+0x60>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_RTC_Init+0x60>)
 800178e:	220f      	movs	r2, #15
 8001790:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <MX_RTC_Init+0x60>)
 8001794:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001798:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <MX_RTC_Init+0x60>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_RTC_Init+0x60>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <MX_RTC_Init+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <MX_RTC_Init+0x60>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017b2:	480a      	ldr	r0, [pc, #40]	@ (80017dc <MX_RTC_Init+0x60>)
 80017b4:	f003 f91a 	bl	80049ec <HAL_RTC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017be:	f000 f8d3 	bl	8001968 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_RTC_Init+0x60>)
 80017c8:	f003 fa10 	bl	8004bec <HAL_RTCEx_SetWakeUpTimer>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80017d2:	f000 f8c9 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200001d0 	.word	0x200001d0
 80017e0:	40002800 	.word	0x40002800

080017e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e8:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 80017ea:	4a24      	ldr	r2, [pc, #144]	@ (800187c <MX_USART1_UART_Init+0x98>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001816:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800181a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001828:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001830:	f003 fa97 	bl	8004d62 <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800183a:	f000 f895 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183e:	2100      	movs	r1, #0
 8001840:	480d      	ldr	r0, [pc, #52]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001842:	f004 fc78 	bl	8006136 <HAL_UARTEx_SetTxFifoThreshold>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800184c:	f000 f88c 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	4809      	ldr	r0, [pc, #36]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001854:	f004 fcad 	bl	80061b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800185e:	f000 f883 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_USART1_UART_Init+0x94>)
 8001864:	f004 fc2e 	bl	80060c4 <HAL_UARTEx_DisableFifoMode>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800186e:	f000 f87b 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001f4 	.word	0x200001f4
 800187c:	40013800 	.word	0x40013800

08001880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001884:	2004      	movs	r0, #4
 8001886:	f7ff fe8f 	bl	80015a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fe8c 	bl	80015a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	200b      	movs	r0, #11
 8001896:	f000 fd28 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800189a:	200b      	movs	r0, #11
 800189c:	f000 fd3f 	bl	800231e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	200c      	movs	r0, #12
 80018a6:	f000 fd20 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018aa:	200c      	movs	r0, #12
 80018ac:	f000 fd37 	bl	800231e <HAL_NVIC_EnableIRQ>

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c8:	2004      	movs	r0, #4
 80018ca:	f7ff fe86 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff fe83 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff fe80 	bl	80015da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018da:	2008      	movs	r0, #8
 80018dc:	f7ff fe7d 	bl	80015da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2123      	movs	r1, #35	@ 0x23
 80018e4:	481d      	ldr	r0, [pc, #116]	@ (800195c <MX_GPIO_Init+0xa8>)
 80018e6:	f001 f9f3 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018ea:	2310      	movs	r3, #16
 80018ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4819      	ldr	r0, [pc, #100]	@ (8001960 <MX_GPIO_Init+0xac>)
 80018fc:	f001 f878 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001900:	2323      	movs	r3, #35	@ 0x23
 8001902:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4811      	ldr	r0, [pc, #68]	@ (800195c <MX_GPIO_Init+0xa8>)
 8001916:	f001 f86b 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800191a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800191e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800192c:	230a      	movs	r3, #10
 800192e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f001 f85a 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800193c:	2303      	movs	r3, #3
 800193e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_GPIO_Init+0xb0>)
 800194e:	f001 f84f 	bl	80029f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	48000400 	.word	0x48000400
 8001960:	48000800 	.word	0x48000800
 8001964:	48000c00 	.word	0x48000c00

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <Error_Handler+0x8>

08001974 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_AHB2_GRP1_EnableClock>:
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_AHB3_GRP1_EnableClock>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ec:	68fb      	ldr	r3, [r7, #12]
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_APB1_GRP1_EnableClock>:
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_APB2_GRP1_EnableClock>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a62:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a66:	f7ff ffaf 	bl	80019c8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	202e      	movs	r0, #46	@ 0x2e
 8001a70:	f000 fc3b 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a74:	202e      	movs	r0, #46	@ 0x2e
 8001a76:	f000 fc52 	bl	800231e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <HAL_IPCC_MspInit+0x44>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d113      	bne.n	8001aba <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a92:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a96:	f7ff ff97 	bl	80019c8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	202c      	movs	r0, #44	@ 0x2c
 8001aa0:	f000 fc23 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001aa4:	202c      	movs	r0, #44	@ 0x2c
 8001aa6:	f000 fc3a 	bl	800231e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	202d      	movs	r0, #45	@ 0x2d
 8001ab0:	f000 fc1b 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001ab4:	202d      	movs	r0, #45	@ 0x2d
 8001ab6:	f000 fc32 	bl	800231e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	58000c00 	.word	0x58000c00

08001ac8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b096      	sub	sp, #88	@ 0x58
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	2250      	movs	r2, #80	@ 0x50
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f008 ffcd 	bl	800aa78 <memset>
  if(hrtc->Instance==RTC)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_RTC_MspInit+0x54>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d115      	bne.n	8001b14 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ae8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001aec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fcf0 	bl	80044de <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b04:	f7ff ff30 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b08:	f7ff ff34 	bl	8001974 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b0c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b10:	f7ff ff73 	bl	80019fa <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	3758      	adds	r7, #88	@ 0x58
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40002800 	.word	0x40002800

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b09c      	sub	sp, #112	@ 0x70
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2250      	movs	r2, #80	@ 0x50
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f008 ff99 	bl	800aa78 <memset>
  if(huart->Instance==USART1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a43      	ldr	r2, [pc, #268]	@ (8001c58 <HAL_UART_MspInit+0x138>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d17f      	bne.n	8001c50 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fcbe 	bl	80044de <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b68:	f7ff fefe 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b70:	f7ff ff5c 	bl	8001a2c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	2002      	movs	r0, #2
 8001b76:	f7ff ff0e 	bl	8001996 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b7a:	23c0      	movs	r3, #192	@ 0xc0
 8001b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b92:	4619      	mov	r1, r3
 8001b94:	4831      	ldr	r0, [pc, #196]	@ (8001c5c <HAL_UART_MspInit+0x13c>)
 8001b96:	f000 ff2b 	bl	80029f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001b9a:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001b9c:	4a31      	ldr	r2, [pc, #196]	@ (8001c64 <HAL_UART_MspInit+0x144>)
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001ba2:	220e      	movs	r2, #14
 8001ba4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bac:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb8:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbe:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bca:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bd0:	4823      	ldr	r0, [pc, #140]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bd2:	f000 fbdb 	bl	800238c <HAL_DMA_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001bdc:	f7ff fec4 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001be4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001be8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_UART_MspInit+0x140>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_UART_MspInit+0x14c>)
 8001bf2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c08:	2280      	movs	r2, #128	@ 0x80
 8001c0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c24:	4810      	ldr	r0, [pc, #64]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c26:	f000 fbb1 	bl	800238c <HAL_DMA_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001c30:	f7ff fe9a 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c38:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <HAL_UART_MspInit+0x148>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2024      	movs	r0, #36	@ 0x24
 8001c46:	f000 fb50 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c4a:	2024      	movs	r0, #36	@ 0x24
 8001c4c:	f000 fb67 	bl	800231e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c50:	bf00      	nop
 8001c52:	3770      	adds	r7, #112	@ 0x70
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	20000288 	.word	0x20000288
 8001c64:	40020008 	.word	0x40020008
 8001c68:	200002e8 	.word	0x200002e8
 8001c6c:	4002001c 	.word	0x4002001c

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <NMI_Handler+0x4>

08001c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <MemManage_Handler+0x4>

08001c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc6:	f000 f9c1 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <DMA1_Channel1_IRQHandler+0x10>)
 8001cd6:	f000 fd3a 	bl	800274e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000288 	.word	0x20000288

08001ce4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <DMA1_Channel2_IRQHandler+0x10>)
 8001cea:	f000 fd30 	bl	800274e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200002e8 	.word	0x200002e8

08001cf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <USART1_IRQHandler+0x10>)
 8001cfe:	f003 f901 	bl	8004f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200001f4 	.word	0x200001f4

08001d0c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d10:	f008 f906 	bl	8009f20 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001d1c:	f008 f936 	bl	8009f8c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d28:	f000 ffea 	bl	8002d00 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e00a      	b.n	8001d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d42:	f3af 8000 	nop.w
 8001d46:	4601      	mov	r1, r0
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf0      	blt.n	8001d42 <_read+0x12>
  }

  return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
  return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f008 fe86 	bl	800ab14 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20030000 	.word	0x20030000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000348 	.word	0x20000348
 8001e3c:	20001670 	.word	0x20001670

08001e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e44:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <SystemInit+0x98>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ed8 <SystemInit+0x98>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e68:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001e6c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e78:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <SystemInit+0x9c>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e8a:	f023 0305 	bic.w	r3, r3, #5
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <SystemInit+0xa0>)
 8001eac:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee0 <SystemInit+0xa0>)
 8001eb4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00
 8001edc:	faf6fefb 	.word	0xfaf6fefb
 8001ee0:	22041000 	.word	0x22041000

08001ee4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ee4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee8:	3304      	adds	r3, #4

08001eea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001eee:	d3f9      	bcc.n	8001ee4 <CopyDataInit>
  bx lr
 8001ef0:	4770      	bx	lr

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ef2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ef4:	3004      	adds	r0, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ef6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>
  bx lr
 8001efa:	4770      	bx	lr

08001efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f00:	f7ff ff9e 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f04:	480b      	ldr	r0, [pc, #44]	@ (8001f34 <LoopForever+0x6>)
 8001f06:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <LoopForever+0xa>)
 8001f08:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <LoopForever+0xe>)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f7ff ffed 	bl	8001eea <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f10:	480b      	ldr	r0, [pc, #44]	@ (8001f40 <LoopForever+0x12>)
 8001f12:	490c      	ldr	r1, [pc, #48]	@ (8001f44 <LoopForever+0x16>)
 8001f14:	4a0c      	ldr	r2, [pc, #48]	@ (8001f48 <LoopForever+0x1a>)
 8001f16:	2300      	movs	r3, #0
 8001f18:	f7ff ffe7 	bl	8001eea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f1c:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <LoopForever+0x1e>)
 8001f1e:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <LoopForever+0x22>)
 8001f20:	2300      	movs	r3, #0
 8001f22:	f7ff ffe8 	bl	8001ef6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f26:	f008 fdfb 	bl	800ab20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f2a:	f7ff fb6f 	bl	800160c <main>

08001f2e <LoopForever>:

LoopForever:
  b LoopForever
 8001f2e:	e7fe      	b.n	8001f2e <LoopForever>
  ldr   r0, =_estack
 8001f30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000088 	.word	0x20000088
 8001f3c:	0800cde0 	.word	0x0800cde0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f40:	200301e4 	.word	0x200301e4
 8001f44:	20030a67 	.word	0x20030a67
 8001f48:	0800cea6 	.word	0x0800cea6
  INIT_BSS _sbss, _ebss
 8001f4c:	200000d4 	.word	0x200000d4
 8001f50:	2000166c 	.word	0x2000166c

08001f54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_IRQHandler>
	...

08001f58 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6053      	str	r3, [r2, #4]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e0042000 	.word	0xe0042000

08001f78 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	6053      	str	r3, [r2, #4]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e0042000 	.word	0xe0042000

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_Init+0x3c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd4 <HAL_Init+0x3c>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f000 f990 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f000 f80f 	bl	8001fd8 <HAL_InitTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	e001      	b.n	8001fca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc6:	f7ff fd4a 	bl	8001a5e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	58004000 	.word	0x58004000

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_InitTick+0x6c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d024      	beq.n	8002036 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fec:	f001 ffe6 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <HAL_InitTick+0x6c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f998 	bl	800233a <HAL_SYSTICK_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10f      	bne.n	8002030 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	d809      	bhi.n	800202a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002016:	2200      	movs	r2, #0
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800201e:	f000 f964 	bl	80022ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002022:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <HAL_InitTick+0x70>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e007      	b.n	800203a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e004      	b.n	800203a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e001      	b.n	800203a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000010 	.word	0x20000010
 8002048:	2000000c 	.word	0x2000000c

0800204c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000010 	.word	0x20000010
 8002070:	2000034c 	.word	0x2000034c

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	2000034c 	.word	0x2000034c

0800208c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <HAL_GetTickPrio+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	2000000c 	.word	0x2000000c

080020a4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80020a8:	f7ff ff56 	bl	8001f58 <LL_DBGMCU_EnableDBGSleepMode>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80020b4:	f7ff ff60 	bl	8001f78 <LL_DBGMCU_EnableDBGStopMode>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	@ (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0c      	blt.n	8002188 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	@ (8002194 <__NVIC_SetPendingIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	3340      	adds	r3, #64	@ 0x40
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0c      	blt.n	80021c4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_ClearPendingIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	3360      	adds	r3, #96	@ 0x60
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff feed 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f8:	f7ff ff04 	bl	8002104 <__NVIC_GetPriorityGrouping>
 80022fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f7ff ff90 	bl	8002228 <NVIC_EncodePriority>
 8002308:	4602      	mov	r2, r0
 800230a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff5f 	bl	80021d4 <__NVIC_SetPriority>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fef7 	bl	8002120 <__NVIC_EnableIRQ>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffa4 	bl	8002290 <SysTick_Config>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fefb 	bl	800215c <__NVIC_SetPendingIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff0b 	bl	8002198 <__NVIC_ClearPendingIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e08e      	b.n	80024bc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b47      	ldr	r3, [pc, #284]	@ (80024c4 <HAL_DMA_Init+0x138>)
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d80f      	bhi.n	80023ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b45      	ldr	r3, [pc, #276]	@ (80024c8 <HAL_DMA_Init+0x13c>)
 80023b2:	4413      	add	r3, r2
 80023b4:	4a45      	ldr	r2, [pc, #276]	@ (80024cc <HAL_DMA_Init+0x140>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	009a      	lsls	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a42      	ldr	r2, [pc, #264]	@ (80024d0 <HAL_DMA_Init+0x144>)
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80023c8:	e00e      	b.n	80023e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <HAL_DMA_Init+0x148>)
 80023d2:	4413      	add	r3, r2
 80023d4:	4a3d      	ldr	r2, [pc, #244]	@ (80024cc <HAL_DMA_Init+0x140>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	009a      	lsls	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a3c      	ldr	r2, [pc, #240]	@ (80024d8 <HAL_DMA_Init+0x14c>)
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80023fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002402:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa74 	bl	8002928 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002448:	d102      	bne.n	8002450 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002458:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800245c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002466:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_DMA_Init+0x106>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d80c      	bhi.n	8002492 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa93 	bl	80029a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	e008      	b.n	80024a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40020407 	.word	0x40020407
 80024c8:	bffdfff8 	.word	0xbffdfff8
 80024cc:	cccccccd 	.word	0xcccccccd
 80024d0:	40020000 	.word	0x40020000
 80024d4:	bffdfbf8 	.word	0xbffdfbf8
 80024d8:	40020400 	.word	0x40020400

080024dc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_DMA_Start_IT+0x20>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e066      	b.n	80025ca <HAL_DMA_Start_IT+0xee>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d155      	bne.n	80025bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f9b9 	bl	80028ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 020e 	orr.w	r2, r2, #14
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e00f      	b.n	8002574 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 020a 	orr.w	r2, r2, #10
 8002572:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002590:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e005      	b.n	80025c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e04f      	b.n	8002684 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d008      	beq.n	8002602 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2204      	movs	r2, #4
 80025f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e040      	b.n	8002684 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020e 	bic.w	r2, r2, #14
 8002610:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f003 021c 	and.w	r2, r3, #28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800264e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00c      	beq.n	8002672 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002662:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002666:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002670:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d005      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2204      	movs	r2, #4
 80026ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e047      	b.n	8002744 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020e 	bic.w	r2, r2, #14
 80026c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	f003 021c 	and.w	r2, r3, #28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002700:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002722:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
    }
  }
  return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f003 031c 	and.w	r3, r3, #28
 800276e:	2204      	movs	r2, #4
 8002770:	409a      	lsls	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d026      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x7a>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d021      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d107      	bne.n	80027a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0204 	bic.w	r2, r2, #4
 80027a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f003 021c 	and.w	r2, r3, #28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	2104      	movs	r1, #4
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d071      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027c6:	e06c      	b.n	80028a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	f003 031c 	and.w	r3, r3, #28
 80027d0:	2202      	movs	r2, #2
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02e      	beq.n	800283a <HAL_DMA_IRQHandler+0xec>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d029      	beq.n	800283a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 020a 	bic.w	r2, r2, #10
 8002802:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	f003 021c 	and.w	r2, r3, #28
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	2102      	movs	r1, #2
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d038      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002838:	e033      	b.n	80028a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f003 031c 	and.w	r3, r3, #28
 8002842:	2208      	movs	r2, #8
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d02a      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x156>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d025      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286c:	f003 021c 	and.w	r2, r3, #28
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
}
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028da:	f003 021c 	and.w	r2, r3, #28
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f202 	lsl.w	r2, r1, r2
 80028e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d108      	bne.n	800290c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800290a:	e007      	b.n	800291c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002938:	429a      	cmp	r2, r3
 800293a:	d80a      	bhi.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002948:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002950:	e007      	b.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	009a      	lsls	r2, r3, #2
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800295c:	4413      	add	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3b08      	subs	r3, #8
 800296a:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002978:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2201      	movs	r2, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40020407 	.word	0x40020407
 8002998:	4002081c 	.word	0x4002081c
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	40020880 	.word	0x40020880

080029a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80029c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2201      	movs	r2, #1
 80029d4:	409a      	lsls	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	1000823f 	.word	0x1000823f
 80029ec:	40020940 	.word	0x40020940

080029f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fe:	e14c      	b.n	8002c9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 813e 	beq.w	8002c94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d005      	beq.n	8002a30 <HAL_GPIO_Init+0x40>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d130      	bne.n	8002a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a66:	2201      	movs	r2, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0201 	and.w	r2, r3, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d017      	beq.n	8002ace <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d123      	bne.n	8002b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	6939      	ldr	r1, [r7, #16]
 8002b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0203 	and.w	r2, r3, #3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8098 	beq.w	8002c94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_GPIO_Init+0x2c8>)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b8e:	d019      	beq.n	8002bc4 <HAL_GPIO_Init+0x1d4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a4a      	ldr	r2, [pc, #296]	@ (8002cbc <HAL_GPIO_Init+0x2cc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_GPIO_Init+0x1d0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a49      	ldr	r2, [pc, #292]	@ (8002cc0 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00d      	beq.n	8002bbc <HAL_GPIO_Init+0x1cc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a48      	ldr	r2, [pc, #288]	@ (8002cc4 <HAL_GPIO_Init+0x2d4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d007      	beq.n	8002bb8 <HAL_GPIO_Init+0x1c8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a47      	ldr	r2, [pc, #284]	@ (8002cc8 <HAL_GPIO_Init+0x2d8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_GPIO_Init+0x1c4>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e008      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	e006      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e004      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e002      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_GPIO_Init+0x1d6>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	f002 0203 	and.w	r2, r2, #3
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bd6:	4938      	ldr	r1, [pc, #224]	@ (8002cb8 <HAL_GPIO_Init+0x2c8>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be4:	4b39      	ldr	r3, [pc, #228]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c08:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c32:	4a26      	ldr	r2, [pc, #152]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c38:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002c66:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ccc <HAL_GPIO_Init+0x2dc>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3301      	adds	r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f47f aeab 	bne.w	8002a00 <HAL_GPIO_Init+0x10>
  }
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	48000400 	.word	0x48000400
 8002cc0:	48000800 	.word	0x48000800
 8002cc4:	48000c00 	.word	0x48000c00
 8002cc8:	48001000 	.word	0x48001000
 8002ccc:	58000800 	.word	0x58000800

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_HSEM_IRQHandler+0x30>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_HSEM_IRQHandler+0x30>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4906      	ldr	r1, [pc, #24]	@ (8002d30 <HAL_HSEM_IRQHandler+0x30>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <HAL_HSEM_IRQHandler+0x30>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f807 	bl	8002d34 <HAL_HSEM_FreeCallback>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	58001500 	.word	0x58001500

08002d34 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01e      	beq.n	8002d98 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_IPCC_Init+0x60>)
 8002d5c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fe88 	bl	8001a80 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002d70:	68b8      	ldr	r0, [r7, #8]
 8002d72:	f000 f85b 	bl	8002e2c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f82c 	bl	8002de0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002d96:	e001      	b.n	8002d9c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	58000c00 	.word	0x58000c00

08002dac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e00f      	b.n	8002e0e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	4a0b      	ldr	r2, [pc, #44]	@ (8002e24 <IPCC_SetDefaultCallbacks+0x44>)
 8002df8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3306      	adds	r3, #6
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <IPCC_SetDefaultCallbacks+0x48>)
 8002e06:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d9ec      	bls.n	8002dee <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	08002dad 	.word	0x08002dad
 8002e28:	08002dc7 	.word	0x08002dc7

08002e2c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002e40:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223f      	movs	r2, #63	@ 0x3f
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	58000400 	.word	0x58000400

08002e74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	58000400 	.word	0x58000400

08002e90 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea2:	d101      	bne.n	8002ea8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_HSE_Enable>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_HSE_Disable>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_HSE_IsReady>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f02:	d101      	bne.n	8002f08 <LL_RCC_HSE_IsReady+0x18>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_RCC_HSE_IsReady+0x1a>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_RCC_HSI_Enable>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_HSI_Disable>:
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f44:	6013      	str	r3, [r2, #0]
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_RCC_HSI_IsReady>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d101      	bne.n	8002f68 <LL_RCC_HSI_IsReady+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_RCC_HSI_IsReady+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_HSI48_Enable>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002faa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_HSI48_Disable>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_HSI48_IsReady>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d101      	bne.n	8002ffa <LL_RCC_HSI48_IsReady+0x18>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_RCC_HSI48_IsReady+0x1a>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_RCC_LSE_Enable>:
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_RCC_LSE_Disable>:
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_RCC_LSE_EnableBypass>:
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_RCC_LSE_DisableBypass>:
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003078:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_LSE_IsReady>:
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d101      	bne.n	80030a6 <LL_RCC_LSE_IsReady+0x18>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <LL_RCC_LSE_IsReady+0x1a>
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_RCC_LSI1_Enable>:
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_RCC_LSI1_Disable>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_RCC_LSI1_IsReady>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d101      	bne.n	800310e <LL_RCC_LSI1_IsReady+0x18>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_RCC_LSI1_IsReady+0x1a>
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_RCC_LSI2_Enable>:
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RCC_LSI2_Disable>:
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_RCC_LSI2_IsReady>:
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b08      	cmp	r3, #8
 8003170:	d101      	bne.n	8003176 <LL_RCC_LSI2_IsReady+0x18>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_RCC_LSI2_IsReady+0x1a>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_RCC_LSI2_SetTrimming>:
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003192:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_RCC_MSI_Enable>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_RCC_MSI_Disable>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6013      	str	r3, [r2, #0]
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_MSI_IsReady>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d101      	bne.n	8003202 <LL_RCC_MSI_IsReady+0x16>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_RCC_MSI_IsReady+0x18>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_RCC_MSI_SetRange>:
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_RCC_MSI_GetRange>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003246:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2bb0      	cmp	r3, #176	@ 0xb0
 800324c:	d901      	bls.n	8003252 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800324e:	23b0      	movs	r3, #176	@ 0xb0
 8003250:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003252:	687b      	ldr	r3, [r7, #4]
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_RCC_SetSysClkSource>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 0203 	bic.w	r2, r3, #3
 800329c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_RCC_GetSysClkSource>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_RCC_SetAHBPrescaler>:
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003302:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_RCC_SetAHB4Prescaler>:
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_RCC_SetAPB1Prescaler>:
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_RCC_SetAPB2Prescaler>:
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_RCC_GetAHBPrescaler>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_RCC_GetAHB4Prescaler>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_RCC_GetAPB1Prescaler>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_RCC_GetAPB2Prescaler>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800340e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003412:	6013      	str	r3, [r2, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800342c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003430:	6013      	str	r3, [r2, #0]
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800344e:	d101      	bne.n	8003454 <LL_RCC_PLL_IsReady+0x18>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <LL_RCC_PLL_IsReady+0x1a>
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0303 	and.w	r3, r3, #3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d4:	d101      	bne.n	80034da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034fa:	d101      	bne.n	8003500 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003514:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003520:	d101      	bne.n	8003526 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003544:	d101      	bne.n	800354a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003564:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003568:	d101      	bne.n	800356e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b08d      	sub	sp, #52	@ 0x34
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e363      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 808d 	beq.w	80036b6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359c:	f7ff fe89 	bl	80032b2 <LL_RCC_GetSysClkSource>
 80035a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a2:	f7ff ff82 	bl	80034aa <LL_RCC_PLL_GetMainSource>
 80035a6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x3e>
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d147      	bne.n	8003644 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d144      	bne.n	8003644 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e347      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80035ca:	f7ff fe34 	bl	8003236 <LL_RCC_MSI_GetRange>
 80035ce:	4603      	mov	r3, r0
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d914      	bls.n	80035fe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fd2f 	bl	800403c <RCC_SetFlashLatencyFromMSIRange>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e336      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe0e 	bl	800320e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fe32 	bl	8003260 <LL_RCC_MSI_SetCalibTrimming>
 80035fc:	e013      	b.n	8003626 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fe03 	bl	800320e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fe27 	bl	8003260 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fd10 	bl	800403c <RCC_SetFlashLatencyFromMSIRange>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e317      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003626:	f000 fcc9 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 800362a:	4603      	mov	r3, r0
 800362c:	4aa4      	ldr	r2, [pc, #656]	@ (80038c0 <HAL_RCC_OscConfig+0x344>)
 800362e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003630:	4ba4      	ldr	r3, [pc, #656]	@ (80038c4 <HAL_RCC_OscConfig+0x348>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fccf 	bl	8001fd8 <HAL_InitTick>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d039      	beq.n	80036b4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e308      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01e      	beq.n	800368a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800364c:	f7ff fdb0 	bl	80031b0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003650:	f7fe fd10 	bl	8002074 <HAL_GetTick>
 8003654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003658:	f7fe fd0c 	bl	8002074 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e2f5      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800366a:	f7ff fdbf 	bl	80031ec <LL_RCC_MSI_IsReady>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f1      	beq.n	8003658 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fdc8 	bl	800320e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fdec 	bl	8003260 <LL_RCC_MSI_SetCalibTrimming>
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800368a:	f7ff fda0 	bl	80031ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800368e:	f7fe fcf1 	bl	8002074 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003696:	f7fe fced 	bl	8002074 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e2d6      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80036a8:	f7ff fda0 	bl	80031ec <LL_RCC_MSI_IsReady>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f1      	bne.n	8003696 <HAL_RCC_OscConfig+0x11a>
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80036b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d047      	beq.n	8003752 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c2:	f7ff fdf6 	bl	80032b2 <LL_RCC_GetSysClkSource>
 80036c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c8:	f7ff feef 	bl	80034aa <LL_RCC_PLL_GetMainSource>
 80036cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x164>
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d108      	bne.n	80036ec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d105      	bne.n	80036ec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d134      	bne.n	8003752 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e2b4      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d102      	bne.n	80036fc <HAL_RCC_OscConfig+0x180>
 80036f6:	f7ff fbdd 	bl	8002eb4 <LL_RCC_HSE_Enable>
 80036fa:	e001      	b.n	8003700 <HAL_RCC_OscConfig+0x184>
 80036fc:	f7ff fbe9 	bl	8002ed2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe fcb4 	bl	8002074 <HAL_GetTick>
 800370c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fcb0 	bl	8002074 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	@ 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e299      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003722:	f7ff fbe5 	bl	8002ef0 <LL_RCC_HSE_IsReady>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f1      	beq.n	8003710 <HAL_RCC_OscConfig+0x194>
 800372c:	e011      	b.n	8003752 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe fca1 	bl	8002074 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003736:	f7fe fc9d 	bl	8002074 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	@ 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e286      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003748:	f7ff fbd2 	bl	8002ef0 <LL_RCC_HSE_IsReady>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f1      	bne.n	8003736 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375e:	f7ff fda8 	bl	80032b2 <LL_RCC_GetSysClkSource>
 8003762:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003764:	f7ff fea1 	bl	80034aa <LL_RCC_PLL_GetMainSource>
 8003768:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d005      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d10e      	bne.n	8003794 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e266      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fbf1 	bl	8002f74 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003792:	e031      	b.n	80037f8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d019      	beq.n	80037d0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379c:	f7ff fbba 	bl	8002f14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe fc68 	bl	8002074 <HAL_GetTick>
 80037a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a8:	f7fe fc64 	bl	8002074 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e24d      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80037ba:	f7ff fbc9 	bl	8002f50 <LL_RCC_HSI_IsReady>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f1      	beq.n	80037a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fbd3 	bl	8002f74 <LL_RCC_HSI_SetCalibTrimming>
 80037ce:	e013      	b.n	80037f8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d0:	f7ff fbaf 	bl	8002f32 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fc4e 	bl	8002074 <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fe fc4a 	bl	8002074 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e233      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80037ee:	f7ff fbaf 	bl	8002f50 <LL_RCC_HSI_IsReady>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f1      	bne.n	80037dc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a3 	beq.w	8003958 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d076      	beq.n	8003908 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d046      	beq.n	80038b4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003826:	f7ff fc66 	bl	80030f6 <LL_RCC_LSI1_IsReady>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d113      	bne.n	8003858 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003830:	f7ff fc3f 	bl	80030b2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003834:	f7fe fc1e 	bl	8002074 <HAL_GetTick>
 8003838:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800383c:	f7fe fc1a 	bl	8002074 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e203      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800384e:	f7ff fc52 	bl	80030f6 <LL_RCC_LSI1_IsReady>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f1      	beq.n	800383c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003858:	f7ff fc5f 	bl	800311a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe fc0a 	bl	8002074 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003864:	f7fe fc06 	bl	8002074 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b03      	cmp	r3, #3
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1ef      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003876:	f7ff fc72 	bl	800315e <LL_RCC_LSI2_IsReady>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f1      	beq.n	8003864 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fc7c 	bl	8003182 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800388a:	f7ff fc23 	bl	80030d4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fe fbf1 	bl	8002074 <HAL_GetTick>
 8003892:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003896:	f7fe fbed 	bl	8002074 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1d6      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80038a8:	f7ff fc25 	bl	80030f6 <LL_RCC_LSI1_IsReady>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f1      	bne.n	8003896 <HAL_RCC_OscConfig+0x31a>
 80038b2:	e051      	b.n	8003958 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80038b4:	f7ff fbfd 	bl	80030b2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe fbdc 	bl	8002074 <HAL_GetTick>
 80038bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80038be:	e00c      	b.n	80038da <HAL_RCC_OscConfig+0x35e>
 80038c0:	20000008 	.word	0x20000008
 80038c4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80038c8:	f7fe fbd4 	bl	8002074 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1bd      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80038da:	f7ff fc0c 	bl	80030f6 <LL_RCC_LSI1_IsReady>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f1      	beq.n	80038c8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80038e4:	f7ff fc2a 	bl	800313c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80038ea:	f7fe fbc3 	bl	8002074 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1ac      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80038fc:	f7ff fc2f 	bl	800315e <LL_RCC_LSI2_IsReady>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f1      	bne.n	80038ea <HAL_RCC_OscConfig+0x36e>
 8003906:	e027      	b.n	8003958 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003908:	f7ff fc18 	bl	800313c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe fbb2 	bl	8002074 <HAL_GetTick>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003914:	f7fe fbae 	bl	8002074 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b03      	cmp	r3, #3
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e197      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003926:	f7ff fc1a 	bl	800315e <LL_RCC_LSI2_IsReady>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f1      	bne.n	8003914 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003930:	f7ff fbd0 	bl	80030d4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fe fb9e 	bl	8002074 <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800393c:	f7fe fb9a 	bl	8002074 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e183      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800394e:	f7ff fbd2 	bl	80030f6 <LL_RCC_LSI1_IsReady>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f1      	bne.n	800393c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003964:	4ba7      	ldr	r3, [pc, #668]	@ (8003c04 <HAL_RCC_OscConfig+0x688>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d114      	bne.n	800399a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003970:	f7ff fa70 	bl	8002e54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003974:	f7fe fb7e 	bl	8002074 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe fb7a 	bl	8002074 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e163      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398e:	4b9d      	ldr	r3, [pc, #628]	@ (8003c04 <HAL_RCC_OscConfig+0x688>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_OscConfig+0x42c>
 80039a2:	f7ff fb30 	bl	8003006 <LL_RCC_LSE_Enable>
 80039a6:	e00c      	b.n	80039c2 <HAL_RCC_OscConfig+0x446>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d104      	bne.n	80039ba <HAL_RCC_OscConfig+0x43e>
 80039b0:	f7ff fb4b 	bl	800304a <LL_RCC_LSE_EnableBypass>
 80039b4:	f7ff fb27 	bl	8003006 <LL_RCC_LSE_Enable>
 80039b8:	e003      	b.n	80039c2 <HAL_RCC_OscConfig+0x446>
 80039ba:	f7ff fb35 	bl	8003028 <LL_RCC_LSE_Disable>
 80039be:	f7ff fb55 	bl	800306c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d014      	beq.n	80039f4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe fb53 	bl	8002074 <HAL_GetTick>
 80039ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe fb4f 	bl	8002074 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e136      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80039e8:	f7ff fb51 	bl	800308e <LL_RCC_LSE_IsReady>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ef      	beq.n	80039d2 <HAL_RCC_OscConfig+0x456>
 80039f2:	e013      	b.n	8003a1c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fe fb3e 	bl	8002074 <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe fb3a 	bl	8002074 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e121      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003a12:	f7ff fb3c 	bl	800308e <LL_RCC_LSE_IsReady>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ef      	bne.n	80039fc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d014      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a30:	f7ff fab5 	bl	8002f9e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fe fb1e 	bl	8002074 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3c:	f7fe fb1a 	bl	8002074 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e103      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003a4e:	f7ff fac8 	bl	8002fe2 <LL_RCC_HSI48_IsReady>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f1      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4c0>
 8003a58:	e013      	b.n	8003a82 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a5a:	f7ff fab1 	bl	8002fc0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fb09 	bl	8002074 <HAL_GetTick>
 8003a62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a66:	f7fe fb05 	bl	8002074 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0ee      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003a78:	f7ff fab3 	bl	8002fe2 <LL_RCC_HSI48_IsReady>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f1      	bne.n	8003a66 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80e4 	beq.w	8003c54 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8c:	f7ff fc11 	bl	80032b2 <LL_RCC_GetSysClkSource>
 8003a90:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	f040 80b4 	bne.w	8003c0c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d123      	bne.n	8003afa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d11c      	bne.n	8003afa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d114      	bne.n	8003afa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d10d      	bne.n	8003afa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d05d      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d058      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0a1      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b12:	f7ff fc84 	bl	800341e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b16:	f7fe faad 	bl	8002074 <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe faa9 	bl	8002074 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e092      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ef      	bne.n	8003b1e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	4b30      	ldr	r3, [pc, #192]	@ (8003c08 <HAL_RCC_OscConfig+0x68c>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b56:	0212      	lsls	r2, r2, #8
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b74:	f7ff fc44 	bl	8003400 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b88:	f7fe fa74 	bl	8002074 <HAL_GetTick>
 8003b8c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fe fa70 	bl	8002074 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e059      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ef      	beq.n	8003b90 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb0:	e050      	b.n	8003c54 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e04f      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d147      	bne.n	8003c54 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bc4:	f7ff fc1c 	bl	8003400 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bd8:	f7fe fa4c 	bl	8002074 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fe fa48 	bl	8002074 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e031      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ef      	beq.n	8003be0 <HAL_RCC_OscConfig+0x664>
 8003c00:	e028      	b.n	8003c54 <HAL_RCC_OscConfig+0x6d8>
 8003c02:	bf00      	nop
 8003c04:	58000400 	.word	0x58000400
 8003c08:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d01e      	beq.n	8003c50 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	f7ff fc04 	bl	800341e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fe fa2d 	bl	8002074 <HAL_GetTick>
 8003c1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fe fa29 	bl	8002074 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e012      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ef      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c48:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <HAL_RCC_OscConfig+0x6e4>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
 8003c4e:	e001      	b.n	8003c54 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3734      	adds	r7, #52	@ 0x34
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	eefefffc 	.word	0xeefefffc

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e12d      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b98      	ldr	r3, [pc, #608]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d91b      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b95      	ldr	r3, [pc, #596]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 0207 	bic.w	r2, r3, #7
 8003c8e:	4993      	ldr	r1, [pc, #588]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c96:	f7fe f9ed 	bl	8002074 <HAL_GetTick>
 8003c9a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c9e:	f7fe f9e9 	bl	8002074 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e111      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b8a      	ldr	r3, [pc, #552]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d1ef      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fafb 	bl	80032ca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cd4:	f7fe f9ce 	bl	8002074 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cdc:	f7fe f9ca 	bl	8002074 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0f2      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003cee:	f7ff fbe8 	bl	80034c2 <LL_RCC_IsActiveFlag_HPRE>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f1      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff faf2 	bl	80032f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d0e:	f7fe f9b1 	bl	8002074 <HAL_GetTick>
 8003d12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d16:	f7fe f9ad 	bl	8002074 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0d5      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d28:	f7ff fbdd 	bl	80034e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f1      	beq.n	8003d16 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff faeb 	bl	800331e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d48:	f7fe f994 	bl	8002074 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d50:	f7fe f990 	bl	8002074 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0b8      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d62:	f7ff fbd3 	bl	800350c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f1      	beq.n	8003d50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fae5 	bl	800334c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d82:	f7fe f977 	bl	8002074 <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d8a:	f7fe f973 	bl	8002074 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e09b      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d9c:	f7ff fbc9 	bl	8003532 <LL_RCC_IsActiveFlag_PPRE1>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f1      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fadb 	bl	8003374 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dbe:	f7fe f959 	bl	8002074 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dc6:	f7fe f955 	bl	8002074 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e07d      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dd8:	f7ff fbbd 	bl	8003556 <LL_RCC_IsActiveFlag_PPRE2>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f1      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d043      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003df6:	f7ff f87b 	bl	8002ef0 <LL_RCC_HSE_IsReady>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11e      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e067      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003e0c:	f7ff fb16 	bl	800343c <LL_RCC_PLL_IsReady>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d113      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e05c      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003e22:	f7ff f9e3 	bl	80031ec <LL_RCC_MSI_IsReady>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e051      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003e30:	f7ff f88e 	bl	8002f50 <LL_RCC_HSI_IsReady>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e04a      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fa21 	bl	800328a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e48:	f7fe f914 	bl	8002074 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe f910 	bl	8002074 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e036      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	f7ff fa24 	bl	80032b2 <LL_RCC_GetSysClkSource>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d1ec      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e76:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d21b      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e84:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 0207 	bic.w	r2, r3, #7
 8003e8c:	4913      	ldr	r1, [pc, #76]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fe f8ee 	bl	8002074 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e9c:	f7fe f8ea 	bl	8002074 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e012      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x278>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1ef      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ebc:	f000 f87e 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4a07      	ldr	r2, [pc, #28]	@ (8003ee0 <HAL_RCC_ClockConfig+0x27c>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003ec6:	f7fe f8e1 	bl	800208c <HAL_GetTickPrio>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe f883 	bl	8001fd8 <HAL_InitTick>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	58004000 	.word	0x58004000
 8003ee0:	20000008 	.word	0x20000008

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	f7ff f9e2 	bl	80032b2 <LL_RCC_GetSysClkSource>
 8003eee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003ef6:	f7ff f99e 	bl	8003236 <LL_RCC_MSI_GetRange>
 8003efa:	4603      	mov	r3, r0
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	4a2b      	ldr	r2, [pc, #172]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e04b      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f12:	4b28      	ldr	r3, [pc, #160]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e045      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f1e:	f7fe ffb7 	bl	8002e90 <LL_RCC_HSE_IsEnabledDiv2>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003f28:	4b22      	ldr	r3, [pc, #136]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e03a      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003f2e:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e037      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003f34:	f7ff fab9 	bl	80034aa <LL_RCC_PLL_GetMainSource>
 8003f38:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d003      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x64>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x6a>
 8003f46:	e00d      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f4a:	60bb      	str	r3, [r7, #8]
        break;
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f4e:	f7fe ff9f 	bl	8002e90 <LL_RCC_HSE_IsEnabledDiv2>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d102      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003f58:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f5a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003f5c:	e00d      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f60:	60bb      	str	r3, [r7, #8]
        break;
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003f64:	f7ff f967 	bl	8003236 <LL_RCC_MSI_GetRange>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	60bb      	str	r3, [r7, #8]
        break;
 8003f78:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003f7a:	f7ff fa71 	bl	8003460 <LL_RCC_PLL_GetN>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	fb03 f402 	mul.w	r4, r3, r2
 8003f86:	f7ff fa84 	bl	8003492 <LL_RCC_PLL_GetDivider>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	3301      	adds	r3, #1
 8003f90:	fbb4 f4f3 	udiv	r4, r4, r3
 8003f94:	f7ff fa71 	bl	800347a <LL_RCC_PLL_GetR>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	0f5b      	lsrs	r3, r3, #29
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003fa2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	0800cd0c 	.word	0x0800cd0c
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	01e84800 	.word	0x01e84800

08003fbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fbc:	b598      	push	{r3, r4, r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003fc0:	f7ff ff90 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	f7ff f9e9 	bl	800339c <LL_RCC_GetAHBPrescaler>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	4a03      	ldr	r2, [pc, #12]	@ (8003fe0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd98      	pop	{r3, r4, r7, pc}
 8003fe0:	0800ccac 	.word	0x0800ccac

08003fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe4:	b598      	push	{r3, r4, r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003fe8:	f7ff ffe8 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8003fec:	4604      	mov	r4, r0
 8003fee:	f7ff f9ef 	bl	80033d0 <LL_RCC_GetAPB1Prescaler>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	4a04      	ldr	r2, [pc, #16]	@ (800400c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd98      	pop	{r3, r4, r7, pc}
 800400c:	0800ccec 	.word	0x0800ccec

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b598      	push	{r3, r4, r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004014:	f7ff ffd2 	bl	8003fbc <HAL_RCC_GetHCLKFreq>
 8004018:	4604      	mov	r4, r0
 800401a:	f7ff f9e5 	bl	80033e8 <LL_RCC_GetAPB2Prescaler>
 800401e:	4603      	mov	r3, r0
 8004020:	0adb      	lsrs	r3, r3, #11
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	4a04      	ldr	r2, [pc, #16]	@ (8004038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd98      	pop	{r3, r4, r7, pc}
 8004038:	0800ccec 	.word	0x0800ccec

0800403c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2bb0      	cmp	r3, #176	@ 0xb0
 8004048:	d903      	bls.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e007      	b.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004062:	f7ff f9a7 	bl	80033b4 <LL_RCC_GetAHB4Prescaler>
 8004066:	4603      	mov	r3, r0
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4a0d      	ldr	r2, [pc, #52]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a0a      	ldr	r2, [pc, #40]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	0c9c      	lsrs	r4, r3, #18
 8004086:	f7fe fef5 	bl	8002e74 <HAL_PWREx_GetVoltageRange>
 800408a:	4603      	mov	r3, r0
 800408c:	4619      	mov	r1, r3
 800408e:	4620      	mov	r0, r4
 8004090:	f000 f80c 	bl	80040ac <RCC_SetFlashLatency>
 8004094:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bd90      	pop	{r4, r7, pc}
 800409e:	bf00      	nop
 80040a0:	0800cd0c 	.word	0x0800cd0c
 80040a4:	0800ccac 	.word	0x0800ccac
 80040a8:	431bde83 	.word	0x431bde83

080040ac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b093      	sub	sp, #76	@ 0x4c
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80040b6:	4b37      	ldr	r3, [pc, #220]	@ (8004194 <RCC_SetFlashLatency+0xe8>)
 80040b8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80040bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80040c2:	4a35      	ldr	r2, [pc, #212]	@ (8004198 <RCC_SetFlashLatency+0xec>)
 80040c4:	f107 031c 	add.w	r3, r7, #28
 80040c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80040ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80040ce:	4b33      	ldr	r3, [pc, #204]	@ (800419c <RCC_SetFlashLatency+0xf0>)
 80040d0:	f107 040c 	add.w	r4, r7, #12
 80040d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80040da:	2300      	movs	r3, #0
 80040dc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e4:	d11a      	bne.n	800411c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ea:	e013      	b.n	8004114 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80040ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3348      	adds	r3, #72	@ 0x48
 80040f2:	443b      	add	r3, r7
 80040f4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d807      	bhi.n	800410e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80040fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	3348      	adds	r3, #72	@ 0x48
 8004104:	443b      	add	r3, r7
 8004106:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800410a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800410c:	e020      	b.n	8004150 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800410e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004110:	3301      	adds	r3, #1
 8004112:	643b      	str	r3, [r7, #64]	@ 0x40
 8004114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004116:	2b03      	cmp	r3, #3
 8004118:	d9e8      	bls.n	80040ec <RCC_SetFlashLatency+0x40>
 800411a:	e019      	b.n	8004150 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800411c:	2300      	movs	r3, #0
 800411e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004120:	e013      	b.n	800414a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3348      	adds	r3, #72	@ 0x48
 8004128:	443b      	add	r3, r7
 800412a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d807      	bhi.n	8004144 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	3348      	adds	r3, #72	@ 0x48
 800413a:	443b      	add	r3, r7
 800413c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004142:	e005      	b.n	8004150 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004146:	3301      	adds	r3, #1
 8004148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800414a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414c:	2b02      	cmp	r3, #2
 800414e:	d9e8      	bls.n	8004122 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004150:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <RCC_SetFlashLatency+0xf4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 0207 	bic.w	r2, r3, #7
 8004158:	4911      	ldr	r1, [pc, #68]	@ (80041a0 <RCC_SetFlashLatency+0xf4>)
 800415a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004160:	f7fd ff88 	bl	8002074 <HAL_GetTick>
 8004164:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004166:	e008      	b.n	800417a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004168:	f7fd ff84 	bl	8002074 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e007      	b.n	800418a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800417a:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <RCC_SetFlashLatency+0xf4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004184:	429a      	cmp	r2, r3
 8004186:	d1ef      	bne.n	8004168 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	374c      	adds	r7, #76	@ 0x4c
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	bf00      	nop
 8004194:	0800b978 	.word	0x0800b978
 8004198:	0800b988 	.word	0x0800b988
 800419c:	0800b994 	.word	0x0800b994
 80041a0:	58004000 	.word	0x58004000

080041a4 <LL_RCC_LSE_IsEnabled>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80041a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <LL_RCC_LSE_IsEnabled+0x18>
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <LL_RCC_LSE_IsEnabled+0x1a>
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_RCC_LSE_IsReady>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d101      	bne.n	80041e0 <LL_RCC_LSE_IsReady+0x18>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <LL_RCC_LSE_IsReady+0x1a>
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_RCC_SetRFWKPClockSource>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_RCC_SetSMPSClockSource>:
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4313      	orrs	r3, r2
 8004232:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_RCC_SetSMPSPrescaler>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4313      	orrs	r3, r2
 800425a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_RCC_SetUSARTClockSource>:
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	f023 0203 	bic.w	r2, r3, #3
 800427c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_RCC_SetLPUARTClockSource>:
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_RCC_SetI2CClockSource>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80042c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80042e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_RCC_SetLPTIMClockSource>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004306:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_RCC_SetSAIClockSource>:
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_RCC_SetRNGClockSource>:
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800436e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <LL_RCC_SetCLK48ClockSource>:
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800439a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <LL_RCC_SetUSBClockSource>:
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ffe3 	bl	8004386 <LL_RCC_SetCLK48ClockSource>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <LL_RCC_SetADCClockSource>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <LL_RCC_SetRTCClockSource>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_RCC_GetRTCClockSource>:
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_ForceBackupDomainReset>:
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800444a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_RCC_ReleaseBackupDomainReset>:
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800446c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <LL_RCC_PLLSAI1_Enable>:
{
 800447e:	b480      	push	{r7}
 8004480:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800448c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	bf00      	nop
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_RCC_PLLSAI1_Disable>:
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80044a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044ae:	6013      	str	r3, [r2, #0]
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_RCC_PLLSAI1_IsReady>:
{
 80044ba:	b480      	push	{r7}
 80044bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044cc:	d101      	bne.n	80044d2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b088      	sub	sp, #32
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80044e6:	2300      	movs	r3, #0
 80044e8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80044ea:	2300      	movs	r3, #0
 80044ec:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d034      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004502:	d021      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004504:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004508:	d81b      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800450a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800450e:	d01d      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004510:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004514:	d815      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800451e:	d110      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004530:	e00d      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f947 	bl	80047ca <RCCEx_PLLSAI1_ConfigNP>
 800453c:	4603      	mov	r3, r0
 800453e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004540:	e005      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	77fb      	strb	r3, [r7, #31]
        break;
 8004546:	e002      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454e:	7ffb      	ldrb	r3, [r7, #31]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fee8 	bl	800432e <LL_RCC_SetSAIClockSource>
 800455e:	e001      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7ffb      	ldrb	r3, [r7, #31]
 8004562:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800456c:	2b00      	cmp	r3, #0
 800456e:	d046      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004570:	f7ff ff56 	bl	8004420 <LL_RCC_GetRTCClockSource>
 8004574:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	429a      	cmp	r2, r3
 800457e:	d03c      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004580:	f7fe fc68 	bl	8002e54 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff30 	bl	80043f4 <LL_RCC_SetRTCClockSource>
 8004594:	e02e      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80045a0:	f7ff ff4b 	bl	800443a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80045a4:	f7ff ff5a 	bl	800445c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80045b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80045c0:	f7ff fdf0 	bl	80041a4 <LL_RCC_LSE_IsEnabled>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d114      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ca:	f7fd fd53 	bl	8002074 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80045d0:	e00b      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fd fd4f 	bl	8002074 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d902      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	77fb      	strb	r3, [r7, #31]
              break;
 80045e8:	e004      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80045ea:	f7ff fded 	bl	80041c8 <LL_RCC_LSE_IsReady>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d1ee      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80045f4:	7ffb      	ldrb	r3, [r7, #31]
 80045f6:	77bb      	strb	r3, [r7, #30]
 80045f8:	e001      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
 80045fc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fe2a 	bl	8004268 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fe35 	bl	8004294 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fe5d 	bl	80042fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fe52 	bl	80042fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fe2a 	bl	80042c0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fe1f 	bl	80042c0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d022      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fe8d 	bl	80043b2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a0:	d107      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046b0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f8dd 	bl	8004880 <RCCEx_PLLSAI1_ConfigNQ>
 80046c6:	4603      	mov	r3, r0
 80046c8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80046d0:	7ffb      	ldrb	r3, [r7, #31]
 80046d2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d008      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff fe2a 	bl	800435a <LL_RCC_SetRNGClockSource>
 8004706:	e00a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	2000      	movs	r0, #0
 8004714:	f7ff fe21 	bl	800435a <LL_RCC_SetRNGClockSource>
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fe34 	bl	8004386 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004726:	d107      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004736:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d022      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fe3d 	bl	80043c8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004756:	d107      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004766:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004770:	d10b      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f8dd 	bl	8004936 <RCCEx_PLLSAI1_ConfigNR>
 800477c:	4603      	mov	r3, r0
 800477e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004786:	7ffb      	ldrb	r3, [r7, #31]
 8004788:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fd26 	bl	80041ec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fd45 	bl	8004240 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fd2c 	bl	8004218 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80047c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80047d6:	f7ff fe61 	bl	800449c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047da:	f7fd fc4b 	bl	8002074 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047e0:	e009      	b.n	80047f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e2:	f7fd fc47 	bl	8002074 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d902      	bls.n	80047f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	73fb      	strb	r3, [r7, #15]
      break;
 80047f4:	e004      	b.n	8004800 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80047f6:	f7ff fe60 	bl	80044ba <LL_RCC_PLLSAI1_IsReady>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d137      	bne.n	8004876 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800481a:	4313      	orrs	r3, r2
 800481c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004830:	4313      	orrs	r3, r2
 8004832:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004834:	f7ff fe23 	bl	800447e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd fc1c 	bl	8002074 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800483e:	e009      	b.n	8004854 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004840:	f7fd fc18 	bl	8002074 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d902      	bls.n	8004854 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	73fb      	strb	r3, [r7, #15]
        break;
 8004852:	e004      	b.n	800485e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004854:	f7ff fe31 	bl	80044ba <LL_RCC_PLLSAI1_IsReady>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d1f0      	bne.n	8004840 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004872:	4313      	orrs	r3, r2
 8004874:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800488c:	f7ff fe06 	bl	800449c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004890:	f7fd fbf0 	bl	8002074 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004896:	e009      	b.n	80048ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004898:	f7fd fbec 	bl	8002074 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d902      	bls.n	80048ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	73fb      	strb	r3, [r7, #15]
      break;
 80048aa:	e004      	b.n	80048b6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048ac:	f7ff fe05 	bl	80044ba <LL_RCC_PLLSAI1_IsReady>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d137      	bne.n	800492c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048d0:	4313      	orrs	r3, r2
 80048d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048e6:	4313      	orrs	r3, r2
 80048e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80048ea:	f7ff fdc8 	bl	800447e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ee:	f7fd fbc1 	bl	8002074 <HAL_GetTick>
 80048f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80048f4:	e009      	b.n	800490a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048f6:	f7fd fbbd 	bl	8002074 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d902      	bls.n	800490a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	73fb      	strb	r3, [r7, #15]
        break;
 8004908:	e004      	b.n	8004914 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800490a:	f7ff fdd6 	bl	80044ba <LL_RCC_PLLSAI1_IsReady>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d1f0      	bne.n	80048f6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d108      	bne.n	800492c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800491a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004928:	4313      	orrs	r3, r2
 800492a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004942:	f7ff fdab 	bl	800449c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004946:	f7fd fb95 	bl	8002074 <HAL_GetTick>
 800494a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800494c:	e009      	b.n	8004962 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494e:	f7fd fb91 	bl	8002074 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d902      	bls.n	8004962 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e004      	b.n	800496c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004962:	f7ff fdaa 	bl	80044ba <LL_RCC_PLLSAI1_IsReady>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d137      	bne.n	80049e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004986:	4313      	orrs	r3, r2
 8004988:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80049a0:	f7ff fd6d 	bl	800447e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a4:	f7fd fb66 	bl	8002074 <HAL_GetTick>
 80049a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049aa:	e009      	b.n	80049c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ac:	f7fd fb62 	bl	8002074 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d902      	bls.n	80049c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	73fb      	strb	r3, [r7, #15]
        break;
 80049be:	e004      	b.n	80049ca <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049c0:	f7ff fd7b 	bl	80044ba <LL_RCC_PLLSAI1_IsReady>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d1f0      	bne.n	80049ac <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049de:	4313      	orrs	r3, r2
 80049e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e09f      	b.n	8004b3e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fd f858 	bl	8001ac8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a20:	4b49      	ldr	r3, [pc, #292]	@ (8004b48 <HAL_RTC_Init+0x15c>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d07e      	beq.n	8004b2a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	22ca      	movs	r2, #202	@ 0xca
 8004a32:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2253      	movs	r2, #83	@ 0x53
 8004a3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8ab 	bl	8004b98 <RTC_EnterInitMode>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	22ff      	movs	r2, #255	@ 0xff
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	e067      	b.n	8004b2e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a70:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68d2      	ldr	r2, [r2, #12]
 8004a98:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6919      	ldr	r1, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	041a      	lsls	r2, r3, #16
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004abc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0203 	bic.w	r2, r2, #3
 8004acc:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d113      	bne.n	8004b1c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f829 	bl	8004b4c <HAL_RTC_WaitForSynchro>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	22ff      	movs	r2, #255	@ 0xff
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e010      	b.n	8004b3e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	22ff      	movs	r2, #255	@ 0xff
 8004b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e001      	b.n	8004b2e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40002800 	.word	0x40002800

08004b4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004b64:	f7fd fa86 	bl	8002074 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b6a:	e009      	b.n	8004b80 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b6c:	f7fd fa82 	bl	8002074 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b7a:	d901      	bls.n	8004b80 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e007      	b.n	8004b90 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d119      	bne.n	8004be2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bb6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004bb8:	f7fd fa5c 	bl	8002074 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004bbe:	e009      	b.n	8004bd4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004bc0:	f7fd fa58 	bl	8002074 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bce:	d901      	bls.n	8004bd4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e007      	b.n	8004be4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ee      	beq.n	8004bc0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e089      	b.n	8004d1a <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	22ca      	movs	r2, #202	@ 0xca
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2253      	movs	r2, #83	@ 0x53
 8004c24:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8004c34:	f7fd fa1e 	bl	8002074 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004c3a:	e015      	b.n	8004c68 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c3c:	f7fd fa1a 	bl	8002074 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c4a:	d90d      	bls.n	8004c68 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	22ff      	movs	r2, #255	@ 0xff
 8004c52:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2203      	movs	r2, #3
 8004c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e058      	b.n	8004d1a <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e2      	bne.n	8004c3c <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c84:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004c86:	f7fd f9f5 	bl	8002074 <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004c8c:	e015      	b.n	8004cba <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c8e:	f7fd f9f1 	bl	8002074 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c9c:	d90d      	bls.n	8004cba <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	22ff      	movs	r2, #255	@ 0xff
 8004ca4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2203      	movs	r2, #3
 8004caa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e02f      	b.n	8004d1a <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0e2      	beq.n	8004c8e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0207 	bic.w	r2, r2, #7
 8004cd6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cfe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	22ff      	movs	r2, #255	@ 0xff
 8004d06:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <LL_RCC_GetUSARTClockSource>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4013      	ands	r3, r2
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_RCC_GetLPUARTClockSource>:
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4013      	ands	r3, r2
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e042      	b.n	8004dfa <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc feca 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2224      	movs	r2, #36	@ 0x24
 8004d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fe33 	bl	8005a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fc08 	bl	80055c8 <UART_SetConfig>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e01b      	b.n	8004dfa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004de0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 feb2 	bl	8005b5c <UART_CheckIdleState>
 8004df8:	4603      	mov	r3, r0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	@ 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d167      	bne.n	8004eec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_UART_Transmit_DMA+0x24>
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e060      	b.n	8004eee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2221      	movs	r2, #33	@ 0x21
 8004e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d028      	beq.n	8004eac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5e:	4a26      	ldr	r2, [pc, #152]	@ (8004ef8 <HAL_UART_Transmit_DMA+0xf4>)
 8004e60:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e66:	4a25      	ldr	r2, [pc, #148]	@ (8004efc <HAL_UART_Transmit_DMA+0xf8>)
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e6e:	4a24      	ldr	r2, [pc, #144]	@ (8004f00 <HAL_UART_Transmit_DMA+0xfc>)
 8004e70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e76:	2200      	movs	r2, #0
 8004e78:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e82:	4619      	mov	r1, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3328      	adds	r3, #40	@ 0x28
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	f7fd fb25 	bl	80024dc <HAL_DMA_Start_IT>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e020      	b.n	8004eee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2240      	movs	r2, #64	@ 0x40
 8004eb2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed4:	623a      	str	r2, [r7, #32]
 8004ed6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e000      	b.n	8004eee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
  }
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	@ 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	08005ed9 	.word	0x08005ed9
 8004efc:	08005f73 	.word	0x08005f73
 8004f00:	08005f8f 	.word	0x08005f8f

08004f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b0ba      	sub	sp, #232	@ 0xe8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f32:	4013      	ands	r3, r2
 8004f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d11b      	bne.n	8004f78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8300 	beq.w	800556e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
      }
      return;
 8004f76:	e2fa      	b.n	800556e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8123 	beq.w	80051c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f86:	4b8d      	ldr	r3, [pc, #564]	@ (80051bc <HAL_UART_IRQHandler+0x2b8>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f92:	4b8b      	ldr	r3, [pc, #556]	@ (80051c0 <HAL_UART_IRQHandler+0x2bc>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8116 	beq.w	80051c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d011      	beq.n	8004fcc <HAL_UART_IRQHandler+0xc8>
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d011      	beq.n	8004ffc <HAL_UART_IRQHandler+0xf8>
 8004fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	f043 0204 	orr.w	r2, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d011      	beq.n	800502c <HAL_UART_IRQHandler+0x128>
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2204      	movs	r2, #4
 800501a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d017      	beq.n	8005068 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005044:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005048:	4b5c      	ldr	r3, [pc, #368]	@ (80051bc <HAL_UART_IRQHandler+0x2b8>)
 800504a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2208      	movs	r2, #8
 8005056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505e:	f043 0208 	orr.w	r2, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <HAL_UART_IRQHandler+0x196>
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005078:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00c      	beq.n	800509a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8266 	beq.w	8005572 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d054      	beq.n	80051a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fe84 	bl	8005e0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510e:	2b40      	cmp	r3, #64	@ 0x40
 8005110:	d146      	bne.n	80051a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800512c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800513e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800514a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1d9      	bne.n	8005112 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	d017      	beq.n	8005198 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <HAL_UART_IRQHandler+0x2c0>)
 8005170:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd fa89 	bl	8002690 <HAL_DMA_Abort_IT>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d019      	beq.n	80051b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005192:	4610      	mov	r0, r2
 8005194:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005196:	e00f      	b.n	80051b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f9ff 	bl	800559c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519e:	e00b      	b.n	80051b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f9fb 	bl	800559c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a6:	e007      	b.n	80051b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f9f7 	bl	800559c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80051b6:	e1dc      	b.n	8005572 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	bf00      	nop
    return;
 80051ba:	e1da      	b.n	8005572 <HAL_UART_IRQHandler+0x66e>
 80051bc:	10000001 	.word	0x10000001
 80051c0:	04000120 	.word	0x04000120
 80051c4:	0800600f 	.word	0x0800600f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	f040 8170 	bne.w	80054b2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8169 	beq.w	80054b2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8162 	beq.w	80054b2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2210      	movs	r2, #16
 80051f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005200:	2b40      	cmp	r3, #64	@ 0x40
 8005202:	f040 80d8 	bne.w	80053b6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80af 	beq.w	800537c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005224:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005228:	429a      	cmp	r2, r3
 800522a:	f080 80a7 	bcs.w	800537c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005234:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 8087 	bne.w	800535a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800527a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005282:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1da      	bne.n	800524c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e1      	bne.n	8005296 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e3      	bne.n	80052d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800533a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800533c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e4      	bne.n	8005318 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005354:	4618      	mov	r0, r3
 8005356:	f7fd f93c 	bl	80025d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800536c:	b29b      	uxth	r3, r3
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	b29b      	uxth	r3, r3
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f91b 	bl	80055b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800537a:	e0fc      	b.n	8005576 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005386:	429a      	cmp	r2, r3
 8005388:	f040 80f5 	bne.w	8005576 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 80eb 	bne.w	8005576 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8fe 	bl	80055b0 <HAL_UARTEx_RxEventCallback>
      return;
 80053b4:	e0df      	b.n	8005576 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80d1 	beq.w	800557a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80053d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80cc 	beq.w	800557a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005404:	647b      	str	r3, [r7, #68]	@ 0x44
 8005406:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800540a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e4      	bne.n	80053e2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	623b      	str	r3, [r7, #32]
   return(result);
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005440:	633a      	str	r2, [r7, #48]	@ 0x30
 8005442:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e1      	bne.n	8005418 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	60fb      	str	r3, [r7, #12]
   return(result);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0310 	bic.w	r3, r3, #16
 800547c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	69b9      	ldr	r1, [r7, #24]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	617b      	str	r3, [r7, #20]
   return(result);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e4      	bne.n	8005468 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f880 	bl	80055b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b0:	e063      	b.n	800557a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <HAL_UART_IRQHandler+0x5d8>
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fdd7 	bl	8006088 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054da:	e051      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d014      	beq.n	8005512 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03a      	beq.n	800557e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
    }
    return;
 8005510:	e035      	b.n	800557e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_UART_IRQHandler+0x62e>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fd81 	bl	8006032 <UART_EndTransmit_IT>
    return;
 8005530:	e026      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_UART_IRQHandler+0x64e>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005542:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fdb0 	bl	80060b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005550:	e016      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d010      	beq.n	8005580 <HAL_UART_IRQHandler+0x67c>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005562:	2b00      	cmp	r3, #0
 8005564:	da0c      	bge.n	8005580 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fd98 	bl	800609c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800556c:	e008      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
      return;
 800556e:	bf00      	nop
 8005570:	e006      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
    return;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
      return;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
      return;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <HAL_UART_IRQHandler+0x67c>
    return;
 800557e:	bf00      	nop
  }
}
 8005580:	37e8      	adds	r7, #232	@ 0xe8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop

08005588 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055cc:	b08c      	sub	sp, #48	@ 0x30
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4baf      	ldr	r3, [pc, #700]	@ (80058b4 <UART_SetConfig+0x2ec>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005600:	430b      	orrs	r3, r1
 8005602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4aa4      	ldr	r2, [pc, #656]	@ (80058b8 <UART_SetConfig+0x2f0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005630:	4313      	orrs	r3, r2
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800563e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005648:	430b      	orrs	r3, r1
 800564a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	f023 010f 	bic.w	r1, r3, #15
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a95      	ldr	r2, [pc, #596]	@ (80058bc <UART_SetConfig+0x2f4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d125      	bne.n	80056b8 <UART_SetConfig+0xf0>
 800566c:	2003      	movs	r0, #3
 800566e:	f7ff fb58 	bl	8004d22 <LL_RCC_GetUSARTClockSource>
 8005672:	4603      	mov	r3, r0
 8005674:	2b03      	cmp	r3, #3
 8005676:	d81b      	bhi.n	80056b0 <UART_SetConfig+0xe8>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <UART_SetConfig+0xb8>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005691 	.word	0x08005691
 8005684:	080056a1 	.word	0x080056a1
 8005688:	08005699 	.word	0x08005699
 800568c:	080056a9 	.word	0x080056a9
 8005690:	2301      	movs	r3, #1
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005696:	e042      	b.n	800571e <UART_SetConfig+0x156>
 8005698:	2302      	movs	r3, #2
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569e:	e03e      	b.n	800571e <UART_SetConfig+0x156>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a6:	e03a      	b.n	800571e <UART_SetConfig+0x156>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ae:	e036      	b.n	800571e <UART_SetConfig+0x156>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b6:	e032      	b.n	800571e <UART_SetConfig+0x156>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a7e      	ldr	r2, [pc, #504]	@ (80058b8 <UART_SetConfig+0x2f0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d12a      	bne.n	8005718 <UART_SetConfig+0x150>
 80056c2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80056c6:	f7ff fb3c 	bl	8004d42 <LL_RCC_GetLPUARTClockSource>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056d0:	d01a      	beq.n	8005708 <UART_SetConfig+0x140>
 80056d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056d6:	d81b      	bhi.n	8005710 <UART_SetConfig+0x148>
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d00c      	beq.n	80056f8 <UART_SetConfig+0x130>
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e2:	d815      	bhi.n	8005710 <UART_SetConfig+0x148>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <UART_SetConfig+0x128>
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ec:	d008      	beq.n	8005700 <UART_SetConfig+0x138>
 80056ee:	e00f      	b.n	8005710 <UART_SetConfig+0x148>
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e012      	b.n	800571e <UART_SetConfig+0x156>
 80056f8:	2302      	movs	r3, #2
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e00e      	b.n	800571e <UART_SetConfig+0x156>
 8005700:	2304      	movs	r3, #4
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005706:	e00a      	b.n	800571e <UART_SetConfig+0x156>
 8005708:	2308      	movs	r3, #8
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570e:	e006      	b.n	800571e <UART_SetConfig+0x156>
 8005710:	2310      	movs	r3, #16
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005716:	e002      	b.n	800571e <UART_SetConfig+0x156>
 8005718:	2310      	movs	r3, #16
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a65      	ldr	r2, [pc, #404]	@ (80058b8 <UART_SetConfig+0x2f0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	f040 8097 	bne.w	8005858 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800572a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800572e:	2b08      	cmp	r3, #8
 8005730:	d823      	bhi.n	800577a <UART_SetConfig+0x1b2>
 8005732:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x170>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	0800575d 	.word	0x0800575d
 800573c:	0800577b 	.word	0x0800577b
 8005740:	08005765 	.word	0x08005765
 8005744:	0800577b 	.word	0x0800577b
 8005748:	0800576b 	.word	0x0800576b
 800574c:	0800577b 	.word	0x0800577b
 8005750:	0800577b 	.word	0x0800577b
 8005754:	0800577b 	.word	0x0800577b
 8005758:	08005773 	.word	0x08005773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fe fc42 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 8005760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005762:	e010      	b.n	8005786 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005764:	4b56      	ldr	r3, [pc, #344]	@ (80058c0 <UART_SetConfig+0x2f8>)
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005768:	e00d      	b.n	8005786 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576a:	f7fe fbbb 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 800576e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005770:	e009      	b.n	8005786 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005778:	e005      	b.n	8005786 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005784:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 812b 	beq.w	80059e4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	4a4c      	ldr	r2, [pc, #304]	@ (80058c4 <UART_SetConfig+0x2fc>)
 8005794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005798:	461a      	mov	r2, r3
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d305      	bcc.n	80057be <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d903      	bls.n	80057c6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057c4:	e10e      	b.n	80059e4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	2200      	movs	r2, #0
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	60fa      	str	r2, [r7, #12]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	4a3c      	ldr	r2, [pc, #240]	@ (80058c4 <UART_SetConfig+0x2fc>)
 80057d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2200      	movs	r2, #0
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057e8:	f7fb f808 	bl	80007fc <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	020b      	lsls	r3, r1, #8
 80057fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005802:	0202      	lsls	r2, r0, #8
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	6849      	ldr	r1, [r1, #4]
 8005808:	0849      	lsrs	r1, r1, #1
 800580a:	2000      	movs	r0, #0
 800580c:	460c      	mov	r4, r1
 800580e:	4605      	mov	r5, r0
 8005810:	eb12 0804 	adds.w	r8, r2, r4
 8005814:	eb43 0905 	adc.w	r9, r3, r5
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	469a      	mov	sl, r3
 8005820:	4693      	mov	fp, r2
 8005822:	4652      	mov	r2, sl
 8005824:	465b      	mov	r3, fp
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fa ffe7 	bl	80007fc <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4613      	mov	r3, r2
 8005834:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800583c:	d308      	bcc.n	8005850 <UART_SetConfig+0x288>
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005844:	d204      	bcs.n	8005850 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e0c9      	b.n	80059e4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005856:	e0c5      	b.n	80059e4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005860:	d16d      	bne.n	800593e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005862:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005866:	3b01      	subs	r3, #1
 8005868:	2b07      	cmp	r3, #7
 800586a:	d82d      	bhi.n	80058c8 <UART_SetConfig+0x300>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <UART_SetConfig+0x2ac>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005895 	.word	0x08005895
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058c9 	.word	0x080058c9
 8005880:	080058a3 	.word	0x080058a3
 8005884:	080058c9 	.word	0x080058c9
 8005888:	080058c9 	.word	0x080058c9
 800588c:	080058c9 	.word	0x080058c9
 8005890:	080058ab 	.word	0x080058ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fe fbbc 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8005898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800589a:	e01b      	b.n	80058d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800589c:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <UART_SetConfig+0x2f8>)
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058a0:	e018      	b.n	80058d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a2:	f7fe fb1f 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 80058a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058a8:	e014      	b.n	80058d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058b0:	e010      	b.n	80058d4 <UART_SetConfig+0x30c>
 80058b2:	bf00      	nop
 80058b4:	cfff69f3 	.word	0xcfff69f3
 80058b8:	40008000 	.word	0x40008000
 80058bc:	40013800 	.word	0x40013800
 80058c0:	00f42400 	.word	0x00f42400
 80058c4:	0800cd4c 	.word	0x0800cd4c
      default:
        pclk = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8084 	beq.w	80059e4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005a10 <UART_SetConfig+0x448>)
 80058e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ee:	005a      	lsls	r2, r3, #1
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	441a      	add	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b0f      	cmp	r3, #15
 8005906:	d916      	bls.n	8005936 <UART_SetConfig+0x36e>
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590e:	d212      	bcs.n	8005936 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f023 030f 	bic.w	r3, r3, #15
 8005918:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	b29b      	uxth	r3, r3
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	b29a      	uxth	r2, r3
 8005926:	8bfb      	ldrh	r3, [r7, #30]
 8005928:	4313      	orrs	r3, r2
 800592a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	8bfa      	ldrh	r2, [r7, #30]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e056      	b.n	80059e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800593c:	e052      	b.n	80059e4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800593e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005942:	3b01      	subs	r3, #1
 8005944:	2b07      	cmp	r3, #7
 8005946:	d822      	bhi.n	800598e <UART_SetConfig+0x3c6>
 8005948:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <UART_SetConfig+0x388>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005971 	.word	0x08005971
 8005954:	08005979 	.word	0x08005979
 8005958:	0800598f 	.word	0x0800598f
 800595c:	0800597f 	.word	0x0800597f
 8005960:	0800598f 	.word	0x0800598f
 8005964:	0800598f 	.word	0x0800598f
 8005968:	0800598f 	.word	0x0800598f
 800596c:	08005987 	.word	0x08005987
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe fb4e 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8005974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005976:	e010      	b.n	800599a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005978:	4b26      	ldr	r3, [pc, #152]	@ (8005a14 <UART_SetConfig+0x44c>)
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800597c:	e00d      	b.n	800599a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597e:	f7fe fab1 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8005982:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005984:	e009      	b.n	800599a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800598c:	e005      	b.n	800599a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005998:	bf00      	nop
    }

    if (pclk != 0U)
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d021      	beq.n	80059e4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <UART_SetConfig+0x448>)
 80059a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	441a      	add	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	d909      	bls.n	80059de <UART_SetConfig+0x416>
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d0:	d205      	bcs.n	80059de <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60da      	str	r2, [r3, #12]
 80059dc:	e002      	b.n	80059e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2200      	movs	r2, #0
 80059f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	@ 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800cd4c 	.word	0x0800cd4c
 8005a14:	00f42400 	.word	0x00f42400

08005a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01a      	beq.n	8005b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b16:	d10a      	bne.n	8005b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
  }
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b098      	sub	sp, #96	@ 0x60
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b6c:	f7fc fa82 	bl	8002074 <HAL_GetTick>
 8005b70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d12f      	bne.n	8005be0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f88e 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d022      	beq.n	8005be0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e063      	b.n	8005ca8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d149      	bne.n	8005c82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f857 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d03c      	beq.n	8005c82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	623b      	str	r3, [r7, #32]
   return(result);
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c5a:	61fa      	str	r2, [r7, #28]
 8005c5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	617b      	str	r3, [r7, #20]
   return(result);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e012      	b.n	8005ca8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3758      	adds	r7, #88	@ 0x58
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc0:	e04f      	b.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cc8:	d04b      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cca:	f7fc f9d3 	bl	8002074 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e04e      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d037      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b80      	cmp	r3, #128	@ 0x80
 8005cf6:	d034      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d031      	beq.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d110      	bne.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2208      	movs	r2, #8
 8005d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f879 	bl	8005e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e029      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d3c:	d111      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f85f 	bl	8005e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e00f      	b.n	8005d82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d0a0      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b08f      	sub	sp, #60	@ 0x3c
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e6      	bne.n	8005d92 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de4:	61ba      	str	r2, [r7, #24]
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6979      	ldr	r1, [r7, #20]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	613b      	str	r3, [r7, #16]
   return(result);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005e00:	bf00      	nop
 8005e02:	373c      	adds	r7, #60	@ 0x3c
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b095      	sub	sp, #84	@ 0x54
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e6      	bne.n	8005e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e3      	bne.n	8005e46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d118      	bne.n	8005eb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0310 	bic.w	r3, r3, #16
 8005e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e6      	bne.n	8005e86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ecc:	bf00      	nop
 8005ece:	3754      	adds	r7, #84	@ 0x54
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b090      	sub	sp, #64	@ 0x40
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d137      	bne.n	8005f64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3308      	adds	r3, #8
 8005f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e5      	bne.n	8005efc <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	69b9      	ldr	r1, [r7, #24]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e6      	bne.n	8005f30 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f62:	e002      	b.n	8005f6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005f64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005f66:	f7fb faeb 	bl	8001540 <HAL_UART_TxCpltCallback>
}
 8005f6a:	bf00      	nop
 8005f6c:	3740      	adds	r7, #64	@ 0x40
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff fb01 	bl	8005588 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b086      	sub	sp, #24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb6:	2b80      	cmp	r3, #128	@ 0x80
 8005fb8:	d109      	bne.n	8005fce <UART_DMAError+0x40>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b21      	cmp	r3, #33	@ 0x21
 8005fbe:	d106      	bne.n	8005fce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005fc8:	6978      	ldr	r0, [r7, #20]
 8005fca:	f7ff fede 	bl	8005d8a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d109      	bne.n	8005ff0 <UART_DMAError+0x62>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b22      	cmp	r3, #34	@ 0x22
 8005fe0:	d106      	bne.n	8005ff0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005fea:	6978      	ldr	r0, [r7, #20]
 8005fec:	f7ff ff0e 	bl	8005e0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff6:	f043 0210 	orr.w	r2, r3, #16
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006000:	6978      	ldr	r0, [r7, #20]
 8006002:	f7ff facb 	bl	800559c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006006:	bf00      	nop
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff fab9 	bl	800559c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800602a:	bf00      	nop
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b088      	sub	sp, #32
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	60bb      	str	r3, [r7, #8]
   return(result);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6979      	ldr	r1, [r7, #20]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	613b      	str	r3, [r7, #16]
   return(result);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e6      	bne.n	800603a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fa60 	bl	8001540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006080:	bf00      	nop
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_UARTEx_DisableFifoMode+0x16>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e027      	b.n	800612a <HAL_UARTEx_DisableFifoMode+0x66>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	@ 0x24
 80060e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006108:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800614a:	2302      	movs	r3, #2
 800614c:	e02d      	b.n	80061aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	@ 0x24
 800615a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f850 	bl	8006230 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e02d      	b.n	8006226 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2224      	movs	r2, #36	@ 0x24
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0201 	bic.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f812 	bl	8006230 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800623c:	2b00      	cmp	r3, #0
 800623e:	d108      	bne.n	8006252 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006250:	e031      	b.n	80062b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006252:	2308      	movs	r3, #8
 8006254:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006256:	2308      	movs	r3, #8
 8006258:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	0e5b      	lsrs	r3, r3, #25
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	0f5b      	lsrs	r3, r3, #29
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800627a:	7bbb      	ldrb	r3, [r7, #14]
 800627c:	7b3a      	ldrb	r2, [r7, #12]
 800627e:	4911      	ldr	r1, [pc, #68]	@ (80062c4 <UARTEx_SetNbDataToProcess+0x94>)
 8006280:	5c8a      	ldrb	r2, [r1, r2]
 8006282:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006286:	7b3a      	ldrb	r2, [r7, #12]
 8006288:	490f      	ldr	r1, [pc, #60]	@ (80062c8 <UARTEx_SetNbDataToProcess+0x98>)
 800628a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800628c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006290:	b29a      	uxth	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	7b7a      	ldrb	r2, [r7, #13]
 800629c:	4909      	ldr	r1, [pc, #36]	@ (80062c4 <UARTEx_SetNbDataToProcess+0x94>)
 800629e:	5c8a      	ldrb	r2, [r1, r2]
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062a4:	7b7a      	ldrb	r2, [r7, #13]
 80062a6:	4908      	ldr	r1, [pc, #32]	@ (80062c8 <UARTEx_SetNbDataToProcess+0x98>)
 80062a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	0800cd64 	.word	0x0800cd64
 80062c8:	0800cd6c 	.word	0x0800cd6c

080062cc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	2218      	movs	r2, #24
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f92d 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80062e4:	233f      	movs	r3, #63	@ 0x3f
 80062e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80062e8:	2381      	movs	r3, #129	@ 0x81
 80062ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80062ec:	1dfb      	adds	r3, r7, #7
 80062ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80062f0:	2301      	movs	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062f4:	f107 0308 	add.w	r3, r7, #8
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fba8 	bl	8007a50 <hci_send_req>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	da01      	bge.n	800630a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006306:	23ff      	movs	r3, #255	@ 0xff
 8006308:	e000      	b.n	800630c <aci_gap_set_non_discoverable+0x40>
  return status;
 800630a:	79fb      	ldrb	r3, [r7, #7]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3720      	adds	r7, #32
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006314:	b5b0      	push	{r4, r5, r7, lr}
 8006316:	b0ce      	sub	sp, #312	@ 0x138
 8006318:	af00      	add	r7, sp, #0
 800631a:	4605      	mov	r5, r0
 800631c:	460c      	mov	r4, r1
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006326:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800632a:	462a      	mov	r2, r5
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006332:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006336:	4622      	mov	r2, r4
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800633e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006342:	4602      	mov	r2, r0
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800634a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800634e:	460a      	mov	r2, r1
 8006350:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006352:	f107 0310 	add.w	r3, r7, #16
 8006356:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800635a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800635e:	3308      	adds	r3, #8
 8006360:	f107 0210 	add.w	r2, r7, #16
 8006364:	4413      	add	r3, r2
 8006366:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800636a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800636e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006372:	4413      	add	r3, r2
 8006374:	3309      	adds	r3, #9
 8006376:	f107 0210 	add.w	r2, r7, #16
 800637a:	4413      	add	r3, r2
 800637c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006380:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006384:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006396:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800639a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80063a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063a6:	3301      	adds	r3, #1
 80063a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80063ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80063b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80063b4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80063b8:	8812      	ldrh	r2, [r2, #0]
 80063ba:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80063be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063c2:	3302      	adds	r3, #2
 80063c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80063c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80063cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80063d0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80063d4:	8812      	ldrh	r2, [r2, #0]
 80063d6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80063da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063de:	3302      	adds	r3, #2
 80063e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80063e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80063e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80063ec:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80063f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063f8:	3301      	adds	r3, #1
 80063fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80063fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006402:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006406:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006408:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800640c:	3301      	adds	r3, #1
 800640e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006416:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800641a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800641c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006420:	3301      	adds	r3, #1
 8006422:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800642a:	3308      	adds	r3, #8
 800642c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006430:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f872 	bl	800751e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800643a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800643e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006442:	4413      	add	r3, r2
 8006444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006448:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800644c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006450:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006452:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006456:	3301      	adds	r3, #1
 8006458:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800645c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006460:	3301      	adds	r3, #1
 8006462:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006466:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f857 	bl	800751e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006470:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006474:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006478:	4413      	add	r3, r2
 800647a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800647e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006482:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006486:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006488:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800648c:	3302      	adds	r3, #2
 800648e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006492:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006496:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800649a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800649c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064a0:	3302      	adds	r3, #2
 80064a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064aa:	2218      	movs	r2, #24
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f845 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80064b4:	233f      	movs	r3, #63	@ 0x3f
 80064b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80064ba:	2383      	movs	r3, #131	@ 0x83
 80064bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80064c0:	f107 0310 	add.w	r3, r7, #16
 80064c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80064c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80064d0:	f107 030f 	add.w	r3, r7, #15
 80064d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80064d8:	2301      	movs	r3, #1
 80064da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fab3 	bl	8007a50 <hci_send_req>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da01      	bge.n	80064f4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80064f0:	23ff      	movs	r3, #255	@ 0xff
 80064f2:	e004      	b.n	80064fe <aci_gap_set_discoverable+0x1ea>
  return status;
 80064f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80064f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80064fc:	781b      	ldrb	r3, [r3, #0]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006504:	46bd      	mov	sp, r7
 8006506:	bdb0      	pop	{r4, r5, r7, pc}

08006508 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b0cc      	sub	sp, #304	@ 0x130
 800650c:	af00      	add	r7, sp, #0
 800650e:	4602      	mov	r2, r0
 8006510:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006514:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006518:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800651a:	f107 0310 	add.w	r3, r7, #16
 800651e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006526:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006534:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006538:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800653c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006544:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006548:	3301      	adds	r3, #1
 800654a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800654e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006552:	2218      	movs	r2, #24
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fff1 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 800655c:	233f      	movs	r3, #63	@ 0x3f
 800655e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006562:	2385      	movs	r3, #133	@ 0x85
 8006564:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006568:	f107 0310 	add.w	r3, r7, #16
 800656c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006570:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006574:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006578:	f107 030f 	add.w	r3, r7, #15
 800657c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006580:	2301      	movs	r3, #1
 8006582:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fa5f 	bl	8007a50 <hci_send_req>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	da01      	bge.n	800659c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006598:	23ff      	movs	r3, #255	@ 0xff
 800659a:	e004      	b.n	80065a6 <aci_gap_set_io_capability+0x9e>
  return status;
 800659c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065a4:	781b      	ldrb	r3, [r3, #0]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80065b0:	b5b0      	push	{r4, r5, r7, lr}
 80065b2:	b0cc      	sub	sp, #304	@ 0x130
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4605      	mov	r5, r0
 80065b8:	460c      	mov	r4, r1
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80065c6:	462a      	mov	r2, r5
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80065d2:	4622      	mov	r2, r4
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065da:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80065de:	4602      	mov	r2, r0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80065ea:	460a      	mov	r2, r1
 80065ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80065ee:	f107 0310 	add.w	r3, r7, #16
 80065f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80065f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006608:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800660c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006610:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800661c:	3301      	adds	r3, #1
 800661e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006626:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800662a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006636:	3301      	adds	r3, #1
 8006638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800663c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006640:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006644:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800664c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006650:	3301      	adds	r3, #1
 8006652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800665a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800665e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006666:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800666a:	3301      	adds	r3, #1
 800666c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006670:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006674:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006678:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800667a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800667e:	3301      	adds	r3, #1
 8006680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006688:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800668c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800668e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006692:	3301      	adds	r3, #1
 8006694:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006698:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800669c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80066a0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80066a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066a6:	3301      	adds	r3, #1
 80066a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80066ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80066b4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80066b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066bc:	3304      	adds	r3, #4
 80066be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80066c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066c6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80066ca:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80066cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066d0:	3301      	adds	r3, #1
 80066d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066da:	2218      	movs	r2, #24
 80066dc:	2100      	movs	r1, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 ff2d 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80066e4:	233f      	movs	r3, #63	@ 0x3f
 80066e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80066ea:	2386      	movs	r3, #134	@ 0x86
 80066ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066f0:	f107 0310 	add.w	r3, r7, #16
 80066f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80066f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006700:	f107 030f 	add.w	r3, r7, #15
 8006704:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006708:	2301      	movs	r3, #1
 800670a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800670e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f99b 	bl	8007a50 <hci_send_req>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	da01      	bge.n	8006724 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006720:	23ff      	movs	r3, #255	@ 0xff
 8006722:	e004      	b.n	800672e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006724:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006728:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800672c:	781b      	ldrb	r3, [r3, #0]
}
 800672e:	4618      	mov	r0, r3
 8006730:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006734:	46bd      	mov	sp, r7
 8006736:	bdb0      	pop	{r4, r5, r7, pc}

08006738 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b0cc      	sub	sp, #304	@ 0x130
 800673c:	af00      	add	r7, sp, #0
 800673e:	4602      	mov	r2, r0
 8006740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006748:	6019      	str	r1, [r3, #0]
 800674a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800674e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006752:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800675c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006760:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800676e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006772:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006776:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800677a:	8812      	ldrh	r2, [r2, #0]
 800677c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800677e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006782:	3302      	adds	r3, #2
 8006784:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006788:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800678c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006790:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800679a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800679e:	3304      	adds	r3, #4
 80067a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067a8:	2218      	movs	r2, #24
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fec6 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80067b2:	233f      	movs	r3, #63	@ 0x3f
 80067b4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80067b8:	2388      	movs	r3, #136	@ 0x88
 80067ba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80067ce:	f107 030f 	add.w	r3, r7, #15
 80067d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f934 	bl	8007a50 <hci_send_req>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da01      	bge.n	80067f2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80067ee:	23ff      	movs	r3, #255	@ 0xff
 80067f0:	e004      	b.n	80067fc <aci_gap_pass_key_resp+0xc4>
  return status;
 80067f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80067fa:	781b      	ldrb	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006806:	b590      	push	{r4, r7, lr}
 8006808:	b0cd      	sub	sp, #308	@ 0x134
 800680a:	af00      	add	r7, sp, #0
 800680c:	4604      	mov	r4, r0
 800680e:	4608      	mov	r0, r1
 8006810:	4611      	mov	r1, r2
 8006812:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006816:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006820:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006824:	4622      	mov	r2, r4
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800682c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006830:	4602      	mov	r2, r0
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006838:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800683c:	460a      	mov	r2, r1
 800683e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006840:	f107 0310 	add.w	r3, r7, #16
 8006844:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006848:	f107 0308 	add.w	r3, r7, #8
 800684c:	2207      	movs	r2, #7
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fe74 	bl	800753e <Osal_MemSet>
  int index_input = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800685c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006860:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006864:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800686c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006870:	3301      	adds	r3, #1
 8006872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800687a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800687e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800688a:	3301      	adds	r3, #1
 800688c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006890:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006894:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006898:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80068a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068a4:	3301      	adds	r3, #1
 80068a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068ae:	2218      	movs	r2, #24
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fe43 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80068b8:	233f      	movs	r3, #63	@ 0x3f
 80068ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80068be:	238a      	movs	r3, #138	@ 0x8a
 80068c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80068c4:	f107 0310 	add.w	r3, r7, #16
 80068c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80068dc:	2307      	movs	r3, #7
 80068de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f001 f8b1 	bl	8007a50 <hci_send_req>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da01      	bge.n	80068f8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80068f4:	23ff      	movs	r3, #255	@ 0xff
 80068f6:	e02e      	b.n	8006956 <aci_gap_init+0x150>
  if ( resp.Status )
 80068f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <aci_gap_init+0x10c>
    return resp.Status;
 8006906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800690a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	e021      	b.n	8006956 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006916:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800691a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800691e:	b29a      	uxth	r2, r3
 8006920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006924:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800692c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006930:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006934:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800693e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006940:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006944:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006948:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006952:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b0cc      	sub	sp, #304	@ 0x130
 8006964:	af00      	add	r7, sp, #0
 8006966:	4602      	mov	r2, r0
 8006968:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006970:	6019      	str	r1, [r3, #0]
 8006972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006976:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800697a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800697c:	f107 0310 	add.w	r3, r7, #16
 8006980:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006984:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006988:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800699a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800699e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80069a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069aa:	3301      	adds	r3, #1
 80069ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80069b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80069b4:	1c58      	adds	r0, r3, #1
 80069b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069ba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	f000 fda8 	bl	800751e <Osal_MemCpy>
  index_input += AdvDataLen;
 80069ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80069dc:	4413      	add	r3, r2
 80069de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80069e6:	2218      	movs	r2, #24
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fda7 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80069f0:	233f      	movs	r3, #63	@ 0x3f
 80069f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80069f6:	238e      	movs	r3, #142	@ 0x8e
 80069f8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80069fc:	f107 0310 	add.w	r3, r7, #16
 8006a00:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006a0c:	f107 030f 	add.w	r3, r7, #15
 8006a10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 f815 	bl	8007a50 <hci_send_req>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da01      	bge.n	8006a30 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006a2c:	23ff      	movs	r3, #255	@ 0xff
 8006a2e:	e004      	b.n	8006a3a <aci_gap_update_adv_data+0xda>
  return status;
 8006a30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a34:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a38:	781b      	ldrb	r3, [r3, #0]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	2218      	movs	r2, #24
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fd71 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a5c:	233f      	movs	r3, #63	@ 0x3f
 8006a5e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006a60:	2392      	movs	r3, #146	@ 0x92
 8006a62:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006a64:	1dfb      	adds	r3, r7, #7
 8006a66:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 ffec 	bl	8007a50 <hci_send_req>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da01      	bge.n	8006a82 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006a7e:	23ff      	movs	r3, #255	@ 0xff
 8006a80:	e000      	b.n	8006a84 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006a82:	79fb      	ldrb	r3, [r7, #7]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b0cc      	sub	sp, #304	@ 0x130
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4602      	mov	r2, r0
 8006a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a98:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006aa2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006aa6:	460a      	mov	r2, r1
 8006aa8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006aaa:	f107 0310 	add.w	r3, r7, #16
 8006aae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006ab2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ab6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ac8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006acc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006ad0:	8812      	ldrh	r2, [r2, #0]
 8006ad2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ad8:	3302      	adds	r3, #2
 8006ada:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ae2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ae6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006aea:	7812      	ldrb	r2, [r2, #0]
 8006aec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006af2:	3301      	adds	r3, #1
 8006af4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006af8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006afc:	2218      	movs	r2, #24
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fd1c 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b06:	233f      	movs	r3, #63	@ 0x3f
 8006b08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8006b0c:	23a5      	movs	r3, #165	@ 0xa5
 8006b0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b12:	f107 0310 	add.w	r3, r7, #16
 8006b16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006b22:	f107 030f 	add.w	r3, r7, #15
 8006b26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 ff8a 	bl	8007a50 <hci_send_req>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	da01      	bge.n	8006b46 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006b42:	23ff      	movs	r3, #255	@ 0xff
 8006b44:	e004      	b.n	8006b50 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006b46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006b4e:	781b      	ldrb	r3, [r3, #0]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b64:	f107 0308 	add.w	r3, r7, #8
 8006b68:	2218      	movs	r2, #24
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fce6 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b72:	233f      	movs	r3, #63	@ 0x3f
 8006b74:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006b76:	f240 1301 	movw	r3, #257	@ 0x101
 8006b7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b7c:	1dfb      	adds	r3, r7, #7
 8006b7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b80:	2301      	movs	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 ff60 	bl	8007a50 <hci_send_req>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da01      	bge.n	8006b9a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006b96:	23ff      	movs	r3, #255	@ 0xff
 8006b98:	e000      	b.n	8006b9c <aci_gatt_init+0x42>
  return status;
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b0cf      	sub	sp, #316	@ 0x13c
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8006bb0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8006bb4:	6001      	str	r1, [r0, #0]
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bbe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006bc2:	4622      	mov	r2, r4
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006bce:	4602      	mov	r2, r0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bd6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006bda:	460a      	mov	r2, r1
 8006bdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006bde:	f107 0310 	add.w	r3, r7, #16
 8006be2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006be6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bea:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d00a      	beq.n	8006c0a <aci_gatt_add_service+0x66>
 8006bf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bf8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d101      	bne.n	8006c06 <aci_gatt_add_service+0x62>
 8006c02:	2311      	movs	r3, #17
 8006c04:	e002      	b.n	8006c0c <aci_gatt_add_service+0x68>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <aci_gatt_add_service+0x68>
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	f107 0210 	add.w	r2, r7, #16
 8006c10:	4413      	add	r3, r2
 8006c12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fc8d 	bl	800753e <Osal_MemSet>
  int index_input = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006c2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c2e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c32:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006c44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c48:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d002      	beq.n	8006c58 <aci_gatt_add_service+0xb4>
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d004      	beq.n	8006c60 <aci_gatt_add_service+0xbc>
 8006c56:	e007      	b.n	8006c68 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006c5e:	e005      	b.n	8006c6c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006c60:	2310      	movs	r3, #16
 8006c62:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006c66:	e001      	b.n	8006c6c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006c68:	2397      	movs	r3, #151	@ 0x97
 8006c6a:	e06c      	b.n	8006d46 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006c6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c70:	1c58      	adds	r0, r3, #1
 8006c72:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8006c76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	f000 fc4d 	bl	800751e <Osal_MemCpy>
    index_input += size;
 8006c84:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8006c88:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c96:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c9a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cb0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006cb4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006cca:	2218      	movs	r2, #24
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fc35 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cd4:	233f      	movs	r3, #63	@ 0x3f
 8006cd6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8006cda:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006cde:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006ce2:	f107 0310 	add.w	r3, r7, #16
 8006ce6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fea2 	bl	8007a50 <hci_send_req>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da01      	bge.n	8006d16 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006d12:	23ff      	movs	r3, #255	@ 0xff
 8006d14:	e017      	b.n	8006d46 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006d16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006d24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	e00a      	b.n	8006d46 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8006d42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd90      	pop	{r4, r7, pc}

08006d50 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b0d1      	sub	sp, #324	@ 0x144
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4604      	mov	r4, r0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006d5e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006d62:	600a      	str	r2, [r1, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006d6a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006d6e:	4622      	mov	r2, r4
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006d76:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006d82:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8006d86:	460a      	mov	r2, r1
 8006d88:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006d8a:	f107 0318 	add.w	r3, r7, #24
 8006d8e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006d92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006d96:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d00a      	beq.n	8006db6 <aci_gatt_add_char+0x66>
 8006da0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006da4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d101      	bne.n	8006db2 <aci_gatt_add_char+0x62>
 8006dae:	2313      	movs	r3, #19
 8006db0:	e002      	b.n	8006db8 <aci_gatt_add_char+0x68>
 8006db2:	2303      	movs	r3, #3
 8006db4:	e000      	b.n	8006db8 <aci_gatt_add_char+0x68>
 8006db6:	2305      	movs	r3, #5
 8006db8:	f107 0218 	add.w	r2, r7, #24
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006dc2:	f107 0314 	add.w	r3, r7, #20
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fbb7 	bl	800753e <Osal_MemSet>
  int index_input = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8006dd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006dda:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006dde:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006de2:	8812      	ldrh	r2, [r2, #0]
 8006de4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006de6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006dea:	3302      	adds	r3, #2
 8006dec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006df0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006df4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006df8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006dfc:	7812      	ldrb	r2, [r2, #0]
 8006dfe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006e00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e04:	3301      	adds	r3, #1
 8006e06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006e0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006e0e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d002      	beq.n	8006e1e <aci_gatt_add_char+0xce>
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d004      	beq.n	8006e26 <aci_gatt_add_char+0xd6>
 8006e1c:	e007      	b.n	8006e2e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006e24:	e005      	b.n	8006e32 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006e26:	2310      	movs	r3, #16
 8006e28:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006e2c:	e001      	b.n	8006e32 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006e2e:	2397      	movs	r3, #151	@ 0x97
 8006e30:	e091      	b.n	8006f56 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006e32:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006e36:	1cd8      	adds	r0, r3, #3
 8006e38:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8006e3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006e40:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006e44:	6819      	ldr	r1, [r3, #0]
 8006e46:	f000 fb6a 	bl	800751e <Osal_MemCpy>
    index_input += size;
 8006e4a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8006e4e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006e52:	4413      	add	r3, r2
 8006e54:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006e60:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006e64:	8812      	ldrh	r2, [r2, #0]
 8006e66:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e6c:	3302      	adds	r3, #2
 8006e6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e76:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006e7a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006e7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e80:	3301      	adds	r3, #1
 8006e82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e8a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006e8e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006e90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e9e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006ea2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006ea4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006eb2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8006eb6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006ec2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ec6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8006eca:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006ecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ed6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006eda:	2218      	movs	r2, #24
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fb2d 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ee4:	233f      	movs	r3, #63	@ 0x3f
 8006ee6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8006eea:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006eee:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8006ef2:	f107 0318 	add.w	r3, r7, #24
 8006ef6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8006efa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006efe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fd9a 	bl	8007a50 <hci_send_req>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da01      	bge.n	8006f26 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006f22:	23ff      	movs	r3, #255	@ 0xff
 8006f24:	e017      	b.n	8006f56 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006f26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006f34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	e00a      	b.n	8006f56 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006f40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006f52:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}

08006f60 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006f60:	b5b0      	push	{r4, r5, r7, lr}
 8006f62:	b0cc      	sub	sp, #304	@ 0x130
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4605      	mov	r5, r0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006f76:	462a      	mov	r2, r5
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f82:	4622      	mov	r2, r4
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f8a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006f8e:	4602      	mov	r2, r0
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f96:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006f9a:	460a      	mov	r2, r1
 8006f9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006f9e:	f107 0310 	add.w	r3, r7, #16
 8006fa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006fa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006faa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8006fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006fbc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006fc0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006fc4:	8812      	ldrh	r2, [r2, #0]
 8006fc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fcc:	3302      	adds	r3, #2
 8006fce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006fd6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006fda:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006fde:	8812      	ldrh	r2, [r2, #0]
 8006fe0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8006fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ff0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ff4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8006ff8:	7812      	ldrb	r2, [r2, #0]
 8006ffa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006ffc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007000:	3301      	adds	r3, #1
 8007002:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800700a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800700e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007016:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007020:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007024:	1d98      	adds	r0, r3, #6
 8007026:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800702a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8007036:	f000 fa72 	bl	800751e <Osal_MemCpy>
  index_input += Char_Value_Length;
 800703a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800703e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007048:	4413      	add	r3, r2
 800704a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800704e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007052:	2218      	movs	r2, #24
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fa71 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 800705c:	233f      	movs	r3, #63	@ 0x3f
 800705e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8007062:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007066:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800706a:	f107 0310 	add.w	r3, r7, #16
 800706e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007072:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007076:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800707a:	f107 030f 	add.w	r3, r7, #15
 800707e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007082:	2301      	movs	r3, #1
 8007084:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007088:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fcde 	bl	8007a50 <hci_send_req>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	da01      	bge.n	800709e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800709a:	23ff      	movs	r3, #255	@ 0xff
 800709c:	e004      	b.n	80070a8 <aci_gatt_update_char_value+0x148>
  return status;
 800709e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070a6:	781b      	ldrb	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bdb0      	pop	{r4, r5, r7, pc}

080070b2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b0cc      	sub	sp, #304	@ 0x130
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	4602      	mov	r2, r0
 80070ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80070c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80070c4:	f107 0310 	add.w	r3, r7, #16
 80070c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80070cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80070de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80070e6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80070ea:	8812      	ldrh	r2, [r2, #0]
 80070ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070f2:	3302      	adds	r3, #2
 80070f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070fc:	2218      	movs	r2, #24
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fa1c 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007106:	233f      	movs	r3, #63	@ 0x3f
 8007108:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800710c:	f240 1325 	movw	r3, #293	@ 0x125
 8007110:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800711c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007120:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007124:	f107 030f 	add.w	r3, r7, #15
 8007128:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800712c:	2301      	movs	r3, #1
 800712e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007136:	2100      	movs	r1, #0
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fc89 	bl	8007a50 <hci_send_req>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	da01      	bge.n	8007148 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007144:	23ff      	movs	r3, #255	@ 0xff
 8007146:	e004      	b.n	8007152 <aci_gatt_confirm_indication+0xa0>
  return status;
 8007148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800714c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007150:	781b      	ldrb	r3, [r3, #0]
}
 8007152:	4618      	mov	r0, r3
 8007154:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b0cc      	sub	sp, #304	@ 0x130
 8007160:	af00      	add	r7, sp, #0
 8007162:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007166:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007170:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007174:	4602      	mov	r2, r0
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800717c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007180:	460a      	mov	r2, r1
 8007182:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007184:	f107 0310 	add.w	r3, r7, #16
 8007188:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800718c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007190:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800719e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80071a6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071b2:	3301      	adds	r3, #1
 80071b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80071b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80071c0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80071c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071cc:	3301      	adds	r3, #1
 80071ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071d6:	1c98      	adds	r0, r3, #2
 80071d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071dc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	f000 f997 	bl	800751e <Osal_MemCpy>
  index_input += Length;
 80071f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80071fe:	4413      	add	r3, r2
 8007200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007208:	2218      	movs	r2, #24
 800720a:	2100      	movs	r1, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f996 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007212:	233f      	movs	r3, #63	@ 0x3f
 8007214:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8007218:	230c      	movs	r3, #12
 800721a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800721e:	f107 0310 	add.w	r3, r7, #16
 8007222:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800722a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800722e:	f107 030f 	add.w	r3, r7, #15
 8007232:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800723c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fc04 	bl	8007a50 <hci_send_req>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	da01      	bge.n	8007252 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800724e:	23ff      	movs	r3, #255	@ 0xff
 8007250:	e004      	b.n	800725c <aci_hal_write_config_data+0x100>
  return status;
 8007252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007256:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800725a:	781b      	ldrb	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b0cc      	sub	sp, #304	@ 0x130
 800726a:	af00      	add	r7, sp, #0
 800726c:	4602      	mov	r2, r0
 800726e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007272:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800727c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007280:	460a      	mov	r2, r1
 8007282:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800728c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007290:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007294:	2200      	movs	r2, #0
 8007296:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80072a6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072b2:	3301      	adds	r3, #1
 80072b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80072c0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80072c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072cc:	3301      	adds	r3, #1
 80072ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072d6:	2218      	movs	r2, #24
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f92f 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 80072e0:	233f      	movs	r3, #63	@ 0x3f
 80072e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80072e6:	230f      	movs	r3, #15
 80072e8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80072ec:	f107 0310 	add.w	r3, r7, #16
 80072f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80072f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80072f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80072fc:	f107 030f 	add.w	r3, r7, #15
 8007300:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007304:	2301      	movs	r3, #1
 8007306:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800730a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fb9d 	bl	8007a50 <hci_send_req>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	da01      	bge.n	8007320 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800731c:	23ff      	movs	r3, #255	@ 0xff
 800731e:	e004      	b.n	800732a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007320:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007324:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007328:	781b      	ldrb	r3, [r3, #0]
}
 800732a:	4618      	mov	r0, r3
 800732c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b0cc      	sub	sp, #304	@ 0x130
 8007338:	af00      	add	r7, sp, #0
 800733a:	4602      	mov	r2, r0
 800733c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007340:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007344:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007346:	f107 0310 	add.w	r3, r7, #16
 800734a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800734e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007352:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007364:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007368:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800736c:	8812      	ldrh	r2, [r2, #0]
 800736e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007370:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007374:	3302      	adds	r3, #2
 8007376:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800737a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800737e:	2218      	movs	r2, #24
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f8db 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007388:	233f      	movs	r3, #63	@ 0x3f
 800738a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800738e:	2318      	movs	r3, #24
 8007390:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007394:	f107 0310 	add.w	r3, r7, #16
 8007398:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800739c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80073a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80073a4:	f107 030f 	add.w	r3, r7, #15
 80073a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fb49 	bl	8007a50 <hci_send_req>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	da01      	bge.n	80073c8 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80073c4:	23ff      	movs	r3, #255	@ 0xff
 80073c6:	e004      	b.n	80073d2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80073c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80073d0:	781b      	ldrb	r3, [r3, #0]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073e6:	f107 0308 	add.w	r3, r7, #8
 80073ea:	2218      	movs	r2, #24
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f8a5 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x03;
 80073f4:	2303      	movs	r3, #3
 80073f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80073f8:	2303      	movs	r3, #3
 80073fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80073fc:	1dfb      	adds	r3, r7, #7
 80073fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007400:	2301      	movs	r3, #1
 8007402:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007404:	f107 0308 	add.w	r3, r7, #8
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fb20 	bl	8007a50 <hci_send_req>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	da01      	bge.n	800741a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007416:	23ff      	movs	r3, #255	@ 0xff
 8007418:	e000      	b.n	800741c <hci_reset+0x40>
  return status;
 800741a:	79fb      	ldrb	r3, [r7, #7]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b0cd      	sub	sp, #308	@ 0x134
 8007428:	af00      	add	r7, sp, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	4611      	mov	r1, r2
 8007430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007434:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007438:	4622      	mov	r2, r4
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007440:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007444:	4602      	mov	r2, r0
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800744c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007450:	460a      	mov	r2, r1
 8007452:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800745c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007460:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800746e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007472:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007476:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800747e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007482:	3301      	adds	r3, #1
 8007484:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800748c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007490:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007498:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800749c:	3301      	adds	r3, #1
 800749e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 80074a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80074aa:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80074ae:	7812      	ldrb	r2, [r2, #0]
 80074b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074b6:	3301      	adds	r3, #1
 80074b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80074c0:	2218      	movs	r2, #24
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f83a 	bl	800753e <Osal_MemSet>
  rq.ogf = 0x08;
 80074ca:	2308      	movs	r3, #8
 80074cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80074d0:	2331      	movs	r3, #49	@ 0x31
 80074d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80074de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80074e6:	f107 030f 	add.w	r3, r7, #15
 80074ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 faa8 	bl	8007a50 <hci_send_req>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	da01      	bge.n	800750a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007506:	23ff      	movs	r3, #255	@ 0xff
 8007508:	e004      	b.n	8007514 <hci_le_set_default_phy+0xf0>
  return status;
 800750a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800750e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007512:	781b      	ldrb	r3, [r3, #0]
}
 8007514:	4618      	mov	r0, r3
 8007516:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800751a:	46bd      	mov	sp, r7
 800751c:	bd90      	pop	{r4, r7, pc}

0800751e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f003 fb1d 	bl	800ab6e <memcpy>
 8007534:	4603      	mov	r3, r0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f003 fa92 	bl	800aa78 <memset>
 8007554:	4603      	mov	r3, r0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800755e:	b480      	push	{r7}
 8007560:	af00      	add	r7, sp, #0
  return;
 8007562:	bf00      	nop
}
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  return;
 8007570:	bf00      	nop
}
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800757a:	b480      	push	{r7}
 800757c:	af00      	add	r7, sp, #0
  return;
 800757e:	bf00      	nop
}
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return;
 800758c:	bf00      	nop
}
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007596:	b480      	push	{r7}
 8007598:	af00      	add	r7, sp, #0
  return;
 800759a:	bf00      	nop
}
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  return;
 80075a8:	bf00      	nop
}
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80075b2:	b480      	push	{r7}
 80075b4:	af00      	add	r7, sp, #0
  return;
 80075b6:	bf00      	nop
}
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  return;
 80075c4:	bf00      	nop
}
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  return;
 80075d2:	bf00      	nop
}
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  return;
 80075e0:	bf00      	nop
}
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80075ea:	b480      	push	{r7}
 80075ec:	af00      	add	r7, sp, #0
  return;
 80075ee:	bf00      	nop
}
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  return;
 80075fc:	bf00      	nop
}
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007606:	b480      	push	{r7}
 8007608:	af00      	add	r7, sp, #0
  return;
 800760a:	bf00      	nop
}
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  return;
 8007618:	bf00      	nop
}
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007622:	b480      	push	{r7}
 8007624:	af00      	add	r7, sp, #0
  return;
 8007626:	bf00      	nop
}
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return;
 8007634:	bf00      	nop
}
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0
  return;
 8007642:	bf00      	nop
}
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007650:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <SVCCTL_Init+0x18>)
 8007652:	2200      	movs	r2, #0
 8007654:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007656:	4b04      	ldr	r3, [pc, #16]	@ (8007668 <SVCCTL_Init+0x1c>)
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800765c:	f000 f806 	bl	800766c <SVCCTL_SvcInit>

  return;
 8007660:	bf00      	nop
}
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000088 	.word	0x20000088
 8007668:	200000a8 	.word	0x200000a8

0800766c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  BAS_Init();
 8007670:	f7ff ff75 	bl	800755e <BAS_Init>

  BLS_Init();
 8007674:	f7ff ff7a 	bl	800756c <BLS_Init>

  CRS_STM_Init();
 8007678:	f7ff ff7f 	bl	800757a <CRS_STM_Init>

  DIS_Init();
 800767c:	f7ff ff84 	bl	8007588 <DIS_Init>

  EDS_STM_Init();
 8007680:	f7ff ff89 	bl	8007596 <EDS_STM_Init>

  HIDS_Init();
 8007684:	f7ff ff8e 	bl	80075a4 <HIDS_Init>

  HRS_Init();
 8007688:	f7ff ff93 	bl	80075b2 <HRS_Init>

  HTS_Init();
 800768c:	f7ff ff98 	bl	80075c0 <HTS_Init>

  IAS_Init();
 8007690:	f7ff ff9d 	bl	80075ce <IAS_Init>

  LLS_Init();
 8007694:	f7ff ffa2 	bl	80075dc <LLS_Init>

  TPS_Init();
 8007698:	f7ff ffa7 	bl	80075ea <TPS_Init>

  MOTENV_STM_Init();
 800769c:	f7ff ffac 	bl	80075f8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80076a0:	f7ff ffb1 	bl	8007606 <P2PS_STM_Init>

  ZDD_STM_Init();
 80076a4:	f7ff ffb6 	bl	8007614 <ZDD_STM_Init>

  OTAS_STM_Init();
 80076a8:	f7ff ffbb 	bl	8007622 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80076ac:	f7ff ffc7 	bl	800763e <BVOPUS_STM_Init>

  MESH_Init();
 80076b0:	f7ff ffbe 	bl	8007630 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80076b4:	f002 fa0c 	bl	8009ad0 <SVCCTL_InitCustomSvc>
  
  return;
 80076b8:	bf00      	nop
}
 80076ba:	bd80      	pop	{r7, pc}

080076bc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80076c4:	4b09      	ldr	r3, [pc, #36]	@ (80076ec <SVCCTL_RegisterSvcHandler+0x30>)
 80076c6:	7f1b      	ldrb	r3, [r3, #28]
 80076c8:	4619      	mov	r1, r3
 80076ca:	4a08      	ldr	r2, [pc, #32]	@ (80076ec <SVCCTL_RegisterSvcHandler+0x30>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80076d2:	4b06      	ldr	r3, [pc, #24]	@ (80076ec <SVCCTL_RegisterSvcHandler+0x30>)
 80076d4:	7f1b      	ldrb	r3, [r3, #28]
 80076d6:	3301      	adds	r3, #1
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	4b04      	ldr	r3, [pc, #16]	@ (80076ec <SVCCTL_RegisterSvcHandler+0x30>)
 80076dc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80076de:	bf00      	nop
}
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000088 	.word	0x20000088

080076f0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3301      	adds	r3, #1
 80076fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2bff      	cmp	r3, #255	@ 0xff
 8007708:	d125      	bne.n	8007756 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3302      	adds	r3, #2
 800770e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800771a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800771e:	d118      	bne.n	8007752 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007720:	2300      	movs	r3, #0
 8007722:	757b      	strb	r3, [r7, #21]
 8007724:	e00d      	b.n	8007742 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007726:	7d7b      	ldrb	r3, [r7, #21]
 8007728:	4a1a      	ldr	r2, [pc, #104]	@ (8007794 <SVCCTL_UserEvtRx+0xa4>)
 800772a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d108      	bne.n	800774e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800773c:	7d7b      	ldrb	r3, [r7, #21]
 800773e:	3301      	adds	r3, #1
 8007740:	757b      	strb	r3, [r7, #21]
 8007742:	4b14      	ldr	r3, [pc, #80]	@ (8007794 <SVCCTL_UserEvtRx+0xa4>)
 8007744:	7f1b      	ldrb	r3, [r3, #28]
 8007746:	7d7a      	ldrb	r2, [r7, #21]
 8007748:	429a      	cmp	r2, r3
 800774a:	d3ec      	bcc.n	8007726 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800774c:	e002      	b.n	8007754 <SVCCTL_UserEvtRx+0x64>
              break;
 800774e:	bf00      	nop
          break;
 8007750:	e000      	b.n	8007754 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007752:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007754:	e000      	b.n	8007758 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007756:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d00f      	beq.n	800777e <SVCCTL_UserEvtRx+0x8e>
 800775e:	2b02      	cmp	r3, #2
 8007760:	dc10      	bgt.n	8007784 <SVCCTL_UserEvtRx+0x94>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <SVCCTL_UserEvtRx+0x7c>
 8007766:	2b01      	cmp	r3, #1
 8007768:	d006      	beq.n	8007778 <SVCCTL_UserEvtRx+0x88>
 800776a:	e00b      	b.n	8007784 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fc57 	bl	8009020 <SVCCTL_App_Notification>
 8007772:	4603      	mov	r3, r0
 8007774:	75bb      	strb	r3, [r7, #22]
      break;
 8007776:	e008      	b.n	800778a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007778:	2301      	movs	r3, #1
 800777a:	75bb      	strb	r3, [r7, #22]
      break;
 800777c:	e005      	b.n	800778a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800777e:	2300      	movs	r3, #0
 8007780:	75bb      	strb	r3, [r7, #22]
      break;
 8007782:	e002      	b.n	800778a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007784:	2301      	movs	r3, #1
 8007786:	75bb      	strb	r3, [r7, #22]
      break;
 8007788:	bf00      	nop
  }

  return (return_status);
 800778a:	7dbb      	ldrb	r3, [r7, #22]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000088 	.word	0x20000088

08007798 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077a0:	f107 030c 	add.w	r3, r7, #12
 80077a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	212e      	movs	r1, #46	@ 0x2e
 80077b0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80077b4:	f000 fae8 	bl	8007d88 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	330b      	adds	r3, #11
 80077bc:	78db      	ldrb	r3, [r3, #3]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	210f      	movs	r1, #15
 80077de:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80077e2:	f000 fad1 	bl	8007d88 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	330b      	adds	r3, #11
 80077ea:	78db      	ldrb	r3, [r3, #3]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	2110      	movs	r1, #16
 8007808:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800780c:	f000 fabc 	bl	8007d88 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	330b      	adds	r3, #11
 8007814:	78db      	ldrb	r3, [r3, #3]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3720      	adds	r7, #32
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007820:	b480      	push	{r7}
 8007822:	b08b      	sub	sp, #44	@ 0x2c
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007848:	4b4a      	ldr	r3, [pc, #296]	@ (8007974 <SHCI_GetWirelessFwInfo+0x154>)
 800784a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007850:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800785a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a44      	ldr	r2, [pc, #272]	@ (8007978 <SHCI_GetWirelessFwInfo+0x158>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d10f      	bne.n	800788c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e01a      	b.n	80078c2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007894:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007898:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	0e1b      	lsrs	r3, r3, #24
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	0c1b      	lsrs	r3, r3, #16
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	0a1b      	lsrs	r3, r3, #8
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	091b      	lsrs	r3, r3, #4
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	0e1b      	lsrs	r3, r3, #24
 8007902:	b2da      	uxtb	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	0c1b      	lsrs	r3, r3, #16
 800790c:	b2da      	uxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	b2da      	uxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	b2da      	uxtb	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	0e1b      	lsrs	r3, r3, #24
 8007930:	b2da      	uxtb	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	b2da      	uxtb	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	0a1b      	lsrs	r3, r3, #8
 8007944:	b2da      	uxtb	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	0e1b      	lsrs	r3, r3, #24
 800794e:	b2da      	uxtb	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	b2da      	uxtb	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	372c      	adds	r7, #44	@ 0x2c
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	58004000 	.word	0x58004000
 8007978:	a94656b9 	.word	0xa94656b9

0800797c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	4a08      	ldr	r2, [pc, #32]	@ (80079ac <hci_init+0x30>)
 800798c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800798e:	4a08      	ldr	r2, [pc, #32]	@ (80079b0 <hci_init+0x34>)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007994:	4806      	ldr	r0, [pc, #24]	@ (80079b0 <hci_init+0x34>)
 8007996:	f000 f979 	bl	8007c8c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f8da 	bl	8007b58 <TlInit>

  return;
 80079a4:	bf00      	nop
}
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20000378 	.word	0x20000378
 80079b0:	20000350 	.word	0x20000350

080079b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80079ba:	4822      	ldr	r0, [pc, #136]	@ (8007a44 <hci_user_evt_proc+0x90>)
 80079bc:	f000 fde8 	bl	8008590 <LST_is_empty>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12b      	bne.n	8007a1e <hci_user_evt_proc+0x6a>
 80079c6:	4b20      	ldr	r3, [pc, #128]	@ (8007a48 <hci_user_evt_proc+0x94>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d027      	beq.n	8007a1e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80079ce:	f107 030c 	add.w	r3, r7, #12
 80079d2:	4619      	mov	r1, r3
 80079d4:	481b      	ldr	r0, [pc, #108]	@ (8007a44 <hci_user_evt_proc+0x90>)
 80079d6:	f000 fe6a 	bl	80086ae <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80079da:	4b1c      	ldr	r3, [pc, #112]	@ (8007a4c <hci_user_evt_proc+0x98>)
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80079e6:	2301      	movs	r3, #1
 80079e8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80079ea:	4b18      	ldr	r3, [pc, #96]	@ (8007a4c <hci_user_evt_proc+0x98>)
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	1d3a      	adds	r2, r7, #4
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80079f4:	793a      	ldrb	r2, [r7, #4]
 80079f6:	4b14      	ldr	r3, [pc, #80]	@ (8007a48 <hci_user_evt_proc+0x94>)
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80079fc:	4b12      	ldr	r3, [pc, #72]	@ (8007a48 <hci_user_evt_proc+0x94>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007a02:	4b11      	ldr	r3, [pc, #68]	@ (8007a48 <hci_user_evt_proc+0x94>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fc0d 	bl	800822c <TL_MM_EvtDone>
 8007a12:	e004      	b.n	8007a1e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4619      	mov	r1, r3
 8007a18:	480a      	ldr	r0, [pc, #40]	@ (8007a44 <hci_user_evt_proc+0x90>)
 8007a1a:	f000 fddb 	bl	80085d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007a1e:	4809      	ldr	r0, [pc, #36]	@ (8007a44 <hci_user_evt_proc+0x90>)
 8007a20:	f000 fdb6 	bl	8008590 <LST_is_empty>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <hci_user_evt_proc+0x86>
 8007a2a:	4b07      	ldr	r3, [pc, #28]	@ (8007a48 <hci_user_evt_proc+0x94>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007a32:	4804      	ldr	r0, [pc, #16]	@ (8007a44 <hci_user_evt_proc+0x90>)
 8007a34:	f001 ff5a 	bl	80098ec <hci_notify_asynch_evt>
  }


  return;
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
}
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200000b0 	.word	0x200000b0
 8007a48:	200000bc 	.word	0x200000bc
 8007a4c:	20000350 	.word	0x20000350

08007a50 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f000 f8d1 	bl	8007c04 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007a62:	2300      	movs	r3, #0
 8007a64:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	b21b      	sxth	r3, r3
 8007a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a70:	b21a      	sxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	029b      	lsls	r3, r3, #10
 8007a78:	b21b      	sxth	r3, r3
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	b21b      	sxth	r3, r3
 8007a7e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007a80:	4b33      	ldr	r3, [pc, #204]	@ (8007b50 <hci_send_req+0x100>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	b2d9      	uxtb	r1, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	8bbb      	ldrh	r3, [r7, #28]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f890 	bl	8007bb8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007a98:	e04e      	b.n	8007b38 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007a9a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007a9e:	f001 ff3c 	bl	800991a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007aa2:	e043      	b.n	8007b2c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007aa4:	f107 030c 	add.w	r3, r7, #12
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	482a      	ldr	r0, [pc, #168]	@ (8007b54 <hci_send_req+0x104>)
 8007aac:	f000 fdff 	bl	80086ae <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	7a5b      	ldrb	r3, [r3, #9]
 8007ab4:	2b0f      	cmp	r3, #15
 8007ab6:	d114      	bne.n	8007ae2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	330b      	adds	r3, #11
 8007abc:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8bba      	ldrh	r2, [r7, #28]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d104      	bne.n	8007ad4 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d027      	beq.n	8007b2c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007adc:	2301      	movs	r3, #1
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e024      	b.n	8007b2c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	330b      	adds	r3, #11
 8007ae6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8bba      	ldrh	r2, [r7, #28]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d114      	bne.n	8007b20 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	7a9b      	ldrb	r3, [r3, #10]
 8007afa:	3b03      	subs	r3, #3
 8007afc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695a      	ldr	r2, [r3, #20]
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	bfa8      	it	ge
 8007b08:	461a      	movge	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6918      	ldr	r0, [r3, #16]
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	1cd9      	adds	r1, r3, #3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f003 f827 	bl	800ab6e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007b2c:	4809      	ldr	r0, [pc, #36]	@ (8007b54 <hci_send_req+0x104>)
 8007b2e:	f000 fd2f 	bl	8008590 <LST_is_empty>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0b5      	beq.n	8007aa4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007b38:	7ffb      	ldrb	r3, [r7, #31]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ad      	beq.n	8007a9a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007b3e:	2001      	movs	r0, #1
 8007b40:	f000 f860 	bl	8007c04 <NotifyCmdStatus>

  return 0;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000037c 	.word	0x2000037c
 8007b54:	20000370 	.word	0x20000370

08007b58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007b60:	480f      	ldr	r0, [pc, #60]	@ (8007ba0 <TlInit+0x48>)
 8007b62:	f000 fd05 	bl	8008570 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007b66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ba4 <TlInit+0x4c>)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007b6c:	480e      	ldr	r0, [pc, #56]	@ (8007ba8 <TlInit+0x50>)
 8007b6e:	f000 fcff 	bl	8008570 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007b72:	4b0e      	ldr	r3, [pc, #56]	@ (8007bac <TlInit+0x54>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007b78:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb0 <TlInit+0x58>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007b84:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb4 <TlInit+0x5c>)
 8007b86:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007b88:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <TlInit+0x58>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f107 0208 	add.w	r2, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
  }

  return;
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
}
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000370 	.word	0x20000370
 8007ba4:	200000b8 	.word	0x200000b8
 8007ba8:	200000b0 	.word	0x200000b0
 8007bac:	200000bc 	.word	0x200000bc
 8007bb0:	20000350 	.word	0x20000350
 8007bb4:	08007c45 	.word	0x08007c45

08007bb8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	603a      	str	r2, [r7, #0]
 8007bc2:	80fb      	strh	r3, [r7, #6]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007bfc <SendCmd+0x44>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	88fa      	ldrh	r2, [r7, #6]
 8007bce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <SendCmd+0x44>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	797a      	ldrb	r2, [r7, #5]
 8007bd8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007bda:	4b08      	ldr	r3, [pc, #32]	@ (8007bfc <SendCmd+0x44>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	797a      	ldrb	r2, [r7, #5]
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f002 ffc2 	bl	800ab6e <memcpy>

  hciContext.io.Send(0,0);
 8007bea:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <SendCmd+0x48>)
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2100      	movs	r1, #0
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	4798      	blx	r3

  return;
 8007bf4:	bf00      	nop
}
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	200000b8 	.word	0x200000b8
 8007c00:	20000350 	.word	0x20000350

08007c04 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d108      	bne.n	8007c26 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007c14:	4b0a      	ldr	r3, [pc, #40]	@ (8007c40 <NotifyCmdStatus+0x3c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00d      	beq.n	8007c38 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007c1c:	4b08      	ldr	r3, [pc, #32]	@ (8007c40 <NotifyCmdStatus+0x3c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2000      	movs	r0, #0
 8007c22:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007c24:	e008      	b.n	8007c38 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007c26:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <NotifyCmdStatus+0x3c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007c2e:	4b04      	ldr	r3, [pc, #16]	@ (8007c40 <NotifyCmdStatus+0x3c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2001      	movs	r0, #1
 8007c34:	4798      	blx	r3
  return;
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
}
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000378 	.word	0x20000378

08007c44 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7a5b      	ldrb	r3, [r3, #9]
 8007c50:	2b0f      	cmp	r3, #15
 8007c52:	d003      	beq.n	8007c5c <TlEvtReceived+0x18>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7a5b      	ldrb	r3, [r3, #9]
 8007c58:	2b0e      	cmp	r3, #14
 8007c5a:	d107      	bne.n	8007c6c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4809      	ldr	r0, [pc, #36]	@ (8007c84 <TlEvtReceived+0x40>)
 8007c60:	f000 fcde 	bl	8008620 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007c64:	2000      	movs	r0, #0
 8007c66:	f001 fe4d 	bl	8009904 <hci_cmd_resp_release>
 8007c6a:	e006      	b.n	8007c7a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4806      	ldr	r0, [pc, #24]	@ (8007c88 <TlEvtReceived+0x44>)
 8007c70:	f000 fcd6 	bl	8008620 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007c74:	4804      	ldr	r0, [pc, #16]	@ (8007c88 <TlEvtReceived+0x44>)
 8007c76:	f001 fe39 	bl	80098ec <hci_notify_asynch_evt>
  }

  return;
 8007c7a:	bf00      	nop
}
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000370 	.word	0x20000370
 8007c88:	200000b0 	.word	0x200000b0

08007c8c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a05      	ldr	r2, [pc, #20]	@ (8007cac <hci_register_io_bus+0x20>)
 8007c98:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a04      	ldr	r2, [pc, #16]	@ (8007cb0 <hci_register_io_bus+0x24>)
 8007c9e:	611a      	str	r2, [r3, #16]

  return;
 8007ca0:	bf00      	nop
}
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	08007fa5 	.word	0x08007fa5
 8007cb0:	0800800d 	.word	0x0800800d

08007cb4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4a08      	ldr	r2, [pc, #32]	@ (8007ce4 <shci_init+0x30>)
 8007cc4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007cc6:	4a08      	ldr	r2, [pc, #32]	@ (8007ce8 <shci_init+0x34>)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007ccc:	4806      	ldr	r0, [pc, #24]	@ (8007ce8 <shci_init+0x34>)
 8007cce:	f000 f915 	bl	8007efc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f898 	bl	8007e0c <TlInit>

  return;
 8007cdc:	bf00      	nop
}
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	200003a0 	.word	0x200003a0
 8007ce8:	20000380 	.word	0x20000380

08007cec <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007cf2:	4822      	ldr	r0, [pc, #136]	@ (8007d7c <shci_user_evt_proc+0x90>)
 8007cf4:	f000 fc4c 	bl	8008590 <LST_is_empty>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d12b      	bne.n	8007d56 <shci_user_evt_proc+0x6a>
 8007cfe:	4b20      	ldr	r3, [pc, #128]	@ (8007d80 <shci_user_evt_proc+0x94>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d027      	beq.n	8007d56 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007d06:	f107 030c 	add.w	r3, r7, #12
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	481b      	ldr	r0, [pc, #108]	@ (8007d7c <shci_user_evt_proc+0x90>)
 8007d0e:	f000 fcce 	bl	80086ae <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007d12:	4b1c      	ldr	r3, [pc, #112]	@ (8007d84 <shci_user_evt_proc+0x98>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00c      	beq.n	8007d34 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007d22:	4b18      	ldr	r3, [pc, #96]	@ (8007d84 <shci_user_evt_proc+0x98>)
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	1d3a      	adds	r2, r7, #4
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007d2c:	793a      	ldrb	r2, [r7, #4]
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <shci_user_evt_proc+0x94>)
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007d34:	4b12      	ldr	r3, [pc, #72]	@ (8007d80 <shci_user_evt_proc+0x94>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007d3a:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <shci_user_evt_proc+0x94>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 fa71 	bl	800822c <TL_MM_EvtDone>
 8007d4a:	e004      	b.n	8007d56 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	480a      	ldr	r0, [pc, #40]	@ (8007d7c <shci_user_evt_proc+0x90>)
 8007d52:	f000 fc3f 	bl	80085d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007d56:	4809      	ldr	r0, [pc, #36]	@ (8007d7c <shci_user_evt_proc+0x90>)
 8007d58:	f000 fc1a 	bl	8008590 <LST_is_empty>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d107      	bne.n	8007d72 <shci_user_evt_proc+0x86>
 8007d62:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <shci_user_evt_proc+0x94>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007d6a:	4804      	ldr	r0, [pc, #16]	@ (8007d7c <shci_user_evt_proc+0x90>)
 8007d6c:	f7f9 fa80 	bl	8001270 <shci_notify_asynch_evt>
  }


  return;
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
}
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200000c0 	.word	0x200000c0
 8007d80:	200000d0 	.word	0x200000d0
 8007d84:	20000380 	.word	0x20000380

08007d88 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60ba      	str	r2, [r7, #8]
 8007d90:	607b      	str	r3, [r7, #4]
 8007d92:	4603      	mov	r3, r0
 8007d94:	81fb      	strh	r3, [r7, #14]
 8007d96:	460b      	mov	r3, r1
 8007d98:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	f000 f868 	bl	8007e70 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007da0:	4b17      	ldr	r3, [pc, #92]	@ (8007e00 <shci_send+0x78>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	89fa      	ldrh	r2, [r7, #14]
 8007da6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007daa:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <shci_send+0x78>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	7b7a      	ldrb	r2, [r7, #13]
 8007db0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007db2:	4b13      	ldr	r3, [pc, #76]	@ (8007e00 <shci_send+0x78>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	330c      	adds	r3, #12
 8007db8:	7b7a      	ldrb	r2, [r7, #13]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 fed6 	bl	800ab6e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8007dc2:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <shci_send+0x7c>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007e08 <shci_send+0x80>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2100      	movs	r1, #0
 8007dce:	2000      	movs	r0, #0
 8007dd0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007dd2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007dd6:	f7f9 fa62 	bl	800129e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f103 0008 	add.w	r0, r3, #8
 8007de0:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <shci_send+0x78>)
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <shci_send+0x78>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	789b      	ldrb	r3, [r3, #2]
 8007dea:	3303      	adds	r3, #3
 8007dec:	461a      	mov	r2, r3
 8007dee:	f002 febe 	bl	800ab6e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007df2:	2001      	movs	r0, #1
 8007df4:	f000 f83c 	bl	8007e70 <Cmd_SetStatus>

  return;
 8007df8:	bf00      	nop
}
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200000cc 	.word	0x200000cc
 8007e04:	200003a4 	.word	0x200003a4
 8007e08:	20000380 	.word	0x20000380

08007e0c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007e14:	4a10      	ldr	r2, [pc, #64]	@ (8007e58 <TlInit+0x4c>)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007e1a:	4810      	ldr	r0, [pc, #64]	@ (8007e5c <TlInit+0x50>)
 8007e1c:	f000 fba8 	bl	8008570 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007e20:	2001      	movs	r0, #1
 8007e22:	f000 f825 	bl	8007e70 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007e26:	4b0e      	ldr	r3, [pc, #56]	@ (8007e60 <TlInit+0x54>)
 8007e28:	2201      	movs	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <TlInit+0x58>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00c      	beq.n	8007e4e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <TlInit+0x5c>)
 8007e3a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <TlInit+0x60>)
 8007e3e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007e40:	4b08      	ldr	r3, [pc, #32]	@ (8007e64 <TlInit+0x58>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f107 020c 	add.w	r2, r7, #12
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
  }

  return;
 8007e4c:	bf00      	nop
 8007e4e:	bf00      	nop
}
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200000cc 	.word	0x200000cc
 8007e5c:	200000c0 	.word	0x200000c0
 8007e60:	200000d0 	.word	0x200000d0
 8007e64:	20000380 	.word	0x20000380
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007ed9 	.word	0x08007ed9

08007e70 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007e80:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb8 <Cmd_SetStatus+0x48>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007e88:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <Cmd_SetStatus+0x48>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007e90:	4b0a      	ldr	r3, [pc, #40]	@ (8007ebc <Cmd_SetStatus+0x4c>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007e96:	e00b      	b.n	8007eb0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007e98:	4b08      	ldr	r3, [pc, #32]	@ (8007ebc <Cmd_SetStatus+0x4c>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007e9e:	4b06      	ldr	r3, [pc, #24]	@ (8007eb8 <Cmd_SetStatus+0x48>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007ea6:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <Cmd_SetStatus+0x48>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2001      	movs	r0, #1
 8007eac:	4798      	blx	r3
  return;
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
}
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200003a0 	.word	0x200003a0
 8007ebc:	200000c8 	.word	0x200000c8

08007ec0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f7f9 f9dd 	bl	8001288 <shci_cmd_resp_release>

  return;
 8007ece:	bf00      	nop
}
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4805      	ldr	r0, [pc, #20]	@ (8007ef8 <TlUserEvtReceived+0x20>)
 8007ee4:	f000 fb9c 	bl	8008620 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007ee8:	4803      	ldr	r0, [pc, #12]	@ (8007ef8 <TlUserEvtReceived+0x20>)
 8007eea:	f7f9 f9c1 	bl	8001270 <shci_notify_asynch_evt>

  return;
 8007eee:	bf00      	nop
}
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200000c0 	.word	0x200000c0

08007efc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a05      	ldr	r2, [pc, #20]	@ (8007f1c <shci_register_io_bus+0x20>)
 8007f08:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a04      	ldr	r2, [pc, #16]	@ (8007f20 <shci_register_io_bus+0x24>)
 8007f0e:	611a      	str	r2, [r3, #16]

  return;
 8007f10:	bf00      	nop
}
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	080080b9 	.word	0x080080b9
 8007f20:	0800810d 	.word	0x0800810d

08007f24 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007f28:	f002 f866 	bl	8009ff8 <HW_IPCC_Enable>

  return;
 8007f2c:	bf00      	nop
}
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <TL_Init>:


void TL_Init( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007f34:	4b10      	ldr	r3, [pc, #64]	@ (8007f78 <TL_Init+0x48>)
 8007f36:	4a11      	ldr	r2, [pc, #68]	@ (8007f7c <TL_Init+0x4c>)
 8007f38:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007f78 <TL_Init+0x48>)
 8007f3c:	4a10      	ldr	r2, [pc, #64]	@ (8007f80 <TL_Init+0x50>)
 8007f3e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007f40:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <TL_Init+0x48>)
 8007f42:	4a10      	ldr	r2, [pc, #64]	@ (8007f84 <TL_Init+0x54>)
 8007f44:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007f46:	4b0c      	ldr	r3, [pc, #48]	@ (8007f78 <TL_Init+0x48>)
 8007f48:	4a0f      	ldr	r2, [pc, #60]	@ (8007f88 <TL_Init+0x58>)
 8007f4a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f78 <TL_Init+0x48>)
 8007f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007f8c <TL_Init+0x5c>)
 8007f50:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007f52:	4b09      	ldr	r3, [pc, #36]	@ (8007f78 <TL_Init+0x48>)
 8007f54:	4a0e      	ldr	r2, [pc, #56]	@ (8007f90 <TL_Init+0x60>)
 8007f56:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007f58:	4b07      	ldr	r3, [pc, #28]	@ (8007f78 <TL_Init+0x48>)
 8007f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8007f94 <TL_Init+0x64>)
 8007f5c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007f5e:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <TL_Init+0x48>)
 8007f60:	4a0d      	ldr	r2, [pc, #52]	@ (8007f98 <TL_Init+0x68>)
 8007f62:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007f64:	4b04      	ldr	r3, [pc, #16]	@ (8007f78 <TL_Init+0x48>)
 8007f66:	4a0d      	ldr	r2, [pc, #52]	@ (8007f9c <TL_Init+0x6c>)
 8007f68:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	@ (8007f78 <TL_Init+0x48>)
 8007f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007fa0 <TL_Init+0x70>)
 8007f6e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007f70:	f002 f856 	bl	800a020 <HW_IPCC_Init>

  return;
 8007f74:	bf00      	nop
}
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20030000 	.word	0x20030000
 8007f7c:	20030028 	.word	0x20030028
 8007f80:	20030048 	.word	0x20030048
 8007f84:	20030058 	.word	0x20030058
 8007f88:	20030068 	.word	0x20030068
 8007f8c:	20030070 	.word	0x20030070
 8007f90:	20030078 	.word	0x20030078
 8007f94:	20030080 	.word	0x20030080
 8007f98:	2003009c 	.word	0x2003009c
 8007f9c:	200300a0 	.word	0x200300a0
 8007fa0:	200300ac 	.word	0x200300ac

08007fa4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007fb0:	4811      	ldr	r0, [pc, #68]	@ (8007ff8 <TL_BLE_Init+0x54>)
 8007fb2:	f000 fadd 	bl	8008570 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007fb6:	4b11      	ldr	r3, [pc, #68]	@ (8007ffc <TL_BLE_Init+0x58>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4a0c      	ldr	r2, [pc, #48]	@ (8008000 <TL_BLE_Init+0x5c>)
 8007fd0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4a08      	ldr	r2, [pc, #32]	@ (8007ff8 <TL_BLE_Init+0x54>)
 8007fd6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007fd8:	f002 f838 	bl	800a04c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a08      	ldr	r2, [pc, #32]	@ (8008004 <TL_BLE_Init+0x60>)
 8007fe2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a07      	ldr	r2, [pc, #28]	@ (8008008 <TL_BLE_Init+0x64>)
 8007fea:	6013      	str	r3, [r2, #0]

  return 0;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200300c8 	.word	0x200300c8
 8007ffc:	20030000 	.word	0x20030000
 8008000:	20030a58 	.word	0x20030a58
 8008004:	200003b0 	.word	0x200003b0
 8008008:	200003b4 	.word	0x200003b4

0800800c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008018:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <TL_BLE_SendCmd+0x34>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008022:	4b07      	ldr	r3, [pc, #28]	@ (8008040 <TL_BLE_SendCmd+0x34>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	2001      	movs	r0, #1
 800802c:	f000 f96c 	bl	8008308 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008030:	f002 f816 	bl	800a060 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20030000 	.word	0x20030000

08008044 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800804a:	e01c      	b.n	8008086 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800804c:	1d3b      	adds	r3, r7, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4812      	ldr	r0, [pc, #72]	@ (800809c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008052:	f000 fb2c 	bl	80086ae <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	7a5b      	ldrb	r3, [r3, #9]
 800805a:	2b0f      	cmp	r3, #15
 800805c:	d003      	beq.n	8008066 <HW_IPCC_BLE_RxEvtNot+0x22>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7a5b      	ldrb	r3, [r3, #9]
 8008062:	2b0e      	cmp	r3, #14
 8008064:	d105      	bne.n	8008072 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4619      	mov	r1, r3
 800806a:	2002      	movs	r0, #2
 800806c:	f000 f94c 	bl	8008308 <OutputDbgTrace>
 8008070:	e004      	b.n	800807c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4619      	mov	r1, r3
 8008076:	2003      	movs	r0, #3
 8008078:	f000 f946 	bl	8008308 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800807c:	4b08      	ldr	r3, [pc, #32]	@ (80080a0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4610      	mov	r0, r2
 8008084:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008086:	4805      	ldr	r0, [pc, #20]	@ (800809c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008088:	f000 fa82 	bl	8008590 <LST_is_empty>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0dc      	beq.n	800804c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008092:	bf00      	nop
}
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200300c8 	.word	0x200300c8
 80080a0:	200003b0 	.word	0x200003b0

080080a4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80080a8:	4b02      	ldr	r3, [pc, #8]	@ (80080b4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4798      	blx	r3

  return;
 80080ae:	bf00      	nop
}
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200003b4 	.word	0x200003b4

080080b8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80080c4:	480d      	ldr	r0, [pc, #52]	@ (80080fc <TL_SYS_Init+0x44>)
 80080c6:	f000 fa53 	bl	8008570 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80080ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008100 <TL_SYS_Init+0x48>)
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4a08      	ldr	r2, [pc, #32]	@ (80080fc <TL_SYS_Init+0x44>)
 80080dc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80080de:	f001 ffe1 	bl	800a0a4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a07      	ldr	r2, [pc, #28]	@ (8008104 <TL_SYS_Init+0x4c>)
 80080e8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4a06      	ldr	r2, [pc, #24]	@ (8008108 <TL_SYS_Init+0x50>)
 80080f0:	6013      	str	r3, [r2, #0]

  return 0;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200300d0 	.word	0x200300d0
 8008100:	20030000 	.word	0x20030000
 8008104:	200003b8 	.word	0x200003b8
 8008108:	200003bc 	.word	0x200003bc

0800810c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008118:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <TL_SYS_SendCmd+0x34>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008122:	4b07      	ldr	r3, [pc, #28]	@ (8008140 <TL_SYS_SendCmd+0x34>)
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4619      	mov	r1, r3
 800812a:	2004      	movs	r0, #4
 800812c:	f000 f8ec 	bl	8008308 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008130:	f001 ffc2 	bl	800a0b8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20030000 	.word	0x20030000

08008144 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008148:	4b07      	ldr	r3, [pc, #28]	@ (8008168 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4619      	mov	r1, r3
 8008150:	2005      	movs	r0, #5
 8008152:	f000 f8d9 	bl	8008308 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008156:	4b05      	ldr	r3, [pc, #20]	@ (800816c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a03      	ldr	r2, [pc, #12]	@ (8008168 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800815c:	68d2      	ldr	r2, [r2, #12]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3

  return;
 8008164:	bf00      	nop
}
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20030000 	.word	0x20030000
 800816c:	200003b8 	.word	0x200003b8

08008170 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008176:	e00e      	b.n	8008196 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	4619      	mov	r1, r3
 800817c:	480b      	ldr	r0, [pc, #44]	@ (80081ac <HW_IPCC_SYS_EvtNot+0x3c>)
 800817e:	f000 fa96 	bl	80086ae <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4619      	mov	r1, r3
 8008186:	2006      	movs	r0, #6
 8008188:	f000 f8be 	bl	8008308 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800818c:	4b08      	ldr	r3, [pc, #32]	@ (80081b0 <HW_IPCC_SYS_EvtNot+0x40>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4610      	mov	r0, r2
 8008194:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008196:	4805      	ldr	r0, [pc, #20]	@ (80081ac <HW_IPCC_SYS_EvtNot+0x3c>)
 8008198:	f000 f9fa 	bl	8008590 <LST_is_empty>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0ea      	beq.n	8008178 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80081a2:	bf00      	nop
}
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200300d0 	.word	0x200300d0
 80081b0:	200003bc 	.word	0x200003bc

080081b4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80081bc:	4817      	ldr	r0, [pc, #92]	@ (800821c <TL_MM_Init+0x68>)
 80081be:	f000 f9d7 	bl	8008570 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80081c2:	4817      	ldr	r0, [pc, #92]	@ (8008220 <TL_MM_Init+0x6c>)
 80081c4:	f000 f9d4 	bl	8008570 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80081c8:	4b16      	ldr	r3, [pc, #88]	@ (8008224 <TL_MM_Init+0x70>)
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	4a16      	ldr	r2, [pc, #88]	@ (8008228 <TL_MM_Init+0x74>)
 80081ce:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80081d0:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <TL_MM_Init+0x74>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6892      	ldr	r2, [r2, #8]
 80081d8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80081da:	4b13      	ldr	r3, [pc, #76]	@ (8008228 <TL_MM_Init+0x74>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	68d2      	ldr	r2, [r2, #12]
 80081e2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80081e4:	4b10      	ldr	r3, [pc, #64]	@ (8008228 <TL_MM_Init+0x74>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a0c      	ldr	r2, [pc, #48]	@ (800821c <TL_MM_Init+0x68>)
 80081ea:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80081ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <TL_MM_Init+0x74>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008228 <TL_MM_Init+0x74>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6852      	ldr	r2, [r2, #4]
 80081fe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008200:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <TL_MM_Init+0x74>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6912      	ldr	r2, [r2, #16]
 8008208:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800820a:	4b07      	ldr	r3, [pc, #28]	@ (8008228 <TL_MM_Init+0x74>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6952      	ldr	r2, [r2, #20]
 8008212:	619a      	str	r2, [r3, #24]

  return;
 8008214:	bf00      	nop
}
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	200300b8 	.word	0x200300b8
 8008220:	200003a8 	.word	0x200003a8
 8008224:	20030000 	.word	0x20030000
 8008228:	200003c0 	.word	0x200003c0

0800822c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4807      	ldr	r0, [pc, #28]	@ (8008254 <TL_MM_EvtDone+0x28>)
 8008238:	f000 f9f2 	bl	8008620 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	2000      	movs	r0, #0
 8008240:	f000 f862 	bl	8008308 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008244:	4804      	ldr	r0, [pc, #16]	@ (8008258 <TL_MM_EvtDone+0x2c>)
 8008246:	f001 ff5d 	bl	800a104 <HW_IPCC_MM_SendFreeBuf>

  return;
 800824a:	bf00      	nop
}
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200003a8 	.word	0x200003a8
 8008258:	0800825d 	.word	0x0800825d

0800825c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008262:	e00c      	b.n	800827e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	4619      	mov	r1, r3
 8008268:	480a      	ldr	r0, [pc, #40]	@ (8008294 <SendFreeBuf+0x38>)
 800826a:	f000 fa20 	bl	80086ae <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800826e:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <SendFreeBuf+0x3c>)
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f9d1 	bl	8008620 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800827e:	4805      	ldr	r0, [pc, #20]	@ (8008294 <SendFreeBuf+0x38>)
 8008280:	f000 f986 	bl	8008590 <LST_is_empty>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0ec      	beq.n	8008264 <SendFreeBuf+0x8>
  }

  return;
 800828a:	bf00      	nop
}
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200003a8 	.word	0x200003a8
 8008298:	20030000 	.word	0x20030000

0800829c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80082a0:	4805      	ldr	r0, [pc, #20]	@ (80082b8 <TL_TRACES_Init+0x1c>)
 80082a2:	f000 f965 	bl	8008570 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80082a6:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <TL_TRACES_Init+0x20>)
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	4a03      	ldr	r2, [pc, #12]	@ (80082b8 <TL_TRACES_Init+0x1c>)
 80082ac:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80082ae:	f001 ff5f 	bl	800a170 <HW_IPCC_TRACES_Init>

  return;
 80082b2:	bf00      	nop
}
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200300c0 	.word	0x200300c0
 80082bc:	20030000 	.word	0x20030000

080082c0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80082c6:	e008      	b.n	80082da <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80082c8:	1d3b      	adds	r3, r7, #4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4808      	ldr	r0, [pc, #32]	@ (80082f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80082ce:	f000 f9ee 	bl	80086ae <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f80d 	bl	80082f4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80082da:	4805      	ldr	r0, [pc, #20]	@ (80082f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80082dc:	f000 f958 	bl	8008590 <LST_is_empty>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f0      	beq.n	80082c8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80082e6:	bf00      	nop
}
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	200300c0 	.word	0x200300c0

080082f4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	2b06      	cmp	r3, #6
 8008318:	d845      	bhi.n	80083a6 <OutputDbgTrace+0x9e>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <OutputDbgTrace+0x18>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	0800833d 	.word	0x0800833d
 8008324:	08008361 	.word	0x08008361
 8008328:	08008367 	.word	0x08008367
 800832c:	0800837b 	.word	0x0800837b
 8008330:	08008387 	.word	0x08008387
 8008334:	0800838d 	.word	0x0800838d
 8008338:	0800839b 	.word	0x0800839b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	7a5b      	ldrb	r3, [r3, #9]
 8008344:	2bff      	cmp	r3, #255	@ 0xff
 8008346:	d005      	beq.n	8008354 <OutputDbgTrace+0x4c>
 8008348:	2bff      	cmp	r3, #255	@ 0xff
 800834a:	dc05      	bgt.n	8008358 <OutputDbgTrace+0x50>
 800834c:	2b0e      	cmp	r3, #14
 800834e:	d005      	beq.n	800835c <OutputDbgTrace+0x54>
 8008350:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008352:	e001      	b.n	8008358 <OutputDbgTrace+0x50>
          break;
 8008354:	bf00      	nop
 8008356:	e027      	b.n	80083a8 <OutputDbgTrace+0xa0>
          break;
 8008358:	bf00      	nop
 800835a:	e025      	b.n	80083a8 <OutputDbgTrace+0xa0>
          break;
 800835c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800835e:	e023      	b.n	80083a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008364:	e020      	b.n	80083a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	7a5b      	ldrb	r3, [r3, #9]
 800836e:	2b0e      	cmp	r3, #14
 8008370:	d001      	beq.n	8008376 <OutputDbgTrace+0x6e>
 8008372:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008374:	e000      	b.n	8008378 <OutputDbgTrace+0x70>
          break;
 8008376:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008378:	e016      	b.n	80083a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	7a5b      	ldrb	r3, [r3, #9]
 8008382:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008384:	e010      	b.n	80083a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800838a:	e00d      	b.n	80083a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8008396:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008398:	e006      	b.n	80083a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	7a5b      	ldrb	r3, [r3, #9]
 80083a2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083a4:	e000      	b.n	80083a8 <OutputDbgTrace+0xa0>

    default:
      break;
 80083a6:	bf00      	nop
  }

  return;
 80083a8:	bf00      	nop
}
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083ba:	f3ef 8310 	mrs	r3, PRIMASK
 80083be:	60fb      	str	r3, [r7, #12]
  return(result);
 80083c0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80083c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083c4:	b672      	cpsid	i
}
 80083c6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80083c8:	1cbb      	adds	r3, r7, #2
 80083ca:	4619      	mov	r1, r3
 80083cc:	4812      	ldr	r0, [pc, #72]	@ (8008418 <DbgTrace_TxCpltCallback+0x64>)
 80083ce:	f000 fbe5 	bl	8008b9c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80083d2:	1cbb      	adds	r3, r7, #2
 80083d4:	4619      	mov	r1, r3
 80083d6:	4810      	ldr	r0, [pc, #64]	@ (8008418 <DbgTrace_TxCpltCallback+0x64>)
 80083d8:	f000 fccf 	bl	8008d7a <CircularQueue_Sense>
 80083dc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00c      	beq.n	80083fe <DbgTrace_TxCpltCallback+0x4a>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f383 8810 	msr	PRIMASK, r3
}
 80083ee:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80083f0:	887b      	ldrh	r3, [r7, #2]
 80083f2:	4a0a      	ldr	r2, [pc, #40]	@ (800841c <DbgTrace_TxCpltCallback+0x68>)
 80083f4:	4619      	mov	r1, r3
 80083f6:	6938      	ldr	r0, [r7, #16]
 80083f8:	f7f8 fc9f 	bl	8000d3a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80083fc:	e008      	b.n	8008410 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80083fe:	4b08      	ldr	r3, [pc, #32]	@ (8008420 <DbgTrace_TxCpltCallback+0x6c>)
 8008400:	2201      	movs	r2, #1
 8008402:	701a      	strb	r2, [r3, #0]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f383 8810 	msr	PRIMASK, r3
}
 800840e:	bf00      	nop
}
 8008410:	bf00      	nop
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	200003c4 	.word	0x200003c4
 800841c:	080083b5 	.word	0x080083b5
 8008420:	20000011 	.word	0x20000011

08008424 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800842a:	f7f8 fc80 	bl	8000d2e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800842e:	2302      	movs	r3, #2
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008438:	4903      	ldr	r1, [pc, #12]	@ (8008448 <DbgTraceInit+0x24>)
 800843a:	4804      	ldr	r0, [pc, #16]	@ (800844c <DbgTraceInit+0x28>)
 800843c:	f000 f956 	bl	80086ec <CircularQueue_Init>
#endif 
#endif
  return;
 8008440:	bf00      	nop
}
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200003e4 	.word	0x200003e4
 800844c:	200003c4 	.word	0x200003c4

08008450 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f805 	bl	8008470 <DbgTraceWrite>
 8008466:	4603      	mov	r3, r0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008480:	f3ef 8310 	mrs	r3, PRIMASK
 8008484:	61bb      	str	r3, [r7, #24]
  return(result);
 8008486:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008488:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008490:	d102      	bne.n	8008498 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008492:	2300      	movs	r3, #0
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
 8008496:	e037      	b.n	8008508 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d006      	beq.n	80084ac <DbgTraceWrite+0x3c>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d003      	beq.n	80084ac <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80084a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084aa:	e02d      	b.n	8008508 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d02a      	beq.n	8008508 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80084b6:	b672      	cpsid	i
}
 80084b8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	2301      	movs	r3, #1
 80084c0:	68b9      	ldr	r1, [r7, #8]
 80084c2:	4814      	ldr	r0, [pc, #80]	@ (8008514 <DbgTraceWrite+0xa4>)
 80084c4:	f000 f944 	bl	8008750 <CircularQueue_Add>
 80084c8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d015      	beq.n	80084fc <DbgTraceWrite+0x8c>
 80084d0:	4b11      	ldr	r3, [pc, #68]	@ (8008518 <DbgTraceWrite+0xa8>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d010      	beq.n	80084fc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80084da:	4b0f      	ldr	r3, [pc, #60]	@ (8008518 <DbgTraceWrite+0xa8>)
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f383 8810 	msr	PRIMASK, r3
}
 80084ea:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	4a0a      	ldr	r2, [pc, #40]	@ (800851c <DbgTraceWrite+0xac>)
 80084f2:	4619      	mov	r1, r3
 80084f4:	69f8      	ldr	r0, [r7, #28]
 80084f6:	f7f8 fc20 	bl	8000d3a <DbgOutputTraces>
 80084fa:	e005      	b.n	8008508 <DbgTraceWrite+0x98>
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f383 8810 	msr	PRIMASK, r3
}
 8008506:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	@ 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200003c4 	.word	0x200003c4
 8008518:	20000011 	.word	0x20000011
 800851c:	080083b5 	.word	0x080083b5

08008520 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800852a:	4b0f      	ldr	r3, [pc, #60]	@ (8008568 <OTP_Read+0x48>)
 800852c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800852e:	e002      	b.n	8008536 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3b08      	subs	r3, #8
 8008534:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3307      	adds	r3, #7
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	79fa      	ldrb	r2, [r7, #7]
 800853e:	429a      	cmp	r2, r3
 8008540:	d003      	beq.n	800854a <OTP_Read+0x2a>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4a09      	ldr	r2, [pc, #36]	@ (800856c <OTP_Read+0x4c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d1f2      	bne.n	8008530 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3307      	adds	r3, #7
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	429a      	cmp	r2, r3
 8008554:	d001      	beq.n	800855a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800855a:	68fb      	ldr	r3, [r7, #12]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	1fff73f8 	.word	0x1fff73f8
 800856c:	1fff7000 	.word	0x1fff7000

08008570 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	605a      	str	r2, [r3, #4]
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008598:	f3ef 8310 	mrs	r3, PRIMASK
 800859c:	60fb      	str	r3, [r7, #12]
  return(result);
 800859e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80085a2:	b672      	cpsid	i
}
 80085a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d102      	bne.n	80085b6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
 80085b4:	e001      	b.n	80085ba <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f383 8810 	msr	PRIMASK, r3
}
 80085c4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085de:	f3ef 8310 	mrs	r3, PRIMASK
 80085e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80085e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085e8:	b672      	cpsid	i
}
 80085ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	605a      	str	r2, [r3, #4]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f383 8810 	msr	PRIMASK, r3
}
 8008612:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800862a:	f3ef 8310 	mrs	r3, PRIMASK
 800862e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008630:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008634:	b672      	cpsid	i
}
 8008636:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f383 8810 	msr	PRIMASK, r3
}
 800865e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008674:	f3ef 8310 	mrs	r3, PRIMASK
 8008678:	60fb      	str	r3, [r7, #12]
  return(result);
 800867a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800867c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800867e:	b672      	cpsid	i
}
 8008680:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6852      	ldr	r2, [r2, #4]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f383 8810 	msr	PRIMASK, r3
}
 80086a0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b8:	f3ef 8310 	mrs	r3, PRIMASK
 80086bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80086be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086c2:	b672      	cpsid	i
}
 80086c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff ffca 	bl	800866c <LST_remove_node>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f383 8810 	msr	PRIMASK, r3
}
 80086e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086e4:	bf00      	nop
 80086e6:	3718      	adds	r7, #24
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	887a      	ldrh	r2, [r7, #2]
 8008722:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	7e3a      	ldrb	r2, [r7, #24]
 8008728:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800872a:	7e3b      	ldrb	r3, [r7, #24]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d006      	beq.n	8008742 <CircularQueue_Init+0x56>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	891b      	ldrh	r3, [r3, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008740:	e000      	b.n	8008744 <CircularQueue_Init+0x58>
  }
  return 0;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	@ 0x38
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8008760:	2300      	movs	r3, #0
 8008762:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8008764:	2300      	movs	r3, #0
 8008766:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8008768:	2300      	movs	r3, #0
 800876a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800876c:	2300      	movs	r3, #0
 800876e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008770:	2300      	movs	r3, #0
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8008774:	2300      	movs	r3, #0
 8008776:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8008778:	2300      	movs	r3, #0
 800877a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	891b      	ldrh	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <CircularQueue_Add+0x38>
 8008784:	2302      	movs	r3, #2
 8008786:	e000      	b.n	800878a <CircularQueue_Add+0x3a>
 8008788:	2300      	movs	r3, #0
 800878a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d029      	beq.n	80087e8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	891b      	ldrh	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d122      	bne.n	80087e2 <CircularQueue_Add+0x92>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	4413      	add	r3, r2
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	1c59      	adds	r1, r3, #1
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4299      	cmp	r1, r3
 80087ba:	d306      	bcc.n	80087ca <CircularQueue_Add+0x7a>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6919      	ldr	r1, [r3, #16]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	1acb      	subs	r3, r1, r3
 80087c6:	3301      	adds	r3, #1
 80087c8:	e002      	b.n	80087d0 <CircularQueue_Add+0x80>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	3301      	adds	r3, #1
 80087d0:	4413      	add	r3, r2
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	4403      	add	r3, r0
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3302      	adds	r3, #2
 80087de:	b29b      	uxth	r3, r3
 80087e0:	e001      	b.n	80087e6 <CircularQueue_Add+0x96>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	891b      	ldrh	r3, [r3, #8]
 80087e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	891b      	ldrh	r3, [r3, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	891b      	ldrh	r3, [r3, #8]
 80087f4:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d307      	bcc.n	8008812 <CircularQueue_Add+0xc2>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6919      	ldr	r1, [r3, #16]
 800880a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800880c:	440b      	add	r3, r1
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	e000      	b.n	8008814 <CircularQueue_Add+0xc4>
 8008812:	2300      	movs	r3, #0
 8008814:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8008816:	88fa      	ldrh	r2, [r7, #6]
 8008818:	7ffb      	ldrb	r3, [r7, #31]
 800881a:	4413      	add	r3, r2
 800881c:	461a      	mov	r2, r3
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	fb02 f303 	mul.w	r3, r2, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	429a      	cmp	r2, r3
 8008828:	d80b      	bhi.n	8008842 <CircularQueue_Add+0xf2>
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	7ffb      	ldrb	r3, [r7, #31]
 800882e:	4413      	add	r3, r2
 8008830:	461a      	mov	r2, r3
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	fbb3 f1f2 	udiv	r1, r3, r2
 8008838:	fb01 f202 	mul.w	r2, r1, r2
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	b2db      	uxtb	r3, r3
 8008840:	e000      	b.n	8008844 <CircularQueue_Add+0xf4>
 8008842:	2300      	movs	r3, #0
 8008844:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8008846:	7dfa      	ldrb	r2, [r7, #23]
 8008848:	7ffb      	ldrb	r3, [r7, #31]
 800884a:	429a      	cmp	r2, r3
 800884c:	bf8c      	ite	hi
 800884e:	2301      	movhi	r3, #1
 8008850:	2300      	movls	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8008856:	7fbb      	ldrb	r3, [r7, #30]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <CircularQueue_Add+0x11e>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7f1b      	ldrb	r3, [r3, #28]
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <CircularQueue_Add+0x11e>
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	b29b      	uxth	r3, r3
 800886c:	e000      	b.n	8008870 <CircularQueue_Add+0x120>
 800886e:	8bbb      	ldrh	r3, [r7, #28]
 8008870:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8008872:	7fbb      	ldrb	r3, [r7, #30]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <CircularQueue_Add+0x13a>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	7f1b      	ldrb	r3, [r3, #28]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <CircularQueue_Add+0x13a>
 8008884:	7ffb      	ldrb	r3, [r7, #31]
 8008886:	b29b      	uxth	r3, r3
 8008888:	e000      	b.n	800888c <CircularQueue_Add+0x13c>
 800888a:	8bbb      	ldrh	r3, [r7, #28]
 800888c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 817e 	beq.w	8008b92 <CircularQueue_Add+0x442>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	88f9      	ldrh	r1, [r7, #6]
 800889c:	7ffb      	ldrb	r3, [r7, #31]
 800889e:	440b      	add	r3, r1
 80088a0:	4619      	mov	r1, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	441a      	add	r2, r3
 80088aa:	8bbb      	ldrh	r3, [r7, #28]
 80088ac:	441a      	add	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	f200 816d 	bhi.w	8008b92 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80088b8:	2300      	movs	r3, #0
 80088ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088bc:	e14a      	b.n	8008b54 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691a      	ldr	r2, [r3, #16]
 80088c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088c4:	441a      	add	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d307      	bcc.n	80088de <CircularQueue_Add+0x18e>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	e003      	b.n	80088e6 <CircularQueue_Add+0x196>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088e4:	4413      	add	r3, r2
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	891b      	ldrh	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d130      	bne.n	800895a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	1c59      	adds	r1, r3, #1
 8008900:	6339      	str	r1, [r7, #48]	@ 0x30
 8008902:	4413      	add	r3, r2
 8008904:	88fa      	ldrh	r2, [r7, #6]
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008910:	429a      	cmp	r2, r3
 8008912:	d304      	bcc.n	800891e <CircularQueue_Add+0x1ce>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	e000      	b.n	8008920 <CircularQueue_Add+0x1d0>
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	0a1b      	lsrs	r3, r3, #8
 8008926:	b298      	uxth	r0, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	6339      	str	r1, [r7, #48]	@ 0x30
 8008932:	4413      	add	r3, r2
 8008934:	b2c2      	uxtb	r2, r0
 8008936:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800893e:	429a      	cmp	r2, r3
 8008940:	d304      	bcc.n	800894c <CircularQueue_Add+0x1fc>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	e000      	b.n	800894e <CircularQueue_Add+0x1fe>
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	1c9a      	adds	r2, r3, #2
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6859      	ldr	r1, [r3, #4]
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	1acb      	subs	r3, r1, r3
 8008964:	4293      	cmp	r3, r2
 8008966:	bf28      	it	cs
 8008968:	4613      	movcs	r3, r2
 800896a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008970:	429a      	cmp	r2, r3
 8008972:	d007      	beq.n	8008984 <CircularQueue_Add+0x234>
 8008974:	88fb      	ldrh	r3, [r7, #6]
 8008976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008978:	429a      	cmp	r2, r3
 800897a:	d225      	bcs.n	80089c8 <CircularQueue_Add+0x278>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	7f1b      	ldrb	r3, [r3, #28]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d121      	bne.n	80089c8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	18d0      	adds	r0, r2, r3
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008990:	fb02 f303 	mul.w	r3, r2, r3
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	4413      	add	r3, r2
 8008998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800899a:	4619      	mov	r1, r3
 800899c:	f002 f8e7 	bl	800ab6e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	695a      	ldr	r2, [r3, #20]
 80089a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80089ac:	2300      	movs	r3, #0
 80089ae:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80089b4:	88fa      	ldrh	r2, [r7, #6]
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	4413      	add	r3, r2
 80089c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80089c6:	e0a4      	b.n	8008b12 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80a1 	beq.w	8008b12 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	7f1b      	ldrb	r3, [r3, #28]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d03a      	beq.n	8008a52 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	891b      	ldrh	r3, [r3, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10d      	bne.n	8008a00 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	3b02      	subs	r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	22ff      	movs	r2, #255	@ 0xff
 80089f0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	3b01      	subs	r3, #1
 80089fa:	4413      	add	r3, r2
 80089fc:	22ff      	movs	r2, #255	@ 0xff
 80089fe:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	695a      	ldr	r2, [r3, #20]
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	441a      	add	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8008a14:	2300      	movs	r3, #0
 8008a16:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	891b      	ldrh	r3, [r3, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d16f      	bne.n	8008b00 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	1c59      	adds	r1, r3, #1
 8008a28:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a2a:	4413      	add	r3, r2
 8008a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a34:	0a18      	lsrs	r0, r3, #8
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	1c59      	adds	r1, r3, #1
 8008a3e:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a40:	4413      	add	r3, r2
 8008a42:	b2c2      	uxtb	r2, r0
 8008a44:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	1c9a      	adds	r2, r3, #2
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	615a      	str	r2, [r3, #20]
 8008a50:	e056      	b.n	8008b00 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	7f1b      	ldrb	r3, [r3, #28]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d050      	beq.n	8008b00 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	891b      	ldrh	r3, [r3, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d14a      	bne.n	8008afc <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	3b02      	subs	r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	0a19      	lsrs	r1, r3, #8
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	3b01      	subs	r3, #1
 8008a82:	4413      	add	r3, r2
 8008a84:	b2ca      	uxtb	r2, r1
 8008a86:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	18d0      	adds	r0, r2, r3
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f002 f865 	bl	800ab6e <memcpy>
             q->byteCount += NbBytesToCopy; 
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	695a      	ldr	r2, [r3, #20]
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	441a      	add	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	1c59      	adds	r1, r3, #1
 8008ad2:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ad4:	4413      	add	r3, r2
 8008ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ad8:	b2d2      	uxtb	r2, r2
 8008ada:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ade:	0a18      	lsrs	r0, r3, #8
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	1c59      	adds	r1, r3, #1
 8008ae8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008aea:	4413      	add	r3, r2
 8008aec:	b2c2      	uxtb	r2, r0
 8008aee:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	1c9a      	adds	r2, r3, #2
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	615a      	str	r2, [r3, #20]
 8008afa:	e001      	b.n	8008b00 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e049      	b.n	8008b94 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8008b00:	7ffb      	ldrb	r3, [r7, #31]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	4413      	add	r3, r2
 8008b0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8008b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d015      	beq.n	8008b44 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	18d0      	adds	r0, r2, r3
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b24:	fb03 f202 	mul.w	r2, r3, r2
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	4413      	add	r3, r2
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	4413      	add	r3, r2
 8008b30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b32:	4619      	mov	r1, r3
 8008b34:	f002 f81b 	bl	800ab6e <memcpy>
        q->byteCount += NbBytesToCopy;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	695a      	ldr	r2, [r3, #20]
 8008b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8008b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b50:	3301      	adds	r3, #1
 8008b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	f4ff aeb0 	bcc.w	80088be <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6919      	ldr	r1, [r3, #16]
 8008b66:	7ffb      	ldrb	r3, [r7, #31]
 8008b68:	4419      	add	r1, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	d307      	bcc.n	8008b82 <CircularQueue_Add+0x432>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	7ffb      	ldrb	r3, [r7, #31]
 8008b78:	4419      	add	r1, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	1acb      	subs	r3, r1, r3
 8008b80:	e003      	b.n	8008b8a <CircularQueue_Add+0x43a>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6919      	ldr	r1, [r3, #16]
 8008b86:	7ffb      	ldrb	r3, [r7, #31]
 8008b88:	440b      	add	r3, r1
 8008b8a:	4413      	add	r3, r2
 8008b8c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	e000      	b.n	8008b94 <CircularQueue_Add+0x444>
    return NULL;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3738      	adds	r7, #56	@ 0x38
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	891b      	ldrh	r3, [r3, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <CircularQueue_Remove+0x1e>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e000      	b.n	8008bbc <CircularQueue_Remove+0x20>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80ca 	beq.w	8008d60 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	891b      	ldrh	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d120      	bne.n	8008c16 <CircularQueue_Remove+0x7a>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4413      	add	r3, r2
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	1c59      	adds	r1, r3, #1
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	d306      	bcc.n	8008c02 <CircularQueue_Remove+0x66>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68d9      	ldr	r1, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	1acb      	subs	r3, r1, r3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	e002      	b.n	8008c08 <CircularQueue_Remove+0x6c>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	4413      	add	r3, r2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	4403      	add	r3, r0
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	e001      	b.n	8008c1a <CircularQueue_Remove+0x7e>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	891b      	ldrh	r3, [r3, #8]
 8008c1a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7f1b      	ldrb	r3, [r3, #28]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d056      	beq.n	8008cd6 <CircularQueue_Remove+0x13a>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	7f1b      	ldrb	r3, [r3, #28]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d150      	bne.n	8008cd6 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008c34:	897b      	ldrh	r3, [r7, #10]
 8008c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d103      	bne.n	8008c46 <CircularQueue_Remove+0xaa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	891b      	ldrh	r3, [r3, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d941      	bls.n	8008cd6 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	891b      	ldrh	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d03d      	beq.n	8008cd6 <CircularQueue_Remove+0x13a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	8912      	ldrh	r2, [r2, #8]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d234      	bcs.n	8008cd6 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68d9      	ldr	r1, [r3, #12]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	1acb      	subs	r3, r1, r3
 8008c7a:	441a      	add	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	891b      	ldrh	r3, [r3, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d120      	bne.n	8008cd0 <CircularQueue_Remove+0x134>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	1c59      	adds	r1, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	4299      	cmp	r1, r3
 8008cac:	d306      	bcc.n	8008cbc <CircularQueue_Remove+0x120>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68d9      	ldr	r1, [r3, #12]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	1acb      	subs	r3, r1, r3
 8008cb8:	3301      	adds	r3, #1
 8008cba:	e002      	b.n	8008cc2 <CircularQueue_Remove+0x126>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	4413      	add	r3, r2
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	021b      	lsls	r3, r3, #8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	4403      	add	r3, r0
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	e001      	b.n	8008cd4 <CircularQueue_Remove+0x138>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	891b      	ldrh	r3, [r3, #8]
 8008cd4:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68d9      	ldr	r1, [r3, #12]
 8008cde:	7a7b      	ldrb	r3, [r7, #9]
 8008ce0:	4419      	add	r1, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	d307      	bcc.n	8008cfa <CircularQueue_Remove+0x15e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68d9      	ldr	r1, [r3, #12]
 8008cee:	7a7b      	ldrb	r3, [r7, #9]
 8008cf0:	4419      	add	r1, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	1acb      	subs	r3, r1, r3
 8008cf8:	e003      	b.n	8008d02 <CircularQueue_Remove+0x166>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68d9      	ldr	r1, [r3, #12]
 8008cfe:	7a7b      	ldrb	r3, [r7, #9]
 8008d00:	440b      	add	r3, r1
 8008d02:	4413      	add	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	8979      	ldrh	r1, [r7, #10]
 8008d0c:	7a7a      	ldrb	r2, [r7, #9]
 8008d0e:	440a      	add	r2, r1
 8008d10:	1a9a      	subs	r2, r3, r2
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01b      	beq.n	8008d56 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	897b      	ldrh	r3, [r7, #10]
 8008d24:	441a      	add	r2, r3
 8008d26:	7a7b      	ldrb	r3, [r7, #9]
 8008d28:	441a      	add	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d309      	bcc.n	8008d46 <CircularQueue_Remove+0x1aa>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	897b      	ldrh	r3, [r7, #10]
 8008d38:	441a      	add	r2, r3
 8008d3a:	7a7b      	ldrb	r3, [r7, #9]
 8008d3c:	441a      	add	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	e005      	b.n	8008d52 <CircularQueue_Remove+0x1b6>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	897b      	ldrh	r3, [r7, #10]
 8008d4c:	441a      	add	r2, r3
 8008d4e:	7a7b      	ldrb	r3, [r7, #9]
 8008d50:	4413      	add	r3, r2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	1e5a      	subs	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	897a      	ldrh	r2, [r7, #10]
 8008d6a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b087      	sub	sp, #28
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	891b      	ldrh	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <CircularQueue_Sense+0x1e>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e000      	b.n	8008d9a <CircularQueue_Sense+0x20>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 808e 	beq.w	8008eca <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	891b      	ldrh	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d120      	bne.n	8008dfe <CircularQueue_Sense+0x84>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	1c59      	adds	r1, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	4299      	cmp	r1, r3
 8008dda:	d306      	bcc.n	8008dea <CircularQueue_Sense+0x70>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68d9      	ldr	r1, [r3, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	1acb      	subs	r3, r1, r3
 8008de6:	3301      	adds	r3, #1
 8008de8:	e002      	b.n	8008df0 <CircularQueue_Sense+0x76>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	3301      	adds	r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4403      	add	r3, r0
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	e001      	b.n	8008e02 <CircularQueue_Sense+0x88>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	891b      	ldrh	r3, [r3, #8]
 8008e02:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7f1b      	ldrb	r3, [r3, #28]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d047      	beq.n	8008ea0 <CircularQueue_Sense+0x126>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	7f1b      	ldrb	r3, [r3, #28]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d141      	bne.n	8008ea0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008e1c:	8a7b      	ldrh	r3, [r7, #18]
 8008e1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d103      	bne.n	8008e2e <CircularQueue_Sense+0xb4>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	891b      	ldrh	r3, [r3, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d012      	beq.n	8008e54 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d932      	bls.n	8008ea0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	891b      	ldrh	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d02e      	beq.n	8008ea0 <CircularQueue_Sense+0x126>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	8912      	ldrh	r2, [r2, #8]
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d225      	bcs.n	8008ea0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	891b      	ldrh	r3, [r3, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d11c      	bne.n	8008e9a <CircularQueue_Sense+0x120>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	1c59      	adds	r1, r3, #1
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d305      	bcc.n	8008e88 <CircularQueue_Sense+0x10e>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	68f9      	ldr	r1, [r7, #12]
 8008e82:	1acb      	subs	r3, r1, r3
 8008e84:	3301      	adds	r3, #1
 8008e86:	e001      	b.n	8008e8c <CircularQueue_Sense+0x112>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4403      	add	r3, r0
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	e001      	b.n	8008e9e <CircularQueue_Sense+0x124>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	891b      	ldrh	r3, [r3, #8]
 8008e9e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	7af9      	ldrb	r1, [r7, #11]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4419      	add	r1, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	4299      	cmp	r1, r3
 8008eb0:	d306      	bcc.n	8008ec0 <CircularQueue_Sense+0x146>
 8008eb2:	7af9      	ldrb	r1, [r7, #11]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4419      	add	r1, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	1acb      	subs	r3, r1, r3
 8008ebe:	e002      	b.n	8008ec6 <CircularQueue_Sense+0x14c>
 8008ec0:	7af9      	ldrb	r1, [r7, #11]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	440b      	add	r3, r1
 8008ec6:	4413      	add	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	8a7a      	ldrh	r2, [r7, #18]
 8008ed4:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8008ed6:	697b      	ldr	r3, [r7, #20]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008ee8:	4b03      	ldr	r3, [pc, #12]	@ (8008ef8 <LL_FLASH_GetUDN+0x14>)
 8008eea:	681b      	ldr	r3, [r3, #0]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	1fff7580 	.word	0x1fff7580

08008efc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008f00:	4b03      	ldr	r3, [pc, #12]	@ (8008f10 <LL_FLASH_GetDeviceID+0x14>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	b2db      	uxtb	r3, r3
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	1fff7584 	.word	0x1fff7584

08008f14 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008f18:	4b03      	ldr	r3, [pc, #12]	@ (8008f28 <LL_FLASH_GetSTCompanyID+0x14>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	1fff7584 	.word	0x1fff7584

08008f2c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b090      	sub	sp, #64	@ 0x40
 8008f30:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008f32:	2392      	movs	r3, #146	@ 0x92
 8008f34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008f38:	4b31      	ldr	r3, [pc, #196]	@ (8009000 <APP_BLE_Init+0xd4>)
 8008f3a:	1d3c      	adds	r4, r7, #4
 8008f3c:	461d      	mov	r5, r3
 8008f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f4e:	c403      	stmia	r4!, {r0, r1}
 8008f50:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008f52:	f000 fa67 	bl	8009424 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008f56:	2101      	movs	r1, #1
 8008f58:	2002      	movs	r0, #2
 8008f5a:	f001 f931 	bl	800a1c0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008f5e:	4a29      	ldr	r2, [pc, #164]	@ (8009004 <APP_BLE_Init+0xd8>)
 8008f60:	2100      	movs	r1, #0
 8008f62:	2002      	movs	r0, #2
 8008f64:	f001 fa58 	bl	800a418 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008f68:	1d3b      	adds	r3, r7, #4
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fc14 	bl	8007798 <SHCI_C2_BLE_Init>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008f76:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8008f7e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008f82:	4619      	mov	r1, r3
 8008f84:	4820      	ldr	r0, [pc, #128]	@ (8009008 <APP_BLE_Init+0xdc>)
 8008f86:	f001 fc27 	bl	800a7d8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008f8a:	f7f8 fced 	bl	8001968 <Error_Handler>
 8008f8e:	e002      	b.n	8008f96 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8008f90:	481e      	ldr	r0, [pc, #120]	@ (800900c <APP_BLE_Init+0xe0>)
 8008f92:	f001 fc21 	bl	800a7d8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008f96:	f000 fa5b 	bl	8009450 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008f9a:	f7fe fb57 	bl	800764c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8009010 <APP_BLE_Init+0xe4>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8009010 <APP_BLE_Init+0xe4>)
 8008fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fac:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008fae:	4a19      	ldr	r2, [pc, #100]	@ (8009014 <APP_BLE_Init+0xe8>)
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	f001 fa30 	bl	800a418 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008fb8:	2006      	movs	r0, #6
 8008fba:	f7fe f9bb 	bl	8007334 <aci_hal_set_radio_activity_mask>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8008fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <APP_BLE_Init+0xae>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8008fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4811      	ldr	r0, [pc, #68]	@ (8009018 <APP_BLE_Init+0xec>)
 8008fd4:	f001 fc00 	bl	800a7d8 <iprintf>
 8008fd8:	e002      	b.n	8008fe0 <APP_BLE_Init+0xb4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8008fda:	4810      	ldr	r0, [pc, #64]	@ (800901c <APP_BLE_Init+0xf0>)
 8008fdc:	f001 fbfc 	bl	800a7d8 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008fe0:	f000 fd05 	bl	80099ee <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8009010 <APP_BLE_Init+0xe4>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008fea:	4b09      	ldr	r3, [pc, #36]	@ (8009010 <APP_BLE_Init+0xe4>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	f000 fbbb 	bl	800976c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008ff6:	bf00      	nop
}
 8008ff8:	3740      	adds	r7, #64	@ 0x40
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffe:	bf00      	nop
 8009000:	0800ba80 	.word	0x0800ba80
 8009004:	080079b5 	.word	0x080079b5
 8009008:	0800b9a4 	.word	0x0800b9a4
 800900c:	0800b9dc 	.word	0x0800b9dc
 8009010:	200013ec 	.word	0x200013ec
 8009014:	08009895 	.word	0x08009895
 8009018:	0800ba04 	.word	0x0800ba04
 800901c:	0800ba48 	.word	0x0800ba48

08009020 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009020:	b5b0      	push	{r4, r5, r7, lr}
 8009022:	b090      	sub	sp, #64	@ 0x40
 8009024:	af04      	add	r7, sp, #16
 8009026:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009028:	2392      	movs	r3, #146	@ 0x92
 800902a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3301      	adds	r3, #1
 8009032:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8009034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2bff      	cmp	r3, #255	@ 0xff
 800903a:	f000 80e9 	beq.w	8009210 <SVCCTL_App_Notification+0x1f0>
 800903e:	2bff      	cmp	r3, #255	@ 0xff
 8009040:	f300 81d9 	bgt.w	80093f6 <SVCCTL_App_Notification+0x3d6>
 8009044:	2b3e      	cmp	r3, #62	@ 0x3e
 8009046:	d042      	beq.n	80090ce <SVCCTL_App_Notification+0xae>
 8009048:	2b3e      	cmp	r3, #62	@ 0x3e
 800904a:	f300 81d4 	bgt.w	80093f6 <SVCCTL_App_Notification+0x3d6>
 800904e:	2b05      	cmp	r3, #5
 8009050:	d002      	beq.n	8009058 <SVCCTL_App_Notification+0x38>
 8009052:	2b10      	cmp	r3, #16
 8009054:	d02e      	beq.n	80090b4 <SVCCTL_App_Notification+0x94>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009056:	e1ce      	b.n	80093f6 <SVCCTL_App_Notification+0x3d6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905a:	3302      	adds	r3, #2
 800905c:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009064:	b29a      	uxth	r2, r3
 8009066:	4bb3      	ldr	r3, [pc, #716]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 8009068:	8adb      	ldrh	r3, [r3, #22]
 800906a:	429a      	cmp	r2, r3
 800906c:	d114      	bne.n	8009098 <SVCCTL_App_Notification+0x78>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800906e:	4bb1      	ldr	r3, [pc, #708]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 8009070:	2200      	movs	r2, #0
 8009072:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009074:	4baf      	ldr	r3, [pc, #700]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800907c:	48ae      	ldr	r0, [pc, #696]	@ (8009338 <SVCCTL_App_Notification+0x318>)
 800907e:	f001 fc1b 	bl	800a8b8 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009088:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800908a:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8009090:	461a      	mov	r2, r3
 8009092:	48aa      	ldr	r0, [pc, #680]	@ (800933c <SVCCTL_App_Notification+0x31c>)
 8009094:	f001 fba0 	bl	800a7d8 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8009098:	2001      	movs	r0, #1
 800909a:	f000 fb67 	bl	800976c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800909e:	4ba8      	ldr	r3, [pc, #672]	@ (8009340 <SVCCTL_App_Notification+0x320>)
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80090a4:	4ba3      	ldr	r3, [pc, #652]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80090a6:	8ada      	ldrh	r2, [r3, #22]
 80090a8:	4ba5      	ldr	r3, [pc, #660]	@ (8009340 <SVCCTL_App_Notification+0x320>)
 80090aa:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80090ac:	48a4      	ldr	r0, [pc, #656]	@ (8009340 <SVCCTL_App_Notification+0x320>)
 80090ae:	f000 fc8a 	bl	80099c6 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80090b2:	e1a3      	b.n	80093fc <SVCCTL_App_Notification+0x3dc>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	3302      	adds	r3, #2
 80090b8:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 80090ba:	48a2      	ldr	r0, [pc, #648]	@ (8009344 <SVCCTL_App_Notification+0x324>)
 80090bc:	f001 fbfc 	bl	800a8b8 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	4619      	mov	r1, r3
 80090c6:	48a0      	ldr	r0, [pc, #640]	@ (8009348 <SVCCTL_App_Notification+0x328>)
 80090c8:	f001 fb86 	bl	800a7d8 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 80090cc:	e196      	b.n	80093fc <SVCCTL_App_Notification+0x3dc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80090ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d0:	3302      	adds	r3, #2
 80090d2:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d02e      	beq.n	800913a <SVCCTL_App_Notification+0x11a>
 80090dc:	2b03      	cmp	r3, #3
 80090de:	f040 8095 	bne.w	800920c <SVCCTL_App_Notification+0x1ec>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	3301      	adds	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80090e8:	4898      	ldr	r0, [pc, #608]	@ (800934c <SVCCTL_App_Notification+0x32c>)
 80090ea:	f001 fbe5 	bl	800a8b8 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80090f4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f7 fb16 	bl	8000728 <__aeabi_i2d>
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	4b93      	ldr	r3, [pc, #588]	@ (8009350 <SVCCTL_App_Notification+0x330>)
 8009102:	f7f7 f895 	bl	8000230 <__aeabi_dmul>
 8009106:	4602      	mov	r2, r0
 8009108:	460b      	mov	r3, r1
 800910a:	4610      	mov	r0, r2
 800910c:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009114:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009116:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800911e:	b29b      	uxth	r3, r3
 8009120:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	9400      	str	r4, [sp, #0]
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4888      	ldr	r0, [pc, #544]	@ (8009354 <SVCCTL_App_Notification+0x334>)
 8009134:	f001 fb50 	bl	800a7d8 <iprintf>
          break;
 8009138:	e069      	b.n	800920e <SVCCTL_App_Notification+0x1ee>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	3301      	adds	r3, #1
 800913e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009146:	b29b      	uxth	r3, r3
 8009148:	4619      	mov	r1, r3
 800914a:	4883      	ldr	r0, [pc, #524]	@ (8009358 <SVCCTL_App_Notification+0x338>)
 800914c:	f001 fb44 	bl	800a7d8 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009154:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800915a:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009160:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009166:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800916c:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009172:	9302      	str	r3, [sp, #8]
 8009174:	9101      	str	r1, [sp, #4]
 8009176:	9200      	str	r2, [sp, #0]
 8009178:	462b      	mov	r3, r5
 800917a:	4622      	mov	r2, r4
 800917c:	4601      	mov	r1, r0
 800917e:	4877      	ldr	r0, [pc, #476]	@ (800935c <SVCCTL_App_Notification+0x33c>)
 8009180:	f001 fb2a 	bl	800a7d8 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800918a:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800918c:	4618      	mov	r0, r3
 800918e:	f7f7 facb 	bl	8000728 <__aeabi_i2d>
 8009192:	f04f 0200 	mov.w	r2, #0
 8009196:	4b6e      	ldr	r3, [pc, #440]	@ (8009350 <SVCCTL_App_Notification+0x330>)
 8009198:	f7f7 f84a 	bl	8000230 <__aeabi_dmul>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4610      	mov	r0, r2
 80091a2:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80091aa:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80091ac:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	9400      	str	r4, [sp, #0]
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4862      	ldr	r0, [pc, #392]	@ (8009354 <SVCCTL_App_Notification+0x334>)
 80091ca:	f001 fb05 	bl	800a7d8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80091ce:	4b59      	ldr	r3, [pc, #356]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80091d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d104      	bne.n	80091e2 <SVCCTL_App_Notification+0x1c2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80091d8:	4b56      	ldr	r3, [pc, #344]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80091da:	2206      	movs	r2, #6
 80091dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80091e0:	e003      	b.n	80091ea <SVCCTL_App_Notification+0x1ca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80091e2:	4b54      	ldr	r3, [pc, #336]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80091e4:	2205      	movs	r2, #5
 80091e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	4b50      	ldr	r3, [pc, #320]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80091f4:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80091f6:	4b52      	ldr	r3, [pc, #328]	@ (8009340 <SVCCTL_App_Notification+0x320>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80091fc:	4b4d      	ldr	r3, [pc, #308]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80091fe:	8ada      	ldrh	r2, [r3, #22]
 8009200:	4b4f      	ldr	r3, [pc, #316]	@ (8009340 <SVCCTL_App_Notification+0x320>)
 8009202:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009204:	484e      	ldr	r0, [pc, #312]	@ (8009340 <SVCCTL_App_Notification+0x320>)
 8009206:	f000 fbde 	bl	80099c6 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800920a:	e000      	b.n	800920e <SVCCTL_App_Notification+0x1ee>
          break;
 800920c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800920e:	e0f5      	b.n	80093fc <SVCCTL_App_Notification+0x3dc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009212:	3302      	adds	r3, #2
 8009214:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8009220:	4293      	cmp	r3, r2
 8009222:	f000 80ce 	beq.w	80093c2 <SVCCTL_App_Notification+0x3a2>
 8009226:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800922a:	4293      	cmp	r3, r2
 800922c:	f300 80e5 	bgt.w	80093fa <SVCCTL_App_Notification+0x3da>
 8009230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009234:	f000 80db 	beq.w	80093ee <SVCCTL_App_Notification+0x3ce>
 8009238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800923c:	f300 80dd 	bgt.w	80093fa <SVCCTL_App_Notification+0x3da>
 8009240:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009244:	4293      	cmp	r3, r2
 8009246:	f300 80d8 	bgt.w	80093fa <SVCCTL_App_Notification+0x3da>
 800924a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800924e:	dc06      	bgt.n	800925e <SVCCTL_App_Notification+0x23e>
 8009250:	2b04      	cmp	r3, #4
 8009252:	f000 80ce 	beq.w	80093f2 <SVCCTL_App_Notification+0x3d2>
 8009256:	2b06      	cmp	r3, #6
 8009258:	f000 80bc 	beq.w	80093d4 <SVCCTL_App_Notification+0x3b4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800925c:	e0cd      	b.n	80093fa <SVCCTL_App_Notification+0x3da>
 800925e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8009262:	2b09      	cmp	r3, #9
 8009264:	f200 80c9 	bhi.w	80093fa <SVCCTL_App_Notification+0x3da>
 8009268:	a201      	add	r2, pc, #4	@ (adr r2, 8009270 <SVCCTL_App_Notification+0x250>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	0800938d 	.word	0x0800938d
 8009274:	080092a9 	.word	0x080092a9
 8009278:	080093fb 	.word	0x080093fb
 800927c:	080093fb 	.word	0x080093fb
 8009280:	080093fb 	.word	0x080093fb
 8009284:	080093fb 	.word	0x080093fb
 8009288:	08009299 	.word	0x08009299
 800928c:	080093fb 	.word	0x080093fb
 8009290:	080092df 	.word	0x080092df
 8009294:	080092a1 	.word	0x080092a1
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8009298:	4831      	ldr	r0, [pc, #196]	@ (8009360 <SVCCTL_App_Notification+0x340>)
 800929a:	f001 fa9d 	bl	800a7d8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800929e:	e0a9      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80092a0:	4830      	ldr	r0, [pc, #192]	@ (8009364 <SVCCTL_App_Notification+0x344>)
 80092a2:	f001 fb09 	bl	800a8b8 <puts>
          break;
 80092a6:	e0a5      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 80092a8:	482f      	ldr	r0, [pc, #188]	@ (8009368 <SVCCTL_App_Notification+0x348>)
 80092aa:	f001 fb05 	bl	800a8b8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80092ae:	4b21      	ldr	r3, [pc, #132]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 80092b0:	8adb      	ldrh	r3, [r3, #22]
 80092b2:	492e      	ldr	r1, [pc, #184]	@ (800936c <SVCCTL_App_Notification+0x34c>)
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fd fa3f 	bl	8006738 <aci_gap_pass_key_resp>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80092c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d006      	beq.n	80092d6 <SVCCTL_App_Notification+0x2b6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80092c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092cc:	4619      	mov	r1, r3
 80092ce:	4828      	ldr	r0, [pc, #160]	@ (8009370 <SVCCTL_App_Notification+0x350>)
 80092d0:	f001 fa82 	bl	800a7d8 <iprintf>
          break;
 80092d4:	e08e      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80092d6:	4827      	ldr	r0, [pc, #156]	@ (8009374 <SVCCTL_App_Notification+0x354>)
 80092d8:	f001 faee 	bl	800a8b8 <puts>
          break;
 80092dc:	e08a      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80092de:	4826      	ldr	r0, [pc, #152]	@ (8009378 <SVCCTL_App_Notification+0x358>)
 80092e0:	f001 faea 	bl	800a8b8 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 80092e8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80092ec:	4619      	mov	r1, r3
 80092ee:	4823      	ldr	r0, [pc, #140]	@ (800937c <SVCCTL_App_Notification+0x35c>)
 80092f0:	f001 fa72 	bl	800a7d8 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 80092f8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80092fc:	4619      	mov	r1, r3
 80092fe:	4820      	ldr	r0, [pc, #128]	@ (8009380 <SVCCTL_App_Notification+0x360>)
 8009300:	f001 fa6a 	bl	800a7d8 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009304:	4b0b      	ldr	r3, [pc, #44]	@ (8009334 <SVCCTL_App_Notification+0x314>)
 8009306:	8adb      	ldrh	r3, [r3, #22]
 8009308:	2101      	movs	r1, #1
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd fbbe 	bl	8006a8c <aci_gap_numeric_comparison_value_confirm_yesno>
 8009310:	4603      	mov	r3, r0
 8009312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8009316:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800931a:	2b00      	cmp	r3, #0
 800931c:	d006      	beq.n	800932c <SVCCTL_App_Notification+0x30c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800931e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009322:	4619      	mov	r1, r3
 8009324:	4817      	ldr	r0, [pc, #92]	@ (8009384 <SVCCTL_App_Notification+0x364>)
 8009326:	f001 fa57 	bl	800a7d8 <iprintf>
          break;
 800932a:	e063      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800932c:	4816      	ldr	r0, [pc, #88]	@ (8009388 <SVCCTL_App_Notification+0x368>)
 800932e:	f001 fac3 	bl	800a8b8 <puts>
          break;
 8009332:	e05f      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
 8009334:	200013ec 	.word	0x200013ec
 8009338:	0800babc 	.word	0x0800babc
 800933c:	0800bae8 	.word	0x0800bae8
 8009340:	20001470 	.word	0x20001470
 8009344:	0800bb24 	.word	0x0800bb24
 8009348:	0800bb48 	.word	0x0800bb48
 800934c:	0800bb60 	.word	0x0800bb60
 8009350:	3ff40000 	.word	0x3ff40000
 8009354:	0800bb94 	.word	0x0800bb94
 8009358:	0800bc00 	.word	0x0800bc00
 800935c:	0800bc48 	.word	0x0800bc48
 8009360:	0800bc98 	.word	0x0800bc98
 8009364:	0800bcc0 	.word	0x0800bcc0
 8009368:	0800bcf0 	.word	0x0800bcf0
 800936c:	0001b207 	.word	0x0001b207
 8009370:	0800bd18 	.word	0x0800bd18
 8009374:	0800bd4c 	.word	0x0800bd4c
 8009378:	0800bd74 	.word	0x0800bd74
 800937c:	0800bda8 	.word	0x0800bda8
 8009380:	0800bdc4 	.word	0x0800bdc4
 8009384:	0800bddc 	.word	0x0800bddc
 8009388:	0800be2c 	.word	0x0800be2c
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	3302      	adds	r3, #2
 8009390:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8009392:	481d      	ldr	r0, [pc, #116]	@ (8009408 <SVCCTL_App_Notification+0x3e8>)
 8009394:	f001 fa90 	bl	800a8b8 <puts>
          if (p_pairing_complete->Status != 0)
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	789b      	ldrb	r3, [r3, #2]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d009      	beq.n	80093b4 <SVCCTL_App_Notification+0x394>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	789b      	ldrb	r3, [r3, #2]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	78db      	ldrb	r3, [r3, #3]
 80093aa:	461a      	mov	r2, r3
 80093ac:	4817      	ldr	r0, [pc, #92]	@ (800940c <SVCCTL_App_Notification+0x3ec>)
 80093ae:	f001 fa13 	bl	800a7d8 <iprintf>
 80093b2:	e002      	b.n	80093ba <SVCCTL_App_Notification+0x39a>
            APP_DBG_MSG("     - Pairing Success\n");
 80093b4:	4816      	ldr	r0, [pc, #88]	@ (8009410 <SVCCTL_App_Notification+0x3f0>)
 80093b6:	f001 fa7f 	bl	800a8b8 <puts>
          APP_DBG_MSG("\n");
 80093ba:	200a      	movs	r0, #10
 80093bc:	f001 fa1e 	bl	800a7fc <putchar>
          break;
 80093c0:	e018      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 80093c2:	4814      	ldr	r0, [pc, #80]	@ (8009414 <SVCCTL_App_Notification+0x3f4>)
 80093c4:	f001 fa08 	bl	800a7d8 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80093c8:	4b13      	ldr	r3, [pc, #76]	@ (8009418 <SVCCTL_App_Notification+0x3f8>)
 80093ca:	8adb      	ldrh	r3, [r3, #22]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fd fe70 	bl	80070b2 <aci_gatt_confirm_indication>
        break;
 80093d2:	e00f      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	3302      	adds	r3, #2
 80093d8:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 80093da:	4810      	ldr	r0, [pc, #64]	@ (800941c <SVCCTL_App_Notification+0x3fc>)
 80093dc:	f001 fa6c 	bl	800a8b8 <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	4619      	mov	r1, r3
 80093e6:	480e      	ldr	r0, [pc, #56]	@ (8009420 <SVCCTL_App_Notification+0x400>)
 80093e8:	f001 f9f6 	bl	800a7d8 <iprintf>
          break;
 80093ec:	e002      	b.n	80093f4 <SVCCTL_App_Notification+0x3d4>
          break;
 80093ee:	bf00      	nop
 80093f0:	e003      	b.n	80093fa <SVCCTL_App_Notification+0x3da>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80093f2:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093f4:	e001      	b.n	80093fa <SVCCTL_App_Notification+0x3da>
      break;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <SVCCTL_App_Notification+0x3dc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80093fa:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80093fc:	2301      	movs	r3, #1
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3730      	adds	r7, #48	@ 0x30
 8009402:	46bd      	mov	sp, r7
 8009404:	bdb0      	pop	{r4, r5, r7, pc}
 8009406:	bf00      	nop
 8009408:	0800be74 	.word	0x0800be74
 800940c:	0800bea0 	.word	0x0800bea0
 8009410:	0800bedc 	.word	0x0800bedc
 8009414:	0800bef4 	.word	0x0800bef4
 8009418:	200013ec 	.word	0x200013ec
 800941c:	0800bf1c 	.word	0x0800bf1c
 8009420:	0800bf40 	.word	0x0800bf40

08009424 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800942a:	4b06      	ldr	r3, [pc, #24]	@ (8009444 <Ble_Tl_Init+0x20>)
 800942c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800942e:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <Ble_Tl_Init+0x24>)
 8009430:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009432:	463b      	mov	r3, r7
 8009434:	4619      	mov	r1, r3
 8009436:	4805      	ldr	r0, [pc, #20]	@ (800944c <Ble_Tl_Init+0x28>)
 8009438:	f7fe faa0 	bl	800797c <hci_init>

  return;
 800943c:	bf00      	nop
}
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200300d8 	.word	0x200300d8
 8009448:	08009969 	.word	0x08009969
 800944c:	08009931 	.word	0x08009931

08009450 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009452:	b08d      	sub	sp, #52	@ 0x34
 8009454:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009456:	2300      	movs	r3, #0
 8009458:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800945a:	2392      	movs	r3, #146	@ 0x92
 800945c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800945e:	48a5      	ldr	r0, [pc, #660]	@ (80096f4 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009460:	f001 fa2a 	bl	800a8b8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009464:	f7fd ffba 	bl	80073dc <hci_reset>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	4619      	mov	r1, r3
 8009476:	48a0      	ldr	r0, [pc, #640]	@ (80096f8 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8009478:	f001 f9ae 	bl	800a7d8 <iprintf>
 800947c:	e002      	b.n	8009484 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800947e:	489f      	ldr	r0, [pc, #636]	@ (80096fc <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8009480:	f001 fa1a 	bl	800a8b8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009484:	f000 f9c2 	bl	800980c <BleGetBdAddress>
 8009488:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	2106      	movs	r1, #6
 800948e:	2000      	movs	r0, #0
 8009490:	f7fd fe64 	bl	800715c <aci_hal_write_config_data>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	4619      	mov	r1, r3
 80094a2:	4897      	ldr	r0, [pc, #604]	@ (8009700 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80094a4:	f001 f998 	bl	800a7d8 <iprintf>
 80094a8:	e021      	b.n	80094ee <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80094aa:	4896      	ldr	r0, [pc, #600]	@ (8009704 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 80094ac:	f001 fa04 	bl	800a8b8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	3305      	adds	r3, #5
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3304      	adds	r3, #4
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	461c      	mov	r4, r3
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	3303      	adds	r3, #3
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	461d      	mov	r5, r3
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	3302      	adds	r3, #2
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3301      	adds	r3, #1
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	4619      	mov	r1, r3
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	9302      	str	r3, [sp, #8]
 80094de:	9101      	str	r1, [sp, #4]
 80094e0:	9200      	str	r2, [sp, #0]
 80094e2:	462b      	mov	r3, r5
 80094e4:	4622      	mov	r2, r4
 80094e6:	4601      	mov	r1, r0
 80094e8:	4887      	ldr	r0, [pc, #540]	@ (8009708 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80094ea:	f001 f975 	bl	800a7d8 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80094ee:	4a87      	ldr	r2, [pc, #540]	@ (800970c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80094f0:	2110      	movs	r1, #16
 80094f2:	2018      	movs	r0, #24
 80094f4:	f7fd fe32 	bl	800715c <aci_hal_write_config_data>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	4619      	mov	r1, r3
 8009506:	4882      	ldr	r0, [pc, #520]	@ (8009710 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8009508:	f001 f966 	bl	800a7d8 <iprintf>
 800950c:	e002      	b.n	8009514 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800950e:	4881      	ldr	r0, [pc, #516]	@ (8009714 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8009510:	f001 f9d2 	bl	800a8b8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009514:	4a80      	ldr	r2, [pc, #512]	@ (8009718 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8009516:	2110      	movs	r1, #16
 8009518:	2008      	movs	r0, #8
 800951a:	f7fd fe1f 	bl	800715c <aci_hal_write_config_data>
 800951e:	4603      	mov	r3, r0
 8009520:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8009528:	7dfb      	ldrb	r3, [r7, #23]
 800952a:	4619      	mov	r1, r3
 800952c:	487b      	ldr	r0, [pc, #492]	@ (800971c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800952e:	f001 f953 	bl	800a7d8 <iprintf>
 8009532:	e002      	b.n	800953a <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8009534:	487a      	ldr	r0, [pc, #488]	@ (8009720 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8009536:	f001 f9bf 	bl	800a8b8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800953a:	2118      	movs	r1, #24
 800953c:	2001      	movs	r0, #1
 800953e:	f7fd fe92 	bl	8007266 <aci_hal_set_tx_power_level>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d005      	beq.n	8009558 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	4619      	mov	r1, r3
 8009550:	4874      	ldr	r0, [pc, #464]	@ (8009724 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8009552:	f001 f941 	bl	800a7d8 <iprintf>
 8009556:	e002      	b.n	800955e <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8009558:	4873      	ldr	r0, [pc, #460]	@ (8009728 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800955a:	f001 f9ad 	bl	800a8b8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800955e:	f7fd fafc 	bl	8006b5a <aci_gatt_init>
 8009562:	4603      	mov	r3, r0
 8009564:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	4619      	mov	r1, r3
 8009570:	486e      	ldr	r0, [pc, #440]	@ (800972c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8009572:	f001 f931 	bl	800a7d8 <iprintf>
 8009576:	e002      	b.n	800957e <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8009578:	486d      	ldr	r0, [pc, #436]	@ (8009730 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800957a:	f001 f99d 	bl	800a8b8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	f043 0301 	orr.w	r3, r3, #1
 8009588:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d02b      	beq.n	80095e8 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009590:	4b68      	ldr	r3, [pc, #416]	@ (8009734 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8009592:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009594:	1dba      	adds	r2, r7, #6
 8009596:	7bf8      	ldrb	r0, [r7, #15]
 8009598:	1cbb      	adds	r3, r7, #2
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	1d3b      	adds	r3, r7, #4
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4613      	mov	r3, r2
 80095a2:	2208      	movs	r2, #8
 80095a4:	2100      	movs	r1, #0
 80095a6:	f7fd f92e 	bl	8006806 <aci_gap_init>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	4619      	mov	r1, r3
 80095b8:	485f      	ldr	r0, [pc, #380]	@ (8009738 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 80095ba:	f001 f90d 	bl	800a7d8 <iprintf>
 80095be:	e002      	b.n	80095c6 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80095c0:	485e      	ldr	r0, [pc, #376]	@ (800973c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80095c2:	f001 f979 	bl	800a8b8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80095c6:	88fc      	ldrh	r4, [r7, #6]
 80095c8:	88bd      	ldrh	r5, [r7, #4]
 80095ca:	68b8      	ldr	r0, [r7, #8]
 80095cc:	f7f6 fdd8 	bl	8000180 <strlen>
 80095d0:	4603      	mov	r3, r0
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4613      	mov	r3, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	4629      	mov	r1, r5
 80095de:	4620      	mov	r0, r4
 80095e0:	f7fd fcbe 	bl	8006f60 <aci_gatt_update_char_value>
 80095e4:	4603      	mov	r3, r0
 80095e6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80095e8:	88f8      	ldrh	r0, [r7, #6]
 80095ea:	8879      	ldrh	r1, [r7, #2]
 80095ec:	463b      	mov	r3, r7
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	2302      	movs	r3, #2
 80095f2:	2200      	movs	r2, #0
 80095f4:	f7fd fcb4 	bl	8006f60 <aci_gatt_update_char_value>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80095fc:	2202      	movs	r2, #2
 80095fe:	2102      	movs	r1, #2
 8009600:	2000      	movs	r0, #0
 8009602:	f7fd ff0f 	bl	8007424 <hci_le_set_default_phy>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	4619      	mov	r1, r3
 8009614:	484a      	ldr	r0, [pc, #296]	@ (8009740 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8009616:	f001 f8df 	bl	800a7d8 <iprintf>
 800961a:	e002      	b.n	8009622 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800961c:	4849      	ldr	r0, [pc, #292]	@ (8009744 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800961e:	f001 f94b 	bl	800a8b8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009622:	4b49      	ldr	r3, [pc, #292]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009624:	2201      	movs	r2, #1
 8009626:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009628:	4b47      	ldr	r3, [pc, #284]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f7fc ff6b 	bl	8006508 <aci_gap_set_io_capability>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	4619      	mov	r1, r3
 8009640:	4842      	ldr	r0, [pc, #264]	@ (800974c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8009642:	f001 f8c9 	bl	800a7d8 <iprintf>
 8009646:	e002      	b.n	800964e <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8009648:	4841      	ldr	r0, [pc, #260]	@ (8009750 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800964a:	f001 f935 	bl	800a8b8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800964e:	4b3e      	ldr	r3, [pc, #248]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009650:	2201      	movs	r2, #1
 8009652:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009654:	4b3c      	ldr	r3, [pc, #240]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009656:	2208      	movs	r2, #8
 8009658:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800965a:	4b3b      	ldr	r3, [pc, #236]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800965c:	2210      	movs	r2, #16
 800965e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009660:	4b39      	ldr	r3, [pc, #228]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009662:	2200      	movs	r2, #0
 8009664:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009666:	4b38      	ldr	r3, [pc, #224]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009668:	4a3a      	ldr	r2, [pc, #232]	@ (8009754 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800966a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800966c:	4b36      	ldr	r3, [pc, #216]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800966e:	2200      	movs	r2, #0
 8009670:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009672:	4b35      	ldr	r3, [pc, #212]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009674:	789c      	ldrb	r4, [r3, #2]
 8009676:	4b34      	ldr	r3, [pc, #208]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009678:	785d      	ldrb	r5, [r3, #1]
 800967a:	4b33      	ldr	r3, [pc, #204]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	4a32      	ldr	r2, [pc, #200]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009680:	7952      	ldrb	r2, [r2, #5]
 8009682:	4931      	ldr	r1, [pc, #196]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009684:	78c9      	ldrb	r1, [r1, #3]
 8009686:	4830      	ldr	r0, [pc, #192]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8009688:	6880      	ldr	r0, [r0, #8]
 800968a:	2600      	movs	r6, #0
 800968c:	9604      	str	r6, [sp, #16]
 800968e:	9003      	str	r0, [sp, #12]
 8009690:	9102      	str	r1, [sp, #8]
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	2300      	movs	r3, #0
 8009698:	2201      	movs	r2, #1
 800969a:	4629      	mov	r1, r5
 800969c:	4620      	mov	r0, r4
 800969e:	f7fc ff87 	bl	80065b0 <aci_gap_set_authentication_requirement>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
 80096ae:	4619      	mov	r1, r3
 80096b0:	4829      	ldr	r0, [pc, #164]	@ (8009758 <Ble_Hci_Gap_Gatt_Init+0x308>)
 80096b2:	f001 f891 	bl	800a7d8 <iprintf>
 80096b6:	e002      	b.n	80096be <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80096b8:	4828      	ldr	r0, [pc, #160]	@ (800975c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 80096ba:	f001 f8fd 	bl	800a8b8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80096be:	4b22      	ldr	r3, [pc, #136]	@ (8009748 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 80096c0:	789b      	ldrb	r3, [r3, #2]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00f      	beq.n	80096e6 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 80096c6:	f7fd f9bd 	bl	8006a44 <aci_gap_configure_filter_accept_list>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	4619      	mov	r1, r3
 80096d8:	4821      	ldr	r0, [pc, #132]	@ (8009760 <Ble_Hci_Gap_Gatt_Init+0x310>)
 80096da:	f001 f87d 	bl	800a7d8 <iprintf>
 80096de:	e002      	b.n	80096e6 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80096e0:	4820      	ldr	r0, [pc, #128]	@ (8009764 <Ble_Hci_Gap_Gatt_Init+0x314>)
 80096e2:	f001 f8e9 	bl	800a8b8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80096e6:	4820      	ldr	r0, [pc, #128]	@ (8009768 <Ble_Hci_Gap_Gatt_Init+0x318>)
 80096e8:	f001 f876 	bl	800a7d8 <iprintf>
}
 80096ec:	bf00      	nop
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096f4:	0800bf58 	.word	0x0800bf58
 80096f8:	0800bf84 	.word	0x0800bf84
 80096fc:	0800bfb4 	.word	0x0800bfb4
 8009700:	0800bfd4 	.word	0x0800bfd4
 8009704:	0800c030 	.word	0x0800c030
 8009708:	0800c07c 	.word	0x0800c07c
 800970c:	0800cd7c 	.word	0x0800cd7c
 8009710:	0800c0b8 	.word	0x0800c0b8
 8009714:	0800c110 	.word	0x0800c110
 8009718:	0800cd8c 	.word	0x0800cd8c
 800971c:	0800c158 	.word	0x0800c158
 8009720:	0800c1b0 	.word	0x0800c1b0
 8009724:	0800c1f8 	.word	0x0800c1f8
 8009728:	0800c238 	.word	0x0800c238
 800972c:	0800c268 	.word	0x0800c268
 8009730:	0800c29c 	.word	0x0800c29c
 8009734:	0800c2c0 	.word	0x0800c2c0
 8009738:	0800c2cc 	.word	0x0800c2cc
 800973c:	0800c2fc 	.word	0x0800c2fc
 8009740:	0800c31c 	.word	0x0800c31c
 8009744:	0800c358 	.word	0x0800c358
 8009748:	200013ec 	.word	0x200013ec
 800974c:	0800c384 	.word	0x0800c384
 8009750:	0800c3c4 	.word	0x0800c3c4
 8009754:	0001b207 	.word	0x0001b207
 8009758:	0800c3f4 	.word	0x0800c3f4
 800975c:	0800c440 	.word	0x0800c440
 8009760:	0800c47c 	.word	0x0800c47c
 8009764:	0800c4bc 	.word	0x0800c4bc
 8009768:	0800c4ec 	.word	0x0800c4ec

0800976c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08c      	sub	sp, #48	@ 0x30
 8009770:	af08      	add	r7, sp, #32
 8009772:	4603      	mov	r3, r0
 8009774:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009776:	2392      	movs	r3, #146	@ 0x92
 8009778:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800977a:	4a1e      	ldr	r2, [pc, #120]	@ (80097f4 <Adv_Request+0x88>)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009782:	2300      	movs	r3, #0
 8009784:	9306      	str	r3, [sp, #24]
 8009786:	2300      	movs	r3, #0
 8009788:	9305      	str	r3, [sp, #20]
 800978a:	2300      	movs	r3, #0
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	2300      	movs	r3, #0
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	2300      	movs	r3, #0
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	2300      	movs	r3, #0
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	2300      	movs	r3, #0
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	2300      	movs	r3, #0
 80097a0:	22a0      	movs	r2, #160	@ 0xa0
 80097a2:	2180      	movs	r1, #128	@ 0x80
 80097a4:	2000      	movs	r0, #0
 80097a6:	f7fc fdb5 	bl	8006314 <aci_gap_set_discoverable>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4619      	mov	r1, r3
 80097b8:	480f      	ldr	r0, [pc, #60]	@ (80097f8 <Adv_Request+0x8c>)
 80097ba:	f001 f80d 	bl	800a7d8 <iprintf>
 80097be:	e002      	b.n	80097c6 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80097c0:	480e      	ldr	r0, [pc, #56]	@ (80097fc <Adv_Request+0x90>)
 80097c2:	f001 f879 	bl	800a8b8 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80097c6:	490e      	ldr	r1, [pc, #56]	@ (8009800 <Adv_Request+0x94>)
 80097c8:	200c      	movs	r0, #12
 80097ca:	f7fd f8c9 	bl	8006960 <aci_gap_update_adv_data>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4619      	mov	r1, r3
 80097dc:	4809      	ldr	r0, [pc, #36]	@ (8009804 <Adv_Request+0x98>)
 80097de:	f000 fffb 	bl	800a7d8 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80097e2:	e003      	b.n	80097ec <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80097e4:	4808      	ldr	r0, [pc, #32]	@ (8009808 <Adv_Request+0x9c>)
 80097e6:	f000 fff7 	bl	800a7d8 <iprintf>
  return;
 80097ea:	bf00      	nop
}
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200013ec 	.word	0x200013ec
 80097f8:	0800c518 	.word	0x0800c518
 80097fc:	0800c550 	.word	0x0800c550
 8009800:	20000014 	.word	0x20000014
 8009804:	0800c578 	.word	0x0800c578
 8009808:	0800c5ac 	.word	0x0800c5ac

0800980c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009812:	f7ff fb67 	bl	8008ee4 <LL_FLASH_GetUDN>
 8009816:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800981e:	d023      	beq.n	8009868 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009820:	f7ff fb78 	bl	8008f14 <LL_FLASH_GetSTCompanyID>
 8009824:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009826:	f7ff fb69 	bl	8008efc <LL_FLASH_GetDeviceID>
 800982a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	b2da      	uxtb	r2, r3
 8009830:	4b16      	ldr	r3, [pc, #88]	@ (800988c <BleGetBdAddress+0x80>)
 8009832:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	b2da      	uxtb	r2, r3
 800983a:	4b14      	ldr	r3, [pc, #80]	@ (800988c <BleGetBdAddress+0x80>)
 800983c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	4b12      	ldr	r3, [pc, #72]	@ (800988c <BleGetBdAddress+0x80>)
 8009844:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	4b10      	ldr	r3, [pc, #64]	@ (800988c <BleGetBdAddress+0x80>)
 800984c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	b2da      	uxtb	r2, r3
 8009854:	4b0d      	ldr	r3, [pc, #52]	@ (800988c <BleGetBdAddress+0x80>)
 8009856:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	0c1b      	lsrs	r3, r3, #16
 800985c:	b2da      	uxtb	r2, r3
 800985e:	4b0b      	ldr	r3, [pc, #44]	@ (800988c <BleGetBdAddress+0x80>)
 8009860:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009862:	4b0a      	ldr	r3, [pc, #40]	@ (800988c <BleGetBdAddress+0x80>)
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	e00b      	b.n	8009880 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009868:	2000      	movs	r0, #0
 800986a:	f7fe fe59 	bl	8008520 <OTP_Read>
 800986e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	e001      	b.n	8009880 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800987c:	4b04      	ldr	r3, [pc, #16]	@ (8009890 <BleGetBdAddress+0x84>)
 800987e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009880:	697b      	ldr	r3, [r7, #20]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200013e4 	.word	0x200013e4
 8009890:	0800cd74 	.word	0x0800cd74

08009894 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800989a:	4b10      	ldr	r3, [pc, #64]	@ (80098dc <Adv_Cancel+0x48>)
 800989c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80098a0:	2b05      	cmp	r3, #5
 80098a2:	d017      	beq.n	80098d4 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80098a4:	2392      	movs	r3, #146	@ 0x92
 80098a6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80098a8:	f7fc fd10 	bl	80062cc <aci_gap_set_non_discoverable>
 80098ac:	4603      	mov	r3, r0
 80098ae:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80098b0:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <Adv_Cancel+0x48>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80098be:	4808      	ldr	r0, [pc, #32]	@ (80098e0 <Adv_Cancel+0x4c>)
 80098c0:	f000 ff8a 	bl	800a7d8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80098c4:	e006      	b.n	80098d4 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 80098c6:	4807      	ldr	r0, [pc, #28]	@ (80098e4 <Adv_Cancel+0x50>)
 80098c8:	f000 ff86 	bl	800a7d8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80098cc:	4806      	ldr	r0, [pc, #24]	@ (80098e8 <Adv_Cancel+0x54>)
 80098ce:	f000 ff83 	bl	800a7d8 <iprintf>
  return;
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
}
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	200013ec 	.word	0x200013ec
 80098e0:	0800c5d4 	.word	0x0800c5d4
 80098e4:	0800c5f8 	.word	0x0800c5f8
 80098e8:	0800c600 	.word	0x0800c600

080098ec <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80098f4:	2100      	movs	r1, #0
 80098f6:	2002      	movs	r0, #2
 80098f8:	f000 fdb0 	bl	800a45c <UTIL_SEQ_SetTask>

  return;
 80098fc:	bf00      	nop
}
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800990c:	2001      	movs	r0, #1
 800990e:	f000 fe11 	bl	800a534 <UTIL_SEQ_SetEvt>

  return;
 8009912:	bf00      	nop
}
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009922:	2001      	movs	r0, #1
 8009924:	f000 fe26 	bl	800a574 <UTIL_SEQ_WaitEvt>

  return;
 8009928:	bf00      	nop
}
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	3308      	adds	r3, #8
 8009942:	4618      	mov	r0, r3
 8009944:	f7fd fed4 	bl	80076f0 <SVCCTL_UserEvtRx>
 8009948:	4603      	mov	r3, r0
 800994a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2201      	movs	r2, #1
 8009956:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009958:	e003      	b.n	8009962 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
  return;
 8009960:	bf00      	nop
}
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <BLE_StatusNot+0x16>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d006      	beq.n	800998a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800997c:	e00b      	b.n	8009996 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800997e:	2303      	movs	r3, #3
 8009980:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fd96 	bl	800a4b4 <UTIL_SEQ_PauseTask>
      break;
 8009988:	e005      	b.n	8009996 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800998a:	2303      	movs	r3, #3
 800998c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fdb0 	bl	800a4f4 <UTIL_SEQ_ResumeTask>
      break;
 8009994:	bf00      	nop
  }

  return;
 8009996:	bf00      	nop
}
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <Custom_STM_App_Notification+0x16>
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d002      	beq.n	80099b8 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80099b2:	e002      	b.n	80099ba <Custom_STM_App_Notification+0x1c>
      break;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <Custom_STM_App_Notification+0x1c>
      break;
 80099b8:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80099ba:	bf00      	nop
}
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <Custom_APP_Notification+0x16>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d002      	beq.n	80099e0 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80099da:	e002      	b.n	80099e2 <Custom_APP_Notification+0x1c>
      break;
 80099dc:	bf00      	nop
 80099de:	e000      	b.n	80099e2 <Custom_APP_Notification+0x1c>
      break;
 80099e0:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80099e2:	bf00      	nop
}
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80099ee:	b480      	push	{r7}
 80099f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80099f2:	bf00      	nop
}
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08c      	sub	sp, #48	@ 0x30
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2bff      	cmp	r3, #255	@ 0xff
 8009a16:	d154      	bne.n	8009ac2 <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1a:	3302      	adds	r3, #2
 8009a1c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8009a28:	2b1a      	cmp	r3, #26
 8009a2a:	d848      	bhi.n	8009abe <Custom_STM_Event_Handler+0xc2>
 8009a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <Custom_STM_Event_Handler+0x38>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009abf 	.word	0x08009abf
 8009a38:	08009abf 	.word	0x08009abf
 8009a3c:	08009abf 	.word	0x08009abf
 8009a40:	08009abf 	.word	0x08009abf
 8009a44:	08009abf 	.word	0x08009abf
 8009a48:	08009abf 	.word	0x08009abf
 8009a4c:	08009abf 	.word	0x08009abf
 8009a50:	08009abf 	.word	0x08009abf
 8009a54:	08009abf 	.word	0x08009abf
 8009a58:	08009abf 	.word	0x08009abf
 8009a5c:	08009abf 	.word	0x08009abf
 8009a60:	08009abf 	.word	0x08009abf
 8009a64:	08009abf 	.word	0x08009abf
 8009a68:	08009abf 	.word	0x08009abf
 8009a6c:	08009abf 	.word	0x08009abf
 8009a70:	08009abf 	.word	0x08009abf
 8009a74:	08009abf 	.word	0x08009abf
 8009a78:	08009abf 	.word	0x08009abf
 8009a7c:	08009abf 	.word	0x08009abf
 8009a80:	08009abf 	.word	0x08009abf
 8009a84:	08009abf 	.word	0x08009abf
 8009a88:	08009abf 	.word	0x08009abf
 8009a8c:	08009abf 	.word	0x08009abf
 8009a90:	08009abf 	.word	0x08009abf
 8009a94:	08009abf 	.word	0x08009abf
 8009a98:	08009abf 	.word	0x08009abf
 8009a9c:	08009aa1 	.word	0x08009aa1
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	3302      	adds	r3, #2
 8009aa4:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8009ab2:	f107 030c 	add.w	r3, r7, #12
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff ff71 	bl	800999e <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8009abc:	e000      	b.n	8009ac0 <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009abe:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009ac0:	e000      	b.n	8009ac4 <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009ac2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3730      	adds	r7, #48	@ 0x30
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08c      	sub	sp, #48	@ 0x30
 8009ad4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009ad6:	2392      	movs	r3, #146	@ 0x92
 8009ad8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009ada:	487d      	ldr	r0, [pc, #500]	@ (8009cd0 <SVCCTL_InitCustomSvc+0x200>)
 8009adc:	f7fd fdee 	bl	80076bc <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_CUSTOM_SERVICE_UUID(uuid.Char_UUID_128);
 8009ae4:	238f      	movs	r3, #143	@ 0x8f
 8009ae6:	713b      	strb	r3, [r7, #4]
 8009ae8:	23e5      	movs	r3, #229	@ 0xe5
 8009aea:	717b      	strb	r3, [r7, #5]
 8009aec:	23b3      	movs	r3, #179	@ 0xb3
 8009aee:	71bb      	strb	r3, [r7, #6]
 8009af0:	23d5      	movs	r3, #213	@ 0xd5
 8009af2:	71fb      	strb	r3, [r7, #7]
 8009af4:	232e      	movs	r3, #46	@ 0x2e
 8009af6:	723b      	strb	r3, [r7, #8]
 8009af8:	237f      	movs	r3, #127	@ 0x7f
 8009afa:	727b      	strb	r3, [r7, #9]
 8009afc:	234a      	movs	r3, #74	@ 0x4a
 8009afe:	72bb      	strb	r3, [r7, #10]
 8009b00:	2398      	movs	r3, #152	@ 0x98
 8009b02:	72fb      	strb	r3, [r7, #11]
 8009b04:	232a      	movs	r3, #42	@ 0x2a
 8009b06:	733b      	strb	r3, [r7, #12]
 8009b08:	2348      	movs	r3, #72	@ 0x48
 8009b0a:	737b      	strb	r3, [r7, #13]
 8009b0c:	237a      	movs	r3, #122	@ 0x7a
 8009b0e:	73bb      	strb	r3, [r7, #14]
 8009b10:	23cc      	movs	r3, #204	@ 0xcc
 8009b12:	73fb      	strb	r3, [r7, #15]
 8009b14:	2300      	movs	r3, #0
 8009b16:	743b      	strb	r3, [r7, #16]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	747b      	strb	r3, [r7, #17]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	74bb      	strb	r3, [r7, #18]
 8009b20:	2300      	movs	r3, #0
 8009b22:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009b24:	7dbb      	ldrb	r3, [r7, #22]
 8009b26:	1d39      	adds	r1, r7, #4
 8009b28:	4a6a      	ldr	r2, [pc, #424]	@ (8009cd4 <SVCCTL_InitCustomSvc+0x204>)
 8009b2a:	9200      	str	r2, [sp, #0]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	2002      	movs	r0, #2
 8009b30:	f7fd f838 	bl	8006ba4 <aci_gatt_add_service>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_Custom_ServiceHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <SVCCTL_InitCustomSvc+0x7a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MY_CUSTOM_SERVICE, error code: 0x%x \n\r", ret);
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	4619      	mov	r1, r3
 8009b42:	4865      	ldr	r0, [pc, #404]	@ (8009cd8 <SVCCTL_InitCustomSvc+0x208>)
 8009b44:	f000 fe48 	bl	800a7d8 <iprintf>
 8009b48:	e002      	b.n	8009b50 <SVCCTL_InitCustomSvc+0x80>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MY_CUSTOM_SERVICE \n\r");
 8009b4a:	4864      	ldr	r0, [pc, #400]	@ (8009cdc <SVCCTL_InitCustomSvc+0x20c>)
 8009b4c:	f000 fe44 	bl	800a7d8 <iprintf>
  }

  /**
   *  MY_CHAR_changethis
   */
  COPY_MY_CHAR_CHANGETHIS_UUID(uuid.Char_UUID_128);
 8009b50:	2319      	movs	r3, #25
 8009b52:	713b      	strb	r3, [r7, #4]
 8009b54:	23ed      	movs	r3, #237	@ 0xed
 8009b56:	717b      	strb	r3, [r7, #5]
 8009b58:	2382      	movs	r3, #130	@ 0x82
 8009b5a:	71bb      	strb	r3, [r7, #6]
 8009b5c:	23ae      	movs	r3, #174	@ 0xae
 8009b5e:	71fb      	strb	r3, [r7, #7]
 8009b60:	23ed      	movs	r3, #237	@ 0xed
 8009b62:	723b      	strb	r3, [r7, #8]
 8009b64:	2321      	movs	r3, #33	@ 0x21
 8009b66:	727b      	strb	r3, [r7, #9]
 8009b68:	234c      	movs	r3, #76	@ 0x4c
 8009b6a:	72bb      	strb	r3, [r7, #10]
 8009b6c:	239d      	movs	r3, #157	@ 0x9d
 8009b6e:	72fb      	strb	r3, [r7, #11]
 8009b70:	2341      	movs	r3, #65	@ 0x41
 8009b72:	733b      	strb	r3, [r7, #12]
 8009b74:	2345      	movs	r3, #69	@ 0x45
 8009b76:	737b      	strb	r3, [r7, #13]
 8009b78:	2322      	movs	r3, #34	@ 0x22
 8009b7a:	73bb      	strb	r3, [r7, #14]
 8009b7c:	238e      	movs	r3, #142	@ 0x8e
 8009b7e:	73fb      	strb	r3, [r7, #15]
 8009b80:	2300      	movs	r3, #0
 8009b82:	743b      	strb	r3, [r7, #16]
 8009b84:	2300      	movs	r3, #0
 8009b86:	747b      	strb	r3, [r7, #17]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	74bb      	strb	r3, [r7, #18]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_Custom_ServiceHdle,
 8009b90:	4b50      	ldr	r3, [pc, #320]	@ (8009cd4 <SVCCTL_InitCustomSvc+0x204>)
 8009b92:	8818      	ldrh	r0, [r3, #0]
 8009b94:	4b52      	ldr	r3, [pc, #328]	@ (8009ce0 <SVCCTL_InitCustomSvc+0x210>)
 8009b96:	881b      	ldrh	r3, [r3, #0]
 8009b98:	1d3a      	adds	r2, r7, #4
 8009b9a:	4952      	ldr	r1, [pc, #328]	@ (8009ce4 <SVCCTL_InitCustomSvc+0x214>)
 8009b9c:	9105      	str	r1, [sp, #20]
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	9104      	str	r1, [sp, #16]
 8009ba2:	2110      	movs	r1, #16
 8009ba4:	9103      	str	r1, [sp, #12]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	9102      	str	r1, [sp, #8]
 8009baa:	2100      	movs	r1, #0
 8009bac:	9101      	str	r1, [sp, #4]
 8009bae:	2102      	movs	r1, #2
 8009bb0:	9100      	str	r1, [sp, #0]
 8009bb2:	2102      	movs	r1, #2
 8009bb4:	f7fd f8cc 	bl	8006d50 <aci_gatt_add_char>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomMy_Char_ChangethisHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <SVCCTL_InitCustomSvc+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MY_CHAR_CHANGETHIS, error code: 0x%x \n\r", ret);
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4848      	ldr	r0, [pc, #288]	@ (8009ce8 <SVCCTL_InitCustomSvc+0x218>)
 8009bc8:	f000 fe06 	bl	800a7d8 <iprintf>
 8009bcc:	e002      	b.n	8009bd4 <SVCCTL_InitCustomSvc+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MY_CHAR_CHANGETHIS \n\r");
 8009bce:	4847      	ldr	r0, [pc, #284]	@ (8009cec <SVCCTL_InitCustomSvc+0x21c>)
 8009bd0:	f000 fe02 	bl	800a7d8 <iprintf>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SERVICE_TEST_2_UUID(uuid.Char_UUID_128);
 8009bd8:	238f      	movs	r3, #143	@ 0x8f
 8009bda:	713b      	strb	r3, [r7, #4]
 8009bdc:	23e5      	movs	r3, #229	@ 0xe5
 8009bde:	717b      	strb	r3, [r7, #5]
 8009be0:	23b3      	movs	r3, #179	@ 0xb3
 8009be2:	71bb      	strb	r3, [r7, #6]
 8009be4:	23d5      	movs	r3, #213	@ 0xd5
 8009be6:	71fb      	strb	r3, [r7, #7]
 8009be8:	232e      	movs	r3, #46	@ 0x2e
 8009bea:	723b      	strb	r3, [r7, #8]
 8009bec:	237f      	movs	r3, #127	@ 0x7f
 8009bee:	727b      	strb	r3, [r7, #9]
 8009bf0:	234a      	movs	r3, #74	@ 0x4a
 8009bf2:	72bb      	strb	r3, [r7, #10]
 8009bf4:	2398      	movs	r3, #152	@ 0x98
 8009bf6:	72fb      	strb	r3, [r7, #11]
 8009bf8:	232a      	movs	r3, #42	@ 0x2a
 8009bfa:	733b      	strb	r3, [r7, #12]
 8009bfc:	2348      	movs	r3, #72	@ 0x48
 8009bfe:	737b      	strb	r3, [r7, #13]
 8009c00:	237a      	movs	r3, #122	@ 0x7a
 8009c02:	73bb      	strb	r3, [r7, #14]
 8009c04:	23cc      	movs	r3, #204	@ 0xcc
 8009c06:	73fb      	strb	r3, [r7, #15]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	743b      	strb	r3, [r7, #16]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	747b      	strb	r3, [r7, #17]
 8009c10:	2300      	movs	r3, #0
 8009c12:	74bb      	strb	r3, [r7, #18]
 8009c14:	2300      	movs	r3, #0
 8009c16:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009c18:	7dbb      	ldrb	r3, [r7, #22]
 8009c1a:	1d39      	adds	r1, r7, #4
 8009c1c:	4a34      	ldr	r2, [pc, #208]	@ (8009cf0 <SVCCTL_InitCustomSvc+0x220>)
 8009c1e:	9200      	str	r2, [sp, #0]
 8009c20:	2201      	movs	r2, #1
 8009c22:	2002      	movs	r0, #2
 8009c24:	f7fc ffbe 	bl	8006ba4 <aci_gatt_add_service>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomTest2Hdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <SVCCTL_InitCustomSvc+0x16e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: TEST2, error code: 0x%x \n\r", ret);
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	4619      	mov	r1, r3
 8009c36:	482f      	ldr	r0, [pc, #188]	@ (8009cf4 <SVCCTL_InitCustomSvc+0x224>)
 8009c38:	f000 fdce 	bl	800a7d8 <iprintf>
 8009c3c:	e002      	b.n	8009c44 <SVCCTL_InitCustomSvc+0x174>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: TEST2 \n\r");
 8009c3e:	482e      	ldr	r0, [pc, #184]	@ (8009cf8 <SVCCTL_InitCustomSvc+0x228>)
 8009c40:	f000 fdca 	bl	800a7d8 <iprintf>
  }

  /**
   *  TEST_2_CHAR
   */
  COPY_TEST_2_CHAR_UUID(uuid.Char_UUID_128);
 8009c44:	2319      	movs	r3, #25
 8009c46:	713b      	strb	r3, [r7, #4]
 8009c48:	23ed      	movs	r3, #237	@ 0xed
 8009c4a:	717b      	strb	r3, [r7, #5]
 8009c4c:	2382      	movs	r3, #130	@ 0x82
 8009c4e:	71bb      	strb	r3, [r7, #6]
 8009c50:	23ae      	movs	r3, #174	@ 0xae
 8009c52:	71fb      	strb	r3, [r7, #7]
 8009c54:	23ed      	movs	r3, #237	@ 0xed
 8009c56:	723b      	strb	r3, [r7, #8]
 8009c58:	2321      	movs	r3, #33	@ 0x21
 8009c5a:	727b      	strb	r3, [r7, #9]
 8009c5c:	234c      	movs	r3, #76	@ 0x4c
 8009c5e:	72bb      	strb	r3, [r7, #10]
 8009c60:	239d      	movs	r3, #157	@ 0x9d
 8009c62:	72fb      	strb	r3, [r7, #11]
 8009c64:	2341      	movs	r3, #65	@ 0x41
 8009c66:	733b      	strb	r3, [r7, #12]
 8009c68:	2345      	movs	r3, #69	@ 0x45
 8009c6a:	737b      	strb	r3, [r7, #13]
 8009c6c:	2322      	movs	r3, #34	@ 0x22
 8009c6e:	73bb      	strb	r3, [r7, #14]
 8009c70:	238e      	movs	r3, #142	@ 0x8e
 8009c72:	73fb      	strb	r3, [r7, #15]
 8009c74:	2300      	movs	r3, #0
 8009c76:	743b      	strb	r3, [r7, #16]
 8009c78:	2300      	movs	r3, #0
 8009c7a:	747b      	strb	r3, [r7, #17]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	74bb      	strb	r3, [r7, #18]
 8009c80:	2300      	movs	r3, #0
 8009c82:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTest2Hdle,
 8009c84:	4b13      	ldr	r3, [pc, #76]	@ (8009cd4 <SVCCTL_InitCustomSvc+0x204>)
 8009c86:	8898      	ldrh	r0, [r3, #4]
 8009c88:	4b1c      	ldr	r3, [pc, #112]	@ (8009cfc <SVCCTL_InitCustomSvc+0x22c>)
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	1d3a      	adds	r2, r7, #4
 8009c8e:	491c      	ldr	r1, [pc, #112]	@ (8009d00 <SVCCTL_InitCustomSvc+0x230>)
 8009c90:	9105      	str	r1, [sp, #20]
 8009c92:	2100      	movs	r1, #0
 8009c94:	9104      	str	r1, [sp, #16]
 8009c96:	2110      	movs	r1, #16
 8009c98:	9103      	str	r1, [sp, #12]
 8009c9a:	2107      	movs	r1, #7
 8009c9c:	9102      	str	r1, [sp, #8]
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	9101      	str	r1, [sp, #4]
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	9100      	str	r1, [sp, #0]
 8009ca6:	2102      	movs	r1, #2
 8009ca8:	f7fd f852 	bl	8006d50 <aci_gatt_add_char>
 8009cac:	4603      	mov	r3, r0
 8009cae:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomTest_2_CharHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <SVCCTL_InitCustomSvc+0x1f2>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : TEST_2_CHAR, error code: 0x%x \n\r", ret);
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4812      	ldr	r0, [pc, #72]	@ (8009d04 <SVCCTL_InitCustomSvc+0x234>)
 8009cbc:	f000 fd8c 	bl	800a7d8 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009cc0:	e003      	b.n	8009cca <SVCCTL_InitCustomSvc+0x1fa>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEST_2_CHAR \n\r");
 8009cc2:	4811      	ldr	r0, [pc, #68]	@ (8009d08 <SVCCTL_InitCustomSvc+0x238>)
 8009cc4:	f000 fd88 	bl	800a7d8 <iprintf>
  return;
 8009cc8:	bf00      	nop
}
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	080099fd 	.word	0x080099fd
 8009cd4:	20001474 	.word	0x20001474
 8009cd8:	0800c61c 	.word	0x0800c61c
 8009cdc:	0800c66c 	.word	0x0800c66c
 8009ce0:	20000020 	.word	0x20000020
 8009ce4:	20001476 	.word	0x20001476
 8009ce8:	0800c6ac 	.word	0x0800c6ac
 8009cec:	0800c700 	.word	0x0800c700
 8009cf0:	20001478 	.word	0x20001478
 8009cf4:	0800c740 	.word	0x0800c740
 8009cf8:	0800c784 	.word	0x0800c784
 8009cfc:	20000022 	.word	0x20000022
 8009d00:	2000147a 	.word	0x2000147a
 8009d04:	0800c7b8 	.word	0x0800c7b8
 8009d08:	0800c804 	.word	0x0800c804

08009d0c <LL_PWR_EnableBootC2>:
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009d10:	4b05      	ldr	r3, [pc, #20]	@ (8009d28 <LL_PWR_EnableBootC2+0x1c>)
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	4a04      	ldr	r2, [pc, #16]	@ (8009d28 <LL_PWR_EnableBootC2+0x1c>)
 8009d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d1a:	60d3      	str	r3, [r2, #12]
}
 8009d1c:	bf00      	nop
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	58000400 	.word	0x58000400

08009d2c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009d34:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009d36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009d3a:	4905      	ldr	r1, [pc, #20]	@ (8009d50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	58000800 	.word	0x58000800

08009d54 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009d5c:	4b05      	ldr	r3, [pc, #20]	@ (8009d74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009d5e:	6a1a      	ldr	r2, [r3, #32]
 8009d60:	4904      	ldr	r1, [pc, #16]	@ (8009d74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	620b      	str	r3, [r1, #32]
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	58000800 	.word	0x58000800

08009d78 <LL_AHB3_GRP1_EnableClock>:
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009db6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dca:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f043 0201 	orr.w	r2, r3, #1
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	43db      	mvns	r3, r3
 8009e36:	401a      	ands	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	605a      	str	r2, [r3, #4]
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	041b      	lsls	r3, r3, #16
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	605a      	str	r2, [r3, #4]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	401a      	ands	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	605a      	str	r2, [r3, #4]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	609a      	str	r2, [r3, #8]
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	041a      	lsls	r2, r3, #16
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	609a      	str	r2, [r3, #8]
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	4013      	ands	r3, r2
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d101      	bne.n	8009ee6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69da      	ldr	r2, [r3, #28]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	4013      	ands	r3, r2
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d101      	bne.n	8009f10 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009f24:	2102      	movs	r1, #2
 8009f26:	4818      	ldr	r0, [pc, #96]	@ (8009f88 <HW_IPCC_Rx_Handler+0x68>)
 8009f28:	f7ff ffe4 	bl	8009ef4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <HW_IPCC_Rx_Handler+0x24>
 8009f32:	4b15      	ldr	r3, [pc, #84]	@ (8009f88 <HW_IPCC_Rx_Handler+0x68>)
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d102      	bne.n	8009f44 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009f3e:	f000 f8d5 	bl	800a0ec <HW_IPCC_SYS_EvtHandler>
 8009f42:	e01e      	b.n	8009f82 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009f44:	2101      	movs	r1, #1
 8009f46:	4810      	ldr	r0, [pc, #64]	@ (8009f88 <HW_IPCC_Rx_Handler+0x68>)
 8009f48:	f7ff ffd4 	bl	8009ef4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <HW_IPCC_Rx_Handler+0x44>
 8009f52:	4b0d      	ldr	r3, [pc, #52]	@ (8009f88 <HW_IPCC_Rx_Handler+0x68>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009f5e:	f000 f889 	bl	800a074 <HW_IPCC_BLE_EvtHandler>
 8009f62:	e00e      	b.n	8009f82 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009f64:	2108      	movs	r1, #8
 8009f66:	4808      	ldr	r0, [pc, #32]	@ (8009f88 <HW_IPCC_Rx_Handler+0x68>)
 8009f68:	f7ff ffc4 	bl	8009ef4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d008      	beq.n	8009f84 <HW_IPCC_Rx_Handler+0x64>
 8009f72:	4b05      	ldr	r3, [pc, #20]	@ (8009f88 <HW_IPCC_Rx_Handler+0x68>)
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f003 0308 	and.w	r3, r3, #8
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d102      	bne.n	8009f84 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009f7e:	f000 f901 	bl	800a184 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
}
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	58000c00 	.word	0x58000c00

08009f8c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009f90:	2102      	movs	r1, #2
 8009f92:	4818      	ldr	r0, [pc, #96]	@ (8009ff4 <HW_IPCC_Tx_Handler+0x68>)
 8009f94:	f7ff ff99 	bl	8009eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d108      	bne.n	8009fb0 <HW_IPCC_Tx_Handler+0x24>
 8009f9e:	4b15      	ldr	r3, [pc, #84]	@ (8009ff4 <HW_IPCC_Tx_Handler+0x68>)
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009faa:	f000 f893 	bl	800a0d4 <HW_IPCC_SYS_CmdEvtHandler>
 8009fae:	e01e      	b.n	8009fee <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009fb0:	2108      	movs	r1, #8
 8009fb2:	4810      	ldr	r0, [pc, #64]	@ (8009ff4 <HW_IPCC_Tx_Handler+0x68>)
 8009fb4:	f7ff ff89 	bl	8009eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d108      	bne.n	8009fd0 <HW_IPCC_Tx_Handler+0x44>
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <HW_IPCC_Tx_Handler+0x68>)
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d102      	bne.n	8009fd0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009fca:	f000 f8bd 	bl	800a148 <HW_IPCC_MM_FreeBufHandler>
 8009fce:	e00e      	b.n	8009fee <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009fd0:	2120      	movs	r1, #32
 8009fd2:	4808      	ldr	r0, [pc, #32]	@ (8009ff4 <HW_IPCC_Tx_Handler+0x68>)
 8009fd4:	f7ff ff79 	bl	8009eca <LL_C1_IPCC_IsActiveFlag_CHx>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d108      	bne.n	8009ff0 <HW_IPCC_Tx_Handler+0x64>
 8009fde:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <HW_IPCC_Tx_Handler+0x68>)
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d102      	bne.n	8009ff0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009fea:	f000 f84f 	bl	800a08c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
}
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	58000c00 	.word	0x58000c00

08009ff8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009ffc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a000:	f7ff fed3 	bl	8009daa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a004:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a008:	f7ff fea4 	bl	8009d54 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a00c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a010:	f7ff fe8c 	bl	8009d2c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a014:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a016:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a018:	f7ff fe78 	bl	8009d0c <LL_PWR_EnableBootC2>

  return;
 800a01c:	bf00      	nop
}
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a024:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a028:	f7ff fea6 	bl	8009d78 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a02c:	4806      	ldr	r0, [pc, #24]	@ (800a048 <HW_IPCC_Init+0x28>)
 800a02e:	f7ff fee8 	bl	8009e02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a032:	4805      	ldr	r0, [pc, #20]	@ (800a048 <HW_IPCC_Init+0x28>)
 800a034:	f7ff fed5 	bl	8009de2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a038:	202c      	movs	r0, #44	@ 0x2c
 800a03a:	f7f8 f970 	bl	800231e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a03e:	202d      	movs	r0, #45	@ 0x2d
 800a040:	f7f8 f96d 	bl	800231e <HAL_NVIC_EnableIRQ>

  return;
 800a044:	bf00      	nop
}
 800a046:	bd80      	pop	{r7, pc}
 800a048:	58000c00 	.word	0x58000c00

0800a04c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a050:	2101      	movs	r1, #1
 800a052:	4802      	ldr	r0, [pc, #8]	@ (800a05c <HW_IPCC_BLE_Init+0x10>)
 800a054:	f7ff ff0a 	bl	8009e6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a058:	bf00      	nop
}
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	58000c00 	.word	0x58000c00

0800a060 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a064:	2101      	movs	r1, #1
 800a066:	4802      	ldr	r0, [pc, #8]	@ (800a070 <HW_IPCC_BLE_SendCmd+0x10>)
 800a068:	f7ff ff20 	bl	8009eac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a06c:	bf00      	nop
}
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	58000c00 	.word	0x58000c00

0800a074 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a078:	f7fd ffe4 	bl	8008044 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a07c:	2101      	movs	r1, #1
 800a07e:	4802      	ldr	r0, [pc, #8]	@ (800a088 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a080:	f7ff ff06 	bl	8009e90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a084:	bf00      	nop
}
 800a086:	bd80      	pop	{r7, pc}
 800a088:	58000c00 	.word	0x58000c00

0800a08c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a090:	2120      	movs	r1, #32
 800a092:	4803      	ldr	r0, [pc, #12]	@ (800a0a0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a094:	f7ff fed8 	bl	8009e48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a098:	f7fe f804 	bl	80080a4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a09c:	bf00      	nop
}
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	58000c00 	.word	0x58000c00

0800a0a4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a0a8:	2102      	movs	r1, #2
 800a0aa:	4802      	ldr	r0, [pc, #8]	@ (800a0b4 <HW_IPCC_SYS_Init+0x10>)
 800a0ac:	f7ff fede 	bl	8009e6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a0b0:	bf00      	nop
}
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	58000c00 	.word	0x58000c00

0800a0b8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a0bc:	2102      	movs	r1, #2
 800a0be:	4804      	ldr	r0, [pc, #16]	@ (800a0d0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a0c0:	f7ff fef4 	bl	8009eac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a0c4:	2102      	movs	r1, #2
 800a0c6:	4802      	ldr	r0, [pc, #8]	@ (800a0d0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a0c8:	f7ff feab 	bl	8009e22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a0cc:	bf00      	nop
}
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	58000c00 	.word	0x58000c00

0800a0d4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a0d8:	2102      	movs	r1, #2
 800a0da:	4803      	ldr	r0, [pc, #12]	@ (800a0e8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a0dc:	f7ff feb4 	bl	8009e48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a0e0:	f7fe f830 	bl	8008144 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a0e4:	bf00      	nop
}
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	58000c00 	.word	0x58000c00

0800a0ec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a0f0:	f7fe f83e 	bl	8008170 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a0f4:	2102      	movs	r1, #2
 800a0f6:	4802      	ldr	r0, [pc, #8]	@ (800a100 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a0f8:	f7ff feca 	bl	8009e90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a0fc:	bf00      	nop
}
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	58000c00 	.word	0x58000c00

0800a104 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a10c:	2108      	movs	r1, #8
 800a10e:	480c      	ldr	r0, [pc, #48]	@ (800a140 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a110:	f7ff fedb 	bl	8009eca <LL_C1_IPCC_IsActiveFlag_CHx>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d007      	beq.n	800a12a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a11a:	4a0a      	ldr	r2, [pc, #40]	@ (800a144 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a120:	2108      	movs	r1, #8
 800a122:	4807      	ldr	r0, [pc, #28]	@ (800a140 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a124:	f7ff fe7d 	bl	8009e22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a128:	e006      	b.n	800a138 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a12e:	2108      	movs	r1, #8
 800a130:	4803      	ldr	r0, [pc, #12]	@ (800a140 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a132:	f7ff febb 	bl	8009eac <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a136:	bf00      	nop
}
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	58000c00 	.word	0x58000c00
 800a144:	2000147c 	.word	0x2000147c

0800a148 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a14c:	2108      	movs	r1, #8
 800a14e:	4806      	ldr	r0, [pc, #24]	@ (800a168 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a150:	f7ff fe7a 	bl	8009e48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a154:	4b05      	ldr	r3, [pc, #20]	@ (800a16c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a15a:	2108      	movs	r1, #8
 800a15c:	4802      	ldr	r0, [pc, #8]	@ (800a168 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a15e:	f7ff fea5 	bl	8009eac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a162:	bf00      	nop
}
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	58000c00 	.word	0x58000c00
 800a16c:	2000147c 	.word	0x2000147c

0800a170 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a174:	2108      	movs	r1, #8
 800a176:	4802      	ldr	r0, [pc, #8]	@ (800a180 <HW_IPCC_TRACES_Init+0x10>)
 800a178:	f7ff fe78 	bl	8009e6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a17c:	bf00      	nop
}
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	58000c00 	.word	0x58000c00

0800a184 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a188:	f7fe f89a 	bl	80082c0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a18c:	2108      	movs	r1, #8
 800a18e:	4802      	ldr	r0, [pc, #8]	@ (800a198 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a190:	f7ff fe7e 	bl	8009e90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a194:	bf00      	nop
}
 800a196:	bd80      	pop	{r7, pc}
 800a198:	58000c00 	.word	0x58000c00

0800a19c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a1a0:	4b05      	ldr	r3, [pc, #20]	@ (800a1b8 <UTIL_LPM_Init+0x1c>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a1a6:	4b05      	ldr	r3, [pc, #20]	@ (800a1bc <UTIL_LPM_Init+0x20>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a1ac:	bf00      	nop
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20001480 	.word	0x20001480
 800a1bc:	20001484 	.word	0x20001484

0800a1c0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a1d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a1d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1d6:	b672      	cpsid	i
}
 800a1d8:	bf00      	nop
  
  switch(state)
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d008      	beq.n	800a1f2 <UTIL_LPM_SetOffMode+0x32>
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d10e      	bne.n	800a202 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a1e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a21c <UTIL_LPM_SetOffMode+0x5c>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a21c <UTIL_LPM_SetOffMode+0x5c>)
 800a1ee:	6013      	str	r3, [r2, #0]
      break;
 800a1f0:	e008      	b.n	800a204 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	43da      	mvns	r2, r3
 800a1f6:	4b09      	ldr	r3, [pc, #36]	@ (800a21c <UTIL_LPM_SetOffMode+0x5c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	4a07      	ldr	r2, [pc, #28]	@ (800a21c <UTIL_LPM_SetOffMode+0x5c>)
 800a1fe:	6013      	str	r3, [r2, #0]
      break;
 800a200:	e000      	b.n	800a204 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a202:	bf00      	nop
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f383 8810 	msr	PRIMASK, r3
}
 800a20e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a210:	bf00      	nop
 800a212:	371c      	adds	r7, #28
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	20001484 	.word	0x20001484

0800a220 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b090      	sub	sp, #64	@ 0x40
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a228:	4b73      	ldr	r3, [pc, #460]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800a22e:	4b72      	ldr	r3, [pc, #456]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4013      	ands	r3, r2
 800a236:	4a70      	ldr	r2, [pc, #448]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a238:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a23a:	4b70      	ldr	r3, [pc, #448]	@ (800a3fc <UTIL_SEQ_Run+0x1dc>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a240:	4b6f      	ldr	r3, [pc, #444]	@ (800a400 <UTIL_SEQ_Run+0x1e0>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a246:	4b6f      	ldr	r3, [pc, #444]	@ (800a404 <UTIL_SEQ_Run+0x1e4>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800a24c:	4b6e      	ldr	r3, [pc, #440]	@ (800a408 <UTIL_SEQ_Run+0x1e8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a252:	e08d      	b.n	800a370 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a258:	e002      	b.n	800a260 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a25a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a25c:	3301      	adds	r3, #1
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a260:	4a6a      	ldr	r2, [pc, #424]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a264:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26a:	401a      	ands	r2, r3
 800a26c:	4b62      	ldr	r3, [pc, #392]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4013      	ands	r3, r2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0f1      	beq.n	800a25a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a276:	4a65      	ldr	r2, [pc, #404]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	401a      	ands	r2, r3
 800a282:	4b5d      	ldr	r3, [pc, #372]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4013      	ands	r3, r2
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a28a:	4a60      	ldr	r2, [pc, #384]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	4413      	add	r3, r2
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a296:	4013      	ands	r3, r2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d106      	bne.n	800a2aa <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a29c:	4a5b      	ldr	r2, [pc, #364]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2a8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a2aa:	4a58      	ldr	r2, [pc, #352]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 f9b3 	bl	800a624 <SEQ_BitPosition>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b53      	ldr	r3, [pc, #332]	@ (800a410 <UTIL_SEQ_Run+0x1f0>)
 800a2c4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a2c6:	4a51      	ldr	r2, [pc, #324]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a2c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	4413      	add	r3, r2
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	4b4f      	ldr	r3, [pc, #316]	@ (800a410 <UTIL_SEQ_Run+0x1f0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2da:	43db      	mvns	r3, r3
 800a2dc:	401a      	ands	r2, r3
 800a2de:	494b      	ldr	r1, [pc, #300]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	440b      	add	r3, r1
 800a2e6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ec:	61bb      	str	r3, [r7, #24]
  return(result);
 800a2ee:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a2f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f2:	b672      	cpsid	i
}
 800a2f4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a2f6:	4b46      	ldr	r3, [pc, #280]	@ (800a410 <UTIL_SEQ_Run+0x1f0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a300:	43da      	mvns	r2, r3
 800a302:	4b3e      	ldr	r3, [pc, #248]	@ (800a3fc <UTIL_SEQ_Run+0x1dc>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4013      	ands	r3, r2
 800a308:	4a3c      	ldr	r2, [pc, #240]	@ (800a3fc <UTIL_SEQ_Run+0x1dc>)
 800a30a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a30c:	2301      	movs	r3, #1
 800a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a310:	e013      	b.n	800a33a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a314:	3b01      	subs	r3, #1
 800a316:	4a3d      	ldr	r2, [pc, #244]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a318:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a31c:	4b3c      	ldr	r3, [pc, #240]	@ (800a410 <UTIL_SEQ_Run+0x1f0>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2201      	movs	r2, #1
 800a322:	fa02 f303 	lsl.w	r3, r2, r3
 800a326:	43da      	mvns	r2, r3
 800a328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32a:	3b01      	subs	r3, #1
 800a32c:	400a      	ands	r2, r1
 800a32e:	4937      	ldr	r1, [pc, #220]	@ (800a40c <UTIL_SEQ_Run+0x1ec>)
 800a330:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	3b01      	subs	r3, #1
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e8      	bne.n	800a312 <UTIL_SEQ_Run+0xf2>
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f383 8810 	msr	PRIMASK, r3
}
 800a34a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a34c:	4b30      	ldr	r3, [pc, #192]	@ (800a410 <UTIL_SEQ_Run+0x1f0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a30      	ldr	r2, [pc, #192]	@ (800a414 <UTIL_SEQ_Run+0x1f4>)
 800a352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a356:	4798      	blx	r3

    local_taskset = TaskSet;
 800a358:	4b28      	ldr	r3, [pc, #160]	@ (800a3fc <UTIL_SEQ_Run+0x1dc>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800a35e:	4b28      	ldr	r3, [pc, #160]	@ (800a400 <UTIL_SEQ_Run+0x1e0>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800a364:	4b27      	ldr	r3, [pc, #156]	@ (800a404 <UTIL_SEQ_Run+0x1e4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800a36a:	4b27      	ldr	r3, [pc, #156]	@ (800a408 <UTIL_SEQ_Run+0x1e8>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	401a      	ands	r2, r3
 800a376:	4b20      	ldr	r3, [pc, #128]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4013      	ands	r3, r2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d005      	beq.n	800a38c <UTIL_SEQ_Run+0x16c>
 800a380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	4013      	ands	r3, r2
 800a386:	2b00      	cmp	r3, #0
 800a388:	f43f af64 	beq.w	800a254 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a38c:	4b20      	ldr	r3, [pc, #128]	@ (800a410 <UTIL_SEQ_Run+0x1f0>)
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a392:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a394:	f000 f938 	bl	800a608 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a398:	f3ef 8310 	mrs	r3, PRIMASK
 800a39c:	613b      	str	r3, [r7, #16]
  return(result);
 800a39e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a3a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3a2:	b672      	cpsid	i
}
 800a3a4:	bf00      	nop
  local_taskset = TaskSet;
 800a3a6:	4b15      	ldr	r3, [pc, #84]	@ (800a3fc <UTIL_SEQ_Run+0x1dc>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a3ac:	4b14      	ldr	r3, [pc, #80]	@ (800a400 <UTIL_SEQ_Run+0x1e0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a3b2:	4b14      	ldr	r3, [pc, #80]	@ (800a404 <UTIL_SEQ_Run+0x1e4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a3b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	401a      	ands	r2, r3
 800a3be:	4b0e      	ldr	r3, [pc, #56]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d107      	bne.n	800a3d8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a408 <UTIL_SEQ_Run+0x1e8>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a3d4:	f7f6 ff38 	bl	8001248 <UTIL_SEQ_Idle>
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f383 8810 	msr	PRIMASK, r3
}
 800a3e2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a3e4:	f000 f917 	bl	800a616 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a3e8:	4a03      	ldr	r2, [pc, #12]	@ (800a3f8 <UTIL_SEQ_Run+0x1d8>)
 800a3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ec:	6013      	str	r3, [r2, #0]

  return;
 800a3ee:	bf00      	nop
}
 800a3f0:	3740      	adds	r7, #64	@ 0x40
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000028 	.word	0x20000028
 800a3fc:	20001488 	.word	0x20001488
 800a400:	2000148c 	.word	0x2000148c
 800a404:	20000024 	.word	0x20000024
 800a408:	20001490 	.word	0x20001490
 800a40c:	20001518 	.word	0x20001518
 800a410:	20001494 	.word	0x20001494
 800a414:	20001498 	.word	0x20001498

0800a418 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a424:	f3ef 8310 	mrs	r3, PRIMASK
 800a428:	617b      	str	r3, [r7, #20]
  return(result);
 800a42a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a42c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a42e:	b672      	cpsid	i
}
 800a430:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 f8f6 	bl	800a624 <SEQ_BitPosition>
 800a438:	4603      	mov	r3, r0
 800a43a:	4619      	mov	r1, r3
 800a43c:	4a06      	ldr	r2, [pc, #24]	@ (800a458 <UTIL_SEQ_RegTask+0x40>)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	f383 8810 	msr	PRIMASK, r3
}
 800a44e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a450:	bf00      	nop
}
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20001498 	.word	0x20001498

0800a45c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a466:	f3ef 8310 	mrs	r3, PRIMASK
 800a46a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a46c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a46e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a470:	b672      	cpsid	i
}
 800a472:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a474:	4b0d      	ldr	r3, [pc, #52]	@ (800a4ac <UTIL_SEQ_SetTask+0x50>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	4a0b      	ldr	r2, [pc, #44]	@ (800a4ac <UTIL_SEQ_SetTask+0x50>)
 800a47e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a480:	4a0b      	ldr	r2, [pc, #44]	@ (800a4b0 <UTIL_SEQ_SetTask+0x54>)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	431a      	orrs	r2, r3
 800a48c:	4908      	ldr	r1, [pc, #32]	@ (800a4b0 <UTIL_SEQ_SetTask+0x54>)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f383 8810 	msr	PRIMASK, r3
}
 800a49e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a4a0:	bf00      	nop
}
 800a4a2:	371c      	adds	r7, #28
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	20001488 	.word	0x20001488
 800a4b0:	20001518 	.word	0x20001518

0800a4b4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a4c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4c6:	b672      	cpsid	i
}
 800a4c8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	43da      	mvns	r2, r3
 800a4ce:	4b08      	ldr	r3, [pc, #32]	@ (800a4f0 <UTIL_SEQ_PauseTask+0x3c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	4a06      	ldr	r2, [pc, #24]	@ (800a4f0 <UTIL_SEQ_PauseTask+0x3c>)
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f383 8810 	msr	PRIMASK, r3
}
 800a4e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a4e4:	bf00      	nop
}
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20000024 	.word	0x20000024

0800a4f4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a500:	60fb      	str	r3, [r7, #12]
  return(result);
 800a502:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a504:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a506:	b672      	cpsid	i
}
 800a508:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a50a:	4b09      	ldr	r3, [pc, #36]	@ (800a530 <UTIL_SEQ_ResumeTask+0x3c>)
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4313      	orrs	r3, r2
 800a512:	4a07      	ldr	r2, [pc, #28]	@ (800a530 <UTIL_SEQ_ResumeTask+0x3c>)
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f383 8810 	msr	PRIMASK, r3
}
 800a520:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a522:	bf00      	nop
}
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	20000024 	.word	0x20000024

0800a534 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a53c:	f3ef 8310 	mrs	r3, PRIMASK
 800a540:	60fb      	str	r3, [r7, #12]
  return(result);
 800a542:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a546:	b672      	cpsid	i
}
 800a548:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a54a:	4b09      	ldr	r3, [pc, #36]	@ (800a570 <UTIL_SEQ_SetEvt+0x3c>)
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4313      	orrs	r3, r2
 800a552:	4a07      	ldr	r2, [pc, #28]	@ (800a570 <UTIL_SEQ_SetEvt+0x3c>)
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f383 8810 	msr	PRIMASK, r3
}
 800a560:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a562:	bf00      	nop
}
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	2000148c 	.word	0x2000148c

0800a574 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a57c:	4b1f      	ldr	r3, [pc, #124]	@ (800a5fc <UTIL_SEQ_WaitEvt+0x88>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a582:	4b1e      	ldr	r3, [pc, #120]	@ (800a5fc <UTIL_SEQ_WaitEvt+0x88>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a58a:	d102      	bne.n	800a592 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	e005      	b.n	800a59e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a592:	4b1a      	ldr	r3, [pc, #104]	@ (800a5fc <UTIL_SEQ_WaitEvt+0x88>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2201      	movs	r2, #1
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a59e:	4b18      	ldr	r3, [pc, #96]	@ (800a600 <UTIL_SEQ_WaitEvt+0x8c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a5a4:	4a16      	ldr	r2, [pc, #88]	@ (800a600 <UTIL_SEQ_WaitEvt+0x8c>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a5aa:	e003      	b.n	800a5b4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	69f8      	ldr	r0, [r7, #28]
 800a5b0:	f7f6 fe51 	bl	8001256 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a5b4:	4b13      	ldr	r3, [pc, #76]	@ (800a604 <UTIL_SEQ_WaitEvt+0x90>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0f5      	beq.n	800a5ac <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a5c0:	4a0e      	ldr	r2, [pc, #56]	@ (800a5fc <UTIL_SEQ_WaitEvt+0x88>)
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5cc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a5ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d0:	b672      	cpsid	i
}
 800a5d2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	43da      	mvns	r2, r3
 800a5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a604 <UTIL_SEQ_WaitEvt+0x90>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	4a09      	ldr	r2, [pc, #36]	@ (800a604 <UTIL_SEQ_WaitEvt+0x90>)
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f383 8810 	msr	PRIMASK, r3
}
 800a5ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a5ee:	4a04      	ldr	r2, [pc, #16]	@ (800a600 <UTIL_SEQ_WaitEvt+0x8c>)
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	6013      	str	r3, [r2, #0]
  return;
 800a5f4:	bf00      	nop
}
 800a5f6:	3720      	adds	r7, #32
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20001494 	.word	0x20001494
 800a600:	20001490 	.word	0x20001490
 800a604:	2000148c 	.word	0x2000148c

0800a608 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a608:	b480      	push	{r7}
 800a60a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a60c:	bf00      	nop
}
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a616:	b480      	push	{r7}
 800a618:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a61a:	bf00      	nop
}
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <SEQ_BitPosition+0x16>
    return 32U;
 800a636:	2320      	movs	r3, #32
 800a638:	e003      	b.n	800a642 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	fab3 f383 	clz	r3, r3
 800a640:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800a642:	f1c3 031f 	rsb	r3, r3, #31
 800a646:	b2db      	uxtb	r3, r3
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <std>:
 800a654:	2300      	movs	r3, #0
 800a656:	b510      	push	{r4, lr}
 800a658:	4604      	mov	r4, r0
 800a65a:	e9c0 3300 	strd	r3, r3, [r0]
 800a65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a662:	6083      	str	r3, [r0, #8]
 800a664:	8181      	strh	r1, [r0, #12]
 800a666:	6643      	str	r3, [r0, #100]	@ 0x64
 800a668:	81c2      	strh	r2, [r0, #14]
 800a66a:	6183      	str	r3, [r0, #24]
 800a66c:	4619      	mov	r1, r3
 800a66e:	2208      	movs	r2, #8
 800a670:	305c      	adds	r0, #92	@ 0x5c
 800a672:	f000 fa01 	bl	800aa78 <memset>
 800a676:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ac <std+0x58>)
 800a678:	6263      	str	r3, [r4, #36]	@ 0x24
 800a67a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b0 <std+0x5c>)
 800a67c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a67e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b4 <std+0x60>)
 800a680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a682:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <std+0x64>)
 800a684:	6323      	str	r3, [r4, #48]	@ 0x30
 800a686:	4b0d      	ldr	r3, [pc, #52]	@ (800a6bc <std+0x68>)
 800a688:	6224      	str	r4, [r4, #32]
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d006      	beq.n	800a69c <std+0x48>
 800a68e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a692:	4294      	cmp	r4, r2
 800a694:	d002      	beq.n	800a69c <std+0x48>
 800a696:	33d0      	adds	r3, #208	@ 0xd0
 800a698:	429c      	cmp	r4, r3
 800a69a:	d105      	bne.n	800a6a8 <std+0x54>
 800a69c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6a4:	f000 ba60 	b.w	800ab68 <__retarget_lock_init_recursive>
 800a6a8:	bd10      	pop	{r4, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800a8c9 	.word	0x0800a8c9
 800a6b0:	0800a8eb 	.word	0x0800a8eb
 800a6b4:	0800a923 	.word	0x0800a923
 800a6b8:	0800a947 	.word	0x0800a947
 800a6bc:	20001520 	.word	0x20001520

0800a6c0 <stdio_exit_handler>:
 800a6c0:	4a02      	ldr	r2, [pc, #8]	@ (800a6cc <stdio_exit_handler+0xc>)
 800a6c2:	4903      	ldr	r1, [pc, #12]	@ (800a6d0 <stdio_exit_handler+0x10>)
 800a6c4:	4803      	ldr	r0, [pc, #12]	@ (800a6d4 <stdio_exit_handler+0x14>)
 800a6c6:	f000 b869 	b.w	800a79c <_fwalk_sglue>
 800a6ca:	bf00      	nop
 800a6cc:	2000002c 	.word	0x2000002c
 800a6d0:	0800b425 	.word	0x0800b425
 800a6d4:	2000003c 	.word	0x2000003c

0800a6d8 <cleanup_stdio>:
 800a6d8:	6841      	ldr	r1, [r0, #4]
 800a6da:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <cleanup_stdio+0x34>)
 800a6dc:	4299      	cmp	r1, r3
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	d001      	beq.n	800a6e8 <cleanup_stdio+0x10>
 800a6e4:	f000 fe9e 	bl	800b424 <_fflush_r>
 800a6e8:	68a1      	ldr	r1, [r4, #8]
 800a6ea:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <cleanup_stdio+0x38>)
 800a6ec:	4299      	cmp	r1, r3
 800a6ee:	d002      	beq.n	800a6f6 <cleanup_stdio+0x1e>
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f000 fe97 	bl	800b424 <_fflush_r>
 800a6f6:	68e1      	ldr	r1, [r4, #12]
 800a6f8:	4b06      	ldr	r3, [pc, #24]	@ (800a714 <cleanup_stdio+0x3c>)
 800a6fa:	4299      	cmp	r1, r3
 800a6fc:	d004      	beq.n	800a708 <cleanup_stdio+0x30>
 800a6fe:	4620      	mov	r0, r4
 800a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a704:	f000 be8e 	b.w	800b424 <_fflush_r>
 800a708:	bd10      	pop	{r4, pc}
 800a70a:	bf00      	nop
 800a70c:	20001520 	.word	0x20001520
 800a710:	20001588 	.word	0x20001588
 800a714:	200015f0 	.word	0x200015f0

0800a718 <global_stdio_init.part.0>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <global_stdio_init.part.0+0x30>)
 800a71c:	4c0b      	ldr	r4, [pc, #44]	@ (800a74c <global_stdio_init.part.0+0x34>)
 800a71e:	4a0c      	ldr	r2, [pc, #48]	@ (800a750 <global_stdio_init.part.0+0x38>)
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	4620      	mov	r0, r4
 800a724:	2200      	movs	r2, #0
 800a726:	2104      	movs	r1, #4
 800a728:	f7ff ff94 	bl	800a654 <std>
 800a72c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a730:	2201      	movs	r2, #1
 800a732:	2109      	movs	r1, #9
 800a734:	f7ff ff8e 	bl	800a654 <std>
 800a738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a73c:	2202      	movs	r2, #2
 800a73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a742:	2112      	movs	r1, #18
 800a744:	f7ff bf86 	b.w	800a654 <std>
 800a748:	20001658 	.word	0x20001658
 800a74c:	20001520 	.word	0x20001520
 800a750:	0800a6c1 	.word	0x0800a6c1

0800a754 <__sfp_lock_acquire>:
 800a754:	4801      	ldr	r0, [pc, #4]	@ (800a75c <__sfp_lock_acquire+0x8>)
 800a756:	f000 ba08 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	20001661 	.word	0x20001661

0800a760 <__sfp_lock_release>:
 800a760:	4801      	ldr	r0, [pc, #4]	@ (800a768 <__sfp_lock_release+0x8>)
 800a762:	f000 ba03 	b.w	800ab6c <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	20001661 	.word	0x20001661

0800a76c <__sinit>:
 800a76c:	b510      	push	{r4, lr}
 800a76e:	4604      	mov	r4, r0
 800a770:	f7ff fff0 	bl	800a754 <__sfp_lock_acquire>
 800a774:	6a23      	ldr	r3, [r4, #32]
 800a776:	b11b      	cbz	r3, 800a780 <__sinit+0x14>
 800a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a77c:	f7ff bff0 	b.w	800a760 <__sfp_lock_release>
 800a780:	4b04      	ldr	r3, [pc, #16]	@ (800a794 <__sinit+0x28>)
 800a782:	6223      	str	r3, [r4, #32]
 800a784:	4b04      	ldr	r3, [pc, #16]	@ (800a798 <__sinit+0x2c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1f5      	bne.n	800a778 <__sinit+0xc>
 800a78c:	f7ff ffc4 	bl	800a718 <global_stdio_init.part.0>
 800a790:	e7f2      	b.n	800a778 <__sinit+0xc>
 800a792:	bf00      	nop
 800a794:	0800a6d9 	.word	0x0800a6d9
 800a798:	20001658 	.word	0x20001658

0800a79c <_fwalk_sglue>:
 800a79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	4688      	mov	r8, r1
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7ac:	f1b9 0901 	subs.w	r9, r9, #1
 800a7b0:	d505      	bpl.n	800a7be <_fwalk_sglue+0x22>
 800a7b2:	6824      	ldr	r4, [r4, #0]
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	d1f7      	bne.n	800a7a8 <_fwalk_sglue+0xc>
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d907      	bls.n	800a7d4 <_fwalk_sglue+0x38>
 800a7c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	d003      	beq.n	800a7d4 <_fwalk_sglue+0x38>
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c0      	blx	r8
 800a7d2:	4306      	orrs	r6, r0
 800a7d4:	3568      	adds	r5, #104	@ 0x68
 800a7d6:	e7e9      	b.n	800a7ac <_fwalk_sglue+0x10>

0800a7d8 <iprintf>:
 800a7d8:	b40f      	push	{r0, r1, r2, r3}
 800a7da:	b507      	push	{r0, r1, r2, lr}
 800a7dc:	4906      	ldr	r1, [pc, #24]	@ (800a7f8 <iprintf+0x20>)
 800a7de:	ab04      	add	r3, sp, #16
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e6:	6881      	ldr	r1, [r0, #8]
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	f000 faf1 	bl	800add0 <_vfiprintf_r>
 800a7ee:	b003      	add	sp, #12
 800a7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f4:	b004      	add	sp, #16
 800a7f6:	4770      	bx	lr
 800a7f8:	20000038 	.word	0x20000038

0800a7fc <putchar>:
 800a7fc:	4b02      	ldr	r3, [pc, #8]	@ (800a808 <putchar+0xc>)
 800a7fe:	4601      	mov	r1, r0
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	6882      	ldr	r2, [r0, #8]
 800a804:	f000 be98 	b.w	800b538 <_putc_r>
 800a808:	20000038 	.word	0x20000038

0800a80c <_puts_r>:
 800a80c:	6a03      	ldr	r3, [r0, #32]
 800a80e:	b570      	push	{r4, r5, r6, lr}
 800a810:	6884      	ldr	r4, [r0, #8]
 800a812:	4605      	mov	r5, r0
 800a814:	460e      	mov	r6, r1
 800a816:	b90b      	cbnz	r3, 800a81c <_puts_r+0x10>
 800a818:	f7ff ffa8 	bl	800a76c <__sinit>
 800a81c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a81e:	07db      	lsls	r3, r3, #31
 800a820:	d405      	bmi.n	800a82e <_puts_r+0x22>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	0598      	lsls	r0, r3, #22
 800a826:	d402      	bmi.n	800a82e <_puts_r+0x22>
 800a828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a82a:	f000 f99e 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	0719      	lsls	r1, r3, #28
 800a832:	d502      	bpl.n	800a83a <_puts_r+0x2e>
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d135      	bne.n	800a8a6 <_puts_r+0x9a>
 800a83a:	4621      	mov	r1, r4
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 f8c5 	bl	800a9cc <__swsetup_r>
 800a842:	b380      	cbz	r0, 800a8a6 <_puts_r+0x9a>
 800a844:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a84a:	07da      	lsls	r2, r3, #31
 800a84c:	d405      	bmi.n	800a85a <_puts_r+0x4e>
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	059b      	lsls	r3, r3, #22
 800a852:	d402      	bmi.n	800a85a <_puts_r+0x4e>
 800a854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a856:	f000 f989 	bl	800ab6c <__retarget_lock_release_recursive>
 800a85a:	4628      	mov	r0, r5
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da04      	bge.n	800a86c <_puts_r+0x60>
 800a862:	69a2      	ldr	r2, [r4, #24]
 800a864:	429a      	cmp	r2, r3
 800a866:	dc17      	bgt.n	800a898 <_puts_r+0x8c>
 800a868:	290a      	cmp	r1, #10
 800a86a:	d015      	beq.n	800a898 <_puts_r+0x8c>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	6022      	str	r2, [r4, #0]
 800a872:	7019      	strb	r1, [r3, #0]
 800a874:	68a3      	ldr	r3, [r4, #8]
 800a876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a87a:	3b01      	subs	r3, #1
 800a87c:	60a3      	str	r3, [r4, #8]
 800a87e:	2900      	cmp	r1, #0
 800a880:	d1ed      	bne.n	800a85e <_puts_r+0x52>
 800a882:	2b00      	cmp	r3, #0
 800a884:	da11      	bge.n	800a8aa <_puts_r+0x9e>
 800a886:	4622      	mov	r2, r4
 800a888:	210a      	movs	r1, #10
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 f85f 	bl	800a94e <__swbuf_r>
 800a890:	3001      	adds	r0, #1
 800a892:	d0d7      	beq.n	800a844 <_puts_r+0x38>
 800a894:	250a      	movs	r5, #10
 800a896:	e7d7      	b.n	800a848 <_puts_r+0x3c>
 800a898:	4622      	mov	r2, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	f000 f857 	bl	800a94e <__swbuf_r>
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d1e7      	bne.n	800a874 <_puts_r+0x68>
 800a8a4:	e7ce      	b.n	800a844 <_puts_r+0x38>
 800a8a6:	3e01      	subs	r6, #1
 800a8a8:	e7e4      	b.n	800a874 <_puts_r+0x68>
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	6022      	str	r2, [r4, #0]
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	701a      	strb	r2, [r3, #0]
 800a8b4:	e7ee      	b.n	800a894 <_puts_r+0x88>
	...

0800a8b8 <puts>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	@ (800a8c4 <puts+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f7ff bfa5 	b.w	800a80c <_puts_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000038 	.word	0x20000038

0800a8c8 <__sread>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d0:	f000 f8fc 	bl	800aacc <_read_r>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	bfab      	itete	ge
 800a8d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8da:	89a3      	ldrhlt	r3, [r4, #12]
 800a8dc:	181b      	addge	r3, r3, r0
 800a8de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8e2:	bfac      	ite	ge
 800a8e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8e6:	81a3      	strhlt	r3, [r4, #12]
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <__swrite>:
 800a8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ee:	461f      	mov	r7, r3
 800a8f0:	898b      	ldrh	r3, [r1, #12]
 800a8f2:	05db      	lsls	r3, r3, #23
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	d505      	bpl.n	800a908 <__swrite+0x1e>
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	2302      	movs	r3, #2
 800a902:	2200      	movs	r2, #0
 800a904:	f000 f8d0 	bl	800aaa8 <_lseek_r>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a912:	81a3      	strh	r3, [r4, #12]
 800a914:	4632      	mov	r2, r6
 800a916:	463b      	mov	r3, r7
 800a918:	4628      	mov	r0, r5
 800a91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	f000 b8e7 	b.w	800aaf0 <_write_r>

0800a922 <__sseek>:
 800a922:	b510      	push	{r4, lr}
 800a924:	460c      	mov	r4, r1
 800a926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92a:	f000 f8bd 	bl	800aaa8 <_lseek_r>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	bf15      	itete	ne
 800a934:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a93a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a93e:	81a3      	strheq	r3, [r4, #12]
 800a940:	bf18      	it	ne
 800a942:	81a3      	strhne	r3, [r4, #12]
 800a944:	bd10      	pop	{r4, pc}

0800a946 <__sclose>:
 800a946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94a:	f000 b89d 	b.w	800aa88 <_close_r>

0800a94e <__swbuf_r>:
 800a94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a950:	460e      	mov	r6, r1
 800a952:	4614      	mov	r4, r2
 800a954:	4605      	mov	r5, r0
 800a956:	b118      	cbz	r0, 800a960 <__swbuf_r+0x12>
 800a958:	6a03      	ldr	r3, [r0, #32]
 800a95a:	b90b      	cbnz	r3, 800a960 <__swbuf_r+0x12>
 800a95c:	f7ff ff06 	bl	800a76c <__sinit>
 800a960:	69a3      	ldr	r3, [r4, #24]
 800a962:	60a3      	str	r3, [r4, #8]
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	071a      	lsls	r2, r3, #28
 800a968:	d501      	bpl.n	800a96e <__swbuf_r+0x20>
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	b943      	cbnz	r3, 800a980 <__swbuf_r+0x32>
 800a96e:	4621      	mov	r1, r4
 800a970:	4628      	mov	r0, r5
 800a972:	f000 f82b 	bl	800a9cc <__swsetup_r>
 800a976:	b118      	cbz	r0, 800a980 <__swbuf_r+0x32>
 800a978:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a97c:	4638      	mov	r0, r7
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	6922      	ldr	r2, [r4, #16]
 800a984:	1a98      	subs	r0, r3, r2
 800a986:	6963      	ldr	r3, [r4, #20]
 800a988:	b2f6      	uxtb	r6, r6
 800a98a:	4283      	cmp	r3, r0
 800a98c:	4637      	mov	r7, r6
 800a98e:	dc05      	bgt.n	800a99c <__swbuf_r+0x4e>
 800a990:	4621      	mov	r1, r4
 800a992:	4628      	mov	r0, r5
 800a994:	f000 fd46 	bl	800b424 <_fflush_r>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d1ed      	bne.n	800a978 <__swbuf_r+0x2a>
 800a99c:	68a3      	ldr	r3, [r4, #8]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	60a3      	str	r3, [r4, #8]
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	6022      	str	r2, [r4, #0]
 800a9a8:	701e      	strb	r6, [r3, #0]
 800a9aa:	6962      	ldr	r2, [r4, #20]
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d004      	beq.n	800a9bc <__swbuf_r+0x6e>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	07db      	lsls	r3, r3, #31
 800a9b6:	d5e1      	bpl.n	800a97c <__swbuf_r+0x2e>
 800a9b8:	2e0a      	cmp	r6, #10
 800a9ba:	d1df      	bne.n	800a97c <__swbuf_r+0x2e>
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f000 fd30 	bl	800b424 <_fflush_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d0d9      	beq.n	800a97c <__swbuf_r+0x2e>
 800a9c8:	e7d6      	b.n	800a978 <__swbuf_r+0x2a>
	...

0800a9cc <__swsetup_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4b29      	ldr	r3, [pc, #164]	@ (800aa74 <__swsetup_r+0xa8>)
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	b118      	cbz	r0, 800a9e0 <__swsetup_r+0x14>
 800a9d8:	6a03      	ldr	r3, [r0, #32]
 800a9da:	b90b      	cbnz	r3, 800a9e0 <__swsetup_r+0x14>
 800a9dc:	f7ff fec6 	bl	800a76c <__sinit>
 800a9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e4:	0719      	lsls	r1, r3, #28
 800a9e6:	d422      	bmi.n	800aa2e <__swsetup_r+0x62>
 800a9e8:	06da      	lsls	r2, r3, #27
 800a9ea:	d407      	bmi.n	800a9fc <__swsetup_r+0x30>
 800a9ec:	2209      	movs	r2, #9
 800a9ee:	602a      	str	r2, [r5, #0]
 800a9f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f4:	81a3      	strh	r3, [r4, #12]
 800a9f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9fa:	e033      	b.n	800aa64 <__swsetup_r+0x98>
 800a9fc:	0758      	lsls	r0, r3, #29
 800a9fe:	d512      	bpl.n	800aa26 <__swsetup_r+0x5a>
 800aa00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa02:	b141      	cbz	r1, 800aa16 <__swsetup_r+0x4a>
 800aa04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa08:	4299      	cmp	r1, r3
 800aa0a:	d002      	beq.n	800aa12 <__swsetup_r+0x46>
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f000 f8bd 	bl	800ab8c <_free_r>
 800aa12:	2300      	movs	r3, #0
 800aa14:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	2300      	movs	r3, #0
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	f043 0308 	orr.w	r3, r3, #8
 800aa2c:	81a3      	strh	r3, [r4, #12]
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	b94b      	cbnz	r3, 800aa46 <__swsetup_r+0x7a>
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa3c:	d003      	beq.n	800aa46 <__swsetup_r+0x7a>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4628      	mov	r0, r5
 800aa42:	f000 fd3d 	bl	800b4c0 <__smakebuf_r>
 800aa46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4a:	f013 0201 	ands.w	r2, r3, #1
 800aa4e:	d00a      	beq.n	800aa66 <__swsetup_r+0x9a>
 800aa50:	2200      	movs	r2, #0
 800aa52:	60a2      	str	r2, [r4, #8]
 800aa54:	6962      	ldr	r2, [r4, #20]
 800aa56:	4252      	negs	r2, r2
 800aa58:	61a2      	str	r2, [r4, #24]
 800aa5a:	6922      	ldr	r2, [r4, #16]
 800aa5c:	b942      	cbnz	r2, 800aa70 <__swsetup_r+0xa4>
 800aa5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa62:	d1c5      	bne.n	800a9f0 <__swsetup_r+0x24>
 800aa64:	bd38      	pop	{r3, r4, r5, pc}
 800aa66:	0799      	lsls	r1, r3, #30
 800aa68:	bf58      	it	pl
 800aa6a:	6962      	ldrpl	r2, [r4, #20]
 800aa6c:	60a2      	str	r2, [r4, #8]
 800aa6e:	e7f4      	b.n	800aa5a <__swsetup_r+0x8e>
 800aa70:	2000      	movs	r0, #0
 800aa72:	e7f7      	b.n	800aa64 <__swsetup_r+0x98>
 800aa74:	20000038 	.word	0x20000038

0800aa78 <memset>:
 800aa78:	4402      	add	r2, r0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d100      	bne.n	800aa82 <memset+0xa>
 800aa80:	4770      	bx	lr
 800aa82:	f803 1b01 	strb.w	r1, [r3], #1
 800aa86:	e7f9      	b.n	800aa7c <memset+0x4>

0800aa88 <_close_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	@ (800aaa4 <_close_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f7 f969 	bl	8001d6a <_close>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_close_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_close_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	2000165c 	.word	0x2000165c

0800aaa8 <_lseek_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	@ (800aac8 <_lseek_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f7 f97e 	bl	8001db8 <_lseek>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_lseek_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_lseek_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	2000165c 	.word	0x2000165c

0800aacc <_read_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	@ (800aaec <_read_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f7 f928 	bl	8001d30 <_read>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_read_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_read_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	2000165c 	.word	0x2000165c

0800aaf0 <_write_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	@ (800ab10 <_write_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7fd fca6 	bl	8008450 <_write>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_write_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_write_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	2000165c 	.word	0x2000165c

0800ab14 <__errno>:
 800ab14:	4b01      	ldr	r3, [pc, #4]	@ (800ab1c <__errno+0x8>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20000038 	.word	0x20000038

0800ab20 <__libc_init_array>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4d0d      	ldr	r5, [pc, #52]	@ (800ab58 <__libc_init_array+0x38>)
 800ab24:	4c0d      	ldr	r4, [pc, #52]	@ (800ab5c <__libc_init_array+0x3c>)
 800ab26:	1b64      	subs	r4, r4, r5
 800ab28:	10a4      	asrs	r4, r4, #2
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	d109      	bne.n	800ab44 <__libc_init_array+0x24>
 800ab30:	4d0b      	ldr	r5, [pc, #44]	@ (800ab60 <__libc_init_array+0x40>)
 800ab32:	4c0c      	ldr	r4, [pc, #48]	@ (800ab64 <__libc_init_array+0x44>)
 800ab34:	f000 fd66 	bl	800b604 <_init>
 800ab38:	1b64      	subs	r4, r4, r5
 800ab3a:	10a4      	asrs	r4, r4, #2
 800ab3c:	2600      	movs	r6, #0
 800ab3e:	42a6      	cmp	r6, r4
 800ab40:	d105      	bne.n	800ab4e <__libc_init_array+0x2e>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab48:	4798      	blx	r3
 800ab4a:	3601      	adds	r6, #1
 800ab4c:	e7ee      	b.n	800ab2c <__libc_init_array+0xc>
 800ab4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab52:	4798      	blx	r3
 800ab54:	3601      	adds	r6, #1
 800ab56:	e7f2      	b.n	800ab3e <__libc_init_array+0x1e>
 800ab58:	0800cdd8 	.word	0x0800cdd8
 800ab5c:	0800cdd8 	.word	0x0800cdd8
 800ab60:	0800cdd8 	.word	0x0800cdd8
 800ab64:	0800cddc 	.word	0x0800cddc

0800ab68 <__retarget_lock_init_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_acquire_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <__retarget_lock_release_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <memcpy>:
 800ab6e:	440a      	add	r2, r1
 800ab70:	4291      	cmp	r1, r2
 800ab72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ab76:	d100      	bne.n	800ab7a <memcpy+0xc>
 800ab78:	4770      	bx	lr
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab84:	4291      	cmp	r1, r2
 800ab86:	d1f9      	bne.n	800ab7c <memcpy+0xe>
 800ab88:	bd10      	pop	{r4, pc}
	...

0800ab8c <_free_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4605      	mov	r5, r0
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d041      	beq.n	800ac18 <_free_r+0x8c>
 800ab94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab98:	1f0c      	subs	r4, r1, #4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	bfb8      	it	lt
 800ab9e:	18e4      	addlt	r4, r4, r3
 800aba0:	f000 f8e0 	bl	800ad64 <__malloc_lock>
 800aba4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac1c <_free_r+0x90>)
 800aba6:	6813      	ldr	r3, [r2, #0]
 800aba8:	b933      	cbnz	r3, 800abb8 <_free_r+0x2c>
 800abaa:	6063      	str	r3, [r4, #4]
 800abac:	6014      	str	r4, [r2, #0]
 800abae:	4628      	mov	r0, r5
 800abb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb4:	f000 b8dc 	b.w	800ad70 <__malloc_unlock>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d908      	bls.n	800abce <_free_r+0x42>
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	1821      	adds	r1, r4, r0
 800abc0:	428b      	cmp	r3, r1
 800abc2:	bf01      	itttt	eq
 800abc4:	6819      	ldreq	r1, [r3, #0]
 800abc6:	685b      	ldreq	r3, [r3, #4]
 800abc8:	1809      	addeq	r1, r1, r0
 800abca:	6021      	streq	r1, [r4, #0]
 800abcc:	e7ed      	b.n	800abaa <_free_r+0x1e>
 800abce:	461a      	mov	r2, r3
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	b10b      	cbz	r3, 800abd8 <_free_r+0x4c>
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	d9fa      	bls.n	800abce <_free_r+0x42>
 800abd8:	6811      	ldr	r1, [r2, #0]
 800abda:	1850      	adds	r0, r2, r1
 800abdc:	42a0      	cmp	r0, r4
 800abde:	d10b      	bne.n	800abf8 <_free_r+0x6c>
 800abe0:	6820      	ldr	r0, [r4, #0]
 800abe2:	4401      	add	r1, r0
 800abe4:	1850      	adds	r0, r2, r1
 800abe6:	4283      	cmp	r3, r0
 800abe8:	6011      	str	r1, [r2, #0]
 800abea:	d1e0      	bne.n	800abae <_free_r+0x22>
 800abec:	6818      	ldr	r0, [r3, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	6053      	str	r3, [r2, #4]
 800abf2:	4408      	add	r0, r1
 800abf4:	6010      	str	r0, [r2, #0]
 800abf6:	e7da      	b.n	800abae <_free_r+0x22>
 800abf8:	d902      	bls.n	800ac00 <_free_r+0x74>
 800abfa:	230c      	movs	r3, #12
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	e7d6      	b.n	800abae <_free_r+0x22>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	1821      	adds	r1, r4, r0
 800ac04:	428b      	cmp	r3, r1
 800ac06:	bf04      	itt	eq
 800ac08:	6819      	ldreq	r1, [r3, #0]
 800ac0a:	685b      	ldreq	r3, [r3, #4]
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	bf04      	itt	eq
 800ac10:	1809      	addeq	r1, r1, r0
 800ac12:	6021      	streq	r1, [r4, #0]
 800ac14:	6054      	str	r4, [r2, #4]
 800ac16:	e7ca      	b.n	800abae <_free_r+0x22>
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20001668 	.word	0x20001668

0800ac20 <sbrk_aligned>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	4e0f      	ldr	r6, [pc, #60]	@ (800ac60 <sbrk_aligned+0x40>)
 800ac24:	460c      	mov	r4, r1
 800ac26:	6831      	ldr	r1, [r6, #0]
 800ac28:	4605      	mov	r5, r0
 800ac2a:	b911      	cbnz	r1, 800ac32 <sbrk_aligned+0x12>
 800ac2c:	f000 fcda 	bl	800b5e4 <_sbrk_r>
 800ac30:	6030      	str	r0, [r6, #0]
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 fcd5 	bl	800b5e4 <_sbrk_r>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	d103      	bne.n	800ac46 <sbrk_aligned+0x26>
 800ac3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac42:	4620      	mov	r0, r4
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	1cc4      	adds	r4, r0, #3
 800ac48:	f024 0403 	bic.w	r4, r4, #3
 800ac4c:	42a0      	cmp	r0, r4
 800ac4e:	d0f8      	beq.n	800ac42 <sbrk_aligned+0x22>
 800ac50:	1a21      	subs	r1, r4, r0
 800ac52:	4628      	mov	r0, r5
 800ac54:	f000 fcc6 	bl	800b5e4 <_sbrk_r>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d1f2      	bne.n	800ac42 <sbrk_aligned+0x22>
 800ac5c:	e7ef      	b.n	800ac3e <sbrk_aligned+0x1e>
 800ac5e:	bf00      	nop
 800ac60:	20001664 	.word	0x20001664

0800ac64 <_malloc_r>:
 800ac64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	1ccd      	adds	r5, r1, #3
 800ac6a:	f025 0503 	bic.w	r5, r5, #3
 800ac6e:	3508      	adds	r5, #8
 800ac70:	2d0c      	cmp	r5, #12
 800ac72:	bf38      	it	cc
 800ac74:	250c      	movcc	r5, #12
 800ac76:	2d00      	cmp	r5, #0
 800ac78:	4606      	mov	r6, r0
 800ac7a:	db01      	blt.n	800ac80 <_malloc_r+0x1c>
 800ac7c:	42a9      	cmp	r1, r5
 800ac7e:	d904      	bls.n	800ac8a <_malloc_r+0x26>
 800ac80:	230c      	movs	r3, #12
 800ac82:	6033      	str	r3, [r6, #0]
 800ac84:	2000      	movs	r0, #0
 800ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad60 <_malloc_r+0xfc>
 800ac8e:	f000 f869 	bl	800ad64 <__malloc_lock>
 800ac92:	f8d8 3000 	ldr.w	r3, [r8]
 800ac96:	461c      	mov	r4, r3
 800ac98:	bb44      	cbnz	r4, 800acec <_malloc_r+0x88>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff ffbf 	bl	800ac20 <sbrk_aligned>
 800aca2:	1c43      	adds	r3, r0, #1
 800aca4:	4604      	mov	r4, r0
 800aca6:	d158      	bne.n	800ad5a <_malloc_r+0xf6>
 800aca8:	f8d8 4000 	ldr.w	r4, [r8]
 800acac:	4627      	mov	r7, r4
 800acae:	2f00      	cmp	r7, #0
 800acb0:	d143      	bne.n	800ad3a <_malloc_r+0xd6>
 800acb2:	2c00      	cmp	r4, #0
 800acb4:	d04b      	beq.n	800ad4e <_malloc_r+0xea>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	4639      	mov	r1, r7
 800acba:	4630      	mov	r0, r6
 800acbc:	eb04 0903 	add.w	r9, r4, r3
 800acc0:	f000 fc90 	bl	800b5e4 <_sbrk_r>
 800acc4:	4581      	cmp	r9, r0
 800acc6:	d142      	bne.n	800ad4e <_malloc_r+0xea>
 800acc8:	6821      	ldr	r1, [r4, #0]
 800acca:	1a6d      	subs	r5, r5, r1
 800accc:	4629      	mov	r1, r5
 800acce:	4630      	mov	r0, r6
 800acd0:	f7ff ffa6 	bl	800ac20 <sbrk_aligned>
 800acd4:	3001      	adds	r0, #1
 800acd6:	d03a      	beq.n	800ad4e <_malloc_r+0xea>
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	442b      	add	r3, r5
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	f8d8 3000 	ldr.w	r3, [r8]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	bb62      	cbnz	r2, 800ad40 <_malloc_r+0xdc>
 800ace6:	f8c8 7000 	str.w	r7, [r8]
 800acea:	e00f      	b.n	800ad0c <_malloc_r+0xa8>
 800acec:	6822      	ldr	r2, [r4, #0]
 800acee:	1b52      	subs	r2, r2, r5
 800acf0:	d420      	bmi.n	800ad34 <_malloc_r+0xd0>
 800acf2:	2a0b      	cmp	r2, #11
 800acf4:	d917      	bls.n	800ad26 <_malloc_r+0xc2>
 800acf6:	1961      	adds	r1, r4, r5
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	6025      	str	r5, [r4, #0]
 800acfc:	bf18      	it	ne
 800acfe:	6059      	strne	r1, [r3, #4]
 800ad00:	6863      	ldr	r3, [r4, #4]
 800ad02:	bf08      	it	eq
 800ad04:	f8c8 1000 	streq.w	r1, [r8]
 800ad08:	5162      	str	r2, [r4, r5]
 800ad0a:	604b      	str	r3, [r1, #4]
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f000 f82f 	bl	800ad70 <__malloc_unlock>
 800ad12:	f104 000b 	add.w	r0, r4, #11
 800ad16:	1d23      	adds	r3, r4, #4
 800ad18:	f020 0007 	bic.w	r0, r0, #7
 800ad1c:	1ac2      	subs	r2, r0, r3
 800ad1e:	bf1c      	itt	ne
 800ad20:	1a1b      	subne	r3, r3, r0
 800ad22:	50a3      	strne	r3, [r4, r2]
 800ad24:	e7af      	b.n	800ac86 <_malloc_r+0x22>
 800ad26:	6862      	ldr	r2, [r4, #4]
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	bf0c      	ite	eq
 800ad2c:	f8c8 2000 	streq.w	r2, [r8]
 800ad30:	605a      	strne	r2, [r3, #4]
 800ad32:	e7eb      	b.n	800ad0c <_malloc_r+0xa8>
 800ad34:	4623      	mov	r3, r4
 800ad36:	6864      	ldr	r4, [r4, #4]
 800ad38:	e7ae      	b.n	800ac98 <_malloc_r+0x34>
 800ad3a:	463c      	mov	r4, r7
 800ad3c:	687f      	ldr	r7, [r7, #4]
 800ad3e:	e7b6      	b.n	800acae <_malloc_r+0x4a>
 800ad40:	461a      	mov	r2, r3
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	d1fb      	bne.n	800ad40 <_malloc_r+0xdc>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	6053      	str	r3, [r2, #4]
 800ad4c:	e7de      	b.n	800ad0c <_malloc_r+0xa8>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	4630      	mov	r0, r6
 800ad54:	f000 f80c 	bl	800ad70 <__malloc_unlock>
 800ad58:	e794      	b.n	800ac84 <_malloc_r+0x20>
 800ad5a:	6005      	str	r5, [r0, #0]
 800ad5c:	e7d6      	b.n	800ad0c <_malloc_r+0xa8>
 800ad5e:	bf00      	nop
 800ad60:	20001668 	.word	0x20001668

0800ad64 <__malloc_lock>:
 800ad64:	4801      	ldr	r0, [pc, #4]	@ (800ad6c <__malloc_lock+0x8>)
 800ad66:	f7ff bf00 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	20001660 	.word	0x20001660

0800ad70 <__malloc_unlock>:
 800ad70:	4801      	ldr	r0, [pc, #4]	@ (800ad78 <__malloc_unlock+0x8>)
 800ad72:	f7ff befb 	b.w	800ab6c <__retarget_lock_release_recursive>
 800ad76:	bf00      	nop
 800ad78:	20001660 	.word	0x20001660

0800ad7c <__sfputc_r>:
 800ad7c:	6893      	ldr	r3, [r2, #8]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	b410      	push	{r4}
 800ad84:	6093      	str	r3, [r2, #8]
 800ad86:	da08      	bge.n	800ad9a <__sfputc_r+0x1e>
 800ad88:	6994      	ldr	r4, [r2, #24]
 800ad8a:	42a3      	cmp	r3, r4
 800ad8c:	db01      	blt.n	800ad92 <__sfputc_r+0x16>
 800ad8e:	290a      	cmp	r1, #10
 800ad90:	d103      	bne.n	800ad9a <__sfputc_r+0x1e>
 800ad92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad96:	f7ff bdda 	b.w	800a94e <__swbuf_r>
 800ad9a:	6813      	ldr	r3, [r2, #0]
 800ad9c:	1c58      	adds	r0, r3, #1
 800ad9e:	6010      	str	r0, [r2, #0]
 800ada0:	7019      	strb	r1, [r3, #0]
 800ada2:	4608      	mov	r0, r1
 800ada4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <__sfputs_r>:
 800adaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adac:	4606      	mov	r6, r0
 800adae:	460f      	mov	r7, r1
 800adb0:	4614      	mov	r4, r2
 800adb2:	18d5      	adds	r5, r2, r3
 800adb4:	42ac      	cmp	r4, r5
 800adb6:	d101      	bne.n	800adbc <__sfputs_r+0x12>
 800adb8:	2000      	movs	r0, #0
 800adba:	e007      	b.n	800adcc <__sfputs_r+0x22>
 800adbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc0:	463a      	mov	r2, r7
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff ffda 	bl	800ad7c <__sfputc_r>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d1f3      	bne.n	800adb4 <__sfputs_r+0xa>
 800adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800add0 <_vfiprintf_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	460d      	mov	r5, r1
 800add6:	b09d      	sub	sp, #116	@ 0x74
 800add8:	4614      	mov	r4, r2
 800adda:	4698      	mov	r8, r3
 800addc:	4606      	mov	r6, r0
 800adde:	b118      	cbz	r0, 800ade8 <_vfiprintf_r+0x18>
 800ade0:	6a03      	ldr	r3, [r0, #32]
 800ade2:	b90b      	cbnz	r3, 800ade8 <_vfiprintf_r+0x18>
 800ade4:	f7ff fcc2 	bl	800a76c <__sinit>
 800ade8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adea:	07d9      	lsls	r1, r3, #31
 800adec:	d405      	bmi.n	800adfa <_vfiprintf_r+0x2a>
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	059a      	lsls	r2, r3, #22
 800adf2:	d402      	bmi.n	800adfa <_vfiprintf_r+0x2a>
 800adf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adf6:	f7ff feb8 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800adfa:	89ab      	ldrh	r3, [r5, #12]
 800adfc:	071b      	lsls	r3, r3, #28
 800adfe:	d501      	bpl.n	800ae04 <_vfiprintf_r+0x34>
 800ae00:	692b      	ldr	r3, [r5, #16]
 800ae02:	b99b      	cbnz	r3, 800ae2c <_vfiprintf_r+0x5c>
 800ae04:	4629      	mov	r1, r5
 800ae06:	4630      	mov	r0, r6
 800ae08:	f7ff fde0 	bl	800a9cc <__swsetup_r>
 800ae0c:	b170      	cbz	r0, 800ae2c <_vfiprintf_r+0x5c>
 800ae0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae10:	07dc      	lsls	r4, r3, #31
 800ae12:	d504      	bpl.n	800ae1e <_vfiprintf_r+0x4e>
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae18:	b01d      	add	sp, #116	@ 0x74
 800ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	89ab      	ldrh	r3, [r5, #12]
 800ae20:	0598      	lsls	r0, r3, #22
 800ae22:	d4f7      	bmi.n	800ae14 <_vfiprintf_r+0x44>
 800ae24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae26:	f7ff fea1 	bl	800ab6c <__retarget_lock_release_recursive>
 800ae2a:	e7f3      	b.n	800ae14 <_vfiprintf_r+0x44>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae30:	2320      	movs	r3, #32
 800ae32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae3a:	2330      	movs	r3, #48	@ 0x30
 800ae3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800afec <_vfiprintf_r+0x21c>
 800ae40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae44:	f04f 0901 	mov.w	r9, #1
 800ae48:	4623      	mov	r3, r4
 800ae4a:	469a      	mov	sl, r3
 800ae4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae50:	b10a      	cbz	r2, 800ae56 <_vfiprintf_r+0x86>
 800ae52:	2a25      	cmp	r2, #37	@ 0x25
 800ae54:	d1f9      	bne.n	800ae4a <_vfiprintf_r+0x7a>
 800ae56:	ebba 0b04 	subs.w	fp, sl, r4
 800ae5a:	d00b      	beq.n	800ae74 <_vfiprintf_r+0xa4>
 800ae5c:	465b      	mov	r3, fp
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ffa1 	bl	800adaa <__sfputs_r>
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f000 80a7 	beq.w	800afbc <_vfiprintf_r+0x1ec>
 800ae6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae70:	445a      	add	r2, fp
 800ae72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae74:	f89a 3000 	ldrb.w	r3, [sl]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 809f 	beq.w	800afbc <_vfiprintf_r+0x1ec>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae88:	f10a 0a01 	add.w	sl, sl, #1
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	9307      	str	r3, [sp, #28]
 800ae90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae96:	4654      	mov	r4, sl
 800ae98:	2205      	movs	r2, #5
 800ae9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9e:	4853      	ldr	r0, [pc, #332]	@ (800afec <_vfiprintf_r+0x21c>)
 800aea0:	f7f5 f976 	bl	8000190 <memchr>
 800aea4:	9a04      	ldr	r2, [sp, #16]
 800aea6:	b9d8      	cbnz	r0, 800aee0 <_vfiprintf_r+0x110>
 800aea8:	06d1      	lsls	r1, r2, #27
 800aeaa:	bf44      	itt	mi
 800aeac:	2320      	movmi	r3, #32
 800aeae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb2:	0713      	lsls	r3, r2, #28
 800aeb4:	bf44      	itt	mi
 800aeb6:	232b      	movmi	r3, #43	@ 0x2b
 800aeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aebc:	f89a 3000 	ldrb.w	r3, [sl]
 800aec0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec2:	d015      	beq.n	800aef0 <_vfiprintf_r+0x120>
 800aec4:	9a07      	ldr	r2, [sp, #28]
 800aec6:	4654      	mov	r4, sl
 800aec8:	2000      	movs	r0, #0
 800aeca:	f04f 0c0a 	mov.w	ip, #10
 800aece:	4621      	mov	r1, r4
 800aed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed4:	3b30      	subs	r3, #48	@ 0x30
 800aed6:	2b09      	cmp	r3, #9
 800aed8:	d94b      	bls.n	800af72 <_vfiprintf_r+0x1a2>
 800aeda:	b1b0      	cbz	r0, 800af0a <_vfiprintf_r+0x13a>
 800aedc:	9207      	str	r2, [sp, #28]
 800aede:	e014      	b.n	800af0a <_vfiprintf_r+0x13a>
 800aee0:	eba0 0308 	sub.w	r3, r0, r8
 800aee4:	fa09 f303 	lsl.w	r3, r9, r3
 800aee8:	4313      	orrs	r3, r2
 800aeea:	9304      	str	r3, [sp, #16]
 800aeec:	46a2      	mov	sl, r4
 800aeee:	e7d2      	b.n	800ae96 <_vfiprintf_r+0xc6>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	1d19      	adds	r1, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	9103      	str	r1, [sp, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bfbb      	ittet	lt
 800aefc:	425b      	neglt	r3, r3
 800aefe:	f042 0202 	orrlt.w	r2, r2, #2
 800af02:	9307      	strge	r3, [sp, #28]
 800af04:	9307      	strlt	r3, [sp, #28]
 800af06:	bfb8      	it	lt
 800af08:	9204      	strlt	r2, [sp, #16]
 800af0a:	7823      	ldrb	r3, [r4, #0]
 800af0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af0e:	d10a      	bne.n	800af26 <_vfiprintf_r+0x156>
 800af10:	7863      	ldrb	r3, [r4, #1]
 800af12:	2b2a      	cmp	r3, #42	@ 0x2a
 800af14:	d132      	bne.n	800af7c <_vfiprintf_r+0x1ac>
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	1d1a      	adds	r2, r3, #4
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	9203      	str	r2, [sp, #12]
 800af1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af22:	3402      	adds	r4, #2
 800af24:	9305      	str	r3, [sp, #20]
 800af26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800affc <_vfiprintf_r+0x22c>
 800af2a:	7821      	ldrb	r1, [r4, #0]
 800af2c:	2203      	movs	r2, #3
 800af2e:	4650      	mov	r0, sl
 800af30:	f7f5 f92e 	bl	8000190 <memchr>
 800af34:	b138      	cbz	r0, 800af46 <_vfiprintf_r+0x176>
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	eba0 000a 	sub.w	r0, r0, sl
 800af3c:	2240      	movs	r2, #64	@ 0x40
 800af3e:	4082      	lsls	r2, r0
 800af40:	4313      	orrs	r3, r2
 800af42:	3401      	adds	r4, #1
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af4a:	4829      	ldr	r0, [pc, #164]	@ (800aff0 <_vfiprintf_r+0x220>)
 800af4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af50:	2206      	movs	r2, #6
 800af52:	f7f5 f91d 	bl	8000190 <memchr>
 800af56:	2800      	cmp	r0, #0
 800af58:	d03f      	beq.n	800afda <_vfiprintf_r+0x20a>
 800af5a:	4b26      	ldr	r3, [pc, #152]	@ (800aff4 <_vfiprintf_r+0x224>)
 800af5c:	bb1b      	cbnz	r3, 800afa6 <_vfiprintf_r+0x1d6>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	3307      	adds	r3, #7
 800af62:	f023 0307 	bic.w	r3, r3, #7
 800af66:	3308      	adds	r3, #8
 800af68:	9303      	str	r3, [sp, #12]
 800af6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af6c:	443b      	add	r3, r7
 800af6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af70:	e76a      	b.n	800ae48 <_vfiprintf_r+0x78>
 800af72:	fb0c 3202 	mla	r2, ip, r2, r3
 800af76:	460c      	mov	r4, r1
 800af78:	2001      	movs	r0, #1
 800af7a:	e7a8      	b.n	800aece <_vfiprintf_r+0xfe>
 800af7c:	2300      	movs	r3, #0
 800af7e:	3401      	adds	r4, #1
 800af80:	9305      	str	r3, [sp, #20]
 800af82:	4619      	mov	r1, r3
 800af84:	f04f 0c0a 	mov.w	ip, #10
 800af88:	4620      	mov	r0, r4
 800af8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af8e:	3a30      	subs	r2, #48	@ 0x30
 800af90:	2a09      	cmp	r2, #9
 800af92:	d903      	bls.n	800af9c <_vfiprintf_r+0x1cc>
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0c6      	beq.n	800af26 <_vfiprintf_r+0x156>
 800af98:	9105      	str	r1, [sp, #20]
 800af9a:	e7c4      	b.n	800af26 <_vfiprintf_r+0x156>
 800af9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800afa0:	4604      	mov	r4, r0
 800afa2:	2301      	movs	r3, #1
 800afa4:	e7f0      	b.n	800af88 <_vfiprintf_r+0x1b8>
 800afa6:	ab03      	add	r3, sp, #12
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	462a      	mov	r2, r5
 800afac:	4b12      	ldr	r3, [pc, #72]	@ (800aff8 <_vfiprintf_r+0x228>)
 800afae:	a904      	add	r1, sp, #16
 800afb0:	4630      	mov	r0, r6
 800afb2:	f3af 8000 	nop.w
 800afb6:	4607      	mov	r7, r0
 800afb8:	1c78      	adds	r0, r7, #1
 800afba:	d1d6      	bne.n	800af6a <_vfiprintf_r+0x19a>
 800afbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afbe:	07d9      	lsls	r1, r3, #31
 800afc0:	d405      	bmi.n	800afce <_vfiprintf_r+0x1fe>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	059a      	lsls	r2, r3, #22
 800afc6:	d402      	bmi.n	800afce <_vfiprintf_r+0x1fe>
 800afc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afca:	f7ff fdcf 	bl	800ab6c <__retarget_lock_release_recursive>
 800afce:	89ab      	ldrh	r3, [r5, #12]
 800afd0:	065b      	lsls	r3, r3, #25
 800afd2:	f53f af1f 	bmi.w	800ae14 <_vfiprintf_r+0x44>
 800afd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afd8:	e71e      	b.n	800ae18 <_vfiprintf_r+0x48>
 800afda:	ab03      	add	r3, sp, #12
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	462a      	mov	r2, r5
 800afe0:	4b05      	ldr	r3, [pc, #20]	@ (800aff8 <_vfiprintf_r+0x228>)
 800afe2:	a904      	add	r1, sp, #16
 800afe4:	4630      	mov	r0, r6
 800afe6:	f000 f879 	bl	800b0dc <_printf_i>
 800afea:	e7e4      	b.n	800afb6 <_vfiprintf_r+0x1e6>
 800afec:	0800cd9c 	.word	0x0800cd9c
 800aff0:	0800cda6 	.word	0x0800cda6
 800aff4:	00000000 	.word	0x00000000
 800aff8:	0800adab 	.word	0x0800adab
 800affc:	0800cda2 	.word	0x0800cda2

0800b000 <_printf_common>:
 800b000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b004:	4616      	mov	r6, r2
 800b006:	4698      	mov	r8, r3
 800b008:	688a      	ldr	r2, [r1, #8]
 800b00a:	690b      	ldr	r3, [r1, #16]
 800b00c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b010:	4293      	cmp	r3, r2
 800b012:	bfb8      	it	lt
 800b014:	4613      	movlt	r3, r2
 800b016:	6033      	str	r3, [r6, #0]
 800b018:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b01c:	4607      	mov	r7, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b10a      	cbz	r2, 800b026 <_printf_common+0x26>
 800b022:	3301      	adds	r3, #1
 800b024:	6033      	str	r3, [r6, #0]
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	0699      	lsls	r1, r3, #26
 800b02a:	bf42      	ittt	mi
 800b02c:	6833      	ldrmi	r3, [r6, #0]
 800b02e:	3302      	addmi	r3, #2
 800b030:	6033      	strmi	r3, [r6, #0]
 800b032:	6825      	ldr	r5, [r4, #0]
 800b034:	f015 0506 	ands.w	r5, r5, #6
 800b038:	d106      	bne.n	800b048 <_printf_common+0x48>
 800b03a:	f104 0a19 	add.w	sl, r4, #25
 800b03e:	68e3      	ldr	r3, [r4, #12]
 800b040:	6832      	ldr	r2, [r6, #0]
 800b042:	1a9b      	subs	r3, r3, r2
 800b044:	42ab      	cmp	r3, r5
 800b046:	dc26      	bgt.n	800b096 <_printf_common+0x96>
 800b048:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	3b00      	subs	r3, #0
 800b050:	bf18      	it	ne
 800b052:	2301      	movne	r3, #1
 800b054:	0692      	lsls	r2, r2, #26
 800b056:	d42b      	bmi.n	800b0b0 <_printf_common+0xb0>
 800b058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b05c:	4641      	mov	r1, r8
 800b05e:	4638      	mov	r0, r7
 800b060:	47c8      	blx	r9
 800b062:	3001      	adds	r0, #1
 800b064:	d01e      	beq.n	800b0a4 <_printf_common+0xa4>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	6922      	ldr	r2, [r4, #16]
 800b06a:	f003 0306 	and.w	r3, r3, #6
 800b06e:	2b04      	cmp	r3, #4
 800b070:	bf02      	ittt	eq
 800b072:	68e5      	ldreq	r5, [r4, #12]
 800b074:	6833      	ldreq	r3, [r6, #0]
 800b076:	1aed      	subeq	r5, r5, r3
 800b078:	68a3      	ldr	r3, [r4, #8]
 800b07a:	bf0c      	ite	eq
 800b07c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b080:	2500      	movne	r5, #0
 800b082:	4293      	cmp	r3, r2
 800b084:	bfc4      	itt	gt
 800b086:	1a9b      	subgt	r3, r3, r2
 800b088:	18ed      	addgt	r5, r5, r3
 800b08a:	2600      	movs	r6, #0
 800b08c:	341a      	adds	r4, #26
 800b08e:	42b5      	cmp	r5, r6
 800b090:	d11a      	bne.n	800b0c8 <_printf_common+0xc8>
 800b092:	2000      	movs	r0, #0
 800b094:	e008      	b.n	800b0a8 <_printf_common+0xa8>
 800b096:	2301      	movs	r3, #1
 800b098:	4652      	mov	r2, sl
 800b09a:	4641      	mov	r1, r8
 800b09c:	4638      	mov	r0, r7
 800b09e:	47c8      	blx	r9
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d103      	bne.n	800b0ac <_printf_common+0xac>
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	e7c6      	b.n	800b03e <_printf_common+0x3e>
 800b0b0:	18e1      	adds	r1, r4, r3
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	2030      	movs	r0, #48	@ 0x30
 800b0b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b0ba:	4422      	add	r2, r4
 800b0bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b0c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b0c4:	3302      	adds	r3, #2
 800b0c6:	e7c7      	b.n	800b058 <_printf_common+0x58>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c8      	blx	r9
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d0e6      	beq.n	800b0a4 <_printf_common+0xa4>
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	e7d9      	b.n	800b08e <_printf_common+0x8e>
	...

0800b0dc <_printf_i>:
 800b0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e0:	7e0f      	ldrb	r7, [r1, #24]
 800b0e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0e4:	2f78      	cmp	r7, #120	@ 0x78
 800b0e6:	4691      	mov	r9, r2
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	469a      	mov	sl, r3
 800b0ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0f2:	d807      	bhi.n	800b104 <_printf_i+0x28>
 800b0f4:	2f62      	cmp	r7, #98	@ 0x62
 800b0f6:	d80a      	bhi.n	800b10e <_printf_i+0x32>
 800b0f8:	2f00      	cmp	r7, #0
 800b0fa:	f000 80d2 	beq.w	800b2a2 <_printf_i+0x1c6>
 800b0fe:	2f58      	cmp	r7, #88	@ 0x58
 800b100:	f000 80b9 	beq.w	800b276 <_printf_i+0x19a>
 800b104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b10c:	e03a      	b.n	800b184 <_printf_i+0xa8>
 800b10e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b112:	2b15      	cmp	r3, #21
 800b114:	d8f6      	bhi.n	800b104 <_printf_i+0x28>
 800b116:	a101      	add	r1, pc, #4	@ (adr r1, 800b11c <_printf_i+0x40>)
 800b118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b11c:	0800b175 	.word	0x0800b175
 800b120:	0800b189 	.word	0x0800b189
 800b124:	0800b105 	.word	0x0800b105
 800b128:	0800b105 	.word	0x0800b105
 800b12c:	0800b105 	.word	0x0800b105
 800b130:	0800b105 	.word	0x0800b105
 800b134:	0800b189 	.word	0x0800b189
 800b138:	0800b105 	.word	0x0800b105
 800b13c:	0800b105 	.word	0x0800b105
 800b140:	0800b105 	.word	0x0800b105
 800b144:	0800b105 	.word	0x0800b105
 800b148:	0800b289 	.word	0x0800b289
 800b14c:	0800b1b3 	.word	0x0800b1b3
 800b150:	0800b243 	.word	0x0800b243
 800b154:	0800b105 	.word	0x0800b105
 800b158:	0800b105 	.word	0x0800b105
 800b15c:	0800b2ab 	.word	0x0800b2ab
 800b160:	0800b105 	.word	0x0800b105
 800b164:	0800b1b3 	.word	0x0800b1b3
 800b168:	0800b105 	.word	0x0800b105
 800b16c:	0800b105 	.word	0x0800b105
 800b170:	0800b24b 	.word	0x0800b24b
 800b174:	6833      	ldr	r3, [r6, #0]
 800b176:	1d1a      	adds	r2, r3, #4
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6032      	str	r2, [r6, #0]
 800b17c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b184:	2301      	movs	r3, #1
 800b186:	e09d      	b.n	800b2c4 <_printf_i+0x1e8>
 800b188:	6833      	ldr	r3, [r6, #0]
 800b18a:	6820      	ldr	r0, [r4, #0]
 800b18c:	1d19      	adds	r1, r3, #4
 800b18e:	6031      	str	r1, [r6, #0]
 800b190:	0606      	lsls	r6, r0, #24
 800b192:	d501      	bpl.n	800b198 <_printf_i+0xbc>
 800b194:	681d      	ldr	r5, [r3, #0]
 800b196:	e003      	b.n	800b1a0 <_printf_i+0xc4>
 800b198:	0645      	lsls	r5, r0, #25
 800b19a:	d5fb      	bpl.n	800b194 <_printf_i+0xb8>
 800b19c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1a0:	2d00      	cmp	r5, #0
 800b1a2:	da03      	bge.n	800b1ac <_printf_i+0xd0>
 800b1a4:	232d      	movs	r3, #45	@ 0x2d
 800b1a6:	426d      	negs	r5, r5
 800b1a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1ac:	4859      	ldr	r0, [pc, #356]	@ (800b314 <_printf_i+0x238>)
 800b1ae:	230a      	movs	r3, #10
 800b1b0:	e011      	b.n	800b1d6 <_printf_i+0xfa>
 800b1b2:	6821      	ldr	r1, [r4, #0]
 800b1b4:	6833      	ldr	r3, [r6, #0]
 800b1b6:	0608      	lsls	r0, r1, #24
 800b1b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b1bc:	d402      	bmi.n	800b1c4 <_printf_i+0xe8>
 800b1be:	0649      	lsls	r1, r1, #25
 800b1c0:	bf48      	it	mi
 800b1c2:	b2ad      	uxthmi	r5, r5
 800b1c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b1c6:	4853      	ldr	r0, [pc, #332]	@ (800b314 <_printf_i+0x238>)
 800b1c8:	6033      	str	r3, [r6, #0]
 800b1ca:	bf14      	ite	ne
 800b1cc:	230a      	movne	r3, #10
 800b1ce:	2308      	moveq	r3, #8
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1d6:	6866      	ldr	r6, [r4, #4]
 800b1d8:	60a6      	str	r6, [r4, #8]
 800b1da:	2e00      	cmp	r6, #0
 800b1dc:	bfa2      	ittt	ge
 800b1de:	6821      	ldrge	r1, [r4, #0]
 800b1e0:	f021 0104 	bicge.w	r1, r1, #4
 800b1e4:	6021      	strge	r1, [r4, #0]
 800b1e6:	b90d      	cbnz	r5, 800b1ec <_printf_i+0x110>
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	d04b      	beq.n	800b284 <_printf_i+0x1a8>
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1f2:	fb03 5711 	mls	r7, r3, r1, r5
 800b1f6:	5dc7      	ldrb	r7, [r0, r7]
 800b1f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1fc:	462f      	mov	r7, r5
 800b1fe:	42bb      	cmp	r3, r7
 800b200:	460d      	mov	r5, r1
 800b202:	d9f4      	bls.n	800b1ee <_printf_i+0x112>
 800b204:	2b08      	cmp	r3, #8
 800b206:	d10b      	bne.n	800b220 <_printf_i+0x144>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	07df      	lsls	r7, r3, #31
 800b20c:	d508      	bpl.n	800b220 <_printf_i+0x144>
 800b20e:	6923      	ldr	r3, [r4, #16]
 800b210:	6861      	ldr	r1, [r4, #4]
 800b212:	4299      	cmp	r1, r3
 800b214:	bfde      	ittt	le
 800b216:	2330      	movle	r3, #48	@ 0x30
 800b218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b21c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b220:	1b92      	subs	r2, r2, r6
 800b222:	6122      	str	r2, [r4, #16]
 800b224:	f8cd a000 	str.w	sl, [sp]
 800b228:	464b      	mov	r3, r9
 800b22a:	aa03      	add	r2, sp, #12
 800b22c:	4621      	mov	r1, r4
 800b22e:	4640      	mov	r0, r8
 800b230:	f7ff fee6 	bl	800b000 <_printf_common>
 800b234:	3001      	adds	r0, #1
 800b236:	d14a      	bne.n	800b2ce <_printf_i+0x1f2>
 800b238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b23c:	b004      	add	sp, #16
 800b23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	f043 0320 	orr.w	r3, r3, #32
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	4833      	ldr	r0, [pc, #204]	@ (800b318 <_printf_i+0x23c>)
 800b24c:	2778      	movs	r7, #120	@ 0x78
 800b24e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	6831      	ldr	r1, [r6, #0]
 800b256:	061f      	lsls	r7, r3, #24
 800b258:	f851 5b04 	ldr.w	r5, [r1], #4
 800b25c:	d402      	bmi.n	800b264 <_printf_i+0x188>
 800b25e:	065f      	lsls	r7, r3, #25
 800b260:	bf48      	it	mi
 800b262:	b2ad      	uxthmi	r5, r5
 800b264:	6031      	str	r1, [r6, #0]
 800b266:	07d9      	lsls	r1, r3, #31
 800b268:	bf44      	itt	mi
 800b26a:	f043 0320 	orrmi.w	r3, r3, #32
 800b26e:	6023      	strmi	r3, [r4, #0]
 800b270:	b11d      	cbz	r5, 800b27a <_printf_i+0x19e>
 800b272:	2310      	movs	r3, #16
 800b274:	e7ac      	b.n	800b1d0 <_printf_i+0xf4>
 800b276:	4827      	ldr	r0, [pc, #156]	@ (800b314 <_printf_i+0x238>)
 800b278:	e7e9      	b.n	800b24e <_printf_i+0x172>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	f023 0320 	bic.w	r3, r3, #32
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	e7f6      	b.n	800b272 <_printf_i+0x196>
 800b284:	4616      	mov	r6, r2
 800b286:	e7bd      	b.n	800b204 <_printf_i+0x128>
 800b288:	6833      	ldr	r3, [r6, #0]
 800b28a:	6825      	ldr	r5, [r4, #0]
 800b28c:	6961      	ldr	r1, [r4, #20]
 800b28e:	1d18      	adds	r0, r3, #4
 800b290:	6030      	str	r0, [r6, #0]
 800b292:	062e      	lsls	r6, r5, #24
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	d501      	bpl.n	800b29c <_printf_i+0x1c0>
 800b298:	6019      	str	r1, [r3, #0]
 800b29a:	e002      	b.n	800b2a2 <_printf_i+0x1c6>
 800b29c:	0668      	lsls	r0, r5, #25
 800b29e:	d5fb      	bpl.n	800b298 <_printf_i+0x1bc>
 800b2a0:	8019      	strh	r1, [r3, #0]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6123      	str	r3, [r4, #16]
 800b2a6:	4616      	mov	r6, r2
 800b2a8:	e7bc      	b.n	800b224 <_printf_i+0x148>
 800b2aa:	6833      	ldr	r3, [r6, #0]
 800b2ac:	1d1a      	adds	r2, r3, #4
 800b2ae:	6032      	str	r2, [r6, #0]
 800b2b0:	681e      	ldr	r6, [r3, #0]
 800b2b2:	6862      	ldr	r2, [r4, #4]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7f4 ff6a 	bl	8000190 <memchr>
 800b2bc:	b108      	cbz	r0, 800b2c2 <_printf_i+0x1e6>
 800b2be:	1b80      	subs	r0, r0, r6
 800b2c0:	6060      	str	r0, [r4, #4]
 800b2c2:	6863      	ldr	r3, [r4, #4]
 800b2c4:	6123      	str	r3, [r4, #16]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2cc:	e7aa      	b.n	800b224 <_printf_i+0x148>
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	4632      	mov	r2, r6
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	47d0      	blx	sl
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d0ad      	beq.n	800b238 <_printf_i+0x15c>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	079b      	lsls	r3, r3, #30
 800b2e0:	d413      	bmi.n	800b30a <_printf_i+0x22e>
 800b2e2:	68e0      	ldr	r0, [r4, #12]
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	4298      	cmp	r0, r3
 800b2e8:	bfb8      	it	lt
 800b2ea:	4618      	movlt	r0, r3
 800b2ec:	e7a6      	b.n	800b23c <_printf_i+0x160>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4632      	mov	r2, r6
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	47d0      	blx	sl
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d09d      	beq.n	800b238 <_printf_i+0x15c>
 800b2fc:	3501      	adds	r5, #1
 800b2fe:	68e3      	ldr	r3, [r4, #12]
 800b300:	9903      	ldr	r1, [sp, #12]
 800b302:	1a5b      	subs	r3, r3, r1
 800b304:	42ab      	cmp	r3, r5
 800b306:	dcf2      	bgt.n	800b2ee <_printf_i+0x212>
 800b308:	e7eb      	b.n	800b2e2 <_printf_i+0x206>
 800b30a:	2500      	movs	r5, #0
 800b30c:	f104 0619 	add.w	r6, r4, #25
 800b310:	e7f5      	b.n	800b2fe <_printf_i+0x222>
 800b312:	bf00      	nop
 800b314:	0800cdad 	.word	0x0800cdad
 800b318:	0800cdbe 	.word	0x0800cdbe

0800b31c <__sflush_r>:
 800b31c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b324:	0716      	lsls	r6, r2, #28
 800b326:	4605      	mov	r5, r0
 800b328:	460c      	mov	r4, r1
 800b32a:	d454      	bmi.n	800b3d6 <__sflush_r+0xba>
 800b32c:	684b      	ldr	r3, [r1, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	dc02      	bgt.n	800b338 <__sflush_r+0x1c>
 800b332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b334:	2b00      	cmp	r3, #0
 800b336:	dd48      	ble.n	800b3ca <__sflush_r+0xae>
 800b338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	d045      	beq.n	800b3ca <__sflush_r+0xae>
 800b33e:	2300      	movs	r3, #0
 800b340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b344:	682f      	ldr	r7, [r5, #0]
 800b346:	6a21      	ldr	r1, [r4, #32]
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	d030      	beq.n	800b3ae <__sflush_r+0x92>
 800b34c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	0759      	lsls	r1, r3, #29
 800b352:	d505      	bpl.n	800b360 <__sflush_r+0x44>
 800b354:	6863      	ldr	r3, [r4, #4]
 800b356:	1ad2      	subs	r2, r2, r3
 800b358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b35a:	b10b      	cbz	r3, 800b360 <__sflush_r+0x44>
 800b35c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b35e:	1ad2      	subs	r2, r2, r3
 800b360:	2300      	movs	r3, #0
 800b362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b364:	6a21      	ldr	r1, [r4, #32]
 800b366:	4628      	mov	r0, r5
 800b368:	47b0      	blx	r6
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	d106      	bne.n	800b37e <__sflush_r+0x62>
 800b370:	6829      	ldr	r1, [r5, #0]
 800b372:	291d      	cmp	r1, #29
 800b374:	d82b      	bhi.n	800b3ce <__sflush_r+0xb2>
 800b376:	4a2a      	ldr	r2, [pc, #168]	@ (800b420 <__sflush_r+0x104>)
 800b378:	410a      	asrs	r2, r1
 800b37a:	07d6      	lsls	r6, r2, #31
 800b37c:	d427      	bmi.n	800b3ce <__sflush_r+0xb2>
 800b37e:	2200      	movs	r2, #0
 800b380:	6062      	str	r2, [r4, #4]
 800b382:	04d9      	lsls	r1, r3, #19
 800b384:	6922      	ldr	r2, [r4, #16]
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	d504      	bpl.n	800b394 <__sflush_r+0x78>
 800b38a:	1c42      	adds	r2, r0, #1
 800b38c:	d101      	bne.n	800b392 <__sflush_r+0x76>
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	b903      	cbnz	r3, 800b394 <__sflush_r+0x78>
 800b392:	6560      	str	r0, [r4, #84]	@ 0x54
 800b394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b396:	602f      	str	r7, [r5, #0]
 800b398:	b1b9      	cbz	r1, 800b3ca <__sflush_r+0xae>
 800b39a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b39e:	4299      	cmp	r1, r3
 800b3a0:	d002      	beq.n	800b3a8 <__sflush_r+0x8c>
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f7ff fbf2 	bl	800ab8c <_free_r>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3ac:	e00d      	b.n	800b3ca <__sflush_r+0xae>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	47b0      	blx	r6
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	1c50      	adds	r0, r2, #1
 800b3b8:	d1c9      	bne.n	800b34e <__sflush_r+0x32>
 800b3ba:	682b      	ldr	r3, [r5, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d0c6      	beq.n	800b34e <__sflush_r+0x32>
 800b3c0:	2b1d      	cmp	r3, #29
 800b3c2:	d001      	beq.n	800b3c8 <__sflush_r+0xac>
 800b3c4:	2b16      	cmp	r3, #22
 800b3c6:	d11e      	bne.n	800b406 <__sflush_r+0xea>
 800b3c8:	602f      	str	r7, [r5, #0]
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e022      	b.n	800b414 <__sflush_r+0xf8>
 800b3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3d2:	b21b      	sxth	r3, r3
 800b3d4:	e01b      	b.n	800b40e <__sflush_r+0xf2>
 800b3d6:	690f      	ldr	r7, [r1, #16]
 800b3d8:	2f00      	cmp	r7, #0
 800b3da:	d0f6      	beq.n	800b3ca <__sflush_r+0xae>
 800b3dc:	0793      	lsls	r3, r2, #30
 800b3de:	680e      	ldr	r6, [r1, #0]
 800b3e0:	bf08      	it	eq
 800b3e2:	694b      	ldreq	r3, [r1, #20]
 800b3e4:	600f      	str	r7, [r1, #0]
 800b3e6:	bf18      	it	ne
 800b3e8:	2300      	movne	r3, #0
 800b3ea:	eba6 0807 	sub.w	r8, r6, r7
 800b3ee:	608b      	str	r3, [r1, #8]
 800b3f0:	f1b8 0f00 	cmp.w	r8, #0
 800b3f4:	dde9      	ble.n	800b3ca <__sflush_r+0xae>
 800b3f6:	6a21      	ldr	r1, [r4, #32]
 800b3f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3fa:	4643      	mov	r3, r8
 800b3fc:	463a      	mov	r2, r7
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b0      	blx	r6
 800b402:	2800      	cmp	r0, #0
 800b404:	dc08      	bgt.n	800b418 <__sflush_r+0xfc>
 800b406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b418:	4407      	add	r7, r0
 800b41a:	eba8 0800 	sub.w	r8, r8, r0
 800b41e:	e7e7      	b.n	800b3f0 <__sflush_r+0xd4>
 800b420:	dfbffffe 	.word	0xdfbffffe

0800b424 <_fflush_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	690b      	ldr	r3, [r1, #16]
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	b913      	cbnz	r3, 800b434 <_fflush_r+0x10>
 800b42e:	2500      	movs	r5, #0
 800b430:	4628      	mov	r0, r5
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	b118      	cbz	r0, 800b43e <_fflush_r+0x1a>
 800b436:	6a03      	ldr	r3, [r0, #32]
 800b438:	b90b      	cbnz	r3, 800b43e <_fflush_r+0x1a>
 800b43a:	f7ff f997 	bl	800a76c <__sinit>
 800b43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0f3      	beq.n	800b42e <_fflush_r+0xa>
 800b446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b448:	07d0      	lsls	r0, r2, #31
 800b44a:	d404      	bmi.n	800b456 <_fflush_r+0x32>
 800b44c:	0599      	lsls	r1, r3, #22
 800b44e:	d402      	bmi.n	800b456 <_fflush_r+0x32>
 800b450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b452:	f7ff fb8a 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800b456:	4628      	mov	r0, r5
 800b458:	4621      	mov	r1, r4
 800b45a:	f7ff ff5f 	bl	800b31c <__sflush_r>
 800b45e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b460:	07da      	lsls	r2, r3, #31
 800b462:	4605      	mov	r5, r0
 800b464:	d4e4      	bmi.n	800b430 <_fflush_r+0xc>
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	059b      	lsls	r3, r3, #22
 800b46a:	d4e1      	bmi.n	800b430 <_fflush_r+0xc>
 800b46c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b46e:	f7ff fb7d 	bl	800ab6c <__retarget_lock_release_recursive>
 800b472:	e7dd      	b.n	800b430 <_fflush_r+0xc>

0800b474 <__swhatbuf_r>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	460c      	mov	r4, r1
 800b478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47c:	2900      	cmp	r1, #0
 800b47e:	b096      	sub	sp, #88	@ 0x58
 800b480:	4615      	mov	r5, r2
 800b482:	461e      	mov	r6, r3
 800b484:	da0d      	bge.n	800b4a2 <__swhatbuf_r+0x2e>
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b48c:	f04f 0100 	mov.w	r1, #0
 800b490:	bf14      	ite	ne
 800b492:	2340      	movne	r3, #64	@ 0x40
 800b494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b498:	2000      	movs	r0, #0
 800b49a:	6031      	str	r1, [r6, #0]
 800b49c:	602b      	str	r3, [r5, #0]
 800b49e:	b016      	add	sp, #88	@ 0x58
 800b4a0:	bd70      	pop	{r4, r5, r6, pc}
 800b4a2:	466a      	mov	r2, sp
 800b4a4:	f000 f87c 	bl	800b5a0 <_fstat_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dbec      	blt.n	800b486 <__swhatbuf_r+0x12>
 800b4ac:	9901      	ldr	r1, [sp, #4]
 800b4ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4b6:	4259      	negs	r1, r3
 800b4b8:	4159      	adcs	r1, r3
 800b4ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4be:	e7eb      	b.n	800b498 <__swhatbuf_r+0x24>

0800b4c0 <__smakebuf_r>:
 800b4c0:	898b      	ldrh	r3, [r1, #12]
 800b4c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4c4:	079d      	lsls	r5, r3, #30
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	d507      	bpl.n	800b4dc <__smakebuf_r+0x1c>
 800b4cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	6163      	str	r3, [r4, #20]
 800b4d8:	b003      	add	sp, #12
 800b4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4dc:	ab01      	add	r3, sp, #4
 800b4de:	466a      	mov	r2, sp
 800b4e0:	f7ff ffc8 	bl	800b474 <__swhatbuf_r>
 800b4e4:	9f00      	ldr	r7, [sp, #0]
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f7ff fbba 	bl	800ac64 <_malloc_r>
 800b4f0:	b948      	cbnz	r0, 800b506 <__smakebuf_r+0x46>
 800b4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4f6:	059a      	lsls	r2, r3, #22
 800b4f8:	d4ee      	bmi.n	800b4d8 <__smakebuf_r+0x18>
 800b4fa:	f023 0303 	bic.w	r3, r3, #3
 800b4fe:	f043 0302 	orr.w	r3, r3, #2
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	e7e2      	b.n	800b4cc <__smakebuf_r+0xc>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	6020      	str	r0, [r4, #0]
 800b50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b516:	b15b      	cbz	r3, 800b530 <__smakebuf_r+0x70>
 800b518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b51c:	4630      	mov	r0, r6
 800b51e:	f000 f851 	bl	800b5c4 <_isatty_r>
 800b522:	b128      	cbz	r0, 800b530 <__smakebuf_r+0x70>
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	f023 0303 	bic.w	r3, r3, #3
 800b52a:	f043 0301 	orr.w	r3, r3, #1
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	431d      	orrs	r5, r3
 800b534:	81a5      	strh	r5, [r4, #12]
 800b536:	e7cf      	b.n	800b4d8 <__smakebuf_r+0x18>

0800b538 <_putc_r>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	460d      	mov	r5, r1
 800b53c:	4614      	mov	r4, r2
 800b53e:	4606      	mov	r6, r0
 800b540:	b118      	cbz	r0, 800b54a <_putc_r+0x12>
 800b542:	6a03      	ldr	r3, [r0, #32]
 800b544:	b90b      	cbnz	r3, 800b54a <_putc_r+0x12>
 800b546:	f7ff f911 	bl	800a76c <__sinit>
 800b54a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b54c:	07d8      	lsls	r0, r3, #31
 800b54e:	d405      	bmi.n	800b55c <_putc_r+0x24>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	0599      	lsls	r1, r3, #22
 800b554:	d402      	bmi.n	800b55c <_putc_r+0x24>
 800b556:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b558:	f7ff fb07 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800b55c:	68a3      	ldr	r3, [r4, #8]
 800b55e:	3b01      	subs	r3, #1
 800b560:	2b00      	cmp	r3, #0
 800b562:	60a3      	str	r3, [r4, #8]
 800b564:	da05      	bge.n	800b572 <_putc_r+0x3a>
 800b566:	69a2      	ldr	r2, [r4, #24]
 800b568:	4293      	cmp	r3, r2
 800b56a:	db12      	blt.n	800b592 <_putc_r+0x5a>
 800b56c:	b2eb      	uxtb	r3, r5
 800b56e:	2b0a      	cmp	r3, #10
 800b570:	d00f      	beq.n	800b592 <_putc_r+0x5a>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	6022      	str	r2, [r4, #0]
 800b578:	701d      	strb	r5, [r3, #0]
 800b57a:	b2ed      	uxtb	r5, r5
 800b57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b57e:	07da      	lsls	r2, r3, #31
 800b580:	d405      	bmi.n	800b58e <_putc_r+0x56>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	059b      	lsls	r3, r3, #22
 800b586:	d402      	bmi.n	800b58e <_putc_r+0x56>
 800b588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b58a:	f7ff faef 	bl	800ab6c <__retarget_lock_release_recursive>
 800b58e:	4628      	mov	r0, r5
 800b590:	bd70      	pop	{r4, r5, r6, pc}
 800b592:	4629      	mov	r1, r5
 800b594:	4622      	mov	r2, r4
 800b596:	4630      	mov	r0, r6
 800b598:	f7ff f9d9 	bl	800a94e <__swbuf_r>
 800b59c:	4605      	mov	r5, r0
 800b59e:	e7ed      	b.n	800b57c <_putc_r+0x44>

0800b5a0 <_fstat_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d07      	ldr	r5, [pc, #28]	@ (800b5c0 <_fstat_r+0x20>)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	f7f6 fbe8 	bl	8001d82 <_fstat>
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	d102      	bne.n	800b5bc <_fstat_r+0x1c>
 800b5b6:	682b      	ldr	r3, [r5, #0]
 800b5b8:	b103      	cbz	r3, 800b5bc <_fstat_r+0x1c>
 800b5ba:	6023      	str	r3, [r4, #0]
 800b5bc:	bd38      	pop	{r3, r4, r5, pc}
 800b5be:	bf00      	nop
 800b5c0:	2000165c 	.word	0x2000165c

0800b5c4 <_isatty_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d06      	ldr	r5, [pc, #24]	@ (800b5e0 <_isatty_r+0x1c>)
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	602b      	str	r3, [r5, #0]
 800b5d0:	f7f6 fbe7 	bl	8001da2 <_isatty>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_isatty_r+0x1a>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_isatty_r+0x1a>
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	2000165c 	.word	0x2000165c

0800b5e4 <_sbrk_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4d06      	ldr	r5, [pc, #24]	@ (800b600 <_sbrk_r+0x1c>)
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	602b      	str	r3, [r5, #0]
 800b5f0:	f7f6 fbf0 	bl	8001dd4 <_sbrk>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d102      	bne.n	800b5fe <_sbrk_r+0x1a>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	b103      	cbz	r3, 800b5fe <_sbrk_r+0x1a>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	2000165c 	.word	0x2000165c

0800b604 <_init>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr

0800b610 <_fini>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr
